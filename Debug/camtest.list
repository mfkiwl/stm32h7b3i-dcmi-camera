
camtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f74  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08011220  08011220  00021220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011828  08011828  00021828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011830  08011830  00021830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011834  08011834  00021834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  08011838  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000010ec  24000088  080118c0  00030088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001174  080118c0  00031174  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b28d  00000000  00000000  000300b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004cac  00000000  00000000  0005b343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002190  00000000  00000000  0005fff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001fc8  00000000  00000000  00062180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038ebe  00000000  00000000  00064148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d31d  00000000  00000000  0009d006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001625b7  00000000  00000000  000ca323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022c8da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009098  00000000  00000000  0022c92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000088 	.word	0x24000088
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08011208 	.word	0x08011208

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400008c 	.word	0x2400008c
 80002e8:	08011208 	.word	0x08011208

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f004 fb52 	bl	8004ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f884 	bl	8000708 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000600:	f000 f914 	bl	800082c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 fcc8 	bl	8000f98 <MX_GPIO_Init>
  MX_FMC_Init();
 8000608:	f000 fc78 	bl	8000efc <MX_FMC_Init>
  MX_I2C4_Init();
 800060c:	f000 f9fe 	bl	8000a0c <MX_I2C4_Init>
  MX_I2S6_Init();
 8000610:	f000 fa3c 	bl	8000a8c <MX_I2S6_Init>
  MX_LTDC_Init();
 8000614:	f000 fa6e 	bl	8000af4 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8000618:	f000 fb1e 	bl	8000c58 <MX_OCTOSPI1_Init>
  MX_RTC_Init();
 800061c:	f000 fb7e 	bl	8000d1c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000620:	f000 fba6 	bl	8000d70 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000624:	f000 fbc8 	bl	8000db8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fc1c 	bl	8000e64 <MX_USART1_UART_Init>
  MX_DCMI_Init(&hdcmi);
 800062c:	4832      	ldr	r0, [pc, #200]	; (80006f8 <main+0x108>)
 800062e:	f003 fe6d 	bl	800430c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000632:	f000 f931 	bl	8000898 <MX_DMA2D_Init>
  MX_I2C1_Init();
 8000636:	f000 f969 	bl	800090c <MX_I2C1_Init>
  MX_I2C2_Init();
 800063a:	f000 f9a7 	bl	800098c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  CameraResX = 320;
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <main+0x10c>)
 8000640:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000644:	601a      	str	r2, [r3, #0]
  CameraResY = 240;
 8000646:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <main+0x110>)
 8000648:	22f0      	movs	r2, #240	; 0xf0
 800064a:	601a      	str	r2, [r3, #0]
  uint8_t frame_buffer[CameraResX * CameraResY * 2];
 800064c:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <main+0x10c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <main+0x110>)
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	fb02 f303 	mul.w	r3, r2, r3
 8000658:	0059      	lsls	r1, r3, #1
 800065a:	460b      	mov	r3, r1
 800065c:	3b01      	subs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	2300      	movs	r3, #0
 8000662:	4688      	mov	r8, r1
 8000664:	4699      	mov	r9, r3
 8000666:	f04f 0200 	mov.w	r2, #0
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800067a:	2300      	movs	r3, #0
 800067c:	460c      	mov	r4, r1
 800067e:	461d      	mov	r5, r3
 8000680:	f04f 0200 	mov.w	r2, #0
 8000684:	f04f 0300 	mov.w	r3, #0
 8000688:	00eb      	lsls	r3, r5, #3
 800068a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800068e:	00e2      	lsls	r2, r4, #3
 8000690:	1dcb      	adds	r3, r1, #7
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	ebad 0d03 	sub.w	sp, sp, r3
 800069a:	466b      	mov	r3, sp
 800069c:	3300      	adds	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
  memset(frame_buffer, 0, CameraResX * CameraResY * 2);
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <main+0x10c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <main+0x110>)
 80006a6:	6812      	ldr	r2, [r2, #0]
 80006a8:	fb02 f303 	mul.w	r3, r2, r3
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	461a      	mov	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	6838      	ldr	r0, [r7, #0]
 80006b4:	f010 fda0 	bl	80111f8 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* Reset and power down camera to be sure camera is Off prior start testing BSP */
	BSP_CAMERA_PwrDown(0);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f003 ff05 	bl	80044c8 <BSP_CAMERA_PwrDown>

	if(BSP_CAMERA_Init(0,CAMERA_R320x240,CAMERA_PF_RGB565) != BSP_ERROR_NONE)
 80006be:	2200      	movs	r2, #0
 80006c0:	2101      	movs	r1, #1
 80006c2:	2000      	movs	r0, #0
 80006c4:	f003 fdb4 	bl	8004230 <BSP_CAMERA_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <main+0xe2>
	  {
		Error_Handler();
 80006ce:	f000 fdb1 	bl	8001234 <Error_Handler>
	  }

	  /* Wait 1s to let auto-loops in the camera module converge and lead to correct exposure */
	  HAL_Delay(1000);
 80006d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d6:	f004 fb69 	bl	8004dac <HAL_Delay>

	  /* Start the Camera Snapshot Capture */
	  BSP_CAMERA_Start(0,(uint8_t *)frame_buffer,CAMERA_MODE_SNAPSHOT);
 80006da:	2202      	movs	r2, #2
 80006dc:	6839      	ldr	r1, [r7, #0]
 80006de:	2000      	movs	r0, #0
 80006e0:	f003 fe3c 	bl	800435c <BSP_CAMERA_Start>

	  /* Wait until camera frame is ready : DCMI Frame event */
	  while(camera_frame_ready == 0)
 80006e4:	bf00      	nop
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <main+0x114>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0fb      	beq.n	80006e6 <main+0xf6>
	  {
	  }

	  /* Stop the camera to avoid having the DMA2D work in parallel of Display */
	  /* which cause perturbation of LTDC                                      */
	  BSP_CAMERA_Stop(0);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f003 fe6e 	bl	80043d0 <BSP_CAMERA_Stop>
	BSP_CAMERA_PwrDown(0);
 80006f4:	e7e0      	b.n	80006b8 <main+0xc8>
 80006f6:	bf00      	nop
 80006f8:	240000a4 	.word	0x240000a4
 80006fc:	24000000 	.word	0x24000000
 8000700:	24000004 	.word	0x24000004
 8000704:	240005a4 	.word	0x240005a4

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	; 0x70
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	224c      	movs	r2, #76	; 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f010 fd6e 	bl	80111f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2220      	movs	r2, #32
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f010 fd68 	bl	80111f8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000728:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <SystemClock_Config+0x11c>)
 800072a:	f04f 32ff 	mov.w	r2, #4294967295
 800072e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000732:	2004      	movs	r0, #4
 8000734:	f009 fde8 	bl	800a308 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <SystemClock_Config+0x120>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a39      	ldr	r2, [pc, #228]	; (8000828 <SystemClock_Config+0x120>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b37      	ldr	r3, [pc, #220]	; (8000828 <SystemClock_Config+0x120>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000754:	bf00      	nop
 8000756:	4b34      	ldr	r3, [pc, #208]	; (8000828 <SystemClock_Config+0x120>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800075e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000762:	d1f8      	bne.n	8000756 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000764:	f009 fdc0 	bl	800a2e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000768:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <SystemClock_Config+0x11c>)
 800076a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800076c:	4a2d      	ldr	r2, [pc, #180]	; (8000824 <SystemClock_Config+0x11c>)
 800076e:	f023 0318 	bic.w	r3, r3, #24
 8000772:	6713      	str	r3, [r2, #112]	; 0x70

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000774:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <SystemClock_Config+0x11c>)
 8000776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000778:	f023 0303 	bic.w	r3, r3, #3
 800077c:	4a29      	ldr	r2, [pc, #164]	; (8000824 <SystemClock_Config+0x11c>)
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000784:	2307      	movs	r3, #7
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000792:	2301      	movs	r3, #1
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000796:	2340      	movs	r3, #64	; 0x40
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	2302      	movs	r3, #2
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80007a2:	230c      	movs	r3, #12
 80007a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 80007a6:	f44f 738c 	mov.w	r3, #280	; 0x118
 80007aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007b0:	2303      	movs	r3, #3
 80007b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007b8:	2304      	movs	r3, #4
 80007ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007bc:	2300      	movs	r3, #0
 80007be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	4618      	mov	r0, r3
 80007ca:	f009 fdf7 	bl	800a3bc <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007d4:	f000 fd2e 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	233f      	movs	r3, #63	; 0x3f
 80007da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2303      	movs	r3, #3
 80007de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007e4:	2308      	movs	r3, #8
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ec:	2340      	movs	r3, #64	; 0x40
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2103      	movs	r1, #3
 80007fe:	4618      	mov	r0, r3
 8000800:	f00a fa0e 	bl	800ac20 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x106>
  {
    Error_Handler();
 800080a:	f000 fd13 	bl	8001234 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800080e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000812:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000816:	2000      	movs	r0, #0
 8000818:	f00a fbb8 	bl	800af8c <HAL_RCC_MCOConfig>
}
 800081c:	bf00      	nop
 800081e:	3770      	adds	r7, #112	; 0x70
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	58024400 	.word	0x58024400
 8000828:	58024800 	.word	0x58024800

0800082c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b0b0      	sub	sp, #192	; 0xc0
 8000830:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	22c0      	movs	r2, #192	; 0xc0
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f010 fcdd 	bl	80111f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_OSPI
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <PeriphCommonClock_Config+0x68>)
 8000840:	f04f 0300 	mov.w	r3, #0
 8000844:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 12;
 8000848:	230c      	movs	r3, #12
 800084a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 200;
 800084c:	23c8      	movs	r3, #200	; 0xc8
 800084e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 8000858:	2304      	movs	r3, #4
 800085a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800085c:	2340      	movs	r3, #64	; 0x40
 800085e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800086c:	2320      	movs	r3, #32
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000874:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000876:	2300      	movs	r3, #0
 8000878:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4618      	mov	r0, r3
 800087e:	f00a fdc5 	bl	800b40c <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8000888:	f000 fcd4 	bl	8001234 <Error_Handler>
  }
}
 800088c:	bf00      	nop
 800088e:	37c0      	adds	r7, #192	; 0xc0
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	83010000 	.word	0x83010000

08000898 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_DMA2D_Init+0x6c>)
 800089e:	4a1a      	ldr	r2, [pc, #104]	; (8000908 <MX_DMA2D_Init+0x70>)
 80008a0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008e0:	f006 fb26 	bl	8006f30 <HAL_DMA2D_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008ea:	f000 fca3 	bl	8001234 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008ee:	2101      	movs	r1, #1
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_DMA2D_Init+0x6c>)
 80008f2:	f006 fb8b 	bl	800700c <HAL_DMA2D_ConfigLayer>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80008fc:	f000 fc9a 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	240000f4 	.word	0x240000f4
 8000908:	52001000 	.word	0x52001000

0800090c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_I2C1_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <MX_I2C1_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC010151E;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_I2C1_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <MX_I2C1_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_I2C1_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000946:	480e      	ldr	r0, [pc, #56]	; (8000980 <MX_I2C1_Init+0x74>)
 8000948:	f007 fbc6 	bl	80080d8 <HAL_I2C_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000952:	f000 fc6f 	bl	8001234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_I2C1_Init+0x74>)
 800095a:	f008 f991 	bl	8008c80 <HAL_I2CEx_ConfigAnalogFilter>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 fc66 	bl	8001234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_I2C1_Init+0x74>)
 800096c:	f008 f9d3 	bl	8008d16 <HAL_I2CEx_ConfigDigitalFilter>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 fc5d 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2400015c 	.word	0x2400015c
 8000984:	40005400 	.word	0x40005400
 8000988:	c010151e 	.word	0xc010151e

0800098c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_I2C2_Init+0x74>)
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <MX_I2C2_Init+0x78>)
 8000994:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC010151E;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_I2C2_Init+0x74>)
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <MX_I2C2_Init+0x7c>)
 800099a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_I2C2_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009c6:	480e      	ldr	r0, [pc, #56]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009c8:	f007 fb86 	bl	80080d8 <HAL_I2C_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009d2:	f000 fc2f 	bl	8001234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009da:	f008 f951 	bl	8008c80 <HAL_I2CEx_ConfigAnalogFilter>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009e4:	f000 fc26 	bl	8001234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_I2C2_Init+0x74>)
 80009ec:	f008 f993 	bl	8008d16 <HAL_I2CEx_ConfigDigitalFilter>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 fc1d 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	240001b0 	.word	0x240001b0
 8000a04:	40005800 	.word	0x40005800
 8000a08:	c010151e 	.word	0xc010151e

08000a0c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <MX_I2C4_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0xC010151E;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a18:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <MX_I2C4_Init+0x7c>)
 8000a1a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a46:	480e      	ldr	r0, [pc, #56]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a48:	f007 fb46 	bl	80080d8 <HAL_I2C_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a52:	f000 fbef 	bl	8001234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a5a:	f008 f911 	bl	8008c80 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a64:	f000 fbe6 	bl	8001234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_I2C4_Init+0x74>)
 8000a6c:	f008 f953 	bl	8008d16 <HAL_I2CEx_ConfigDigitalFilter>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 fbdd 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	24000204 	.word	0x24000204
 8000a84:	58001c00 	.word	0x58001c00
 8000a88:	c010151e 	.word	0xc010151e

08000a8c <MX_I2S6_Init>:
  * @brief I2S6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S6_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S6_Init 0 */

  /* USER CODE BEGIN I2S6_Init 1 */

  /* USER CODE END I2S6_Init 1 */
  hi2s6.Instance = SPI6;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_I2S6_Init+0x60>)
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <MX_I2S6_Init+0x64>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2s6.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_I2S6_Init+0x60>)
 8000a98:	220a      	movs	r2, #10
 8000a9a:	605a      	str	r2, [r3, #4]
  hi2s6.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_I2S6_Init+0x60>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hi2s6.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2S6_Init+0x60>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2s6.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_I2S6_Init+0x60>)
 8000aaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000aae:	611a      	str	r2, [r3, #16]
  hi2s6.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_I2S6_Init+0x60>)
 8000ab2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ab6:	615a      	str	r2, [r3, #20]
  hi2s6.Init.CPOL = I2S_CPOL_LOW;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_I2S6_Init+0x60>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  hi2s6.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_I2S6_Init+0x60>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hi2s6.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_I2S6_Init+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  hi2s6.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_I2S6_Init+0x60>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s6.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_I2S6_Init+0x60>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s6) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_I2S6_Init+0x60>)
 8000ad8:	f008 f96a 	bl	8008db0 <HAL_I2S_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_I2S6_Init+0x5a>
  {
    Error_Handler();
 8000ae2:	f000 fba7 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2S6_Init 2 */

  /* USER CODE END I2S6_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	24000258 	.word	0x24000258
 8000af0:	58001400 	.word	0x58001400

08000af4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b09a      	sub	sp, #104	; 0x68
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000afa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000afe:	2234      	movs	r2, #52	; 0x34
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f010 fb78 	bl	80111f8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2234      	movs	r2, #52	; 0x34
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f010 fb72 	bl	80111f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b14:	4b4e      	ldr	r3, [pc, #312]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b16:	4a4f      	ldr	r2, [pc, #316]	; (8000c54 <MX_LTDC_Init+0x160>)
 8000b18:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b1a:	4b4d      	ldr	r3, [pc, #308]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b20:	4b4b      	ldr	r3, [pc, #300]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b26:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b2c:	4b48      	ldr	r3, [pc, #288]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000b32:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b38:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b3a:	2209      	movs	r2, #9
 8000b3c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8000b3e:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b40:	222b      	movs	r2, #43	; 0x2b
 8000b42:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8000b44:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b46:	2215      	movs	r2, #21
 8000b48:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8000b4a:	4b41      	ldr	r3, [pc, #260]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b4c:	f240 220b 	movw	r2, #523	; 0x20b
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8000b52:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b54:	f240 1225 	movw	r2, #293	; 0x125
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 8000b5a:	4b3d      	ldr	r3, [pc, #244]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b5c:	f240 2213 	movw	r2, #531	; 0x213
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 8000b62:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b64:	f240 1229 	movw	r2, #297	; 0x129
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b6a:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b72:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b7a:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b82:	4833      	ldr	r0, [pc, #204]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000b84:	f008 fa4e 	bl	8009024 <HAL_LTDC_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b8e:	f000 fb51 	bl	8001234 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481c      	ldr	r0, [pc, #112]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000be0:	f008 fafa 	bl	80091d8 <HAL_LTDC_ConfigLayer>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000bea:	f000 fb23 	bl	8001234 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c10:	2305      	movs	r3, #5
 8000c12:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	2201      	movs	r2, #1
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_LTDC_Init+0x15c>)
 8000c3a:	f008 facd 	bl	80091d8 <HAL_LTDC_ConfigLayer>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000c44:	f000 faf6 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3768      	adds	r7, #104	; 0x68
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	240002ac 	.word	0x240002ac
 8000c54:	50001000 	.word	0x50001000

08000c58 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000c70:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <MX_OCTOSPI1_Init+0xbc>)
 8000c72:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c86:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000cd0:	480f      	ldr	r0, [pc, #60]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000cd2:	f008 fc59 	bl	8009588 <HAL_OSPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000cdc:	f000 faaa 	bl	8001234 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_OCTOSPI1_Init+0xc0>)
 8000cee:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_OCTOSPI1_Init+0xb8>)
 8000cfa:	f008 fd1b 	bl	8009734 <HAL_OSPIM_Config>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_OCTOSPI1_Init+0xb0>
  {
    Error_Handler();
 8000d04:	f000 fa96 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	24000354 	.word	0x24000354
 8000d14:	52005000 	.word	0x52005000
 8000d18:	01000001 	.word	0x01000001

08000d1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_RTC_Init+0x4c>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_RTC_Init+0x50>)
 8000d24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_RTC_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_RTC_Init+0x4c>)
 8000d2e:	227f      	movs	r2, #127	; 0x7f
 8000d30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <MX_RTC_Init+0x4c>)
 8000d34:	22ff      	movs	r2, #255	; 0xff
 8000d36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_RTC_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_RTC_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_RTC_Init+0x4c>)
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_RTC_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_RTC_Init+0x4c>)
 8000d54:	f00c ff64 	bl	800dc20 <HAL_RTC_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000d5e:	f000 fa69 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	240003b0 	.word	0x240003b0
 8000d6c:	58004000 	.word	0x58004000

08000d70 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_SDMMC1_SD_Init+0x40>)
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <MX_SDMMC1_SD_Init+0x44>)
 8000d78:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <MX_SDMMC1_SD_Init+0x40>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_SDMMC1_SD_Init+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_SDMMC1_SD_Init+0x40>)
 8000d88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d8c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_SDMMC1_SD_Init+0x40>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_SDMMC1_SD_Init+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_SDMMC1_SD_Init+0x40>)
 8000d9c:	f00d f868 	bl	800de70 <HAL_SD_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000da6:	f000 fa45 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	240003d8 	.word	0x240003d8
 8000db4:	52007000 	.word	0x52007000

08000db8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dbe:	4a28      	ldr	r2, [pc, #160]	; (8000e60 <MX_SPI2_Init+0xa8>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000de4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000de8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_SPI2_Init+0xa4>)
 8000e48:	f00e f8d0 	bl	800efec <HAL_SPI_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000e52:	f000 f9ef 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	24000454 	.word	0x24000454
 8000e60:	40003800 	.word	0x40003800

08000e64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000e6a:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <MX_USART1_UART_Init+0x94>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eac:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000eae:	f00e f9e6 	bl	800f27e <HAL_UART_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000eb8:	f000 f9bc 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000ec0:	f00f faf7 	bl	80104b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eca:	f000 f9b3 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000ed2:	f00f fb2c 	bl	801052e <HAL_UARTEx_SetRxFifoThreshold>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000edc:	f000 f9aa 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_USART1_UART_Init+0x90>)
 8000ee2:	f00f faad 	bl	8010440 <HAL_UARTEx_DisableFifoMode>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f000 f9a2 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	240004dc 	.word	0x240004dc
 8000ef8:	40011000 	.word	0x40011000

08000efc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <MX_FMC_Init+0x98>)
 8000f18:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f28:	2204      	movs	r2, #4
 8000f2a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f2e:	2210      	movs	r2, #16
 8000f30:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f34:	2240      	movs	r2, #64	; 0x40
 8000f36:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000f56:	2310      	movs	r3, #16
 8000f58:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000f5e:	2310      	movs	r3, #16
 8000f60:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000f62:	2310      	movs	r3, #16
 8000f64:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000f66:	2310      	movs	r3, #16
 8000f68:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000f6e:	2310      	movs	r3, #16
 8000f70:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <MX_FMC_Init+0x94>)
 8000f78:	f00d fff2 	bl	800ef60 <HAL_SDRAM_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000f82:	f000 f957 	bl	8001234 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f86:	bf00      	nop
 8000f88:	3720      	adds	r7, #32
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	24000570 	.word	0x24000570
 8000f94:	52004140 	.word	0x52004140

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b090      	sub	sp, #64	; 0x40
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fae:	4b9b      	ldr	r3, [pc, #620]	; (800121c <MX_GPIO_Init+0x284>)
 8000fb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fb4:	4a99      	ldr	r2, [pc, #612]	; (800121c <MX_GPIO_Init+0x284>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fbe:	4b97      	ldr	r3, [pc, #604]	; (800121c <MX_GPIO_Init+0x284>)
 8000fc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	4b93      	ldr	r3, [pc, #588]	; (800121c <MX_GPIO_Init+0x284>)
 8000fce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd2:	4a92      	ldr	r2, [pc, #584]	; (800121c <MX_GPIO_Init+0x284>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fdc:	4b8f      	ldr	r3, [pc, #572]	; (800121c <MX_GPIO_Init+0x284>)
 8000fde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fea:	4b8c      	ldr	r3, [pc, #560]	; (800121c <MX_GPIO_Init+0x284>)
 8000fec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ff0:	4a8a      	ldr	r2, [pc, #552]	; (800121c <MX_GPIO_Init+0x284>)
 8000ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ffa:	4b88      	ldr	r3, [pc, #544]	; (800121c <MX_GPIO_Init+0x284>)
 8000ffc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001004:	623b      	str	r3, [r7, #32]
 8001006:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001008:	4b84      	ldr	r3, [pc, #528]	; (800121c <MX_GPIO_Init+0x284>)
 800100a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800100e:	4a83      	ldr	r2, [pc, #524]	; (800121c <MX_GPIO_Init+0x284>)
 8001010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001014:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001018:	4b80      	ldr	r3, [pc, #512]	; (800121c <MX_GPIO_Init+0x284>)
 800101a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800101e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b7d      	ldr	r3, [pc, #500]	; (800121c <MX_GPIO_Init+0x284>)
 8001028:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800102c:	4a7b      	ldr	r2, [pc, #492]	; (800121c <MX_GPIO_Init+0x284>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001036:	4b79      	ldr	r3, [pc, #484]	; (800121c <MX_GPIO_Init+0x284>)
 8001038:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b75      	ldr	r3, [pc, #468]	; (800121c <MX_GPIO_Init+0x284>)
 8001046:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104a:	4a74      	ldr	r2, [pc, #464]	; (800121c <MX_GPIO_Init+0x284>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001054:	4b71      	ldr	r3, [pc, #452]	; (800121c <MX_GPIO_Init+0x284>)
 8001056:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001062:	4b6e      	ldr	r3, [pc, #440]	; (800121c <MX_GPIO_Init+0x284>)
 8001064:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001068:	4a6c      	ldr	r2, [pc, #432]	; (800121c <MX_GPIO_Init+0x284>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001072:	4b6a      	ldr	r3, [pc, #424]	; (800121c <MX_GPIO_Init+0x284>)
 8001074:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001080:	4b66      	ldr	r3, [pc, #408]	; (800121c <MX_GPIO_Init+0x284>)
 8001082:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001086:	4a65      	ldr	r2, [pc, #404]	; (800121c <MX_GPIO_Init+0x284>)
 8001088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001090:	4b62      	ldr	r3, [pc, #392]	; (800121c <MX_GPIO_Init+0x284>)
 8001092:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b5f      	ldr	r3, [pc, #380]	; (800121c <MX_GPIO_Init+0x284>)
 80010a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010a4:	4a5d      	ldr	r2, [pc, #372]	; (800121c <MX_GPIO_Init+0x284>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ae:	4b5b      	ldr	r3, [pc, #364]	; (800121c <MX_GPIO_Init+0x284>)
 80010b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010bc:	4b57      	ldr	r3, [pc, #348]	; (800121c <MX_GPIO_Init+0x284>)
 80010be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c2:	4a56      	ldr	r2, [pc, #344]	; (800121c <MX_GPIO_Init+0x284>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010cc:	4b53      	ldr	r3, [pc, #332]	; (800121c <MX_GPIO_Init+0x284>)
 80010ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010da:	4b50      	ldr	r3, [pc, #320]	; (800121c <MX_GPIO_Init+0x284>)
 80010dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <MX_GPIO_Init+0x284>)
 80010e2:	f043 0320 	orr.w	r3, r3, #32
 80010e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ea:	4b4c      	ldr	r3, [pc, #304]	; (800121c <MX_GPIO_Init+0x284>)
 80010ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	210e      	movs	r1, #14
 80010fc:	4848      	ldr	r0, [pc, #288]	; (8001220 <MX_GPIO_Init+0x288>)
 80010fe:	f006 ffd1 	bl	80080a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f640 0104 	movw	r1, #2052	; 0x804
 8001108:	4846      	ldr	r0, [pc, #280]	; (8001224 <MX_GPIO_Init+0x28c>)
 800110a:	f006 ffcb 	bl	80080a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001114:	4844      	ldr	r0, [pc, #272]	; (8001228 <MX_GPIO_Init+0x290>)
 8001116:	f006 ffc5 	bl	80080a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2108      	movs	r1, #8
 800111e:	4841      	ldr	r0, [pc, #260]	; (8001224 <MX_GPIO_Init+0x28c>)
 8001120:	f006 ffc0 	bl	80080a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2106      	movs	r1, #6
 8001128:	483f      	ldr	r0, [pc, #252]	; (8001228 <MX_GPIO_Init+0x290>)
 800112a:	f006 ffbb 	bl	80080a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 800112e:	2330      	movs	r3, #48	; 0x30
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001132:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800113c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001140:	4619      	mov	r1, r3
 8001142:	4837      	ldr	r0, [pc, #220]	; (8001220 <MX_GPIO_Init+0x288>)
 8001144:	f006 fcf4 	bl	8007b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8001148:	230e      	movs	r3, #14
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115c:	4619      	mov	r1, r3
 800115e:	4830      	ldr	r0, [pc, #192]	; (8001220 <MX_GPIO_Init+0x288>)
 8001160:	f006 fce6 	bl	8007b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8001164:	f640 030c 	movw	r3, #2060	; 0x80c
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117a:	4619      	mov	r1, r3
 800117c:	4829      	ldr	r0, [pc, #164]	; (8001224 <MX_GPIO_Init+0x28c>)
 800117e:	f006 fcd7 	bl	8007b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001188:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118e:	2301      	movs	r3, #1
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001196:	4619      	mov	r1, r3
 8001198:	4821      	ldr	r0, [pc, #132]	; (8001220 <MX_GPIO_Init+0x288>)
 800119a:	f006 fcc9 	bl	8007b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 800119e:	f640 0306 	movw	r3, #2054	; 0x806
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b4:	4619      	mov	r1, r3
 80011b6:	481c      	ldr	r0, [pc, #112]	; (8001228 <MX_GPIO_Init+0x290>)
 80011b8:	f006 fcba 	bl	8007b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80011bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d0:	4619      	mov	r1, r3
 80011d2:	4816      	ldr	r0, [pc, #88]	; (800122c <MX_GPIO_Init+0x294>)
 80011d4:	f006 fcac 	bl	8007b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 80011d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_GPIO_Init+0x290>)
 80011f6:	f006 fc9b 	bl	8007b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80011fa:	2304      	movs	r3, #4
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120c:	4619      	mov	r1, r3
 800120e:	4808      	ldr	r0, [pc, #32]	; (8001230 <MX_GPIO_Init+0x298>)
 8001210:	f006 fc8e 	bl	8007b30 <HAL_GPIO_Init>

}
 8001214:	bf00      	nop
 8001216:	3740      	adds	r7, #64	; 0x40
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58024400 	.word	0x58024400
 8001220:	58022000 	.word	0x58022000
 8001224:	58021800 	.word	0x58021800
 8001228:	58020000 	.word	0x58020000
 800122c:	58020800 	.word	0x58020800
 8001230:	58021c00 	.word	0x58021c00

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001244:	4b32      	ldr	r3, [pc, #200]	; (8001310 <SystemInit+0xd0>)
 8001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124a:	4a31      	ldr	r2, [pc, #196]	; (8001310 <SystemInit+0xd0>)
 800124c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <SystemInit+0xd4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	2b02      	cmp	r3, #2
 800125e:	d807      	bhi.n	8001270 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001260:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <SystemInit+0xd4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 030f 	bic.w	r3, r3, #15
 8001268:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <SystemInit+0xd4>)
 800126a:	f043 0303 	orr.w	r3, r3, #3
 800126e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <SystemInit+0xd8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a28      	ldr	r2, [pc, #160]	; (8001318 <SystemInit+0xd8>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <SystemInit+0xd8>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <SystemInit+0xd8>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4924      	ldr	r1, [pc, #144]	; (8001318 <SystemInit+0xd8>)
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <SystemInit+0xdc>)
 800128a:	4013      	ands	r3, r2
 800128c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <SystemInit+0xd4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800129a:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <SystemInit+0xd4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 030f 	bic.w	r3, r3, #15
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <SystemInit+0xd4>)
 80012a4:	f043 0303 	orr.w	r3, r3, #3
 80012a8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <SystemInit+0xd8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <SystemInit+0xd8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <SystemInit+0xd8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <SystemInit+0xd8>)
 80012be:	4a18      	ldr	r2, [pc, #96]	; (8001320 <SystemInit+0xe0>)
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <SystemInit+0xd8>)
 80012c4:	4a17      	ldr	r2, [pc, #92]	; (8001324 <SystemInit+0xe4>)
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <SystemInit+0xd8>)
 80012ca:	4a17      	ldr	r2, [pc, #92]	; (8001328 <SystemInit+0xe8>)
 80012cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <SystemInit+0xd8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <SystemInit+0xd8>)
 80012d6:	4a14      	ldr	r2, [pc, #80]	; (8001328 <SystemInit+0xe8>)
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <SystemInit+0xd8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <SystemInit+0xd8>)
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <SystemInit+0xe8>)
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <SystemInit+0xd8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <SystemInit+0xd8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <SystemInit+0xd8>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <SystemInit+0xd8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <SystemInit+0xec>)
 8001300:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001304:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	52002000 	.word	0x52002000
 8001318:	58024400 	.word	0x58024400
 800131c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001320:	02020200 	.word	0x02020200
 8001324:	01ff0000 	.word	0x01ff0000
 8001328:	01010280 	.word	0x01010280
 800132c:	52004000 	.word	0x52004000

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001334:	f7ff ff84 	bl	8001240 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	; (800137c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800135e:	f00f ff27 	bl	80111b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff f945 	bl	80005f0 <main>
  bx  lr
 8001366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001368:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800136c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001370:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001374:	08011838 	.word	0x08011838
  ldr r2, =_sbss
 8001378:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800137c:	24001174 	.word	0x24001174

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>

08001382 <MFXSTM32L152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Init(MFXSTM32L152_Object_t *pObj)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001394:	2b00      	cmp	r3, #0
 8001396:	d11c      	bne.n	80013d2 <MFXSTM32L152_Init+0x50>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4798      	blx	r3

    if(MFXSTM32L152_SetIrqOutPinPolarity(pObj, MFXSTM32L152_OUT_PIN_POLARITY_HIGH) != MFXSTM32L152_OK)
 800139e:	2102      	movs	r1, #2
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f8d5 	bl	8001550 <MFXSTM32L152_SetIrqOutPinPolarity>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <MFXSTM32L152_Init+0x32>
    {
      ret = MFXSTM32L152_ERROR;
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e00e      	b.n	80013d2 <MFXSTM32L152_Init+0x50>
    }
    else if(MFXSTM32L152_SetIrqOutPinType(pObj, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL) != MFXSTM32L152_OK)
 80013b4:	2101      	movs	r1, #1
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f900 	bl	80015bc <MFXSTM32L152_SetIrqOutPinType>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <MFXSTM32L152_Init+0x48>
    {
      ret = MFXSTM32L152_ERROR;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e003      	b.n	80013d2 <MFXSTM32L152_Init+0x50>
    }
    else
    {
      pObj->IsInitialized = 1U;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }

  return ret;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <MFXSTM32L152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_DeInit(MFXSTM32L152_Object_t *pObj)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(pObj->IsInitialized == 1U)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d103      	bne.n	80013f6 <MFXSTM32L152_DeInit+0x1a>
  {
    pObj->IsInitialized = 0U;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  return MFXSTM32L152_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <MFXSTM32L152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Reset(MFXSTM32L152_Object_t *pObj)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = MFXSTM32L152_SWRST;
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	72fb      	strb	r3, [r7, #11]

  /* Soft Reset */
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f103 0018 	add.w	r0, r3, #24
 800141a:	f107 020b 	add.w	r2, r7, #11
 800141e:	2301      	movs	r3, #1
 8001420:	2140      	movs	r1, #64	; 0x40
 8001422:	f000 fd9d 	bl	8001f60 <mfxstm32l152_write_reg>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <MFXSTM32L152_Reset+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <MFXSTM32L152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  pObj   Pointer to component object.
  * @retval The Device ID (two bytes).
  */
int32_t MFXSTM32L152_ReadID(MFXSTM32L152_Object_t *pObj, uint32_t *Id)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  uint8_t id;

  /* Initialize IO BUS layer */
  pObj->IO.Init();
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4798      	blx	r3

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ID, &id, 1) != MFXSTM32L152_OK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f103 0018 	add.w	r0, r3, #24
 8001456:	f107 020b 	add.w	r2, r7, #11
 800145a:	2301      	movs	r3, #1
 800145c:	2100      	movs	r1, #0
 800145e:	f000 fd68 	bl	8001f32 <mfxstm32l152_read_reg>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <MFXSTM32L152_ReadID+0x34>
  {
    ret = MFXSTM32L152_ERROR;
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e003      	b.n	8001478 <MFXSTM32L152_ReadID+0x3c>
  }
  else
  {
  /* Store the device ID value */
  *Id = id;
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	461a      	mov	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8001478:	68fb      	ldr	r3, [r7, #12]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <MFXSTM32L152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_EnableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f103 0018 	add.w	r0, r3, #24
 8001498:	f107 020b 	add.w	r2, r7, #11
 800149c:	2301      	movs	r3, #1
 800149e:	2142      	movs	r1, #66	; 0x42
 80014a0:	f000 fd47 	bl	8001f32 <mfxstm32l152_read_reg>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <MFXSTM32L152_EnableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	e013      	b.n	80014da <MFXSTM32L152_EnableITSource+0x58>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp |= Source;
 80014b2:	7afa      	ldrb	r2, [r7, #11]
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f103 0018 	add.w	r0, r3, #24
 80014c2:	f107 020b 	add.w	r2, r7, #11
 80014c6:	2301      	movs	r3, #1
 80014c8:	2142      	movs	r1, #66	; 0x42
 80014ca:	f000 fd49 	bl	8001f60 <mfxstm32l152_write_reg>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <MFXSTM32L152_EnableITSource+0x58>
    {
      ret = MFXSTM32L152_ERROR;
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <MFXSTM32L152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_DisableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f103 0018 	add.w	r0, r3, #24
 80014fa:	f107 020b 	add.w	r2, r7, #11
 80014fe:	2301      	movs	r3, #1
 8001500:	2142      	movs	r1, #66	; 0x42
 8001502:	f000 fd16 	bl	8001f32 <mfxstm32l152_read_reg>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <MFXSTM32L152_DisableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e018      	b.n	8001546 <MFXSTM32L152_DisableITSource+0x62>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp &= ~Source;
 8001514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001518:	43db      	mvns	r3, r3
 800151a:	b25a      	sxtb	r2, r3
 800151c:	7afb      	ldrb	r3, [r7, #11]
 800151e:	b25b      	sxtb	r3, r3
 8001520:	4013      	ands	r3, r2
 8001522:	b25b      	sxtb	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f103 0018 	add.w	r0, r3, #24
 800152e:	f107 020b 	add.w	r2, r7, #11
 8001532:	2301      	movs	r3, #1
 8001534:	2142      	movs	r1, #66	; 0x42
 8001536:	f000 fd13 	bl	8001f60 <mfxstm32l152_write_reg>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <MFXSTM32L152_DisableITSource+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <MFXSTM32L152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinPolarity(MFXSTM32L152_Object_t *pObj, uint8_t Polarity)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f103 0018 	add.w	r0, r3, #24
 8001566:	f107 020b 	add.w	r2, r7, #11
 800156a:	2301      	movs	r3, #1
 800156c:	2141      	movs	r1, #65	; 0x41
 800156e:	f000 fce0 	bl	8001f32 <mfxstm32l152_read_reg>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <MFXSTM32L152_SetIrqOutPinPolarity+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	e018      	b.n	80015b2 <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
  }
  else
  {
  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	f023 0302 	bic.w	r3, r3, #2
 8001586:	b2db      	uxtb	r3, r3
 8001588:	72fb      	strb	r3, [r7, #11]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 800158a:	7afa      	ldrb	r2, [r7, #11]
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	4313      	orrs	r3, r2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	72fb      	strb	r3, [r7, #11]

  /* Set the new register value */
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f103 0018 	add.w	r0, r3, #24
 800159a:	f107 020b 	add.w	r2, r7, #11
 800159e:	2301      	movs	r3, #1
 80015a0:	2141      	movs	r1, #65	; 0x41
 80015a2:	f000 fcdd 	bl	8001f60 <mfxstm32l152_write_reg>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
  {
    ret = MFXSTM32L152_ERROR;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	60fb      	str	r3, [r7, #12]
  }
  }

  return ret;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <MFXSTM32L152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinType(MFXSTM32L152_Object_t *pObj, uint8_t Type)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f103 0018 	add.w	r0, r3, #24
 80015d2:	f107 020b 	add.w	r2, r7, #11
 80015d6:	2301      	movs	r3, #1
 80015d8:	2141      	movs	r1, #65	; 0x41
 80015da:	f000 fcaa 	bl	8001f32 <mfxstm32l152_read_reg>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <MFXSTM32L152_SetIrqOutPinType+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e018      	b.n	800161e <MFXSTM32L152_SetIrqOutPinType+0x62>
  }
  else
  {
    /* Mask the type bits */
    tmp &= ~(uint8_t)0x01;
 80015ec:	7afb      	ldrb	r3, [r7, #11]
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	72fb      	strb	r3, [r7, #11]

    /* Modify the Interrupt Output line configuration */
    tmp |= Type;
 80015f6:	7afa      	ldrb	r2, [r7, #11]
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	72fb      	strb	r3, [r7, #11]

    /* Set the new register value */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f103 0018 	add.w	r0, r3, #24
 8001606:	f107 020b 	add.w	r2, r7, #11
 800160a:	2301      	movs	r3, #1
 800160c:	2141      	movs	r1, #65	; 0x41
 800160e:	f000 fca7 	bl	8001f60 <mfxstm32l152_write_reg>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <MFXSTM32L152_SetIrqOutPinType+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <MFXSTM32L152_IO_Start>:
  * @param  pObj   Pointer to component object.
  * @param  IO_Pin IO pin
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Start(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  uint8_t mode;

  /* Get the current register value */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f103 0018 	add.w	r0, r3, #24
 800163c:	f107 020b 	add.w	r2, r7, #11
 8001640:	2301      	movs	r3, #1
 8001642:	2140      	movs	r1, #64	; 0x40
 8001644:	f000 fc75 	bl	8001f32 <mfxstm32l152_read_reg>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <MFXSTM32L152_IO_Start+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e022      	b.n	800169c <MFXSTM32L152_IO_Start+0x74>
  }
  else
  {
    /* Set the IO Functionalities to be Enabled */
    mode |= MFXSTM32L152_GPIO_EN;
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	72fb      	strb	r3, [r7, #11]
    /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
    /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
    /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
    /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
    /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
    if (IO_Pin > 0xFFFFU)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001666:	d305      	bcc.n	8001674 <MFXSTM32L152_IO_Start+0x4c>
    {
      mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8001668:	7afb      	ldrb	r3, [r7, #11]
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	b2db      	uxtb	r3, r3
 8001670:	72fb      	strb	r3, [r7, #11]
 8001672:	e004      	b.n	800167e <MFXSTM32L152_IO_Start+0x56>
    }
    else
    {
      mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8001674:	7afb      	ldrb	r3, [r7, #11]
 8001676:	f023 0308 	bic.w	r3, r3, #8
 800167a:	b2db      	uxtb	r3, r3
 800167c:	72fb      	strb	r3, [r7, #11]
    }

    /* Write the new register value */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f103 0018 	add.w	r0, r3, #24
 8001684:	f107 020b 	add.w	r2, r7, #11
 8001688:	2301      	movs	r3, #1
 800168a:	2140      	movs	r1, #64	; 0x40
 800168c:	f000 fc68 	bl	8001f60 <mfxstm32l152_write_reg>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <MFXSTM32L152_IO_Start+0x74>
    {
      ret = MFXSTM32L152_ERROR;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800169c:	68fb      	ldr	r3, [r7, #12]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <MFXSTM32L152_IO_Init>:
  * @param  IoInit Pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Init(MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_Init_t *IoInit)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]

  /* IT enable/disable */
  switch(IoInit->Mode)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d903      	bls.n	80016c6 <MFXSTM32L152_IO_Init+0x1e>
 80016be:	3b05      	subs	r3, #5
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d813      	bhi.n	80016ec <MFXSTM32L152_IO_Init+0x44>
 80016c4:	e00a      	b.n	80016dc <MFXSTM32L152_IO_Init+0x34>
  case MFXSTM32L152_GPIO_MODE_OFF:
  case MFXSTM32L152_GPIO_MODE_ANALOG:
  case MFXSTM32L152_GPIO_MODE_INPUT:
  case MFXSTM32L152_GPIO_MODE_OUTPUT_OD:
  case MFXSTM32L152_GPIO_MODE_OUTPUT_PP:
    ret += MFXSTM32L152_IO_DisablePinIT(pObj, IoInit->Pin); /* first disable IT */
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fa53 	bl	8001b78 <MFXSTM32L152_IO_DisablePinIT>
 80016d2:	4602      	mov	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
    break;
 80016da:	e008      	b.n	80016ee <MFXSTM32L152_IO_Init+0x46>

  case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
  case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
  case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
  case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
    ret += MFXSTM32L152_IO_EnableIT(pObj); /* first enable IT */
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fa09 	bl	8001af4 <MFXSTM32L152_IO_EnableIT>
 80016e2:	4602      	mov	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
    break;
 80016ea:	e000      	b.n	80016ee <MFXSTM32L152_IO_Init+0x46>
  default:
    break;
 80016ec:	bf00      	nop
  }

  /* Set direction IN/OUT */
  if((IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD))
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d003      	beq.n	80016fe <MFXSTM32L152_IO_Init+0x56>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d10b      	bne.n	8001716 <MFXSTM32L152_IO_Init+0x6e>
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2201      	movs	r2, #1
 8001704:	4619      	mov	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f936 	bl	8001978 <MFXSTM32L152_IO_InitPin>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4413      	add	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e00a      	b.n	800172c <MFXSTM32L152_IO_Init+0x84>
  }
  else
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	4619      	mov	r1, r3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f92a 	bl	8001978 <MFXSTM32L152_IO_InitPin>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
  }

  /* Set Push-Pull type */
  switch(IoInit->Pull)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <MFXSTM32L152_IO_Init+0x94>
 8001734:	3b01      	subs	r3, #1
 8001736:	2b01      	cmp	r3, #1
 8001738:	d818      	bhi.n	800176c <MFXSTM32L152_IO_Init+0xc4>
 800173a:	e00b      	b.n	8001754 <MFXSTM32L152_IO_Init+0xac>
  {
  case MFXSTM32L152_GPIO_NOPULL:
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2300      	movs	r3, #0
 8001742:	2164      	movs	r1, #100	; 0x64
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fb05 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 800174a:	4602      	mov	r2, r0
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
    break;
 8001752:	e00c      	b.n	800176e <MFXSTM32L152_IO_Init+0xc6>
  case MFXSTM32L152_GPIO_PULLUP:
  case MFXSTM32L152_GPIO_PULLDOWN:
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	2164      	movs	r1, #100	; 0x64
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 faf9 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 8001762:	4602      	mov	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
    break;
 800176a:	e000      	b.n	800176e <MFXSTM32L152_IO_Init+0xc6>
  default:
    break;
 800176c:	bf00      	nop
  }

  if(IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b04      	cmp	r3, #4
 8001774:	d10a      	bne.n	800178c <MFXSTM32L152_IO_Init+0xe4>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2300      	movs	r3, #0
 800177c:	2164      	movs	r1, #100	; 0x64
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fae8 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
  }

  if(IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d10a      	bne.n	80017aa <MFXSTM32L152_IO_Init+0x102>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	2164      	movs	r1, #100	; 0x64
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fad9 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 80017a2:	4602      	mov	r2, r0
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set Pullup-Pulldown */
  switch(IoInit->Pull)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d033      	beq.n	800181a <MFXSTM32L152_IO_Init+0x172>
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d83d      	bhi.n	8001832 <MFXSTM32L152_IO_Init+0x18a>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <MFXSTM32L152_IO_Init+0x118>
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d021      	beq.n	8001802 <MFXSTM32L152_IO_Init+0x15a>
    break;
  case MFXSTM32L152_GPIO_PULLDOWN:
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
    break;
  default:
    break;
 80017be:	e038      	b.n	8001832 <MFXSTM32L152_IO_Init+0x18a>
    if((IoInit->Mode == MFXSTM32L152_GPIO_MODE_INPUT) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_ANALOG))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d003      	beq.n	80017d0 <MFXSTM32L152_IO_Init+0x128>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d10c      	bne.n	80017ea <MFXSTM32L152_IO_Init+0x142>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	2168      	movs	r1, #104	; 0x68
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fabb 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 80017de:	4602      	mov	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	bf00      	nop
    break;
 80017e8:	e024      	b.n	8001834 <MFXSTM32L152_IO_Init+0x18c>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_UP);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2301      	movs	r3, #1
 80017f0:	2168      	movs	r1, #104	; 0x68
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 faae 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
    break;
 8001800:	e018      	b.n	8001834 <MFXSTM32L152_IO_Init+0x18c>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	2168      	movs	r1, #104	; 0x68
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 faa2 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
    break;
 8001818:	e00c      	b.n	8001834 <MFXSTM32L152_IO_Init+0x18c>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	2300      	movs	r3, #0
 8001820:	2168      	movs	r1, #104	; 0x68
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fa96 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
    break;
 8001830:	e000      	b.n	8001834 <MFXSTM32L152_IO_Init+0x18c>
    break;
 8001832:	bf00      	nop
  }

  /* Set Irq event and type mode */
  switch(IoInit->Mode)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	3b05      	subs	r3, #5
 800183a:	2b03      	cmp	r3, #3
 800183c:	f200 8090 	bhi.w	8001960 <MFXSTM32L152_IO_Init+0x2b8>
 8001840:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <MFXSTM32L152_IO_Init+0x1a0>)
 8001842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001846:	bf00      	nop
 8001848:	08001859 	.word	0x08001859
 800184c:	0800189b 	.word	0x0800189b
 8001850:	0800191f 	.word	0x0800191f
 8001854:	080018dd 	.word	0x080018dd
  {
  case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f8a3 	bl	80019ac <MFXSTM32L152_IO_SetIrqEvtMode>
 8001866:	4602      	mov	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	4619      	mov	r1, r3
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8b2 	bl	80019e0 <MFXSTM32L152_IO_SetIrqTypeMode>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f95c 	bl	8001b48 <MFXSTM32L152_IO_EnablePinIT>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
    break;
 8001898:	e063      	b.n	8001962 <MFXSTM32L152_IO_Init+0x2ba>
  case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2201      	movs	r2, #1
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f882 	bl	80019ac <MFXSTM32L152_IO_SetIrqEvtMode>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f891 	bl	80019e0 <MFXSTM32L152_IO_SetIrqTypeMode>
 80018be:	4602      	mov	r2, r0
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f93b 	bl	8001b48 <MFXSTM32L152_IO_EnablePinIT>
 80018d2:	4602      	mov	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
    break;
 80018da:	e042      	b.n	8001962 <MFXSTM32L152_IO_Init+0x2ba>
  case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	4619      	mov	r1, r3
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f861 	bl	80019ac <MFXSTM32L152_IO_SetIrqEvtMode>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f870 	bl	80019e0 <MFXSTM32L152_IO_SetIrqTypeMode>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4413      	add	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f91a 	bl	8001b48 <MFXSTM32L152_IO_EnablePinIT>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4413      	add	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
    break;
 800191c:	e021      	b.n	8001962 <MFXSTM32L152_IO_Init+0x2ba>
  case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2200      	movs	r2, #0
 8001924:	4619      	mov	r1, r3
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f840 	bl	80019ac <MFXSTM32L152_IO_SetIrqEvtMode>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4413      	add	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f84f 	bl	80019e0 <MFXSTM32L152_IO_SetIrqTypeMode>
 8001942:	4602      	mov	r2, r0
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f8f9 	bl	8001b48 <MFXSTM32L152_IO_EnablePinIT>
 8001956:	4602      	mov	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
    break;
 800195e:	e000      	b.n	8001962 <MFXSTM32L152_IO_Init+0x2ba>
  default:
    break;
 8001960:	bf00      	nop
  }

  if(ret != MFXSTM32L152_OK)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <MFXSTM32L152_IO_Init+0x2c6>
  {
    ret = MFXSTM32L152_ERROR;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <MFXSTM32L152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_InitPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Direction)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	4613      	mov	r3, r2
 8001984:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction) != MFXSTM32L152_OK)
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	2160      	movs	r1, #96	; 0x60
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f9df 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <MFXSTM32L152_IO_InitPin+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80019a2:	697b      	ldr	r3, [r7, #20]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <MFXSTM32L152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqEvtMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Evt)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	4613      	mov	r3, r2
 80019b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt) != MFXSTM32L152_OK)
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	214c      	movs	r1, #76	; 0x4c
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 f9c5 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <MFXSTM32L152_IO_SetIrqEvtMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
 80019d4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80019d6:	697b      	ldr	r3, [r7, #20]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <MFXSTM32L152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqTypeMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Type)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	4613      	mov	r3, r2
 80019ec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type) != MFXSTM32L152_OK)
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	2150      	movs	r1, #80	; 0x50
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f9ab 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <MFXSTM32L152_IO_SetIrqTypeMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
 8001a08:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001a0a:	697b      	ldr	r3, [r7, #20]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <MFXSTM32L152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_WritePin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t PinState)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]

  /* Apply the bit value to the selected pin */
  if (PinState != 0U)
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00c      	beq.n	8001a46 <MFXSTM32L152_IO_WritePin+0x32>
  {
    /* Set the SET register */
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1) != MFXSTM32L152_OK)
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	216c      	movs	r1, #108	; 0x6c
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f98e 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00f      	beq.n	8001a5e <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e00b      	b.n	8001a5e <MFXSTM32L152_IO_WritePin+0x4a>
    }
  }
  else
  {
    /* Set the CLEAR register */
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1) != MFXSTM32L152_OK)
 8001a46:	2301      	movs	r3, #1
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	2170      	movs	r1, #112	; 0x70
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f981 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001a5e:	697b      	ldr	r3, [r7, #20]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <MFXSTM32L152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
int32_t MFXSTM32L152_IO_ReadPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint8_t tmpreg[3];
  uint32_t tmp;

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f103 0018 	add.w	r0, r3, #24
 8001a78:	f107 0208 	add.w	r2, r7, #8
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	2110      	movs	r1, #16
 8001a80:	f000 fa57 	bl	8001f32 <mfxstm32l152_read_reg>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <MFXSTM32L152_IO_ReadPin+0x28>
  {
    return MFXSTM32L152_ERROR;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	e02d      	b.n	8001aec <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f103 0018 	add.w	r0, r3, #24
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	2111      	movs	r1, #17
 8001aa0:	f000 fa47 	bl	8001f32 <mfxstm32l152_read_reg>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <MFXSTM32L152_IO_ReadPin+0x48>
  {
    return MFXSTM32L152_ERROR;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e01d      	b.n	8001aec <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f103 0018 	add.w	r0, r3, #24
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	1c9a      	adds	r2, r3, #2
 8001abc:	2301      	movs	r3, #1
 8001abe:	2112      	movs	r1, #18
 8001ac0:	f000 fa37 	bl	8001f32 <mfxstm32l152_read_reg>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <MFXSTM32L152_IO_ReadPin+0x68>
  {
    return MFXSTM32L152_ERROR;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e00d      	b.n	8001aec <MFXSTM32L152_IO_ReadPin+0x84>
  }
  tmp = ((uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16));
 8001ad0:	7a3b      	ldrb	r3, [r7, #8]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	7a7b      	ldrb	r3, [r7, #9]
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	441a      	add	r2, r3
 8001ada:	7abb      	ldrb	r3, [r7, #10]
 8001adc:	041b      	lsls	r3, r3, #16
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]

  return(int32_t)(tmp);
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <MFXSTM32L152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnableIT(MFXSTM32L152_Object_t *pObj)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Enable global IO IT source */
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8001b00:	2101      	movs	r1, #1
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fcbd 	bl	8001482 <MFXSTM32L152_EnableITSource>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <MFXSTM32L152_IO_EnableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b14:	68fb      	ldr	r3, [r7, #12]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <MFXSTM32L152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisableIT(MFXSTM32L152_Object_t *pObj)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Disable global IO IT source */
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fcd9 	bl	80014e4 <MFXSTM32L152_DisableITSource>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <MFXSTM32L152_IO_DisableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <MFXSTM32L152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1) != MFXSTM32L152_OK)
 8001b56:	2301      	movs	r3, #1
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	2148      	movs	r1, #72	; 0x48
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8f9 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <MFXSTM32L152_IO_EnablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <MFXSTM32L152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0) != MFXSTM32L152_OK)
 8001b86:	2300      	movs	r3, #0
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	2148      	movs	r1, #72	; 0x48
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f8e1 	bl	8001d54 <MFXSTM32L152_reg24_setPinValue>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <MFXSTM32L152_IO_DisablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <MFXSTM32L152_IO_ITStatus>:
  * @param  IO_Pin The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
int32_t MFXSTM32L152_IO_ITStatus(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  /* Get the Interrupt status */
  uint8_t tmpreg[3];
  uint32_t tmp;

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f103 0018 	add.w	r0, r3, #24
 8001bb8:	f107 0208 	add.w	r2, r7, #8
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	210c      	movs	r1, #12
 8001bc0:	f000 f9b7 	bl	8001f32 <mfxstm32l152_read_reg>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <MFXSTM32L152_IO_ITStatus+0x28>
  {
    return MFXSTM32L152_ERROR;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	e02d      	b.n	8001c2c <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f103 0018 	add.w	r0, r3, #24
 8001bd6:	f107 0308 	add.w	r3, r7, #8
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	2301      	movs	r3, #1
 8001bde:	210d      	movs	r1, #13
 8001be0:	f000 f9a7 	bl	8001f32 <mfxstm32l152_read_reg>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <MFXSTM32L152_IO_ITStatus+0x48>
  {
    return MFXSTM32L152_ERROR;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e01d      	b.n	8001c2c <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f103 0018 	add.w	r0, r3, #24
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	1c9a      	adds	r2, r3, #2
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	210e      	movs	r1, #14
 8001c00:	f000 f997 	bl	8001f32 <mfxstm32l152_read_reg>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <MFXSTM32L152_IO_ITStatus+0x68>
  {
    return MFXSTM32L152_ERROR;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e00d      	b.n	8001c2c <MFXSTM32L152_IO_ITStatus+0x84>
  }

  tmp = (uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16);
 8001c10:	7a3b      	ldrb	r3, [r7, #8]
 8001c12:	461a      	mov	r2, r3
 8001c14:	7a7b      	ldrb	r3, [r7, #9]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	441a      	add	r2, r3
 8001c1a:	7abb      	ldrb	r3, [r7, #10]
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4013      	ands	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]

  return(int32_t)tmp;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <MFXSTM32L152_IO_ClearIT>:
  * @param  IO_Pin the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_ClearIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = (uint8_t)(IO_Pin & 0x0000ffU);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = (uint8_t)(IO_Pin >> 8);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
 8001c4c:	7bbb      	ldrb	r3, [r7, #14]
 8001c4e:	73bb      	strb	r3, [r7, #14]
  pin_16_23 = (uint8_t)(IO_Pin >> 16);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	0c1b      	lsrs	r3, r3, #16
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	737b      	strb	r3, [r7, #13]

  if (pin_0_7 != 0U)
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00e      	beq.n	8001c7c <MFXSTM32L152_IO_ClearIT+0x48>
  {
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, &pin_0_7, 1) != MFXSTM32L152_OK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f103 0018 	add.w	r0, r3, #24
 8001c64:	f107 020f 	add.w	r2, r7, #15
 8001c68:	2301      	movs	r3, #1
 8001c6a:	2154      	movs	r1, #84	; 0x54
 8001c6c:	f000 f978 	bl	8001f60 <mfxstm32l152_write_reg>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <MFXSTM32L152_IO_ClearIT+0x48>
    {
      return MFXSTM32L152_ERROR;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e024      	b.n	8001cc6 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_8_15 != 0U)
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00e      	beq.n	8001ca0 <MFXSTM32L152_IO_ClearIT+0x6c>
  {
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, &pin_8_15, 1) != MFXSTM32L152_OK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f103 0018 	add.w	r0, r3, #24
 8001c88:	f107 020e 	add.w	r2, r7, #14
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	2155      	movs	r1, #85	; 0x55
 8001c90:	f000 f966 	bl	8001f60 <mfxstm32l152_write_reg>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <MFXSTM32L152_IO_ClearIT+0x6c>
    {
      return MFXSTM32L152_ERROR;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	e012      	b.n	8001cc6 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_16_23 != 0U)
 8001ca0:	7b7b      	ldrb	r3, [r7, #13]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00e      	beq.n	8001cc4 <MFXSTM32L152_IO_ClearIT+0x90>
  {
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, &pin_16_23, 1) != MFXSTM32L152_OK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 0018 	add.w	r0, r3, #24
 8001cac:	f107 020d 	add.w	r2, r7, #13
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	2156      	movs	r1, #86	; 0x56
 8001cb4:	f000 f954 	bl	8001f60 <mfxstm32l152_write_reg>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <MFXSTM32L152_IO_ClearIT+0x90>
    {
      return MFXSTM32L152_ERROR;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e000      	b.n	8001cc6 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }

  return MFXSTM32L152_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <MFXSTM32L152_RegisterBusIO>:
  * @brief  Register Bus Io to component
  * @param  Component object pointer
  * @retval Component status
  */
int32_t MFXSTM32L152_RegisterBusIO (MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_t *pIO)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d103      	bne.n	8001ce8 <MFXSTM32L152_RegisterBusIO+0x18>
  {
    ret = MFXSTM32L152_ERROR;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e02c      	b.n	8001d42 <MFXSTM32L152_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	891a      	ldrh	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = MFXSTM32L152_ReadRegWrap;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <MFXSTM32L152_RegisterBusIO+0x7c>)
 8001d1c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = MFXSTM32L152_WriteRegWrap;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <MFXSTM32L152_RegisterBusIO+0x80>)
 8001d22:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <MFXSTM32L152_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4798      	blx	r3
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	e002      	b.n	8001d42 <MFXSTM32L152_RegisterBusIO+0x72>
    }
    else
    {
      ret = MFXSTM32L152_ERROR;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	08001ecf 	.word	0x08001ecf
 8001d50:	08001f01 	.word	0x08001f01

08001d54 <MFXSTM32L152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval Component status
  */
static int32_t MFXSTM32L152_reg24_setPinValue(MFXSTM32L152_Object_t *pObj, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	460b      	mov	r3, r1
 8001d62:	72fb      	strb	r3, [r7, #11]
 8001d64:	4613      	mov	r3, r2
 8001d66:	72bb      	strb	r3, [r7, #10]
  int32_t ret = MFXSTM32L152_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  uint8_t tmp;
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = (uint8_t)(PinPosition & 0x0000ffU);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	74fb      	strb	r3, [r7, #19]
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	74bb      	strb	r3, [r7, #18]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
  pin_16_23 = (uint8_t)(PinPosition >> 16);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	747b      	strb	r3, [r7, #17]

  if (pin_0_7 != 0U)
 8001d7c:	7cfb      	ldrb	r3, [r7, #19]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d02e      	beq.n	8001de0 <MFXSTM32L152_reg24_setPinValue+0x8c>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f103 0018 	add.w	r0, r3, #24
 8001d88:	7afb      	ldrb	r3, [r7, #11]
 8001d8a:	b299      	uxth	r1, r3
 8001d8c:	f107 0210 	add.w	r2, r7, #16
 8001d90:	2301      	movs	r3, #1
 8001d92:	f000 f8ce 	bl	8001f32 <mfxstm32l152_read_reg>
 8001d96:	4602      	mov	r2, r0
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8001d9e:	7abb      	ldrb	r3, [r7, #10]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <MFXSTM32L152_reg24_setPinValue+0x5c>
    {
      tmp |= (uint8_t)pin_0_7;
 8001da4:	7c3a      	ldrb	r2, [r7, #16]
 8001da6:	7cfb      	ldrb	r3, [r7, #19]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	743b      	strb	r3, [r7, #16]
 8001dae:	e009      	b.n	8001dc4 <MFXSTM32L152_reg24_setPinValue+0x70>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8001db0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	b25a      	sxtb	r2, r3
 8001db8:	7c3b      	ldrb	r3, [r7, #16]
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	b25b      	sxtb	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f103 0018 	add.w	r0, r3, #24
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	b299      	uxth	r1, r3
 8001dce:	f107 0210 	add.w	r2, r7, #16
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f000 f8c4 	bl	8001f60 <mfxstm32l152_write_reg>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	4413      	add	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
  }

  if (pin_8_15 != 0U)
 8001de0:	7cbb      	ldrb	r3, [r7, #18]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d032      	beq.n	8001e4c <MFXSTM32L152_reg24_setPinValue+0xf8>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+1U), &tmp, 1);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f103 0018 	add.w	r0, r3, #24
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	b299      	uxth	r1, r3
 8001df4:	f107 0210 	add.w	r2, r7, #16
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f000 f89a 	bl	8001f32 <mfxstm32l152_read_reg>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	4413      	add	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8001e06:	7abb      	ldrb	r3, [r7, #10]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <MFXSTM32L152_reg24_setPinValue+0xc4>
    {
      tmp |= (uint8_t)pin_8_15;
 8001e0c:	7c3a      	ldrb	r2, [r7, #16]
 8001e0e:	7cbb      	ldrb	r3, [r7, #18]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	743b      	strb	r3, [r7, #16]
 8001e16:	e009      	b.n	8001e2c <MFXSTM32L152_reg24_setPinValue+0xd8>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001e18:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	b25a      	sxtb	r2, r3
 8001e20:	7c3b      	ldrb	r3, [r7, #16]
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	4013      	ands	r3, r2
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+1U), &tmp, 1);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f103 0018 	add.w	r0, r3, #24
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	b299      	uxth	r1, r3
 8001e3a:	f107 0210 	add.w	r2, r7, #16
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f000 f88e 	bl	8001f60 <mfxstm32l152_write_reg>
 8001e44:	4602      	mov	r2, r0
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	4413      	add	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
  }

  if (pin_16_23 != 0U)
 8001e4c:	7c7b      	ldrb	r3, [r7, #17]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d032      	beq.n	8001eb8 <MFXSTM32L152_reg24_setPinValue+0x164>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+2U), &tmp, 1);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f103 0018 	add.w	r0, r3, #24
 8001e58:	7afb      	ldrb	r3, [r7, #11]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	b299      	uxth	r1, r3
 8001e60:	f107 0210 	add.w	r2, r7, #16
 8001e64:	2301      	movs	r3, #1
 8001e66:	f000 f864 	bl	8001f32 <mfxstm32l152_read_reg>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	4413      	add	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8001e72:	7abb      	ldrb	r3, [r7, #10]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <MFXSTM32L152_reg24_setPinValue+0x130>
    {
      tmp |= (uint8_t)pin_16_23;
 8001e78:	7c3a      	ldrb	r2, [r7, #16]
 8001e7a:	7c7b      	ldrb	r3, [r7, #17]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	743b      	strb	r3, [r7, #16]
 8001e82:	e009      	b.n	8001e98 <MFXSTM32L152_reg24_setPinValue+0x144>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001e84:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	b25a      	sxtb	r2, r3
 8001e8c:	7c3b      	ldrb	r3, [r7, #16]
 8001e8e:	b25b      	sxtb	r3, r3
 8001e90:	4013      	ands	r3, r2
 8001e92:	b25b      	sxtb	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+2U), &tmp, 1);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f103 0018 	add.w	r0, r3, #24
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	f107 0210 	add.w	r2, r7, #16
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f000 f858 	bl	8001f60 <mfxstm32l152_write_reg>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
  }

  if(ret != MFXSTM32L152_OK)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <MFXSTM32L152_reg24_setPinValue+0x170>
  {
    ret = MFXSTM32L152_ERROR;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001ec4:	697b      	ldr	r3, [r7, #20]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <MFXSTM32L152_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001ece:	b590      	push	{r4, r7, lr}
 8001ed0:	b087      	sub	sp, #28
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	460b      	mov	r3, r1
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	691c      	ldr	r4, [r3, #16]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	8918      	ldrh	r0, [r3, #8]
 8001eee:	893b      	ldrh	r3, [r7, #8]
 8001ef0:	8979      	ldrh	r1, [r7, #10]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	47a0      	blx	r4
 8001ef6:	4603      	mov	r3, r0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd90      	pop	{r4, r7, pc}

08001f00 <MFXSTM32L152_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	817b      	strh	r3, [r7, #10]
 8001f10:	4613      	mov	r3, r2
 8001f12:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	68dc      	ldr	r4, [r3, #12]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	8918      	ldrh	r0, [r3, #8]
 8001f20:	893b      	ldrh	r3, [r7, #8]
 8001f22:	8979      	ldrh	r1, [r7, #10]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	47a0      	blx	r4
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd90      	pop	{r4, r7, pc}

08001f32 <mfxstm32l152_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t mfxstm32l152_read_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t* data, uint16_t length)
{
 8001f32:	b590      	push	{r4, r7, lr}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
 8001f42:	4613      	mov	r3, r2
 8001f44:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	685c      	ldr	r4, [r3, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6898      	ldr	r0, [r3, #8]
 8001f4e:	893b      	ldrh	r3, [r7, #8]
 8001f50:	8979      	ldrh	r1, [r7, #10]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	47a0      	blx	r4
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd90      	pop	{r4, r7, pc}

08001f60 <mfxstm32l152_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t mfxstm32l152_write_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t* data, uint16_t length)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	817b      	strh	r3, [r7, #10]
 8001f70:	4613      	mov	r3, r2
 8001f72:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681c      	ldr	r4, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6898      	ldr	r0, [r3, #8]
 8001f7c:	893b      	ldrh	r3, [r7, #8]
 8001f7e:	8979      	ldrh	r1, [r7, #10]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	47a0      	blx	r4
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}
	...

08001f90 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d103      	bne.n	8001fa8 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	e02c      	b.n	8002002 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	891a      	ldrh	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0c      	ldr	r2, [pc, #48]	; (800200c <OV5640_RegisterBusIO+0x7c>)
 8001fdc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <OV5640_RegisterBusIO+0x80>)
 8001fe2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4798      	blx	r3
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	e002      	b.n	8002002 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	08003813 	.word	0x08003813
 8002010:	08003845 	.word	0x08003845

08002014 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800202a:	2b00      	cmp	r3, #0
 800202c:	d165      	bne.n	80020fa <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b04      	cmp	r3, #4
 8002032:	d80e      	bhi.n	8002052 <OV5640_Init+0x3e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00f      	beq.n	800205a <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d00c      	beq.n	800205a <OV5640_Init+0x46>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d009      	beq.n	800205a <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b07      	cmp	r3, #7
 800204a:	d006      	beq.n	800205a <OV5640_Init+0x46>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b08      	cmp	r3, #8
 8002050:	d003      	beq.n	800205a <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	e04f      	b.n	80020fa <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e01f      	b.n	80020a0 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002066:	d018      	beq.n	800209a <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <OV5640_Init+0xf0>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	885b      	ldrh	r3, [r3, #2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f103 0018 	add.w	r0, r3, #24
 800207c:	4a21      	ldr	r2, [pc, #132]	; (8002104 <OV5640_Init+0xf0>)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002084:	f107 0217 	add.w	r2, r7, #23
 8002088:	2301      	movs	r3, #1
 800208a:	f001 fc0b 	bl	80038a4 <ov5640_write_reg>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
 8002098:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2bfd      	cmp	r3, #253	; 0xfd
 80020a4:	d9dc      	bls.n	8002060 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d126      	bne.n	80020fa <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f9e0 	bl	8002474 <OV5640_SetResolution>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	e01b      	b.n	80020fa <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f833 	bl	8002130 <OV5640_SetPixelFormat>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	e010      	b.n	80020fa <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 80020d8:	2300      	movs	r3, #0
 80020da:	2201      	movs	r2, #1
 80020dc:	2101      	movs	r1, #1
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fb64 	bl	80027ac <OV5640_SetPolarities>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e003      	b.n	80020fa <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 80020fa:	69bb      	ldr	r3, [r7, #24]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	08011278 	.word	0x08011278

08002108 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002116:	2b01      	cmp	r3, #1
 8002118:	d103      	bne.n	8002122 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00f      	beq.n	8002164 <OV5640_SetPixelFormat+0x34>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d00c      	beq.n	8002164 <OV5640_SetPixelFormat+0x34>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d009      	beq.n	8002164 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b07      	cmp	r3, #7
 8002154:	d006      	beq.n	8002164 <OV5640_SetPixelFormat+0x34>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b08      	cmp	r3, #8
 800215a:	d003      	beq.n	8002164 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e16a      	b.n	800243a <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	3b01      	subs	r3, #1
 8002168:	2b07      	cmp	r3, #7
 800216a:	f200 80c3 	bhi.w	80022f4 <OV5640_SetPixelFormat+0x1c4>
 800216e:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <OV5640_SetPixelFormat+0x44>)
 8002170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002174:	080021ed 	.word	0x080021ed
 8002178:	08002195 	.word	0x08002195
 800217c:	080022f5 	.word	0x080022f5
 8002180:	080022f5 	.word	0x080022f5
 8002184:	080022f5 	.word	0x080022f5
 8002188:	080022f5 	.word	0x080022f5
 800218c:	08002245 	.word	0x08002245
 8002190:	0800229d 	.word	0x0800229d
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	e024      	b.n	80021e4 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d01d      	beq.n	80021de <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80021a2:	4aa8      	ldr	r2, [pc, #672]	; (8002444 <OV5640_SetPixelFormat+0x314>)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	885b      	ldrh	r3, [r3, #2]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f103 0018 	add.w	r0, r3, #24
 80021b6:	4aa3      	ldr	r2, [pc, #652]	; (8002444 <OV5640_SetPixelFormat+0x314>)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021be:	f107 020f 	add.w	r2, r7, #15
 80021c2:	2301      	movs	r3, #1
 80021c4:	f001 fb6e 	bl	80038a4 <ov5640_write_reg>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	e003      	b.n	80021de <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80021d6:	2101      	movs	r1, #1
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f001 fb00 	bl	80037de <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	3301      	adds	r3, #1
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d9d7      	bls.n	800219a <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 80021ea:	e0af      	b.n	800234c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	e024      	b.n	800223c <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d01d      	beq.n	8002236 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80021fa:	4a93      	ldr	r2, [pc, #588]	; (8002448 <OV5640_SetPixelFormat+0x318>)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	885b      	ldrh	r3, [r3, #2]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f103 0018 	add.w	r0, r3, #24
 800220e:	4a8e      	ldr	r2, [pc, #568]	; (8002448 <OV5640_SetPixelFormat+0x318>)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002216:	f107 020f 	add.w	r2, r7, #15
 800221a:	2301      	movs	r3, #1
 800221c:	f001 fb42 	bl	80038a4 <ov5640_write_reg>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e003      	b.n	8002236 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800222e:	2101      	movs	r1, #1
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f001 fad4 	bl	80037de <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	3301      	adds	r3, #1
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d9d7      	bls.n	80021f2 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8002242:	e083      	b.n	800234c <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	e024      	b.n	8002294 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d01d      	beq.n	800228e <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8002252:	4a7e      	ldr	r2, [pc, #504]	; (800244c <OV5640_SetPixelFormat+0x31c>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	885b      	ldrh	r3, [r3, #2]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f103 0018 	add.w	r0, r3, #24
 8002266:	4a79      	ldr	r2, [pc, #484]	; (800244c <OV5640_SetPixelFormat+0x31c>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800226e:	f107 020f 	add.w	r2, r7, #15
 8002272:	2301      	movs	r3, #1
 8002274:	f001 fb16 	bl	80038a4 <ov5640_write_reg>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	e003      	b.n	800228e <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002286:	2101      	movs	r1, #1
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f001 faa8 	bl	80037de <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	3301      	adds	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d9d7      	bls.n	800224a <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 800229a:	e057      	b.n	800234c <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e024      	b.n	80022ec <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d01d      	beq.n	80022e6 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80022aa:	4a69      	ldr	r2, [pc, #420]	; (8002450 <OV5640_SetPixelFormat+0x320>)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	885b      	ldrh	r3, [r3, #2]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f103 0018 	add.w	r0, r3, #24
 80022be:	4a64      	ldr	r2, [pc, #400]	; (8002450 <OV5640_SetPixelFormat+0x320>)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80022c6:	f107 020f 	add.w	r2, r7, #15
 80022ca:	2301      	movs	r3, #1
 80022cc:	f001 faea 	bl	80038a4 <ov5640_write_reg>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e003      	b.n	80022e6 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80022de:	2101      	movs	r1, #1
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f001 fa7c 	bl	80037de <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	3301      	adds	r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d9d7      	bls.n	80022a2 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 80022f2:	e02b      	b.n	800234c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e024      	b.n	8002344 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d01d      	beq.n	800233e <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8002302:	4a54      	ldr	r2, [pc, #336]	; (8002454 <OV5640_SetPixelFormat+0x324>)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	885b      	ldrh	r3, [r3, #2]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f103 0018 	add.w	r0, r3, #24
 8002316:	4a4f      	ldr	r2, [pc, #316]	; (8002454 <OV5640_SetPixelFormat+0x324>)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800231e:	f107 020f 	add.w	r2, r7, #15
 8002322:	2301      	movs	r3, #1
 8002324:	f001 fabe 	bl	80038a4 <ov5640_write_reg>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e003      	b.n	800233e <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002336:	2101      	movs	r1, #1
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f001 fa50 	bl	80037de <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	3301      	adds	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d9d7      	bls.n	80022fa <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 800234a:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b08      	cmp	r3, #8
 8002350:	d173      	bne.n	800243a <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f103 0018 	add.w	r0, r3, #24
 8002358:	f107 020f 	add.w	r2, r7, #15
 800235c:	2301      	movs	r3, #1
 800235e:	f643 0121 	movw	r1, #14369	; 0x3821
 8002362:	f001 fa88 	bl	8003876 <ov5640_read_reg>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 800236c:	f04f 33ff 	mov.w	r3, #4294967295
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e062      	b.n	800243a <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	f043 0320 	orr.w	r3, r3, #32
 800237a:	b2db      	uxtb	r3, r3
 800237c:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f103 0018 	add.w	r0, r3, #24
 8002384:	f107 020f 	add.w	r2, r7, #15
 8002388:	2301      	movs	r3, #1
 800238a:	f643 0121 	movw	r1, #14369	; 0x3821
 800238e:	f001 fa89 	bl	80038a4 <ov5640_write_reg>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e04c      	b.n	800243a <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 0018 	add.w	r0, r3, #24
 80023a6:	f107 020f 	add.w	r2, r7, #15
 80023aa:	2301      	movs	r3, #1
 80023ac:	f243 0102 	movw	r1, #12290	; 0x3002
 80023b0:	f001 fa61 	bl	8003876 <ov5640_read_reg>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e03b      	b.n	800243a <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	f023 031c 	bic.w	r3, r3, #28
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f103 0018 	add.w	r0, r3, #24
 80023d2:	f107 020f 	add.w	r2, r7, #15
 80023d6:	2301      	movs	r3, #1
 80023d8:	f243 0102 	movw	r1, #12290	; 0x3002
 80023dc:	f001 fa62 	bl	80038a4 <ov5640_write_reg>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e025      	b.n	800243a <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f103 0018 	add.w	r0, r3, #24
 80023f4:	f107 020f 	add.w	r2, r7, #15
 80023f8:	2301      	movs	r3, #1
 80023fa:	f243 0106 	movw	r1, #12294	; 0x3006
 80023fe:	f001 fa3a 	bl	8003876 <ov5640_read_reg>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e014      	b.n	800243a <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002416:	b2db      	uxtb	r3, r3
 8002418:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 0018 	add.w	r0, r3, #24
 8002420:	f107 020f 	add.w	r2, r7, #15
 8002424:	2301      	movs	r3, #1
 8002426:	f243 0106 	movw	r1, #12294	; 0x3006
 800242a:	f001 fa3b 	bl	80038a4 <ov5640_write_reg>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
 8002438:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800243a:	697b      	ldr	r3, [r7, #20]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	08011670 	.word	0x08011670
 8002448:	08011678 	.word	0x08011678
 800244c:	08011680 	.word	0x08011680
 8002450:	08011688 	.word	0x08011688
 8002454:	08011690 	.word	0x08011690

08002458 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d903      	bls.n	8002490 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e0d8      	b.n	8002642 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b04      	cmp	r3, #4
 8002494:	f200 80d1 	bhi.w	800263a <OV5640_SetResolution+0x1c6>
 8002498:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <OV5640_SetResolution+0x2c>)
 800249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249e:	bf00      	nop
 80024a0:	080024b5 	.word	0x080024b5
 80024a4:	08002503 	.word	0x08002503
 80024a8:	08002551 	.word	0x08002551
 80024ac:	0800259f 	.word	0x0800259f
 80024b0:	080025ed 	.word	0x080025ed
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	e01f      	b.n	80024fa <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d018      	beq.n	80024f4 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80024c2:	4a62      	ldr	r2, [pc, #392]	; (800264c <OV5640_SetResolution+0x1d8>)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	885b      	ldrh	r3, [r3, #2]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 0018 	add.w	r0, r3, #24
 80024d6:	4a5d      	ldr	r2, [pc, #372]	; (800264c <OV5640_SetResolution+0x1d8>)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80024de:	f107 020f 	add.w	r2, r7, #15
 80024e2:	2301      	movs	r3, #1
 80024e4:	f001 f9de 	bl	80038a4 <ov5640_write_reg>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
 80024f2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	3301      	adds	r3, #1
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d9dc      	bls.n	80024ba <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8002500:	e09f      	b.n	8002642 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	e01f      	b.n	8002548 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d018      	beq.n	8002542 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8002510:	4a4f      	ldr	r2, [pc, #316]	; (8002650 <OV5640_SetResolution+0x1dc>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	885b      	ldrh	r3, [r3, #2]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f103 0018 	add.w	r0, r3, #24
 8002524:	4a4a      	ldr	r2, [pc, #296]	; (8002650 <OV5640_SetResolution+0x1dc>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800252c:	f107 020f 	add.w	r2, r7, #15
 8002530:	2301      	movs	r3, #1
 8002532:	f001 f9b7 	bl	80038a4 <ov5640_write_reg>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	3301      	adds	r3, #1
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d9dc      	bls.n	8002508 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 800254e:	e078      	b.n	8002642 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e01f      	b.n	8002596 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d018      	beq.n	8002590 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 800255e:	4a3d      	ldr	r2, [pc, #244]	; (8002654 <OV5640_SetResolution+0x1e0>)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	885b      	ldrh	r3, [r3, #2]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f103 0018 	add.w	r0, r3, #24
 8002572:	4a38      	ldr	r2, [pc, #224]	; (8002654 <OV5640_SetResolution+0x1e0>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800257a:	f107 020f 	add.w	r2, r7, #15
 800257e:	2301      	movs	r3, #1
 8002580:	f001 f990 	bl	80038a4 <ov5640_write_reg>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	3301      	adds	r3, #1
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d9dc      	bls.n	8002556 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 800259c:	e051      	b.n	8002642 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e01f      	b.n	80025e4 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d018      	beq.n	80025de <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80025ac:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <OV5640_SetResolution+0x1e4>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	885b      	ldrh	r3, [r3, #2]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f103 0018 	add.w	r0, r3, #24
 80025c0:	4a25      	ldr	r2, [pc, #148]	; (8002658 <OV5640_SetResolution+0x1e4>)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80025c8:	f107 020f 	add.w	r2, r7, #15
 80025cc:	2301      	movs	r3, #1
 80025ce:	f001 f969 	bl	80038a4 <ov5640_write_reg>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
 80025dc:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	3301      	adds	r3, #1
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d9dc      	bls.n	80025a4 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 80025ea:	e02a      	b.n	8002642 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	e01f      	b.n	8002632 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d018      	beq.n	800262c <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <OV5640_SetResolution+0x1e8>)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	885b      	ldrh	r3, [r3, #2]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f103 0018 	add.w	r0, r3, #24
 800260e:	4a13      	ldr	r2, [pc, #76]	; (800265c <OV5640_SetResolution+0x1e8>)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002616:	f107 020f 	add.w	r2, r7, #15
 800261a:	2301      	movs	r3, #1
 800261c:	f001 f942 	bl	80038a4 <ov5640_write_reg>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	3301      	adds	r3, #1
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d9dc      	bls.n	80025f2 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8002638:	e003      	b.n	8002642 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	617b      	str	r3, [r7, #20]
        break;
 8002640:	bf00      	nop
    }
  }

  return ret;
 8002642:	697b      	ldr	r3, [r7, #20]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	08011698 	.word	0x08011698
 8002650:	080116a8 	.word	0x080116a8
 8002654:	080116b8 	.word	0x080116b8
 8002658:	080116c8 	.word	0x080116c8
 800265c:	080116d8 	.word	0x080116d8

08002660 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f103 0018 	add.w	r0, r3, #24
 8002670:	f107 020f 	add.w	r2, r7, #15
 8002674:	2301      	movs	r3, #1
 8002676:	f643 0108 	movw	r1, #14344	; 0x3808
 800267a:	f001 f8fc 	bl	8003876 <ov5640_read_reg>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e08a      	b.n	80027a2 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	b29b      	uxth	r3, r3
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f103 0018 	add.w	r0, r3, #24
 800269a:	f107 020f 	add.w	r2, r7, #15
 800269e:	2301      	movs	r3, #1
 80026a0:	f643 0109 	movw	r1, #14345	; 0x3809
 80026a4:	f001 f8e7 	bl	8003876 <ov5640_read_reg>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	e075      	b.n	80027a2 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	8a7b      	ldrh	r3, [r7, #18]
 80026bc:	4313      	orrs	r3, r2
 80026be:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f103 0018 	add.w	r0, r3, #24
 80026c6:	f107 020f 	add.w	r2, r7, #15
 80026ca:	2301      	movs	r3, #1
 80026cc:	f643 010a 	movw	r1, #14346	; 0x380a
 80026d0:	f001 f8d1 	bl	8003876 <ov5640_read_reg>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	e05f      	b.n	80027a2 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f103 0018 	add.w	r0, r3, #24
 80026f0:	f107 020f 	add.w	r2, r7, #15
 80026f4:	2301      	movs	r3, #1
 80026f6:	f643 010b 	movw	r1, #14347	; 0x380b
 80026fa:	f001 f8bc 	bl	8003876 <ov5640_read_reg>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e04a      	b.n	80027a2 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	b29a      	uxth	r2, r3
 8002710:	8a3b      	ldrh	r3, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8002716:	8a7b      	ldrh	r3, [r7, #18]
 8002718:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800271c:	d109      	bne.n	8002732 <OV5640_GetResolution+0xd2>
 800271e:	8a3b      	ldrh	r3, [r7, #16]
 8002720:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002724:	d105      	bne.n	8002732 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2204      	movs	r2, #4
 800272a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	e037      	b.n	80027a2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8002732:	8a7b      	ldrh	r3, [r7, #18]
 8002734:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8002738:	d109      	bne.n	800274e <OV5640_GetResolution+0xee>
 800273a:	8a3b      	ldrh	r3, [r7, #16]
 800273c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002740:	d105      	bne.n	800274e <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2203      	movs	r2, #3
 8002746:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e029      	b.n	80027a2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 800274e:	8a7b      	ldrh	r3, [r7, #18]
 8002750:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002754:	d109      	bne.n	800276a <OV5640_GetResolution+0x10a>
 8002756:	8a3b      	ldrh	r3, [r7, #16]
 8002758:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800275c:	d105      	bne.n	800276a <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2202      	movs	r2, #2
 8002762:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	e01b      	b.n	80027a2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 800276a:	8a7b      	ldrh	r3, [r7, #18]
 800276c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002770:	d108      	bne.n	8002784 <OV5640_GetResolution+0x124>
 8002772:	8a3b      	ldrh	r3, [r7, #16]
 8002774:	2bf0      	cmp	r3, #240	; 0xf0
 8002776:	d105      	bne.n	8002784 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e00e      	b.n	80027a2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8002784:	8a7b      	ldrh	r3, [r7, #18]
 8002786:	2ba0      	cmp	r3, #160	; 0xa0
 8002788:	d108      	bne.n	800279c <OV5640_GetResolution+0x13c>
 800278a:	8a3b      	ldrh	r3, [r7, #16]
 800278c:	2b78      	cmp	r3, #120	; 0x78
 800278e:	d105      	bne.n	800279c <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e002      	b.n	80027a2 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80027a2:	697b      	ldr	r3, [r7, #20]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d011      	beq.n	80027e8 <OV5640_SetPolarities+0x3c>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <OV5640_SetPolarities+0x24>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d10b      	bne.n	80027e8 <OV5640_SetPolarities+0x3c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <OV5640_SetPolarities+0x3c>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d006      	beq.n	80027f0 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 80027e8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e01e      	b.n	800282e <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	015b      	lsls	r3, r3, #5
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	b2da      	uxtb	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	4313      	orrs	r3, r2
 800280a:	b2db      	uxtb	r3, r3
 800280c:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f103 0018 	add.w	r0, r3, #24
 8002814:	f107 0213 	add.w	r2, r7, #19
 8002818:	2301      	movs	r3, #1
 800281a:	f244 7140 	movw	r1, #18240	; 0x4740
 800281e:	f001 f841 	bl	80038a4 <ov5640_write_reg>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
 800282c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800282e:	697b      	ldr	r3, [r7, #20]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f103 0018 	add.w	r0, r3, #24
 8002852:	f107 020b 	add.w	r2, r7, #11
 8002856:	2301      	movs	r3, #1
 8002858:	f243 0108 	movw	r1, #12296	; 0x3008
 800285c:	f001 f822 	bl	80038a4 <ov5640_write_reg>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e032      	b.n	80028d4 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 800286e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 ffb3 	bl	80037de <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f103 0018 	add.w	r0, r3, #24
 800287e:	f107 020b 	add.w	r2, r7, #11
 8002882:	2301      	movs	r3, #1
 8002884:	f243 010a 	movw	r1, #12298	; 0x300a
 8002888:	f000 fff5 	bl	8003876 <ov5640_read_reg>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e01c      	b.n	80028d4 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 800289a:	7afb      	ldrb	r3, [r7, #11]
 800289c:	021a      	lsls	r2, r3, #8
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f103 0018 	add.w	r0, r3, #24
 80028a8:	f107 020b 	add.w	r2, r7, #11
 80028ac:	2301      	movs	r3, #1
 80028ae:	f243 010b 	movw	r1, #12299	; 0x300b
 80028b2:	f000 ffe0 	bl	8003876 <ov5640_read_reg>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e007      	b.n	80028d4 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	7afa      	ldrb	r2, [r7, #11]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e01f      	b.n	8002936 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2201      	movs	r2, #1
 80028fa:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2201      	movs	r2, #1
 8002900:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2201      	movs	r2, #1
 8002912:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2201      	movs	r2, #1
 8002918:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2201      	movs	r2, #1
 800292a:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2201      	movs	r2, #1
 8002930:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002936:	68fb      	ldr	r3, [r7, #12]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f103 0018 	add.w	r0, r3, #24
 8002958:	f107 020f 	add.w	r2, r7, #15
 800295c:	2301      	movs	r3, #1
 800295e:	f243 4106 	movw	r1, #13318	; 0x3406
 8002962:	f000 ff9f 	bl	80038a4 <ov5640_write_reg>
 8002966:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 800296e:	2346      	movs	r3, #70	; 0x46
 8002970:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f103 0018 	add.w	r0, r3, #24
 8002978:	f107 020f 	add.w	r2, r7, #15
 800297c:	2301      	movs	r3, #1
 800297e:	f245 1190 	movw	r1, #20880	; 0x5190
 8002982:	f000 ff8f 	bl	80038a4 <ov5640_write_reg>
 8002986:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10c      	bne.n	80029a8 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 800298e:	23f8      	movs	r3, #248	; 0xf8
 8002990:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f103 0018 	add.w	r0, r3, #24
 8002998:	f107 020f 	add.w	r2, r7, #15
 800299c:	2301      	movs	r3, #1
 800299e:	f245 1191 	movw	r1, #20881	; 0x5191
 80029a2:	f000 ff7f 	bl	80038a4 <ov5640_write_reg>
 80029a6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 80029ae:	2304      	movs	r3, #4
 80029b0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f103 0018 	add.w	r0, r3, #24
 80029b8:	f107 020f 	add.w	r2, r7, #15
 80029bc:	2301      	movs	r3, #1
 80029be:	f245 1192 	movw	r1, #20882	; 0x5192
 80029c2:	f000 ff6f 	bl	80038a4 <ov5640_write_reg>
 80029c6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 80db 	bne.w	8002b86 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	2b07      	cmp	r3, #7
 80029d6:	f200 80af 	bhi.w	8002b38 <OV5640_SetLightMode+0x1f4>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <OV5640_SetLightMode+0x9c>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a01 	.word	0x08002a01
 80029e4:	08002a4f 	.word	0x08002a4f
 80029e8:	08002b39 	.word	0x08002b39
 80029ec:	08002aeb 	.word	0x08002aeb
 80029f0:	08002b39 	.word	0x08002b39
 80029f4:	08002b39 	.word	0x08002b39
 80029f8:	08002b39 	.word	0x08002b39
 80029fc:	08002a9d 	.word	0x08002a9d
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	e01f      	b.n	8002a46 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d018      	beq.n	8002a40 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8002a0e:	4a61      	ldr	r2, [pc, #388]	; (8002b94 <OV5640_SetLightMode+0x250>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	885b      	ldrh	r3, [r3, #2]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f103 0018 	add.w	r0, r3, #24
 8002a22:	4a5c      	ldr	r2, [pc, #368]	; (8002b94 <OV5640_SetLightMode+0x250>)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002a2a:	f107 020f 	add.w	r2, r7, #15
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f000 ff38 	bl	80038a4 <ov5640_write_reg>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	3301      	adds	r3, #1
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b06      	cmp	r3, #6
 8002a4a:	d9dc      	bls.n	8002a06 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8002a4c:	e09c      	b.n	8002b88 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e01f      	b.n	8002a94 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5a:	d018      	beq.n	8002a8e <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8002a5c:	4a4e      	ldr	r2, [pc, #312]	; (8002b98 <OV5640_SetLightMode+0x254>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	885b      	ldrh	r3, [r3, #2]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f103 0018 	add.w	r0, r3, #24
 8002a70:	4a49      	ldr	r2, [pc, #292]	; (8002b98 <OV5640_SetLightMode+0x254>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002a78:	f107 020f 	add.w	r2, r7, #15
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f000 ff11 	bl	80038a4 <ov5640_write_reg>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	3301      	adds	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d9dc      	bls.n	8002a54 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8002a9a:	e075      	b.n	8002b88 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e01f      	b.n	8002ae2 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d018      	beq.n	8002adc <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8002aaa:	4a3c      	ldr	r2, [pc, #240]	; (8002b9c <OV5640_SetLightMode+0x258>)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	885b      	ldrh	r3, [r3, #2]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f103 0018 	add.w	r0, r3, #24
 8002abe:	4a37      	ldr	r2, [pc, #220]	; (8002b9c <OV5640_SetLightMode+0x258>)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002ac6:	f107 020f 	add.w	r2, r7, #15
 8002aca:	2301      	movs	r3, #1
 8002acc:	f000 feea 	bl	80038a4 <ov5640_write_reg>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	d9dc      	bls.n	8002aa2 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8002ae8:	e04e      	b.n	8002b88 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	e01f      	b.n	8002b30 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d018      	beq.n	8002b2a <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8002af8:	4a29      	ldr	r2, [pc, #164]	; (8002ba0 <OV5640_SetLightMode+0x25c>)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	885b      	ldrh	r3, [r3, #2]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f103 0018 	add.w	r0, r3, #24
 8002b0c:	4a24      	ldr	r2, [pc, #144]	; (8002ba0 <OV5640_SetLightMode+0x25c>)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002b14:	f107 020f 	add.w	r2, r7, #15
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f000 fec3 	bl	80038a4 <ov5640_write_reg>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
 8002b28:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d9dc      	bls.n	8002af0 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8002b36:	e027      	b.n	8002b88 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	e01f      	b.n	8002b7e <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d018      	beq.n	8002b78 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <OV5640_SetLightMode+0x260>)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	885b      	ldrh	r3, [r3, #2]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f103 0018 	add.w	r0, r3, #24
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <OV5640_SetLightMode+0x260>)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002b62:	f107 020f 	add.w	r2, r7, #15
 8002b66:	2301      	movs	r3, #1
 8002b68:	f000 fe9c 	bl	80038a4 <ov5640_write_reg>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b06      	cmp	r3, #6
 8002b82:	d9dc      	bls.n	8002b3e <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8002b84:	e000      	b.n	8002b88 <OV5640_SetLightMode+0x244>
    }
  }
 8002b86:	bf00      	nop
  return ret;
 8002b88:	697b      	ldr	r3, [r7, #20]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	080116e8 	.word	0x080116e8
 8002b98:	08011704 	.word	0x08011704
 8002b9c:	08011720 	.word	0x08011720
 8002ba0:	0801173c 	.word	0x0801173c
 8002ba4:	08011758 	.word	0x08011758

08002ba8 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	2b1f      	cmp	r3, #31
 8002bb8:	f200 81c0 	bhi.w	8002f3c <OV5640_SetColorEffect+0x394>
 8002bbc:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <OV5640_SetColorEffect+0x1c>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002c45 	.word	0x08002c45
 8002bc8:	08002ccf 	.word	0x08002ccf
 8002bcc:	08002f3d 	.word	0x08002f3d
 8002bd0:	08002d59 	.word	0x08002d59
 8002bd4:	08002f3d 	.word	0x08002f3d
 8002bd8:	08002f3d 	.word	0x08002f3d
 8002bdc:	08002f3d 	.word	0x08002f3d
 8002be0:	08002de3 	.word	0x08002de3
 8002be4:	08002f3d 	.word	0x08002f3d
 8002be8:	08002f3d 	.word	0x08002f3d
 8002bec:	08002f3d 	.word	0x08002f3d
 8002bf0:	08002f3d 	.word	0x08002f3d
 8002bf4:	08002f3d 	.word	0x08002f3d
 8002bf8:	08002f3d 	.word	0x08002f3d
 8002bfc:	08002f3d 	.word	0x08002f3d
 8002c00:	08002e6d 	.word	0x08002e6d
 8002c04:	08002f3d 	.word	0x08002f3d
 8002c08:	08002f3d 	.word	0x08002f3d
 8002c0c:	08002f3d 	.word	0x08002f3d
 8002c10:	08002f3d 	.word	0x08002f3d
 8002c14:	08002f3d 	.word	0x08002f3d
 8002c18:	08002f3d 	.word	0x08002f3d
 8002c1c:	08002f3d 	.word	0x08002f3d
 8002c20:	08002f3d 	.word	0x08002f3d
 8002c24:	08002f3d 	.word	0x08002f3d
 8002c28:	08002f3d 	.word	0x08002f3d
 8002c2c:	08002f3d 	.word	0x08002f3d
 8002c30:	08002f3d 	.word	0x08002f3d
 8002c34:	08002f3d 	.word	0x08002f3d
 8002c38:	08002f3d 	.word	0x08002f3d
 8002c3c:	08002f3d 	.word	0x08002f3d
 8002c40:	08002ef5 	.word	0x08002ef5
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8002c44:	23ff      	movs	r3, #255	; 0xff
 8002c46:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f103 0018 	add.w	r0, r3, #24
 8002c4e:	f107 020b 	add.w	r2, r7, #11
 8002c52:	2301      	movs	r3, #1
 8002c54:	f245 0101 	movw	r1, #20481	; 0x5001
 8002c58:	f000 fe24 	bl	80038a4 <ov5640_write_reg>
 8002c5c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10c      	bne.n	8002c7e <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002c64:	2318      	movs	r3, #24
 8002c66:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f103 0018 	add.w	r0, r3, #24
 8002c6e:	f107 020b 	add.w	r2, r7, #11
 8002c72:	2301      	movs	r3, #1
 8002c74:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002c78:	f000 fe14 	bl	80038a4 <ov5640_write_reg>
 8002c7c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10c      	bne.n	8002c9e <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8002c84:	23a0      	movs	r3, #160	; 0xa0
 8002c86:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f103 0018 	add.w	r0, r3, #24
 8002c8e:	f107 020b 	add.w	r2, r7, #11
 8002c92:	2301      	movs	r3, #1
 8002c94:	f245 5183 	movw	r1, #21891	; 0x5583
 8002c98:	f000 fe04 	bl	80038a4 <ov5640_write_reg>
 8002c9c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10c      	bne.n	8002cbe <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8002ca4:	2340      	movs	r3, #64	; 0x40
 8002ca6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f103 0018 	add.w	r0, r3, #24
 8002cae:	f107 020b 	add.w	r2, r7, #11
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f245 5184 	movw	r1, #21892	; 0x5584
 8002cb8:	f000 fdf4 	bl	80038a4 <ov5640_write_reg>
 8002cbc:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 815f 	beq.w	8002f84 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002ccc:	e15a      	b.n	8002f84 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8002cce:	23ff      	movs	r3, #255	; 0xff
 8002cd0:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f103 0018 	add.w	r0, r3, #24
 8002cd8:	f107 020b 	add.w	r2, r7, #11
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f245 0101 	movw	r1, #20481	; 0x5001
 8002ce2:	f000 fddf 	bl	80038a4 <ov5640_write_reg>
 8002ce6:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8002cee:	2318      	movs	r3, #24
 8002cf0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f103 0018 	add.w	r0, r3, #24
 8002cf8:	f107 020b 	add.w	r2, r7, #11
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002d02:	f000 fdcf 	bl	80038a4 <ov5640_write_reg>
 8002d06:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10c      	bne.n	8002d28 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f103 0018 	add.w	r0, r3, #24
 8002d18:	f107 020b 	add.w	r2, r7, #11
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002d22:	f000 fdbf 	bl	80038a4 <ov5640_write_reg>
 8002d26:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8002d2e:	23c0      	movs	r3, #192	; 0xc0
 8002d30:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f103 0018 	add.w	r0, r3, #24
 8002d38:	f107 020b 	add.w	r2, r7, #11
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002d42:	f000 fdaf 	bl	80038a4 <ov5640_write_reg>
 8002d46:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 811c 	beq.w	8002f88 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
 8002d54:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002d56:	e117      	b.n	8002f88 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8002d58:	23ff      	movs	r3, #255	; 0xff
 8002d5a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f103 0018 	add.w	r0, r3, #24
 8002d62:	f107 020b 	add.w	r2, r7, #11
 8002d66:	2301      	movs	r3, #1
 8002d68:	f245 0101 	movw	r1, #20481	; 0x5001
 8002d6c:	f000 fd9a 	bl	80038a4 <ov5640_write_reg>
 8002d70:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10c      	bne.n	8002d92 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8002d78:	2318      	movs	r3, #24
 8002d7a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f103 0018 	add.w	r0, r3, #24
 8002d82:	f107 020b 	add.w	r2, r7, #11
 8002d86:	2301      	movs	r3, #1
 8002d88:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002d8c:	f000 fd8a 	bl	80038a4 <ov5640_write_reg>
 8002d90:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10c      	bne.n	8002db2 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8002d98:	2360      	movs	r3, #96	; 0x60
 8002d9a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f103 0018 	add.w	r0, r3, #24
 8002da2:	f107 020b 	add.w	r2, r7, #11
 8002da6:	2301      	movs	r3, #1
 8002da8:	f245 5183 	movw	r1, #21891	; 0x5583
 8002dac:	f000 fd7a 	bl	80038a4 <ov5640_write_reg>
 8002db0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10c      	bne.n	8002dd2 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8002db8:	2360      	movs	r3, #96	; 0x60
 8002dba:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f103 0018 	add.w	r0, r3, #24
 8002dc2:	f107 020b 	add.w	r2, r7, #11
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f245 5184 	movw	r1, #21892	; 0x5584
 8002dcc:	f000 fd6a 	bl	80038a4 <ov5640_write_reg>
 8002dd0:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80d9 	beq.w	8002f8c <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295
 8002dde:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002de0:	e0d4      	b.n	8002f8c <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8002de2:	23ff      	movs	r3, #255	; 0xff
 8002de4:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f103 0018 	add.w	r0, r3, #24
 8002dec:	f107 020b 	add.w	r2, r7, #11
 8002df0:	2301      	movs	r3, #1
 8002df2:	f245 0101 	movw	r1, #20481	; 0x5001
 8002df6:	f000 fd55 	bl	80038a4 <ov5640_write_reg>
 8002dfa:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10c      	bne.n	8002e1c <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8002e02:	2318      	movs	r3, #24
 8002e04:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f103 0018 	add.w	r0, r3, #24
 8002e0c:	f107 020b 	add.w	r2, r7, #11
 8002e10:	2301      	movs	r3, #1
 8002e12:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002e16:	f000 fd45 	bl	80038a4 <ov5640_write_reg>
 8002e1a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10c      	bne.n	8002e3c <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f103 0018 	add.w	r0, r3, #24
 8002e2c:	f107 020b 	add.w	r2, r7, #11
 8002e30:	2301      	movs	r3, #1
 8002e32:	f245 5183 	movw	r1, #21891	; 0x5583
 8002e36:	f000 fd35 	bl	80038a4 <ov5640_write_reg>
 8002e3a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f103 0018 	add.w	r0, r3, #24
 8002e4c:	f107 020b 	add.w	r2, r7, #11
 8002e50:	2301      	movs	r3, #1
 8002e52:	f245 5184 	movw	r1, #21892	; 0x5584
 8002e56:	f000 fd25 	bl	80038a4 <ov5640_write_reg>
 8002e5a:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8096 	beq.w	8002f90 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295
 8002e68:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002e6a:	e091      	b.n	8002f90 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8002e6c:	23ff      	movs	r3, #255	; 0xff
 8002e6e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f103 0018 	add.w	r0, r3, #24
 8002e76:	f107 020b 	add.w	r2, r7, #11
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002e80:	f000 fd10 	bl	80038a4 <ov5640_write_reg>
 8002e84:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10c      	bne.n	8002ea6 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8002e8c:	2318      	movs	r3, #24
 8002e8e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f103 0018 	add.w	r0, r3, #24
 8002e96:	f107 020b 	add.w	r2, r7, #11
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002ea0:	f000 fd00 	bl	80038a4 <ov5640_write_reg>
 8002ea4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10c      	bne.n	8002ec6 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8002eac:	2340      	movs	r3, #64	; 0x40
 8002eae:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f103 0018 	add.w	r0, r3, #24
 8002eb6:	f107 020b 	add.w	r2, r7, #11
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f245 5183 	movw	r1, #21891	; 0x5583
 8002ec0:	f000 fcf0 	bl	80038a4 <ov5640_write_reg>
 8002ec4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10c      	bne.n	8002ee6 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8002ecc:	23a0      	movs	r3, #160	; 0xa0
 8002ece:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f103 0018 	add.w	r0, r3, #24
 8002ed6:	f107 020b 	add.w	r2, r7, #11
 8002eda:	2301      	movs	r3, #1
 8002edc:	f245 5184 	movw	r1, #21892	; 0x5584
 8002ee0:	f000 fce0 	bl	80038a4 <ov5640_write_reg>
 8002ee4:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d053      	beq.n	8002f94 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002ef2:	e04f      	b.n	8002f94 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8002ef4:	23ff      	movs	r3, #255	; 0xff
 8002ef6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f103 0018 	add.w	r0, r3, #24
 8002efe:	f107 020b 	add.w	r2, r7, #11
 8002f02:	2301      	movs	r3, #1
 8002f04:	f245 0101 	movw	r1, #20481	; 0x5001
 8002f08:	f000 fccc 	bl	80038a4 <ov5640_write_reg>
 8002f0c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10c      	bne.n	8002f2e <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8002f14:	2340      	movs	r3, #64	; 0x40
 8002f16:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f103 0018 	add.w	r0, r3, #24
 8002f1e:	f107 020b 	add.w	r2, r7, #11
 8002f22:	2301      	movs	r3, #1
 8002f24:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002f28:	f000 fcbc 	bl	80038a4 <ov5640_write_reg>
 8002f2c:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d031      	beq.n	8002f98 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002f3a:	e02d      	b.n	8002f98 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8002f3c:	237f      	movs	r3, #127	; 0x7f
 8002f3e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f103 0018 	add.w	r0, r3, #24
 8002f46:	f107 020b 	add.w	r2, r7, #11
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002f50:	f000 fca8 	bl	80038a4 <ov5640_write_reg>
 8002f54:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10c      	bne.n	8002f76 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f103 0018 	add.w	r0, r3, #24
 8002f66:	f107 020b 	add.w	r2, r7, #11
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002f70:	f000 fc98 	bl	80038a4 <ov5640_write_reg>
 8002f74:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00f      	beq.n	8002f9c <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f80:	60fb      	str	r3, [r7, #12]
      }

      break;
 8002f82:	e00b      	b.n	8002f9c <OV5640_SetColorEffect+0x3f4>
      break;
 8002f84:	bf00      	nop
 8002f86:	e00a      	b.n	8002f9e <OV5640_SetColorEffect+0x3f6>
      break;
 8002f88:	bf00      	nop
 8002f8a:	e008      	b.n	8002f9e <OV5640_SetColorEffect+0x3f6>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e006      	b.n	8002f9e <OV5640_SetColorEffect+0x3f6>
      break;
 8002f90:	bf00      	nop
 8002f92:	e004      	b.n	8002f9e <OV5640_SetColorEffect+0x3f6>
      break;
 8002f94:	bf00      	nop
 8002f96:	e002      	b.n	8002f9e <OV5640_SetColorEffect+0x3f6>
      break;
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <OV5640_SetColorEffect+0x3f6>
      break;
 8002f9c:	bf00      	nop
  }

  return ret;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8002fb2:	4a34      	ldr	r2, [pc, #208]	; (8003084 <OV5640_SetBrightness+0xdc>)
 8002fb4:	f107 0310 	add.w	r3, r7, #16
 8002fb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fba:	c303      	stmia	r3!, {r0, r1}
 8002fbc:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002fbe:	23ff      	movs	r3, #255	; 0xff
 8002fc0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f103 0018 	add.w	r0, r3, #24
 8002fc8:	f107 020f 	add.w	r2, r7, #15
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f245 0101 	movw	r1, #20481	; 0x5001
 8002fd2:	f000 fc67 	bl	80038a4 <ov5640_write_reg>
 8002fd6:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d111      	bne.n	8003002 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	443b      	add	r3, r7
 8002fe6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002fea:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f103 0018 	add.w	r0, r3, #24
 8002ff2:	f107 020f 	add.w	r2, r7, #15
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f245 5187 	movw	r1, #21895	; 0x5587
 8002ffc:	f000 fc52 	bl	80038a4 <ov5640_write_reg>
 8003000:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10c      	bne.n	8003022 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8003008:	2304      	movs	r3, #4
 800300a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f103 0018 	add.w	r0, r3, #24
 8003012:	f107 020f 	add.w	r2, r7, #15
 8003016:	2301      	movs	r3, #1
 8003018:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800301c:	f000 fc42 	bl	80038a4 <ov5640_write_reg>
 8003020:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d127      	bne.n	8003078 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	da12      	bge.n	8003054 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f103 0018 	add.w	r0, r3, #24
 8003038:	f107 020f 	add.w	r2, r7, #15
 800303c:	2301      	movs	r3, #1
 800303e:	f245 5188 	movw	r1, #21896	; 0x5588
 8003042:	f000 fc2f 	bl	80038a4 <ov5640_write_reg>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d015      	beq.n	8003078 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e011      	b.n	8003078 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8003054:	2309      	movs	r3, #9
 8003056:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f103 0018 	add.w	r0, r3, #24
 800305e:	f107 020f 	add.w	r2, r7, #15
 8003062:	2301      	movs	r3, #1
 8003064:	f245 5188 	movw	r1, #21896	; 0x5588
 8003068:	f000 fc1c 	bl	80038a4 <ov5640_write_reg>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8003078:	69fb      	ldr	r3, [r7, #28]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	08011220 	.word	0x08011220

08003088 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8003092:	4a30      	ldr	r2, [pc, #192]	; (8003154 <OV5640_SetSaturation+0xcc>)
 8003094:	f107 0310 	add.w	r3, r7, #16
 8003098:	ca07      	ldmia	r2, {r0, r1, r2}
 800309a:	c303      	stmia	r3!, {r0, r1}
 800309c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800309e:	23ff      	movs	r3, #255	; 0xff
 80030a0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f103 0018 	add.w	r0, r3, #24
 80030a8:	f107 020f 	add.w	r2, r7, #15
 80030ac:	2301      	movs	r3, #1
 80030ae:	f245 0101 	movw	r1, #20481	; 0x5001
 80030b2:	f000 fbf7 	bl	80038a4 <ov5640_write_reg>
 80030b6:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d111      	bne.n	80030e2 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	3304      	adds	r3, #4
 80030c2:	3320      	adds	r3, #32
 80030c4:	443b      	add	r3, r7
 80030c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80030ca:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f103 0018 	add.w	r0, r3, #24
 80030d2:	f107 020f 	add.w	r2, r7, #15
 80030d6:	2301      	movs	r3, #1
 80030d8:	f245 5183 	movw	r1, #21891	; 0x5583
 80030dc:	f000 fbe2 	bl	80038a4 <ov5640_write_reg>
 80030e0:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f103 0018 	add.w	r0, r3, #24
 80030ee:	f107 020f 	add.w	r2, r7, #15
 80030f2:	2301      	movs	r3, #1
 80030f4:	f245 5184 	movw	r1, #21892	; 0x5584
 80030f8:	f000 fbd4 	bl	80038a4 <ov5640_write_reg>
 80030fc:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10c      	bne.n	800311e <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8003104:	2302      	movs	r3, #2
 8003106:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f103 0018 	add.w	r0, r3, #24
 800310e:	f107 020f 	add.w	r2, r7, #15
 8003112:	2301      	movs	r3, #1
 8003114:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8003118:	f000 fbc4 	bl	80038a4 <ov5640_write_reg>
 800311c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10c      	bne.n	800313e <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8003124:	2341      	movs	r3, #65	; 0x41
 8003126:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f103 0018 	add.w	r0, r3, #24
 800312e:	f107 020f 	add.w	r2, r7, #15
 8003132:	2301      	movs	r3, #1
 8003134:	f245 5188 	movw	r1, #21896	; 0x5588
 8003138:	f000 fbb4 	bl	80038a4 <ov5640_write_reg>
 800313c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
 8003148:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800314a:	69fb      	ldr	r3, [r7, #28]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	0801122c 	.word	0x0801122c

08003158 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8003162:	4a30      	ldr	r2, [pc, #192]	; (8003224 <OV5640_SetContrast+0xcc>)
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	ca07      	ldmia	r2, {r0, r1, r2}
 800316a:	c303      	stmia	r3!, {r0, r1}
 800316c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800316e:	23ff      	movs	r3, #255	; 0xff
 8003170:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f103 0018 	add.w	r0, r3, #24
 8003178:	f107 020f 	add.w	r2, r7, #15
 800317c:	2301      	movs	r3, #1
 800317e:	f245 0101 	movw	r1, #20481	; 0x5001
 8003182:	f000 fb8f 	bl	80038a4 <ov5640_write_reg>
 8003186:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 800318e:	2304      	movs	r3, #4
 8003190:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f103 0018 	add.w	r0, r3, #24
 8003198:	f107 020f 	add.w	r2, r7, #15
 800319c:	2301      	movs	r3, #1
 800319e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80031a2:	f000 fb7f 	bl	80038a4 <ov5640_write_reg>
 80031a6:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d111      	bne.n	80031d2 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	3304      	adds	r3, #4
 80031b2:	3320      	adds	r3, #32
 80031b4:	443b      	add	r3, r7
 80031b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80031ba:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f103 0018 	add.w	r0, r3, #24
 80031c2:	f107 020f 	add.w	r2, r7, #15
 80031c6:	2301      	movs	r3, #1
 80031c8:	f245 5186 	movw	r1, #21894	; 0x5586
 80031cc:	f000 fb6a 	bl	80038a4 <ov5640_write_reg>
 80031d0:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f103 0018 	add.w	r0, r3, #24
 80031de:	f107 020f 	add.w	r2, r7, #15
 80031e2:	2301      	movs	r3, #1
 80031e4:	f245 5185 	movw	r1, #21893	; 0x5585
 80031e8:	f000 fb5c 	bl	80038a4 <ov5640_write_reg>
 80031ec:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10c      	bne.n	800320e <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 80031f4:	2341      	movs	r3, #65	; 0x41
 80031f6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f103 0018 	add.w	r0, r3, #24
 80031fe:	f107 020f 	add.w	r2, r7, #15
 8003202:	2301      	movs	r3, #1
 8003204:	f245 5188 	movw	r1, #21896	; 0x5588
 8003208:	f000 fb4c 	bl	80038a4 <ov5640_write_reg>
 800320c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8003214:	f04f 33ff 	mov.w	r3, #4294967295
 8003218:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800321a:	69fb      	ldr	r3, [r7, #28]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3720      	adds	r7, #32
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	08011238 	.word	0x08011238

08003228 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08e      	sub	sp, #56	; 0x38
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8003232:	4a3c      	ldr	r2, [pc, #240]	; (8003324 <OV5640_SetHueDegree+0xfc>)
 8003234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003238:	ca07      	ldmia	r2, {r0, r1, r2}
 800323a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800323e:	4a3a      	ldr	r2, [pc, #232]	; (8003328 <OV5640_SetHueDegree+0x100>)
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	ca07      	ldmia	r2, {r0, r1, r2}
 8003246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800324a:	4a38      	ldr	r2, [pc, #224]	; (800332c <OV5640_SetHueDegree+0x104>)
 800324c:	f107 0310 	add.w	r3, r7, #16
 8003250:	ca07      	ldmia	r2, {r0, r1, r2}
 8003252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8003256:	23ff      	movs	r3, #255	; 0xff
 8003258:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f103 0018 	add.w	r0, r3, #24
 8003260:	f107 020f 	add.w	r2, r7, #15
 8003264:	2301      	movs	r3, #1
 8003266:	f245 0101 	movw	r1, #20481	; 0x5001
 800326a:	f000 fb1b 	bl	80038a4 <ov5640_write_reg>
 800326e:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10c      	bne.n	8003290 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f103 0018 	add.w	r0, r3, #24
 8003280:	f107 020f 	add.w	r2, r7, #15
 8003284:	2301      	movs	r3, #1
 8003286:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800328a:	f000 fb0b 	bl	80038a4 <ov5640_write_reg>
 800328e:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8003290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003292:	2b00      	cmp	r3, #0
 8003294:	d111      	bne.n	80032ba <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	3306      	adds	r3, #6
 800329a:	3338      	adds	r3, #56	; 0x38
 800329c:	443b      	add	r3, r7
 800329e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80032a2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f103 0018 	add.w	r0, r3, #24
 80032aa:	f107 020f 	add.w	r2, r7, #15
 80032ae:	2301      	movs	r3, #1
 80032b0:	f245 5181 	movw	r1, #21889	; 0x5581
 80032b4:	f000 faf6 	bl	80038a4 <ov5640_write_reg>
 80032b8:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d111      	bne.n	80032e4 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	3306      	adds	r3, #6
 80032c4:	3338      	adds	r3, #56	; 0x38
 80032c6:	443b      	add	r3, r7
 80032c8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80032cc:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f103 0018 	add.w	r0, r3, #24
 80032d4:	f107 020f 	add.w	r2, r7, #15
 80032d8:	2301      	movs	r3, #1
 80032da:	f245 5182 	movw	r1, #21890	; 0x5582
 80032de:	f000 fae1 	bl	80038a4 <ov5640_write_reg>
 80032e2:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80032e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d111      	bne.n	800330e <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3306      	adds	r3, #6
 80032ee:	3338      	adds	r3, #56	; 0x38
 80032f0:	443b      	add	r3, r7
 80032f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f103 0018 	add.w	r0, r3, #24
 80032fe:	f107 020f 	add.w	r2, r7, #15
 8003302:	2301      	movs	r3, #1
 8003304:	f245 5188 	movw	r1, #21896	; 0x5588
 8003308:	f000 facc 	bl	80038a4 <ov5640_write_reg>
 800330c:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 800330e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8003314:	f04f 33ff 	mov.w	r3, #4294967295
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 800331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800331c:	4618      	mov	r0, r3
 800331e:	3738      	adds	r7, #56	; 0x38
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	08011244 	.word	0x08011244
 8003328:	08011250 	.word	0x08011250
 800332c:	0801125c 	.word	0x0801125c

08003330 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f103 0018 	add.w	r0, r3, #24
 8003344:	f107 020b 	add.w	r2, r7, #11
 8003348:	2301      	movs	r3, #1
 800334a:	f643 0120 	movw	r1, #14368	; 0x3820
 800334e:	f000 fa92 	bl	8003876 <ov5640_read_reg>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8003358:	f04f 33ff 	mov.w	r3, #4294967295
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e0cb      	b.n	80034f8 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	f023 0306 	bic.w	r3, r3, #6
 8003366:	b2db      	uxtb	r3, r3
 8003368:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f103 0018 	add.w	r0, r3, #24
 8003370:	f107 020a 	add.w	r2, r7, #10
 8003374:	2301      	movs	r3, #1
 8003376:	f643 0121 	movw	r1, #14369	; 0x3821
 800337a:	f000 fa7c 	bl	8003876 <ov5640_read_reg>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	e0b5      	b.n	80034f8 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8003390:	7abb      	ldrb	r3, [r7, #10]
 8003392:	f023 0306 	bic.w	r3, r3, #6
 8003396:	b2db      	uxtb	r3, r3
 8003398:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d056      	beq.n	800344e <OV5640_MirrorFlipConfig+0x11e>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d87f      	bhi.n	80034a6 <OV5640_MirrorFlipConfig+0x176>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d029      	beq.n	8003400 <OV5640_MirrorFlipConfig+0xd0>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d179      	bne.n	80034a6 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f103 0018 	add.w	r0, r3, #24
 80033b8:	f107 020b 	add.w	r2, r7, #11
 80033bc:	2301      	movs	r3, #1
 80033be:	f643 0120 	movw	r1, #14368	; 0x3820
 80033c2:	f000 fa6f 	bl	80038a4 <ov5640_write_reg>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
 80033d0:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80033d2:	e08a      	b.n	80034ea <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 80033d4:	7abb      	ldrb	r3, [r7, #10]
 80033d6:	f043 0306 	orr.w	r3, r3, #6
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f103 0018 	add.w	r0, r3, #24
 80033e4:	f107 020a 	add.w	r2, r7, #10
 80033e8:	2301      	movs	r3, #1
 80033ea:	f643 0121 	movw	r1, #14369	; 0x3821
 80033ee:	f000 fa59 	bl	80038a4 <ov5640_write_reg>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d078      	beq.n	80034ea <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
 80033fc:	60fb      	str	r3, [r7, #12]
          break;
 80033fe:	e074      	b.n	80034ea <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	f043 0306 	orr.w	r3, r3, #6
 8003406:	b2db      	uxtb	r3, r3
 8003408:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f103 0018 	add.w	r0, r3, #24
 8003410:	f107 020b 	add.w	r2, r7, #11
 8003414:	2301      	movs	r3, #1
 8003416:	f643 0120 	movw	r1, #14368	; 0x3820
 800341a:	f000 fa43 	bl	80038a4 <ov5640_write_reg>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8003424:	f04f 33ff 	mov.w	r3, #4294967295
 8003428:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800342a:	e060      	b.n	80034ee <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f103 0018 	add.w	r0, r3, #24
 8003432:	f107 020a 	add.w	r2, r7, #10
 8003436:	2301      	movs	r3, #1
 8003438:	f643 0121 	movw	r1, #14369	; 0x3821
 800343c:	f000 fa32 	bl	80038a4 <ov5640_write_reg>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d053      	beq.n	80034ee <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
 800344a:	60fb      	str	r3, [r7, #12]
          break;
 800344c:	e04f      	b.n	80034ee <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 800344e:	7afb      	ldrb	r3, [r7, #11]
 8003450:	f043 0306 	orr.w	r3, r3, #6
 8003454:	b2db      	uxtb	r3, r3
 8003456:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f103 0018 	add.w	r0, r3, #24
 800345e:	f107 020b 	add.w	r2, r7, #11
 8003462:	2301      	movs	r3, #1
 8003464:	f643 0120 	movw	r1, #14368	; 0x3820
 8003468:	f000 fa1c 	bl	80038a4 <ov5640_write_reg>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8003478:	e03b      	b.n	80034f2 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 800347a:	7abb      	ldrb	r3, [r7, #10]
 800347c:	f043 0306 	orr.w	r3, r3, #6
 8003480:	b2db      	uxtb	r3, r3
 8003482:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f103 0018 	add.w	r0, r3, #24
 800348a:	f107 020a 	add.w	r2, r7, #10
 800348e:	2301      	movs	r3, #1
 8003490:	f643 0121 	movw	r1, #14369	; 0x3821
 8003494:	f000 fa06 	bl	80038a4 <ov5640_write_reg>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d029      	beq.n	80034f2 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
 80034a2:	60fb      	str	r3, [r7, #12]
          break;
 80034a4:	e025      	b.n	80034f2 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f103 0018 	add.w	r0, r3, #24
 80034ac:	f107 020b 	add.w	r2, r7, #11
 80034b0:	2301      	movs	r3, #1
 80034b2:	f643 0120 	movw	r1, #14368	; 0x3820
 80034b6:	f000 f9f5 	bl	80038a4 <ov5640_write_reg>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 80034c0:	f04f 33ff 	mov.w	r3, #4294967295
 80034c4:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80034c6:	e016      	b.n	80034f6 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f103 0018 	add.w	r0, r3, #24
 80034ce:	f107 020a 	add.w	r2, r7, #10
 80034d2:	2301      	movs	r3, #1
 80034d4:	f643 0121 	movw	r1, #14369	; 0x3821
 80034d8:	f000 f9e4 	bl	80038a4 <ov5640_write_reg>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	60fb      	str	r3, [r7, #12]
          break;
 80034e8:	e005      	b.n	80034f6 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 80034ea:	bf00      	nop
 80034ec:	e004      	b.n	80034f8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80034ee:	bf00      	nop
 80034f0:	e002      	b.n	80034f8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80034f2:	bf00      	nop
 80034f4:	e000      	b.n	80034f8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80034f6:	bf00      	nop
      }
    }
  }

  return ret;
 80034f8:	68fb      	ldr	r3, [r7, #12]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff f8a2 	bl	8002660 <OV5640_GetResolution>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e04e      	b.n	80035c8 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b44      	cmp	r3, #68	; 0x44
 8003532:	d112      	bne.n	800355a <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8003534:	2310      	movs	r3, #16
 8003536:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f103 0018 	add.w	r0, r3, #24
 800353e:	f107 020b 	add.w	r2, r7, #11
 8003542:	2301      	movs	r3, #1
 8003544:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8003548:	f000 f9ac 	bl	80038a4 <ov5640_write_reg>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d03a      	beq.n	80035c8 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8003552:	f04f 33ff 	mov.w	r3, #4294967295
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	e036      	b.n	80035c8 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d802      	bhi.n	8003566 <OV5640_ZoomConfig+0x64>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d103      	bne.n	800356c <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8003564:	e00a      	b.n	800357c <OV5640_ZoomConfig+0x7a>
      switch (res)
 8003566:	2b03      	cmp	r3, #3
 8003568:	d004      	beq.n	8003574 <OV5640_ZoomConfig+0x72>
          break;
 800356a:	e007      	b.n	800357c <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	613b      	str	r3, [r7, #16]
          break;
 8003572:	e003      	b.n	800357c <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	613b      	str	r3, [r7, #16]
          break;
 800357a:	bf00      	nop
      }

      tmp = 0x00;
 800357c:	2300      	movs	r3, #0
 800357e:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f103 0018 	add.w	r0, r3, #24
 8003586:	f107 020b 	add.w	r2, r7, #11
 800358a:	2301      	movs	r3, #1
 800358c:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8003590:	f000 f988 	bl	80038a4 <ov5640_write_reg>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 800359a:	f04f 33ff 	mov.w	r3, #4294967295
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	e012      	b.n	80035c8 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f103 0018 	add.w	r0, r3, #24
 80035ae:	f107 020b 	add.w	r2, r7, #11
 80035b2:	2301      	movs	r3, #1
 80035b4:	f245 6101 	movw	r1, #22017	; 0x5601
 80035b8:	f000 f974 	bl	80038a4 <ov5640_write_reg>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
 80035c6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80035c8:	697b      	ldr	r3, [r7, #20]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	f040 80ce 	bne.w	8003784 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f103 0018 	add.w	r0, r3, #24
 80035ee:	f107 020b 	add.w	r2, r7, #11
 80035f2:	2301      	movs	r3, #1
 80035f4:	f243 0138 	movw	r1, #12344	; 0x3038
 80035f8:	f000 f954 	bl	80038a4 <ov5640_write_reg>
 80035fc:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f103 0018 	add.w	r0, r3, #24
 800360a:	f107 020b 	add.w	r2, r7, #11
 800360e:	2301      	movs	r3, #1
 8003610:	f243 0139 	movw	r1, #12345	; 0x3039
 8003614:	f000 f946 	bl	80038a4 <ov5640_write_reg>
 8003618:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10c      	bne.n	800363a <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8003620:	237c      	movs	r3, #124	; 0x7c
 8003622:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f103 0018 	add.w	r0, r3, #24
 800362a:	f107 020b 	add.w	r2, r7, #11
 800362e:	2301      	movs	r3, #1
 8003630:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8003634:	f000 f936 	bl	80038a4 <ov5640_write_reg>
 8003638:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10c      	bne.n	800365a <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8003640:	2301      	movs	r3, #1
 8003642:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f103 0018 	add.w	r0, r3, #24
 800364a:	f107 020b 	add.w	r2, r7, #11
 800364e:	2301      	movs	r3, #1
 8003650:	f643 2108 	movw	r1, #14856	; 0x3a08
 8003654:	f000 f926 	bl	80038a4 <ov5640_write_reg>
 8003658:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10c      	bne.n	800367a <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8003660:	2327      	movs	r3, #39	; 0x27
 8003662:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f103 0018 	add.w	r0, r3, #24
 800366a:	f107 020b 	add.w	r2, r7, #11
 800366e:	2301      	movs	r3, #1
 8003670:	f643 2109 	movw	r1, #14857	; 0x3a09
 8003674:	f000 f916 	bl	80038a4 <ov5640_write_reg>
 8003678:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10c      	bne.n	800369a <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8003680:	2300      	movs	r3, #0
 8003682:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f103 0018 	add.w	r0, r3, #24
 800368a:	f107 020b 	add.w	r2, r7, #11
 800368e:	2301      	movs	r3, #1
 8003690:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8003694:	f000 f906 	bl	80038a4 <ov5640_write_reg>
 8003698:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10c      	bne.n	80036ba <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 80036a0:	23f6      	movs	r3, #246	; 0xf6
 80036a2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f103 0018 	add.w	r0, r3, #24
 80036aa:	f107 020b 	add.w	r2, r7, #11
 80036ae:	2301      	movs	r3, #1
 80036b0:	f643 210b 	movw	r1, #14859	; 0x3a0b
 80036b4:	f000 f8f6 	bl	80038a4 <ov5640_write_reg>
 80036b8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10c      	bne.n	80036da <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 80036c0:	2304      	movs	r3, #4
 80036c2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f103 0018 	add.w	r0, r3, #24
 80036ca:	f107 020b 	add.w	r2, r7, #11
 80036ce:	2301      	movs	r3, #1
 80036d0:	f643 210d 	movw	r1, #14861	; 0x3a0d
 80036d4:	f000 f8e6 	bl	80038a4 <ov5640_write_reg>
 80036d8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f103 0018 	add.w	r0, r3, #24
 80036e6:	f107 020b 	add.w	r2, r7, #11
 80036ea:	2301      	movs	r3, #1
 80036ec:	f643 210e 	movw	r1, #14862	; 0x3a0e
 80036f0:	f000 f8d8 	bl	80038a4 <ov5640_write_reg>
 80036f4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10c      	bne.n	8003716 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 80036fc:	230b      	movs	r3, #11
 80036fe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f103 0018 	add.w	r0, r3, #24
 8003706:	f107 020b 	add.w	r2, r7, #11
 800370a:	2301      	movs	r3, #1
 800370c:	f643 2102 	movw	r1, #14850	; 0x3a02
 8003710:	f000 f8c8 	bl	80038a4 <ov5640_write_reg>
 8003714:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10c      	bne.n	8003736 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 800371c:	2388      	movs	r3, #136	; 0x88
 800371e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f103 0018 	add.w	r0, r3, #24
 8003726:	f107 020b 	add.w	r2, r7, #11
 800372a:	2301      	movs	r3, #1
 800372c:	f643 2103 	movw	r1, #14851	; 0x3a03
 8003730:	f000 f8b8 	bl	80038a4 <ov5640_write_reg>
 8003734:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10c      	bne.n	8003756 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 800373c:	230b      	movs	r3, #11
 800373e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f103 0018 	add.w	r0, r3, #24
 8003746:	f107 020b 	add.w	r2, r7, #11
 800374a:	2301      	movs	r3, #1
 800374c:	f643 2114 	movw	r1, #14868	; 0x3a14
 8003750:	f000 f8a8 	bl	80038a4 <ov5640_write_reg>
 8003754:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10c      	bne.n	8003776 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 800375c:	2388      	movs	r3, #136	; 0x88
 800375e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 0018 	add.w	r0, r3, #24
 8003766:	f107 020b 	add.w	r2, r7, #11
 800376a:	2301      	movs	r3, #1
 800376c:	f643 2115 	movw	r1, #14869	; 0x3a15
 8003770:	f000 f898 	bl	80038a4 <ov5640_write_reg>
 8003774:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d02b      	beq.n	80037d4 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 800377c:	f04f 33ff 	mov.w	r3, #4294967295
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e027      	b.n	80037d4 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f103 0018 	add.w	r0, r3, #24
 800378a:	f107 020b 	add.w	r2, r7, #11
 800378e:	2301      	movs	r3, #1
 8003790:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8003794:	f000 f86f 	bl	8003876 <ov5640_read_reg>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e016      	b.n	80037d4 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 80037aa:	7afb      	ldrb	r3, [r7, #11]
 80037ac:	f023 0304 	bic.w	r3, r3, #4
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f103 0018 	add.w	r0, r3, #24
 80037ba:	f107 020b 	add.w	r2, r7, #11
 80037be:	2301      	movs	r3, #1
 80037c0:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80037c4:	f000 f86e 	bl	80038a4 <ov5640_write_reg>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80037d4:	68fb      	ldr	r3, [r7, #12]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	4798      	blx	r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80037f2:	bf00      	nop
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	4798      	blx	r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d8f5      	bhi.n	80037f4 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003812:	b590      	push	{r4, r7, lr}
 8003814:	b087      	sub	sp, #28
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	461a      	mov	r2, r3
 800381e:	460b      	mov	r3, r1
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	4613      	mov	r3, r2
 8003824:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	691c      	ldr	r4, [r3, #16]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	8918      	ldrh	r0, [r3, #8]
 8003832:	893b      	ldrh	r3, [r7, #8]
 8003834:	8979      	ldrh	r1, [r7, #10]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	47a0      	blx	r4
 800383a:	4603      	mov	r3, r0
}
 800383c:	4618      	mov	r0, r3
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd90      	pop	{r4, r7, pc}

08003844 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	461a      	mov	r2, r3
 8003850:	460b      	mov	r3, r1
 8003852:	817b      	strh	r3, [r7, #10]
 8003854:	4613      	mov	r3, r2
 8003856:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	68dc      	ldr	r4, [r3, #12]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	8918      	ldrh	r0, [r3, #8]
 8003864:	893b      	ldrh	r3, [r7, #8]
 8003866:	8979      	ldrh	r1, [r7, #10]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	47a0      	blx	r4
 800386c:	4603      	mov	r3, r0
}
 800386e:	4618      	mov	r0, r3
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	bd90      	pop	{r4, r7, pc}

08003876 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003876:	b590      	push	{r4, r7, lr}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	461a      	mov	r2, r3
 8003882:	460b      	mov	r3, r1
 8003884:	817b      	strh	r3, [r7, #10]
 8003886:	4613      	mov	r3, r2
 8003888:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685c      	ldr	r4, [r3, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6898      	ldr	r0, [r3, #8]
 8003892:	893b      	ldrh	r3, [r7, #8]
 8003894:	8979      	ldrh	r1, [r7, #10]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	47a0      	blx	r4
 800389a:	4603      	mov	r3, r0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd90      	pop	{r4, r7, pc}

080038a4 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80038a4:	b590      	push	{r4, r7, lr}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	461a      	mov	r2, r3
 80038b0:	460b      	mov	r3, r1
 80038b2:	817b      	strh	r3, [r7, #10]
 80038b4:	4613      	mov	r3, r2
 80038b6:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681c      	ldr	r4, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6898      	ldr	r0, [r3, #8]
 80038c0:	893b      	ldrh	r3, [r7, #8]
 80038c2:	8979      	ldrh	r1, [r7, #10]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	47a0      	blx	r4
 80038c8:	4603      	mov	r3, r0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd90      	pop	{r4, r7, pc}
	...

080038d4 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 80038de:	4b16      	ldr	r3, [pc, #88]	; (8003938 <BSP_I2C2_Init+0x64>)
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <BSP_I2C2_Init+0x68>)
 80038e2:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 80038e4:	4b16      	ldr	r3, [pc, #88]	; (8003940 <BSP_I2C2_Init+0x6c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11f      	bne.n	800392c <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 80038ec:	4b14      	ldr	r3, [pc, #80]	; (8003940 <BSP_I2C2_Init+0x6c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	4a13      	ldr	r2, [pc, #76]	; (8003940 <BSP_I2C2_Init+0x6c>)
 80038f4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 80038f6:	4810      	ldr	r0, [pc, #64]	; (8003938 <BSP_I2C2_Init+0x64>)
 80038f8:	f004 fef0 	bl	80086dc <HAL_I2C_GetState>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d114      	bne.n	800392c <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8003902:	480d      	ldr	r0, [pc, #52]	; (8003938 <BSP_I2C2_Init+0x64>)
 8003904:	f000 fbbc 	bl	8004080 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8003908:	f007 fd54 	bl	800b3b4 <HAL_RCC_GetPCLK1Freq>
 800390c:	4603      	mov	r3, r0
 800390e:	490d      	ldr	r1, [pc, #52]	; (8003944 <BSP_I2C2_Init+0x70>)
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f93f 	bl	8003b94 <I2C_GetTiming>
 8003916:	4603      	mov	r3, r0
 8003918:	4619      	mov	r1, r3
 800391a:	4807      	ldr	r0, [pc, #28]	; (8003938 <BSP_I2C2_Init+0x64>)
 800391c:	f000 f838 	bl	8003990 <MX_I2C2_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <BSP_I2C2_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003926:	f06f 0307 	mvn.w	r3, #7
 800392a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800392c:	687b      	ldr	r3, [r7, #4]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	24000fb0 	.word	0x24000fb0
 800393c:	40005800 	.word	0x40005800
 8003940:	240005a8 	.word	0x240005a8
 8003944:	000186a0 	.word	0x000186a0

08003948 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <BSP_I2C2_DeInit+0x40>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3b01      	subs	r3, #1
 8003958:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <BSP_I2C2_DeInit+0x40>)
 800395a:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <BSP_I2C2_DeInit+0x40>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8003964:	4809      	ldr	r0, [pc, #36]	; (800398c <BSP_I2C2_DeInit+0x44>)
 8003966:	f000 fbf5 	bl	8004154 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 800396a:	4808      	ldr	r0, [pc, #32]	; (800398c <BSP_I2C2_DeInit+0x44>)
 800396c:	f004 fc44 	bl	80081f8 <HAL_I2C_DeInit>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003976:	f06f 0307 	mvn.w	r3, #7
 800397a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800397c:	687b      	ldr	r3, [r7, #4]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	240005a8 	.word	0x240005a8
 800398c:	24000fb0 	.word	0x24000fb0

08003990 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f004 fb82 	bl	80080d8 <HAL_I2C_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
 80039de:	e014      	b.n	8003a0a <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f005 f94a 	bl	8008c80 <HAL_I2CEx_ConfigAnalogFilter>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	e008      	b.n	8003a0a <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80039f8:	2100      	movs	r1, #0
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f005 f98b 	bl	8008d16 <HAL_I2CEx_ConfigDigitalFilter>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60ba      	str	r2, [r7, #8]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	81fb      	strh	r3, [r7, #14]
 8003a22:	460b      	mov	r3, r1
 8003a24:	81bb      	strh	r3, [r7, #12]
 8003a26:	4613      	mov	r3, r2
 8003a28:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003a2a:	89b9      	ldrh	r1, [r7, #12]
 8003a2c:	89f8      	ldrh	r0, [r7, #14]
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f000 fbaf 	bl	8004198 <I2C2_WriteReg>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e00c      	b.n	8003a60 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003a46:	4809      	ldr	r0, [pc, #36]	; (8003a6c <BSP_I2C2_WriteReg+0x58>)
 8003a48:	f004 fe56 	bl	80086f8 <HAL_I2C_GetError>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d103      	bne.n	8003a5a <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003a52:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e002      	b.n	8003a60 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003a5a:	f06f 0303 	mvn.w	r3, #3
 8003a5e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003a60:	697b      	ldr	r3, [r7, #20]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	24000fb0 	.word	0x24000fb0

08003a70 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	60ba      	str	r2, [r7, #8]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	81fb      	strh	r3, [r7, #14]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	81bb      	strh	r3, [r7, #12]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003a86:	89b9      	ldrh	r1, [r7, #12]
 8003a88:	89f8      	ldrh	r0, [r7, #14]
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f000 fba7 	bl	80041e4 <I2C2_ReadReg>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e00c      	b.n	8003abc <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003aa2:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <BSP_I2C2_ReadReg+0x58>)
 8003aa4:	f004 fe28 	bl	80086f8 <HAL_I2C_GetError>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d103      	bne.n	8003ab6 <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003aae:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	e002      	b.n	8003abc <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003ab6:	f06f 0303 	mvn.w	r3, #3
 8003aba:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003abc:	697b      	ldr	r3, [r7, #20]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	24000fb0 	.word	0x24000fb0

08003acc <BSP_I2C2_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60ba      	str	r2, [r7, #8]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	81fb      	strh	r3, [r7, #14]
 8003ada:	460b      	mov	r3, r1
 8003adc:	81bb      	strh	r3, [r7, #12]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	80fb      	strh	r3, [r7, #6]

 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003ae2:	89b9      	ldrh	r1, [r7, #12]
 8003ae4:	89f8      	ldrh	r0, [r7, #14]
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2202      	movs	r2, #2
 8003aee:	f000 fb53 	bl	8004198 <I2C2_WriteReg>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <BSP_I2C2_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e00c      	b.n	8003b18 <BSP_I2C2_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003afe:	4809      	ldr	r0, [pc, #36]	; (8003b24 <BSP_I2C2_WriteReg16+0x58>)
 8003b00:	f004 fdfa 	bl	80086f8 <HAL_I2C_GetError>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d103      	bne.n	8003b12 <BSP_I2C2_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003b0a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e002      	b.n	8003b18 <BSP_I2C2_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003b12:	f06f 0303 	mvn.w	r3, #3
 8003b16:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003b18:	697b      	ldr	r3, [r7, #20]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	24000fb0 	.word	0x24000fb0

08003b28 <BSP_I2C2_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60ba      	str	r2, [r7, #8]
 8003b30:	461a      	mov	r2, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	81fb      	strh	r3, [r7, #14]
 8003b36:	460b      	mov	r3, r1
 8003b38:	81bb      	strh	r3, [r7, #12]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003b3e:	89b9      	ldrh	r1, [r7, #12]
 8003b40:	89f8      	ldrh	r0, [r7, #14]
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f000 fb4b 	bl	80041e4 <I2C2_ReadReg>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <BSP_I2C2_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	e00c      	b.n	8003b74 <BSP_I2C2_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8003b5a:	4809      	ldr	r0, [pc, #36]	; (8003b80 <BSP_I2C2_ReadReg16+0x58>)
 8003b5c:	f004 fdcc 	bl	80086f8 <HAL_I2C_GetError>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d103      	bne.n	8003b6e <BSP_I2C2_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003b66:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e002      	b.n	8003b74 <BSP_I2C2_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003b6e:	f06f 0303 	mvn.w	r3, #3
 8003b72:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003b74:	697b      	ldr	r3, [r7, #20]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	24000fb0 	.word	0x24000fb0

08003b84 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003b88:	f001 f904 	bl	8004d94 <HAL_GetTick>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d06b      	beq.n	8003c80 <I2C_GetTiming+0xec>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d068      	beq.n	8003c80 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e060      	b.n	8003c76 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003bb4:	4a35      	ldr	r2, [pc, #212]	; (8003c8c <I2C_GetTiming+0xf8>)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d352      	bcc.n	8003c70 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003bca:	4a30      	ldr	r2, [pc, #192]	; (8003c8c <I2C_GetTiming+0xf8>)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	212c      	movs	r1, #44	; 0x2c
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d847      	bhi.n	8003c70 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003be0:	6939      	ldr	r1, [r7, #16]
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f856 	bl	8003c94 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003be8:	6939      	ldr	r1, [r7, #16]
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f940 	bl	8003e70 <I2C_Compute_SCLL_SCLH>
 8003bf0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8003bf6:	d842      	bhi.n	8003c7e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003bf8:	4925      	ldr	r1, [pc, #148]	; (8003c90 <I2C_GetTiming+0xfc>)
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003c0a:	4821      	ldr	r0, [pc, #132]	; (8003c90 <I2C_GetTiming+0xfc>)
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4403      	add	r3, r0
 8003c18:	3304      	adds	r3, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	051b      	lsls	r3, r3, #20
 8003c1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003c22:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003c24:	481a      	ldr	r0, [pc, #104]	; (8003c90 <I2C_GetTiming+0xfc>)
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4403      	add	r3, r0
 8003c32:	3308      	adds	r3, #8
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	041b      	lsls	r3, r3, #16
 8003c38:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003c3c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003c3e:	4814      	ldr	r0, [pc, #80]	; (8003c90 <I2C_GetTiming+0xfc>)
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4403      	add	r3, r0
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003c54:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003c56:	480e      	ldr	r0, [pc, #56]	; (8003c90 <I2C_GetTiming+0xfc>)
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4403      	add	r3, r0
 8003c64:	3310      	adds	r3, #16
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	617b      	str	r3, [r7, #20]
        }
        break;
 8003c6e:	e006      	b.n	8003c7e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	3301      	adds	r3, #1
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d99b      	bls.n	8003bb4 <I2C_GetTiming+0x20>
 8003c7c:	e000      	b.n	8003c80 <I2C_GetTiming+0xec>
        break;
 8003c7e:	bf00      	nop
      }
    }
  }

  return ret;
 8003c80:	697b      	ldr	r3, [r7, #20]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	08011774 	.word	0x08011774
 8003c90:	240005ac 	.word	0x240005ac

08003c94 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b08f      	sub	sp, #60	; 0x3c
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003c9e:	2310      	movs	r3, #16
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	085a      	lsrs	r2, r3, #1
 8003ca6:	4b6e      	ldr	r3, [pc, #440]	; (8003e60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003ca8:	4413      	add	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cb0:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003cb2:	2332      	movs	r3, #50	; 0x32
 8003cb4:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003cb6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003cba:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003cbc:	4a69      	ldr	r2, [pc, #420]	; (8003e64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	212c      	movs	r1, #44	; 0x2c
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3324      	adds	r3, #36	; 0x24
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	4a65      	ldr	r2, [pc, #404]	; (8003e64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	330c      	adds	r3, #12
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003ce2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003ce4:	495f      	ldr	r1, [pc, #380]	; (8003e64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	202c      	movs	r0, #44	; 0x2c
 8003cea:	fb00 f303 	mul.w	r3, r0, r3
 8003cee:	440b      	add	r3, r1
 8003cf0:	3328      	adds	r3, #40	; 0x28
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3303      	adds	r3, #3
 8003cf6:	69f9      	ldr	r1, [r7, #28]
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003d00:	4a58      	ldr	r2, [pc, #352]	; (8003e64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3310      	adds	r3, #16
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	4a54      	ldr	r2, [pc, #336]	; (8003e64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3320      	adds	r3, #32
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003d24:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003d26:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003d28:	494e      	ldr	r1, [pc, #312]	; (8003e64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	202c      	movs	r0, #44	; 0x2c
 8003d2e:	fb00 f303 	mul.w	r3, r0, r3
 8003d32:	440b      	add	r3, r1
 8003d34:	3328      	adds	r3, #40	; 0x28
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	69f9      	ldr	r1, [r7, #28]
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003d44:	4a47      	ldr	r2, [pc, #284]	; (8003e64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	212c      	movs	r1, #44	; 0x2c
 8003d4a:	fb01 f303 	mul.w	r3, r1, r3
 8003d4e:	4413      	add	r3, r2
 8003d50:	3320      	adds	r3, #32
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	4a43      	ldr	r2, [pc, #268]	; (8003e64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	3314      	adds	r3, #20
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4403      	add	r3, r0
 8003d68:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	dc01      	bgt.n	8003d74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	dc01      	bgt.n	8003d7e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d82:	e062      	b.n	8003e4a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003d84:	2300      	movs	r3, #0
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
 8003d88:	e059      	b.n	8003e3e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d90:	3201      	adds	r2, #1
 8003d92:	fb03 f202 	mul.w	r2, r3, r2
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d348      	bcc.n	8003e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	623b      	str	r3, [r7, #32]
 8003daa:	e042      	b.n	8003e32 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	3301      	adds	r3, #1
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	fb03 f202 	mul.w	r2, r3, r2
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d332      	bcc.n	8003e2c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d82e      	bhi.n	8003e2c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8003dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d02a      	beq.n	8003e2c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4924      	ldr	r1, [pc, #144]	; (8003e6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	491f      	ldr	r1, [pc, #124]	; (8003e6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4919      	ldr	r1, [pc, #100]	; (8003e6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3308      	adds	r3, #8
 8003e12:	6a3a      	ldr	r2, [r7, #32]
 8003e14:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8003e1a:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a11      	ldr	r2, [pc, #68]	; (8003e68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003e22:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003e24:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b7f      	cmp	r3, #127	; 0x7f
 8003e2a:	d812      	bhi.n	8003e52 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	d9b9      	bls.n	8003dac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	2b0f      	cmp	r3, #15
 8003e42:	d9a2      	bls.n	8003d8a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	3301      	adds	r3, #1
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d999      	bls.n	8003d84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003e50:	e000      	b.n	8003e54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003e52:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003e54:	373c      	adds	r7, #60	; 0x3c
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	3b9aca00 	.word	0x3b9aca00
 8003e64:	08011774 	.word	0x08011774
 8003e68:	24000fac 	.word	0x24000fac
 8003e6c:	240005ac 	.word	0x240005ac

08003e70 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b093      	sub	sp, #76	; 0x4c
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	085a      	lsrs	r2, r3, #1
 8003e84:	4b7a      	ldr	r3, [pc, #488]	; (8004070 <I2C_Compute_SCLL_SCLH+0x200>)
 8003e86:	4413      	add	r3, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003e90:	4a78      	ldr	r2, [pc, #480]	; (8004074 <I2C_Compute_SCLL_SCLH+0x204>)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	212c      	movs	r1, #44	; 0x2c
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	085a      	lsrs	r2, r3, #1
 8003ea0:	4b73      	ldr	r3, [pc, #460]	; (8004070 <I2C_Compute_SCLL_SCLH+0x200>)
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4973      	ldr	r1, [pc, #460]	; (8004074 <I2C_Compute_SCLL_SCLH+0x204>)
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	202c      	movs	r0, #44	; 0x2c
 8003eaa:	fb00 f202 	mul.w	r2, r0, r2
 8003eae:	440a      	add	r2, r1
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003eb8:	2332      	movs	r3, #50	; 0x32
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003ebc:	4a6d      	ldr	r2, [pc, #436]	; (8004074 <I2C_Compute_SCLL_SCLH+0x204>)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3328      	adds	r3, #40	; 0x28
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003ed4:	4a67      	ldr	r2, [pc, #412]	; (8004074 <I2C_Compute_SCLL_SCLH+0x204>)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	212c      	movs	r1, #44	; 0x2c
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	4413      	add	r3, r2
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a62      	ldr	r2, [pc, #392]	; (8004070 <I2C_Compute_SCLL_SCLH+0x200>)
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003eec:	4a61      	ldr	r2, [pc, #388]	; (8004074 <I2C_Compute_SCLL_SCLH+0x204>)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3308      	adds	r3, #8
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a5c      	ldr	r2, [pc, #368]	; (8004070 <I2C_Compute_SCLL_SCLH+0x200>)
 8003efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f02:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0c:	e0a3      	b.n	8004056 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003f0e:	495a      	ldr	r1, [pc, #360]	; (8004078 <I2C_Compute_SCLL_SCLH+0x208>)
 8003f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2c:	e08c      	b.n	8004048 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	441a      	add	r2, r3
 8003f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f36:	3301      	adds	r3, #1
 8003f38:	6979      	ldr	r1, [r7, #20]
 8003f3a:	fb03 f101 	mul.w	r1, r3, r1
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	440b      	add	r3, r1
 8003f44:	4413      	add	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003f48:	4a4a      	ldr	r2, [pc, #296]	; (8004074 <I2C_Compute_SCLL_SCLH+0x204>)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	3318      	adds	r3, #24
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d971      	bls.n	8004042 <I2C_Compute_SCLL_SCLH+0x1d2>
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	1ad2      	subs	r2, r2, r3
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d268      	bcs.n	8004042 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003f70:	2300      	movs	r3, #0
 8003f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f74:	e062      	b.n	800403c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	441a      	add	r2, r3
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	3301      	adds	r3, #1
 8003f80:	6979      	ldr	r1, [r7, #20]
 8003f82:	fb03 f101 	mul.w	r1, r3, r1
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	440b      	add	r3, r1
 8003f8c:	4413      	add	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	441a      	add	r2, r3
 8003f96:	4937      	ldr	r1, [pc, #220]	; (8004074 <I2C_Compute_SCLL_SCLH+0x204>)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	202c      	movs	r0, #44	; 0x2c
 8003f9c:	fb00 f303 	mul.w	r3, r0, r3
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3320      	adds	r3, #32
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	4932      	ldr	r1, [pc, #200]	; (8004074 <I2C_Compute_SCLL_SCLH+0x204>)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	202c      	movs	r0, #44	; 0x2c
 8003fae:	fb00 f303 	mul.w	r3, r0, r3
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3324      	adds	r3, #36	; 0x24
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d338      	bcc.n	8004036 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d834      	bhi.n	8004036 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003fcc:	4a29      	ldr	r2, [pc, #164]	; (8004074 <I2C_Compute_SCLL_SCLH+0x204>)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	212c      	movs	r1, #44	; 0x2c
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	331c      	adds	r3, #28
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d329      	bcc.n	8004036 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d225      	bcs.n	8004036 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	da02      	bge.n	8003ffe <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	425b      	negs	r3, r3
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004002:	429a      	cmp	r2, r3
 8004004:	d917      	bls.n	8004036 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800400a:	491b      	ldr	r1, [pc, #108]	; (8004078 <I2C_Compute_SCLL_SCLH+0x208>)
 800400c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	3310      	adds	r3, #16
 800401a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800401c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800401e:	4916      	ldr	r1, [pc, #88]	; (8004078 <I2C_Compute_SCLL_SCLH+0x208>)
 8004020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	330c      	adds	r3, #12
 800402e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004030:	601a      	str	r2, [r3, #0]
              ret = count;
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	3301      	adds	r3, #1
 800403a:	63bb      	str	r3, [r7, #56]	; 0x38
 800403c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403e:	2bff      	cmp	r3, #255	; 0xff
 8004040:	d999      	bls.n	8003f76 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004044:	3301      	adds	r3, #1
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404a:	2bff      	cmp	r3, #255	; 0xff
 800404c:	f67f af6f 	bls.w	8003f2e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004052:	3301      	adds	r3, #1
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <I2C_Compute_SCLL_SCLH+0x20c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405c:	429a      	cmp	r2, r3
 800405e:	f4ff af56 	bcc.w	8003f0e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8004062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004064:	4618      	mov	r0, r3
 8004066:	374c      	adds	r7, #76	; 0x4c
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	3b9aca00 	.word	0x3b9aca00
 8004074:	08011774 	.word	0x08011774
 8004078:	240005ac 	.word	0x240005ac
 800407c:	24000fac 	.word	0x24000fac

08004080 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8004088:	4b30      	ldr	r3, [pc, #192]	; (800414c <I2C2_MspInit+0xcc>)
 800408a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800408e:	4a2f      	ldr	r2, [pc, #188]	; (800414c <I2C2_MspInit+0xcc>)
 8004090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004094:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004098:	4b2c      	ldr	r3, [pc, #176]	; (800414c <I2C2_MspInit+0xcc>)
 800409a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 80040a6:	4b29      	ldr	r3, [pc, #164]	; (800414c <I2C2_MspInit+0xcc>)
 80040a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80040ac:	4a27      	ldr	r2, [pc, #156]	; (800414c <I2C2_MspInit+0xcc>)
 80040ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80040b6:	4b25      	ldr	r3, [pc, #148]	; (800414c <I2C2_MspInit+0xcc>)
 80040b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin 		= BUS_I2C2_SCL_PIN;
 80040c4:	2310      	movs	r3, #16
 80040c6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 80040c8:	2312      	movs	r3, #18
 80040ca:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull 		= GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80040d0:	2302      	movs	r3, #2
 80040d2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SCL_AF;
 80040d4:	2304      	movs	r3, #4
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	4619      	mov	r1, r3
 80040de:	481c      	ldr	r0, [pc, #112]	; (8004150 <I2C2_MspInit+0xd0>)
 80040e0:	f003 fd26 	bl	8007b30 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin 		= BUS_I2C2_SDA_PIN;
 80040e4:	2320      	movs	r3, #32
 80040e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 80040e8:	2312      	movs	r3, #18
 80040ea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull 		= GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80040f0:	2302      	movs	r3, #2
 80040f2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SDA_AF;
 80040f4:	2304      	movs	r3, #4
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4619      	mov	r1, r3
 80040fe:	4814      	ldr	r0, [pc, #80]	; (8004150 <I2C2_MspInit+0xd0>)
 8004100:	f003 fd16 	bl	8007b30 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <I2C2_MspInit+0xcc>)
 8004106:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800410a:	4a10      	ldr	r2, [pc, #64]	; (800414c <I2C2_MspInit+0xcc>)
 800410c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004110:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8004114:	4b0d      	ldr	r3, [pc, #52]	; (800414c <I2C2_MspInit+0xcc>)
 8004116:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800411a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <I2C2_MspInit+0xcc>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <I2C2_MspInit+0xcc>)
 800412a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800412e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <I2C2_MspInit+0xcc>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	4a04      	ldr	r2, [pc, #16]	; (800414c <I2C2_MspInit+0xcc>)
 800413a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800413e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004142:	bf00      	nop
 8004144:	3728      	adds	r7, #40	; 0x28
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	58024400 	.word	0x58024400
 8004150:	58021c00 	.word	0x58021c00

08004154 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 800415c:	2310      	movs	r3, #16
 800415e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4619      	mov	r1, r3
 8004164:	480a      	ldr	r0, [pc, #40]	; (8004190 <I2C2_MspDeInit+0x3c>)
 8004166:	f003 fe93 	bl	8007e90 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800416a:	2320      	movs	r3, #32
 800416c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4619      	mov	r1, r3
 8004172:	4807      	ldr	r0, [pc, #28]	; (8004190 <I2C2_MspDeInit+0x3c>)
 8004174:	f003 fe8c 	bl	8007e90 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <I2C2_MspDeInit+0x40>)
 800417a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800417e:	4a05      	ldr	r2, [pc, #20]	; (8004194 <I2C2_MspDeInit+0x40>)
 8004180:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004184:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
 8004188:	bf00      	nop
 800418a:	3720      	adds	r7, #32
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	58021c00 	.word	0x58021c00
 8004194:	58024400 	.word	0x58024400

08004198 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af04      	add	r7, sp, #16
 800419e:	607b      	str	r3, [r7, #4]
 80041a0:	4603      	mov	r3, r0
 80041a2:	81fb      	strh	r3, [r7, #14]
 80041a4:	460b      	mov	r3, r1
 80041a6:	81bb      	strh	r3, [r7, #12]
 80041a8:	4613      	mov	r3, r2
 80041aa:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80041ac:	8978      	ldrh	r0, [r7, #10]
 80041ae:	89ba      	ldrh	r2, [r7, #12]
 80041b0:	89f9      	ldrh	r1, [r7, #14]
 80041b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80041b6:	9302      	str	r3, [sp, #8]
 80041b8:	8b3b      	ldrh	r3, [r7, #24]
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4603      	mov	r3, r0
 80041c2:	4807      	ldr	r0, [pc, #28]	; (80041e0 <I2C2_WriteReg+0x48>)
 80041c4:	f004 f85c 	bl	8008280 <HAL_I2C_Mem_Write>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e001      	b.n	80041d6 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80041d2:	f06f 0307 	mvn.w	r3, #7
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	24000fb0 	.word	0x24000fb0

080041e4 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af04      	add	r7, sp, #16
 80041ea:	607b      	str	r3, [r7, #4]
 80041ec:	4603      	mov	r3, r0
 80041ee:	81fb      	strh	r3, [r7, #14]
 80041f0:	460b      	mov	r3, r1
 80041f2:	81bb      	strh	r3, [r7, #12]
 80041f4:	4613      	mov	r3, r2
 80041f6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80041f8:	8978      	ldrh	r0, [r7, #10]
 80041fa:	89ba      	ldrh	r2, [r7, #12]
 80041fc:	89f9      	ldrh	r1, [r7, #14]
 80041fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8004202:	9302      	str	r3, [sp, #8]
 8004204:	8b3b      	ldrh	r3, [r7, #24]
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4603      	mov	r3, r0
 800420e:	4807      	ldr	r0, [pc, #28]	; (800422c <I2C2_ReadReg+0x48>)
 8004210:	f004 f94a 	bl	80084a8 <HAL_I2C_Mem_Read>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800421a:	2300      	movs	r3, #0
 800421c:	e001      	b.n	8004222 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800421e:	f06f 0307 	mvn.w	r3, #7
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	24000fb0 	.word	0x24000fb0

08004230 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004246:	f06f 0301 	mvn.w	r3, #1
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	e055      	b.n	80042fa <BSP_CAMERA_Init+0xca>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    DCMI_MspInit(&hcamera_dcmi);
 800424e:	482d      	ldr	r0, [pc, #180]	; (8004304 <BSP_CAMERA_Init+0xd4>)
 8004250:	f000 f9de 	bl	8004610 <DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8004254:	482b      	ldr	r0, [pc, #172]	; (8004304 <BSP_CAMERA_Init+0xd4>)
 8004256:	f000 f859 	bl	800430c <MX_DCMI_Init>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <BSP_CAMERA_Init+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004260:	f06f 0303 	mvn.w	r3, #3
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	e048      	b.n	80042fa <BSP_CAMERA_Init+0xca>
    }
    else if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8004268:	2000      	movs	r0, #0
 800426a:	f000 f8cf 	bl	800440c <BSP_CAMERA_HwReset>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <BSP_CAMERA_Init+0x4c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004274:	f06f 0307 	mvn.w	r3, #7
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e03e      	b.n	80042fa <BSP_CAMERA_Init+0xca>
    }
    else
    {
#if (USE_BSP_IO_CLASS > 0)
      io_init_structure.Pin  = CAM_PLUG_PIN;
 800427c:	2310      	movs	r3, #16
 800427e:	613b      	str	r3, [r7, #16]
      io_init_structure.Pull = IO_PULLUP;
 8004280:	2301      	movs	r3, #1
 8004282:	61bb      	str	r3, [r7, #24]
      io_init_structure.Mode = IO_MODE_INPUT;
 8004284:	2302      	movs	r3, #2
 8004286:	617b      	str	r3, [r7, #20]

      if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 8004288:	f107 0310 	add.w	r3, r7, #16
 800428c:	4619      	mov	r1, r3
 800428e:	2000      	movs	r0, #0
 8004290:	f000 fb80 	bl	8004994 <BSP_IO_Init>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <BSP_CAMERA_Init+0x72>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800429a:	f06f 0307 	mvn.w	r3, #7
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	e02b      	b.n	80042fa <BSP_CAMERA_Init+0xca>
      }/* Check if the CAMERA Module is plugged on board */
      else if(((uint32_t)BSP_IO_ReadPin(0, CAM_PLUG_PIN) & CAM_PLUG_PIN) == CAM_PLUG_PIN)
 80042a2:	2110      	movs	r1, #16
 80042a4:	2000      	movs	r0, #0
 80042a6:	f000 fc07 	bl	8004ab8 <BSP_IO_ReadPin>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d103      	bne.n	80042bc <BSP_CAMERA_Init+0x8c>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80042b4:	f06f 0306 	mvn.w	r3, #6
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	e01e      	b.n	80042fa <BSP_CAMERA_Init+0xca>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f000 faba 	bl	8004838 <OV5640_Probe>
 80042c4:	61f8      	str	r0, [r7, #28]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <BSP_CAMERA_Init+0xa4>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80042cc:	f06f 0306 	mvn.w	r3, #6
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e012      	b.n	80042fa <BSP_CAMERA_Init+0xca>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 80042d4:	490c      	ldr	r1, [pc, #48]	; (8004308 <BSP_CAMERA_Init+0xd8>)
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	440b      	add	r3, r1
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 80042e6:	4908      	ldr	r1, [pc, #32]	; (8004308 <BSP_CAMERA_Init+0xd8>)
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4613      	mov	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	440b      	add	r3, r1
 80042f4:	3304      	adds	r3, #4
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 80042fa:	69fb      	ldr	r3, [r7, #28]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	24001008 	.word	0x24001008
 8004308:	24001058 	.word	0x24001058

0800430c <MX_DCMI_Init>:
  * @param  hdcmi  DCMI handle
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DCMI_Init(DCMI_HandleTypeDef* hdcmi)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  hdcmi->Instance              = DCMI;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a10      	ldr	r2, [pc, #64]	; (8004358 <MX_DCMI_Init+0x4c>)
 8004318:	601a      	str	r2, [r3, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	615a      	str	r2, [r3, #20]
  hdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2240      	movs	r2, #64	; 0x40
 8004324:	611a      	str	r2, [r3, #16]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	605a      	str	r2, [r3, #4]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	60da      	str	r2, [r3, #12]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	619a      	str	r2, [r3, #24]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	609a      	str	r2, [r3, #8]

  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fe68 	bl	8005014 <HAL_DCMI_Init>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_DCMI_Init+0x42>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <MX_DCMI_Init+0x44>
  }
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	48020000 	.word	0x48020000

0800435c <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800436e:	f06f 0301 	mvn.w	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e022      	b.n	80043bc <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hcamera_dcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8004376:	68bc      	ldr	r4, [r7, #8]
 8004378:	4913      	ldr	r1, [pc, #76]	; (80043c8 <BSP_CAMERA_Start+0x6c>)
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4613      	mov	r3, r2
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	4413      	add	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	440b      	add	r3, r1
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	490f      	ldr	r1, [pc, #60]	; (80043c8 <BSP_CAMERA_Start+0x6c>)
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	440b      	add	r3, r1
 8004396:	3304      	adds	r3, #4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4619      	mov	r1, r3
 800439c:	f000 f8e6 	bl	800456c <GetSize>
 80043a0:	4603      	mov	r3, r0
 80043a2:	4622      	mov	r2, r4
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4809      	ldr	r0, [pc, #36]	; (80043cc <BSP_CAMERA_Start+0x70>)
 80043a8:	f000 feb8 	bl	800511c <HAL_DCMI_Start_DMA>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80043b2:	f06f 0303 	mvn.w	r3, #3
 80043b6:	e002      	b.n	80043be <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 80043bc:	697b      	ldr	r3, [r7, #20]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd90      	pop	{r4, r7, pc}
 80043c6:	bf00      	nop
 80043c8:	24001058 	.word	0x24001058
 80043cc:	24001008 	.word	0x24001008

080043d0 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80043de:	f06f 0301 	mvn.w	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e00b      	b.n	80043fe <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 80043e6:	4808      	ldr	r0, [pc, #32]	; (8004408 <BSP_CAMERA_Stop+0x38>)
 80043e8:	f000 ff5a 	bl	80052a0 <HAL_DCMI_Stop>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80043f2:	f06f 0303 	mvn.w	r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e001      	b.n	80043fe <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 80043fe:	68fb      	ldr	r3, [r7, #12]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	24001008 	.word	0x24001008

0800440c <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <BSP_CAMERA_HwReset+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800441e:	f06f 0301 	mvn.w	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e04b      	b.n	80044be <BSP_CAMERA_HwReset+0xb2>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    io_init_structure.Pin  = RSTI_PIN | XSDN_PIN;
 8004426:	2360      	movs	r3, #96	; 0x60
 8004428:	60bb      	str	r3, [r7, #8]
    io_init_structure.Pull = IO_NOPULL;
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 800442e:	2304      	movs	r3, #4
 8004430:	60fb      	str	r3, [r7, #12]

    if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 8004432:	f107 0308 	add.w	r3, r7, #8
 8004436:	4619      	mov	r1, r3
 8004438:	2000      	movs	r0, #0
 800443a:	f000 faab 	bl	8004994 <BSP_IO_Init>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <BSP_CAMERA_HwReset+0x40>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004444:	f06f 0307 	mvn.w	r3, #7
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	e038      	b.n	80044be <BSP_CAMERA_HwReset+0xb2>
    }
    else
    {
      /* Camera sensor RESET sequence */
      /* Assert the camera STANDBY pin (active high)  */
      if(BSP_IO_WritePin(0, XSDN_PIN, IO_PIN_SET)!= BSP_ERROR_NONE)
 800444c:	2201      	movs	r2, #1
 800444e:	2140      	movs	r1, #64	; 0x40
 8004450:	2000      	movs	r0, #0
 8004452:	f000 faff 	bl	8004a54 <BSP_IO_WritePin>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <BSP_CAMERA_HwReset+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800445c:	f06f 0307 	mvn.w	r3, #7
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e02c      	b.n	80044be <BSP_CAMERA_HwReset+0xb2>
      }/* Assert the camera RSTI pin (active low) */
      else if(BSP_IO_WritePin(0, RSTI_PIN, IO_PIN_RESET)!= BSP_ERROR_NONE)
 8004464:	2200      	movs	r2, #0
 8004466:	2120      	movs	r1, #32
 8004468:	2000      	movs	r0, #0
 800446a:	f000 faf3 	bl	8004a54 <BSP_IO_WritePin>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <BSP_CAMERA_HwReset+0x70>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004474:	f06f 0307 	mvn.w	r3, #7
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e020      	b.n	80044be <BSP_CAMERA_HwReset+0xb2>
      }
      else
      {
        HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 800447c:	2064      	movs	r0, #100	; 0x64
 800447e:	f000 fc95 	bl	8004dac <HAL_Delay>

        /* De-assert the camera STANDBY pin (active high) */
        if(BSP_IO_WritePin(0, XSDN_PIN, IO_PIN_RESET)!= BSP_ERROR_NONE)
 8004482:	2200      	movs	r2, #0
 8004484:	2140      	movs	r1, #64	; 0x40
 8004486:	2000      	movs	r0, #0
 8004488:	f000 fae4 	bl	8004a54 <BSP_IO_WritePin>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <BSP_CAMERA_HwReset+0x8e>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004492:	f06f 0307 	mvn.w	r3, #7
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e011      	b.n	80044be <BSP_CAMERA_HwReset+0xb2>
        }
        else
        {
          HAL_Delay(3);     /* RST de-asserted and XSDN asserted during 3ms */
 800449a:	2003      	movs	r0, #3
 800449c:	f000 fc86 	bl	8004dac <HAL_Delay>

          /* De-assert the camera RSTI pin (active low) */
          if(BSP_IO_WritePin(0, RSTI_PIN, IO_PIN_SET)!= BSP_ERROR_NONE)
 80044a0:	2201      	movs	r2, #1
 80044a2:	2120      	movs	r1, #32
 80044a4:	2000      	movs	r0, #0
 80044a6:	f000 fad5 	bl	8004a54 <BSP_IO_WritePin>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <BSP_CAMERA_HwReset+0xac>
          {
            ret = BSP_ERROR_BUS_FAILURE;
 80044b0:	f06f 0307 	mvn.w	r3, #7
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e002      	b.n	80044be <BSP_CAMERA_HwReset+0xb2>
          }
          else
          {
            HAL_Delay(20);     /* RST de-asserted during 20ms */
 80044b8:	2014      	movs	r0, #20
 80044ba:	f000 fc77 	bl	8004dac <HAL_Delay>
      }
    }
#endif
  }

  return ret;
 80044be:	697b      	ldr	r3, [r7, #20]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <BSP_CAMERA_PwrDown+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80044da:	f06f 0301 	mvn.w	r3, #1
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e029      	b.n	8004536 <BSP_CAMERA_PwrDown+0x6e>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    io_init_structure.Pin  = RSTI_PIN | XSDN_PIN;
 80044e2:	2360      	movs	r3, #96	; 0x60
 80044e4:	60bb      	str	r3, [r7, #8]
    io_init_structure.Pull = IO_NOPULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 80044ea:	2304      	movs	r3, #4
 80044ec:	60fb      	str	r3, [r7, #12]

    if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 80044ee:	f107 0308 	add.w	r3, r7, #8
 80044f2:	4619      	mov	r1, r3
 80044f4:	2000      	movs	r0, #0
 80044f6:	f000 fa4d 	bl	8004994 <BSP_IO_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <BSP_CAMERA_PwrDown+0x40>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004500:	f06f 0307 	mvn.w	r3, #7
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	e016      	b.n	8004536 <BSP_CAMERA_PwrDown+0x6e>
    }
    else
    {
      /* Camera power down sequence */
      /* De-assert the camera STANDBY pin (active high) */
      if(BSP_IO_WritePin(0, XSDN_PIN, IO_PIN_RESET)!= BSP_ERROR_NONE)
 8004508:	2200      	movs	r2, #0
 800450a:	2140      	movs	r1, #64	; 0x40
 800450c:	2000      	movs	r0, #0
 800450e:	f000 faa1 	bl	8004a54 <BSP_IO_WritePin>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <BSP_CAMERA_PwrDown+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004518:	f06f 0307 	mvn.w	r3, #7
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e00a      	b.n	8004536 <BSP_CAMERA_PwrDown+0x6e>
      }
      else
      {
       /* Assert the camera RSTI pin (active low) */
       if(BSP_IO_WritePin(0, RSTI_PIN, IO_PIN_RESET)!= BSP_ERROR_NONE)
 8004520:	2200      	movs	r2, #0
 8004522:	2120      	movs	r1, #32
 8004524:	2000      	movs	r0, #0
 8004526:	f000 fa95 	bl	8004a54 <BSP_IO_WritePin>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <BSP_CAMERA_PwrDown+0x6e>
       {
         ret = BSP_ERROR_BUS_FAILURE;
 8004530:	f06f 0307 	mvn.w	r3, #7
 8004534:	617b      	str	r3, [r7, #20]
      }
    }
#endif
  }

  return ret;
 8004536:	697b      	ldr	r3, [r7, #20]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 800455c:	2000      	movs	r0, #0
 800455e:	f7ff ffef 	bl	8004540 <BSP_CAMERA_ErrorCallback>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d102      	bne.n	8004586 <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8004580:	2303      	movs	r3, #3
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	e001      	b.n	800458a <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8004586:	2302      	movs	r3, #2
 8004588:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b04      	cmp	r3, #4
 800458e:	d834      	bhi.n	80045fa <GetSize+0x8e>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <GetSize+0x2c>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045ad 	.word	0x080045ad
 800459c:	080045bd 	.word	0x080045bd
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	080045dd 	.word	0x080045dd
 80045a8:	080045ed 	.word	0x080045ed
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	60fb      	str	r3, [r7, #12]
    break;
 80045ba:	e01f      	b.n	80045fc <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	60fb      	str	r3, [r7, #12]
    break;
 80045ca:	e017      	b.n	80045fc <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	025b      	lsls	r3, r3, #9
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	60fb      	str	r3, [r7, #12]
    break;
 80045da:	e00f      	b.n	80045fc <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	60fb      	str	r3, [r7, #12]
    break;
 80045ea:	e007      	b.n	80045fc <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a07      	ldr	r2, [pc, #28]	; (800460c <GetSize+0xa0>)
 80045f0:	fb02 f303 	mul.w	r3, r2, r3
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	60fb      	str	r3, [r7, #12]
    break;
 80045f8:	e000      	b.n	80045fc <GetSize+0x90>
  default:
    break;
 80045fa:	bf00      	nop
  }

  return (int32_t)size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	0005dc00 	.word	0x0005dc00

08004610 <DCMI_MspInit>:
  * @brief  Initializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b090      	sub	sp, #64	; 0x40
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 8004618:	4b7e      	ldr	r3, [pc, #504]	; (8004814 <DCMI_MspInit+0x204>)
 800461a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800461e:	4a7d      	ldr	r2, [pc, #500]	; (8004814 <DCMI_MspInit+0x204>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8004628:	4b7a      	ldr	r3, [pc, #488]	; (8004814 <DCMI_MspInit+0x204>)
 800462a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004636:	4b77      	ldr	r3, [pc, #476]	; (8004814 <DCMI_MspInit+0x204>)
 8004638:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800463c:	4a75      	ldr	r2, [pc, #468]	; (8004814 <DCMI_MspInit+0x204>)
 800463e:	f043 0302 	orr.w	r3, r3, #2
 8004642:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8004646:	4b73      	ldr	r3, [pc, #460]	; (8004814 <DCMI_MspInit+0x204>)
 8004648:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004654:	4b6f      	ldr	r3, [pc, #444]	; (8004814 <DCMI_MspInit+0x204>)
 8004656:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800465a:	4a6e      	ldr	r2, [pc, #440]	; (8004814 <DCMI_MspInit+0x204>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004664:	4b6b      	ldr	r3, [pc, #428]	; (8004814 <DCMI_MspInit+0x204>)
 8004666:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	623b      	str	r3, [r7, #32]
 8004670:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004672:	4b68      	ldr	r3, [pc, #416]	; (8004814 <DCMI_MspInit+0x204>)
 8004674:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004678:	4a66      	ldr	r2, [pc, #408]	; (8004814 <DCMI_MspInit+0x204>)
 800467a:	f043 0302 	orr.w	r3, r3, #2
 800467e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004682:	4b64      	ldr	r3, [pc, #400]	; (8004814 <DCMI_MspInit+0x204>)
 8004684:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004690:	4b60      	ldr	r3, [pc, #384]	; (8004814 <DCMI_MspInit+0x204>)
 8004692:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004696:	4a5f      	ldr	r2, [pc, #380]	; (8004814 <DCMI_MspInit+0x204>)
 8004698:	f043 0304 	orr.w	r3, r3, #4
 800469c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80046a0:	4b5c      	ldr	r3, [pc, #368]	; (8004814 <DCMI_MspInit+0x204>)
 80046a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046ae:	4b59      	ldr	r3, [pc, #356]	; (8004814 <DCMI_MspInit+0x204>)
 80046b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046b4:	4a57      	ldr	r2, [pc, #348]	; (8004814 <DCMI_MspInit+0x204>)
 80046b6:	f043 0308 	orr.w	r3, r3, #8
 80046ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80046be:	4b55      	ldr	r3, [pc, #340]	; (8004814 <DCMI_MspInit+0x204>)
 80046c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046cc:	4b51      	ldr	r3, [pc, #324]	; (8004814 <DCMI_MspInit+0x204>)
 80046ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046d2:	4a50      	ldr	r2, [pc, #320]	; (8004814 <DCMI_MspInit+0x204>)
 80046d4:	f043 0310 	orr.w	r3, r3, #16
 80046d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80046dc:	4b4d      	ldr	r3, [pc, #308]	; (8004814 <DCMI_MspInit+0x204>)
 80046de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80046ea:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <DCMI_MspInit+0x204>)
 80046ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80046f0:	4a48      	ldr	r2, [pc, #288]	; (8004814 <DCMI_MspInit+0x204>)
 80046f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80046fa:	4b46      	ldr	r3, [pc, #280]	; (8004814 <DCMI_MspInit+0x204>)
 80046fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	68fb      	ldr	r3, [r7, #12]

  /* Configure DCMI GPIO as alternate function */
  /* DCMI PIXCLK and HSYNC pins */
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_4;
 8004708:	2350      	movs	r3, #80	; 0x50
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800470c:	2302      	movs	r3, #2
 800470e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004710:	2301      	movs	r3, #1
 8004712:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004714:	2303      	movs	r3, #3
 8004716:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8004718:	230d      	movs	r3, #13
 800471a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800471c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004720:	4619      	mov	r1, r3
 8004722:	483d      	ldr	r0, [pc, #244]	; (8004818 <DCMI_MspInit+0x208>)
 8004724:	f003 fa04 	bl	8007b30 <HAL_GPIO_Init>

  /* DCMI D0, D1 pins */
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7;
 8004728:	23c0      	movs	r3, #192	; 0xc0
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800472c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004730:	4619      	mov	r1, r3
 8004732:	483a      	ldr	r0, [pc, #232]	; (800481c <DCMI_MspInit+0x20c>)
 8004734:	f003 f9fc 	bl	8007b30 <HAL_GPIO_Init>

  /* DCMI VSYNC, D2, D3 pins */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8004738:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800473e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004742:	4619      	mov	r1, r3
 8004744:	4836      	ldr	r0, [pc, #216]	; (8004820 <DCMI_MspInit+0x210>)
 8004746:	f003 f9f3 	bl	8007b30 <HAL_GPIO_Init>

  /* DCMI D4 pins */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800474a:	2310      	movs	r3, #16
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800474e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004752:	4619      	mov	r1, r3
 8004754:	4833      	ldr	r0, [pc, #204]	; (8004824 <DCMI_MspInit+0x214>)
 8004756:	f003 f9eb 	bl	8007b30 <HAL_GPIO_Init>

  /* DCMI D5 pins */
  gpio_init_structure.Pin       = GPIO_PIN_3;
 800475a:	2308      	movs	r3, #8
 800475c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800475e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004762:	4619      	mov	r1, r3
 8004764:	4830      	ldr	r0, [pc, #192]	; (8004828 <DCMI_MspInit+0x218>)
 8004766:	f003 f9e3 	bl	8007b30 <HAL_GPIO_Init>

  /* DCMI D6, D7 pins */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9;
 800476a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8004770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004774:	4619      	mov	r1, r3
 8004776:	482d      	ldr	r0, [pc, #180]	; (800482c <DCMI_MspInit+0x21c>)
 8004778:	f003 f9da 	bl	8007b30 <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI_PSSI;
 800477c:	4b2c      	ldr	r3, [pc, #176]	; (8004830 <DCMI_MspInit+0x220>)
 800477e:	224b      	movs	r2, #75	; 0x4b
 8004780:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004782:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <DCMI_MspInit+0x220>)
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004788:	4b29      	ldr	r3, [pc, #164]	; (8004830 <DCMI_MspInit+0x220>)
 800478a:	2200      	movs	r2, #0
 800478c:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 800478e:	4b28      	ldr	r3, [pc, #160]	; (8004830 <DCMI_MspInit+0x220>)
 8004790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004794:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004796:	4b26      	ldr	r3, [pc, #152]	; (8004830 <DCMI_MspInit+0x220>)
 8004798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800479c:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <DCMI_MspInit+0x220>)
 80047a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047a4:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 80047a6:	4b22      	ldr	r3, [pc, #136]	; (8004830 <DCMI_MspInit+0x220>)
 80047a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ac:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <DCMI_MspInit+0x220>)
 80047b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047b4:	621a      	str	r2, [r3, #32]
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <DCMI_MspInit+0x220>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80047bc:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <DCMI_MspInit+0x220>)
 80047be:	2203      	movs	r2, #3
 80047c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 80047c2:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <DCMI_MspInit+0x220>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80047c8:	4b19      	ldr	r3, [pc, #100]	; (8004830 <DCMI_MspInit+0x220>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30

  hdma_handler.Instance = DMA2_Stream1;
 80047ce:	4b18      	ldr	r3, [pc, #96]	; (8004830 <DCMI_MspInit+0x220>)
 80047d0:	4a18      	ldr	r2, [pc, #96]	; (8004834 <DCMI_MspInit+0x224>)
 80047d2:	601a      	str	r2, [r3, #0]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a16      	ldr	r2, [pc, #88]	; (8004830 <DCMI_MspInit+0x220>)
 80047d8:	649a      	str	r2, [r3, #72]	; 0x48
 80047da:	4a15      	ldr	r2, [pc, #84]	; (8004830 <DCMI_MspInit+0x220>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6393      	str	r3, [r2, #56]	; 0x38

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80047e0:	2200      	movs	r2, #0
 80047e2:	210f      	movs	r1, #15
 80047e4:	204e      	movs	r0, #78	; 0x4e
 80047e6:	f000 fbe0 	bl	8004faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80047ea:	204e      	movs	r0, #78	; 0x4e
 80047ec:	f000 fbf7 	bl	8004fde <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80047f0:	2200      	movs	r2, #0
 80047f2:	210f      	movs	r1, #15
 80047f4:	2039      	movs	r0, #57	; 0x39
 80047f6:	f000 fbd8 	bl	8004faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80047fa:	2039      	movs	r0, #57	; 0x39
 80047fc:	f000 fbef 	bl	8004fde <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fe5b 	bl	80054c0 <HAL_DMA_Init>
}
 800480a:	bf00      	nop
 800480c:	3740      	adds	r7, #64	; 0x40
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	58024400 	.word	0x58024400
 8004818:	58020000 	.word	0x58020000
 800481c:	58020800 	.word	0x58020800
 8004820:	58021800 	.word	0x58021800
 8004824:	58021000 	.word	0x58021000
 8004828:	58020c00 	.word	0x58020c00
 800482c:	58020400 	.word	0x58020400
 8004830:	24001090 	.word	0x24001090
 8004834:	40020428 	.word	0x40020428

08004838 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8004842:	2378      	movs	r3, #120	; 0x78
 8004844:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C2_Init;
 8004846:	4b2c      	ldr	r3, [pc, #176]	; (80048f8 <OV5640_Probe+0xc0>)
 8004848:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 800484a:	4b2c      	ldr	r3, [pc, #176]	; (80048fc <OV5640_Probe+0xc4>)
 800484c:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg16;
 800484e:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <OV5640_Probe+0xc8>)
 8004850:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg16;
 8004852:	4b2c      	ldr	r3, [pc, #176]	; (8004904 <OV5640_Probe+0xcc>)
 8004854:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8004856:	4b2c      	ldr	r3, [pc, #176]	; (8004908 <OV5640_Probe+0xd0>)
 8004858:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800485a:	f107 030c 	add.w	r3, r7, #12
 800485e:	4619      	mov	r1, r3
 8004860:	482a      	ldr	r0, [pc, #168]	; (800490c <OV5640_Probe+0xd4>)
 8004862:	f7fd fb95 	bl	8001f90 <OV5640_RegisterBusIO>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800486c:	f06f 0304 	mvn.w	r3, #4
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	e03c      	b.n	80048ee <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8004874:	f107 0308 	add.w	r3, r7, #8
 8004878:	4619      	mov	r1, r3
 800487a:	4824      	ldr	r0, [pc, #144]	; (800490c <OV5640_Probe+0xd4>)
 800487c:	f7fd ffdc 	bl	8002838 <OV5640_ReadID>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004886:	f06f 0304 	mvn.w	r3, #4
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	e02f      	b.n	80048ee <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f245 6240 	movw	r2, #22080	; 0x5640
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004898:	f06f 0306 	mvn.w	r3, #6
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	e026      	b.n	80048ee <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 80048a0:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <OV5640_Probe+0xd8>)
 80048a2:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <OV5640_Probe+0xdc>)
 80048a4:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <OV5640_Probe+0xe0>)
 80048a8:	4a18      	ldr	r2, [pc, #96]	; (800490c <OV5640_Probe+0xd4>)
 80048aa:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 80048ac:	4b18      	ldr	r3, [pc, #96]	; (8004910 <OV5640_Probe+0xd8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a19      	ldr	r2, [pc, #100]	; (8004918 <OV5640_Probe+0xe0>)
 80048b4:	6810      	ldr	r0, [r2, #0]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4798      	blx	r3
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80048c2:	f06f 0304 	mvn.w	r3, #4
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
 80048c8:	e011      	b.n	80048ee <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 80048ca:	4b11      	ldr	r3, [pc, #68]	; (8004910 <OV5640_Probe+0xd8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a11      	ldr	r2, [pc, #68]	; (8004918 <OV5640_Probe+0xe0>)
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	4911      	ldr	r1, [pc, #68]	; (800491c <OV5640_Probe+0xe4>)
 80048d6:	6809      	ldr	r1, [r1, #0]
 80048d8:	4610      	mov	r0, r2
 80048da:	4798      	blx	r3
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80048e2:	f06f 0304 	mvn.w	r3, #4
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
 80048e8:	e001      	b.n	80048ee <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3728      	adds	r7, #40	; 0x28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	080038d5 	.word	0x080038d5
 80048fc:	08003949 	.word	0x08003949
 8004900:	08003b29 	.word	0x08003b29
 8004904:	08003acd 	.word	0x08003acd
 8004908:	08003b85 	.word	0x08003b85
 800490c:	24001108 	.word	0x24001108
 8004910:	24001088 	.word	0x24001088
 8004914:	2400003c 	.word	0x2400003c
 8004918:	24001004 	.word	0x24001004
 800491c:	2400108c 	.word	0x2400108c

08004920 <BSP_IOEXPANDER_Init>:
  * @param  Function to be initialized. Could be IOEXPANDER_IO_MODE
  * @note   IOEXPANDER_IDD_MODE and IOEXPANDER_TS_MODE are not used on STM32H7B3I_EVAL board
  * @retval BSP status
  */
int32_t BSP_IOEXPANDER_Init(uint32_t Instance, uint32_t Function)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Function != IOEXPANDER_IO_MODE))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <BSP_IOEXPANDER_Init+0x1a>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d003      	beq.n	8004942 <BSP_IOEXPANDER_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800493a:	f06f 0301 	mvn.w	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e01d      	b.n	800497e <BSP_IOEXPANDER_Init+0x5e>
  }
  else
  {
    if (IO_Ctx[Instance].IsInitialized == 0U)
 8004942:	4a11      	ldr	r2, [pc, #68]	; (8004988 <BSP_IOEXPANDER_Init+0x68>)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10e      	bne.n	800496c <BSP_IOEXPANDER_Init+0x4c>
    {
      if (MFXSTM32L152_Probe(Instance) != BSP_ERROR_NONE)
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f93a 	bl	8004bc8 <MFXSTM32L152_Probe>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <BSP_IOEXPANDER_Init+0x42>
      {
        ret = BSP_ERROR_NO_INIT;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e004      	b.n	800496c <BSP_IOEXPANDER_Init+0x4c>
      }
      else
      {
        IO_Ctx[Instance].IsInitialized = 1;
 8004962:	4a09      	ldr	r2, [pc, #36]	; (8004988 <BSP_IOEXPANDER_Init+0x68>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2101      	movs	r1, #1
 8004968:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      }
    }

    if (IO_Ctx[Instance].IsInitialized == 1U)
 800496c:	4a06      	ldr	r2, [pc, #24]	; (8004988 <BSP_IOEXPANDER_Init+0x68>)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d102      	bne.n	800497e <BSP_IOEXPANDER_Init+0x5e>
    {
      Io_Drv = (IO_Drv_t *) &MFXSTM32L152_IO_Driver;
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <BSP_IOEXPANDER_Init+0x6c>)
 800497a:	4a05      	ldr	r2, [pc, #20]	; (8004990 <BSP_IOEXPANDER_Init+0x70>)
 800497c:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 800497e:	68fb      	ldr	r3, [r7, #12]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	24001130 	.word	0x24001130
 800498c:	24001168 	.word	0x24001168
 8004990:	24000010 	.word	0x24000010

08004994 <BSP_IO_Init>:
  * @param  Init     pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval BSP status
  */
int32_t BSP_IO_Init(uint32_t Instance, BSP_IO_Init_t *Init)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]

  if((Instance >= IOEXPANDER_INSTANCES_NBR) || (Init == NULL))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <BSP_IO_Init+0x1a>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <BSP_IO_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80049ae:	f06f 0301 	mvn.w	r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e042      	b.n	8004a3c <BSP_IO_Init+0xa8>
  }
  else
  {
    if((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE)
 80049b6:	4a24      	ldr	r2, [pc, #144]	; (8004a48 <BSP_IO_Init+0xb4>)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4413      	add	r3, r2
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d124      	bne.n	8004a12 <BSP_IO_Init+0x7e>
    {
      if(BSP_IOEXPANDER_Init(Instance, IOEXPANDER_IO_MODE) != BSP_ERROR_NONE)
 80049c8:	2101      	movs	r1, #1
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff ffa8 	bl	8004920 <BSP_IOEXPANDER_Init>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <BSP_IO_Init+0x4a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80049d6:	f06f 0304 	mvn.w	r3, #4
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e019      	b.n	8004a12 <BSP_IO_Init+0x7e>
      }
      else if (Io_Drv->Start(&Io_CompObj, IO_PIN_ALL) < 0)
 80049de:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <BSP_IO_Init+0xb8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80049e8:	4819      	ldr	r0, [pc, #100]	; (8004a50 <BSP_IO_Init+0xbc>)
 80049ea:	4798      	blx	r3
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da03      	bge.n	80049fa <BSP_IO_Init+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80049f2:	f06f 0304 	mvn.w	r3, #4
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e00b      	b.n	8004a12 <BSP_IO_Init+0x7e>
      }
      else
      {
        IO_Ctx[Instance].Functions |= IOEXPANDER_IO_MODE;
 80049fa:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <BSP_IO_Init+0xb4>)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4413      	add	r3, r2
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f043 0201 	orr.w	r2, r3, #1
 8004a08:	490f      	ldr	r1, [pc, #60]	; (8004a48 <BSP_IO_Init+0xb4>)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	440b      	add	r3, r1
 8004a10:	605a      	str	r2, [r3, #4]
      }
    }

    if(ret == BSP_ERROR_NONE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d111      	bne.n	8004a3c <BSP_IO_Init+0xa8>
    {
      /* If IT mode is selected, configures MFX low level interrupt */
      if(Init->Mode >= IO_MODE_IT_RISING_EDGE)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d901      	bls.n	8004a24 <BSP_IO_Init+0x90>
      {
        BSP_IOEXPANDER_ITConfig();
 8004a20:	f000 f870 	bl	8004b04 <BSP_IOEXPANDER_ITConfig>
      }

      /* Initializes IO pin */
      if(Io_Drv->Init(&Io_CompObj, Init) < 0)
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <BSP_IO_Init+0xb8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	4808      	ldr	r0, [pc, #32]	; (8004a50 <BSP_IO_Init+0xbc>)
 8004a2e:	4798      	blx	r3
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	da02      	bge.n	8004a3c <BSP_IO_Init+0xa8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a36:	f06f 0304 	mvn.w	r3, #4
 8004a3a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	24001130 	.word	0x24001130
 8004a4c:	24001168 	.word	0x24001168
 8004a50:	24001138 	.word	0x24001138

08004a54 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState  New pins state to write
  * @retval BSP status
  */
int32_t BSP_IO_WritePin(uint32_t Instance, uint32_t IoPin, uint32_t PinState)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]

  if((Instance >= IOEXPANDER_INSTANCES_NBR) || ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d108      	bne.n	8004a7c <BSP_IO_WritePin+0x28>
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <BSP_IO_WritePin+0x58>)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d103      	bne.n	8004a84 <BSP_IO_WritePin+0x30>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004a7c:	f06f 0301 	mvn.w	r3, #1
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	e00d      	b.n	8004aa0 <BSP_IO_WritePin+0x4c>
  }
  else
  {
    /* Set the Pin state */
    if(Io_Drv->WritePin(&Io_CompObj, IoPin, PinState) < 0)
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <BSP_IO_WritePin+0x5c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	4808      	ldr	r0, [pc, #32]	; (8004ab4 <BSP_IO_WritePin+0x60>)
 8004a92:	4798      	blx	r3
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da02      	bge.n	8004aa0 <BSP_IO_WritePin+0x4c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a9a:	f06f 0304 	mvn.w	r3, #4
 8004a9e:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004aa0:	697b      	ldr	r3, [r7, #20]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	24001130 	.word	0x24001130
 8004ab0:	24001168 	.word	0x24001168
 8004ab4:	24001138 	.word	0x24001138

08004ab8 <BSP_IO_ReadPin>:
  * @param  Instance IOE instance
  * @param  IoPin  Selected pin to read.
  * @retval The current pins state or BSP_ERROR_WRONG_PARAM
  */
int32_t BSP_IO_ReadPin(uint32_t Instance, uint32_t IoPin)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  if((Instance >= IOEXPANDER_INSTANCES_NBR) || ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <BSP_IO_ReadPin+0x22>
 8004ac8:	4a0b      	ldr	r2, [pc, #44]	; (8004af8 <BSP_IO_ReadPin+0x40>)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4413      	add	r3, r2
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <BSP_IO_ReadPin+0x28>
  {
    return BSP_ERROR_WRONG_PARAM;
 8004ada:	f06f 0301 	mvn.w	r3, #1
 8004ade:	e006      	b.n	8004aee <BSP_IO_ReadPin+0x36>
  }

  return Io_Drv->ReadPin(&Io_CompObj, IoPin);
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <BSP_IO_ReadPin+0x44>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	6839      	ldr	r1, [r7, #0]
 8004ae8:	4805      	ldr	r0, [pc, #20]	; (8004b00 <BSP_IO_ReadPin+0x48>)
 8004aea:	4798      	blx	r3
 8004aec:	4603      	mov	r3, r0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	24001130 	.word	0x24001130
 8004afc:	24001168 	.word	0x24001168
 8004b00:	24001138 	.word	0x24001138

08004b04 <BSP_IOEXPANDER_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void BSP_IOEXPANDER_ITConfig(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
  static uint32_t mfx_io_it_enabled = 0U;
  GPIO_InitTypeDef  gpio_init_structure;

  if(mfx_io_it_enabled == 0U)
 8004b0a:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <BSP_IOEXPANDER_ITConfig+0x9c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d141      	bne.n	8004b96 <BSP_IOEXPANDER_ITConfig+0x92>
  {
    mfx_io_it_enabled = 1U;
 8004b12:	4b23      	ldr	r3, [pc, #140]	; (8004ba0 <BSP_IOEXPANDER_ITConfig+0x9c>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
    /* Enable the GPIO EXTI clock */
    MFX_IRQOUT_GPIO_CLK_ENABLE();
 8004b18:	4b22      	ldr	r3, [pc, #136]	; (8004ba4 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b1e:	4a21      	ldr	r2, [pc, #132]	; (8004ba4 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004b28:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b36:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004b38:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004b3c:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004b3e:	f043 0302 	orr.w	r3, r3, #2
 8004b42:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004b46:	4b17      	ldr	r3, [pc, #92]	; (8004ba4 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004b48:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]

    gpio_init_structure.Pin   = MFX_IRQOUT_PIN;
 8004b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b58:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 8004b62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b66:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(MFX_IRQOUT_GPIO_PORT, &gpio_init_structure);
 8004b68:	f107 030c 	add.w	r3, r7, #12
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	480e      	ldr	r0, [pc, #56]	; (8004ba8 <BSP_IOEXPANDER_ITConfig+0xa4>)
 8004b70:	f002 ffde 	bl	8007b30 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hio_exti, IO_EXTI_LINE);
 8004b74:	2108      	movs	r1, #8
 8004b76:	480d      	ldr	r0, [pc, #52]	; (8004bac <BSP_IOEXPANDER_ITConfig+0xa8>)
 8004b78:	f002 ffc5 	bl	8007b06 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hio_exti,  HAL_EXTI_COMMON_CB_ID, IO_EXTI_Callback);
 8004b7c:	4a0c      	ldr	r2, [pc, #48]	; (8004bb0 <BSP_IOEXPANDER_ITConfig+0xac>)
 8004b7e:	2100      	movs	r1, #0
 8004b80:	480a      	ldr	r0, [pc, #40]	; (8004bac <BSP_IOEXPANDER_ITConfig+0xa8>)
 8004b82:	f002 ffa1 	bl	8007ac8 <HAL_EXTI_RegisterCallback>

    /* Enable and set GPIO EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn), BSP_IOEXPANDER_IT_PRIORITY, 0x0F);
 8004b86:	220f      	movs	r2, #15
 8004b88:	210f      	movs	r1, #15
 8004b8a:	2017      	movs	r0, #23
 8004b8c:	f000 fa0d 	bl	8004faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn));
 8004b90:	2017      	movs	r0, #23
 8004b92:	f000 fa24 	bl	8004fde <HAL_NVIC_EnableIRQ>
  }
}
 8004b96:	bf00      	nop
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	2400116c 	.word	0x2400116c
 8004ba4:	58024400 	.word	0x58024400
 8004ba8:	58022000 	.word	0x58022000
 8004bac:	24001160 	.word	0x24001160
 8004bb0:	08004c91 	.word	0x08004c91

08004bb4 <BSP_IO_Callback>:
  * @brief  BSP TS Callback.
  * @param  Instance IO instance
  * @retval None.
  */
__weak void BSP_IO_Callback(uint32_t Instance)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on TS touch detection */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <MFXSTM32L152_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t MFXSTM32L152_Probe(uint32_t Instance)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08c      	sub	sp, #48	; 0x30
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  int32_t              ret = BSP_ERROR_NONE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MFXSTM32L152_IO_t    IOCtx;
  uint32_t             mfxstm32l152_id, i;
  uint8_t i2c_address[] = {IO_I2C_ADDRESS, IO_I2C_ADDRESS_2};
 8004bd4:	f248 6384 	movw	r3, #34436	; 0x8684
 8004bd8:	813b      	strh	r3, [r7, #8]

  /* Configure the audio driver */
  IOCtx.Init        = BSP_I2C2_Init;
 8004bda:	4b27      	ldr	r3, [pc, #156]	; (8004c78 <MFXSTM32L152_Probe+0xb0>)
 8004bdc:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8004bde:	4b27      	ldr	r3, [pc, #156]	; (8004c7c <MFXSTM32L152_Probe+0xb4>)
 8004be0:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8004be2:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <MFXSTM32L152_Probe+0xb8>)
 8004be4:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8004be6:	4b27      	ldr	r3, [pc, #156]	; (8004c84 <MFXSTM32L152_Probe+0xbc>)
 8004be8:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8004bea:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <MFXSTM32L152_Probe+0xc0>)
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0U; i < 2U; i++)
 8004bee:	2300      	movs	r3, #0
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf2:	e036      	b.n	8004c62 <MFXSTM32L152_Probe+0x9a>
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8004bf4:	f107 0208 	add.w	r2, r7, #8
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	4413      	add	r3, r2
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	833b      	strh	r3, [r7, #24]
    if(MFXSTM32L152_RegisterBusIO (&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8004c02:	f107 0310 	add.w	r3, r7, #16
 8004c06:	4619      	mov	r1, r3
 8004c08:	4820      	ldr	r0, [pc, #128]	; (8004c8c <MFXSTM32L152_Probe+0xc4>)
 8004c0a:	f7fd f861 	bl	8001cd0 <MFXSTM32L152_RegisterBusIO>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <MFXSTM32L152_Probe+0x54>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004c14:	f06f 0307 	mvn.w	r3, #7
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c1a:	e01f      	b.n	8004c5c <MFXSTM32L152_Probe+0x94>
    }
    else if(MFXSTM32L152_ReadID(&Io_CompObj, &mfxstm32l152_id) != MFXSTM32L152_OK)
 8004c1c:	f107 030c 	add.w	r3, r7, #12
 8004c20:	4619      	mov	r1, r3
 8004c22:	481a      	ldr	r0, [pc, #104]	; (8004c8c <MFXSTM32L152_Probe+0xc4>)
 8004c24:	f7fc fc0a 	bl	800143c <MFXSTM32L152_ReadID>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <MFXSTM32L152_Probe+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004c2e:	f06f 0303 	mvn.w	r3, #3
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c34:	e012      	b.n	8004c5c <MFXSTM32L152_Probe+0x94>
    }
    else
    {
      if((mfxstm32l152_id == MFXSTM32L152_ID) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b7b      	cmp	r3, #123	; 0x7b
 8004c3a:	d002      	beq.n	8004c42 <MFXSTM32L152_Probe+0x7a>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b79      	cmp	r3, #121	; 0x79
 8004c40:	d109      	bne.n	8004c56 <MFXSTM32L152_Probe+0x8e>
      {
        if(MFXSTM32L152_Init(&Io_CompObj) != MFXSTM32L152_OK)
 8004c42:	4812      	ldr	r0, [pc, #72]	; (8004c8c <MFXSTM32L152_Probe+0xc4>)
 8004c44:	f7fc fb9d 	bl	8001382 <MFXSTM32L152_Init>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00d      	beq.n	8004c6a <MFXSTM32L152_Probe+0xa2>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c4e:	f06f 0304 	mvn.w	r3, #4
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8004c54:	e009      	b.n	8004c6a <MFXSTM32L152_Probe+0xa2>
      }
      else
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004c56:	f06f 0306 	mvn.w	r3, #6
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(i = 0U; i < 2U; i++)
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	3301      	adds	r3, #1
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d9c5      	bls.n	8004bf4 <MFXSTM32L152_Probe+0x2c>
 8004c68:	e000      	b.n	8004c6c <MFXSTM32L152_Probe+0xa4>
        break;
 8004c6a:	bf00      	nop
      }
    }
  }

  return ret;
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3730      	adds	r7, #48	; 0x30
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	080038d5 	.word	0x080038d5
 8004c7c:	08003949 	.word	0x08003949
 8004c80:	08003a71 	.word	0x08003a71
 8004c84:	08003a15 	.word	0x08003a15
 8004c88:	08003b85 	.word	0x08003b85
 8004c8c:	24001138 	.word	0x24001138

08004c90 <IO_EXTI_Callback>:
/**
  * @brief  IO EXTI touch detection callbacks.
  * @retval None
  */
static void IO_EXTI_Callback(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  BSP_IO_Callback(0);
 8004c94:	2000      	movs	r0, #0
 8004c96:	f7ff ff8d 	bl	8004bb4 <BSP_IO_Callback>
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ca6:	2003      	movs	r0, #3
 8004ca8:	f000 f974 	bl	8004f94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004cac:	f006 f9d8 	bl	800b060 <HAL_RCC_GetSysClockFreq>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <HAL_Init+0x68>)
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	4913      	ldr	r1, [pc, #76]	; (8004d0c <HAL_Init+0x6c>)
 8004cbe:	5ccb      	ldrb	r3, [r1, r3]
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004cca:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <HAL_Init+0x68>)
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <HAL_Init+0x6c>)
 8004cd4:	5cd3      	ldrb	r3, [r2, r3]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce0:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <HAL_Init+0x70>)
 8004ce2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ce4:	4a0b      	ldr	r2, [pc, #44]	; (8004d14 <HAL_Init+0x74>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cea:	2000      	movs	r0, #0
 8004cec:	f000 f81c 	bl	8004d28 <HAL_InitTick>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e002      	b.n	8004d00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004cfa:	f000 f80d 	bl	8004d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	08011268 	.word	0x08011268
 8004d10:	2400000c 	.word	0x2400000c
 8004d14:	24000008 	.word	0x24000008

08004d18 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d30:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <HAL_InitTick+0x60>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e021      	b.n	8004d80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d3c:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <HAL_InitTick+0x64>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <HAL_InitTick+0x60>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	4619      	mov	r1, r3
 8004d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f951 	bl	8004ffa <HAL_SYSTICK_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e00e      	b.n	8004d80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b0f      	cmp	r3, #15
 8004d66:	d80a      	bhi.n	8004d7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d68:	2200      	movs	r2, #0
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d70:	f000 f91b 	bl	8004faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d74:	4a06      	ldr	r2, [pc, #24]	; (8004d90 <HAL_InitTick+0x68>)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	24000084 	.word	0x24000084
 8004d8c:	24000008 	.word	0x24000008
 8004d90:	24000080 	.word	0x24000080

08004d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return uwTick;
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_GetTick+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	24001170 	.word	0x24001170

08004dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004db4:	f7ff ffee 	bl	8004d94 <HAL_GetTick>
 8004db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d005      	beq.n	8004dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <HAL_Delay+0x44>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004dd2:	bf00      	nop
 8004dd4:	f7ff ffde 	bl	8004d94 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d8f7      	bhi.n	8004dd4 <HAL_Delay+0x28>
  {
  }
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	24000084 	.word	0x24000084

08004df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <__NVIC_SetPriorityGrouping+0x40>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e10:	4013      	ands	r3, r2
 8004e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <__NVIC_SetPriorityGrouping+0x44>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e22:	4a04      	ldr	r2, [pc, #16]	; (8004e34 <__NVIC_SetPriorityGrouping+0x40>)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	60d3      	str	r3, [r2, #12]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	e000ed00 	.word	0xe000ed00
 8004e38:	05fa0000 	.word	0x05fa0000

08004e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <__NVIC_GetPriorityGrouping+0x18>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	0a1b      	lsrs	r3, r3, #8
 8004e46:	f003 0307 	and.w	r3, r3, #7
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	e000ed00 	.word	0xe000ed00

08004e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	db0b      	blt.n	8004e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	f003 021f 	and.w	r2, r3, #31
 8004e70:	4907      	ldr	r1, [pc, #28]	; (8004e90 <__NVIC_EnableIRQ+0x38>)
 8004e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	2001      	movs	r0, #1
 8004e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	e000e100 	.word	0xe000e100

08004e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	6039      	str	r1, [r7, #0]
 8004e9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	db0a      	blt.n	8004ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	490c      	ldr	r1, [pc, #48]	; (8004ee0 <__NVIC_SetPriority+0x4c>)
 8004eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eb2:	0112      	lsls	r2, r2, #4
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ebc:	e00a      	b.n	8004ed4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	4908      	ldr	r1, [pc, #32]	; (8004ee4 <__NVIC_SetPriority+0x50>)
 8004ec4:	88fb      	ldrh	r3, [r7, #6]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	3b04      	subs	r3, #4
 8004ecc:	0112      	lsls	r2, r2, #4
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	761a      	strb	r2, [r3, #24]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	e000e100 	.word	0xe000e100
 8004ee4:	e000ed00 	.word	0xe000ed00

08004ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b089      	sub	sp, #36	; 0x24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f1c3 0307 	rsb	r3, r3, #7
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	bf28      	it	cs
 8004f06:	2304      	movcs	r3, #4
 8004f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	2b06      	cmp	r3, #6
 8004f10:	d902      	bls.n	8004f18 <NVIC_EncodePriority+0x30>
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3b03      	subs	r3, #3
 8004f16:	e000      	b.n	8004f1a <NVIC_EncodePriority+0x32>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43da      	mvns	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f30:	f04f 31ff 	mov.w	r1, #4294967295
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	43d9      	mvns	r1, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f40:	4313      	orrs	r3, r2
         );
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3724      	adds	r7, #36	; 0x24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f60:	d301      	bcc.n	8004f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f62:	2301      	movs	r3, #1
 8004f64:	e00f      	b.n	8004f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <SysTick_Config+0x40>)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f6e:	210f      	movs	r1, #15
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	f7ff ff8e 	bl	8004e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <SysTick_Config+0x40>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f7e:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <SysTick_Config+0x40>)
 8004f80:	2207      	movs	r2, #7
 8004f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	e000e010 	.word	0xe000e010

08004f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff29 	bl	8004df4 <__NVIC_SetPriorityGrouping>
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b086      	sub	sp, #24
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fb8:	f7ff ff40 	bl	8004e3c <__NVIC_GetPriorityGrouping>
 8004fbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	6978      	ldr	r0, [r7, #20]
 8004fc4:	f7ff ff90 	bl	8004ee8 <NVIC_EncodePriority>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fce:	4611      	mov	r1, r2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff ff5f 	bl	8004e94 <__NVIC_SetPriority>
}
 8004fd6:	bf00      	nop
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff ff33 	bl	8004e58 <__NVIC_EnableIRQ>
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff ffa4 	bl	8004f50 <SysTick_Config>
 8005008:	4603      	mov	r3, r0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e069      	b.n	80050fa <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f868 	bl	8005108 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <HAL_DCMI_Init+0xf0>)
 800505a:	400b      	ands	r3, r1
 800505c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005072:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800507e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800508a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005096:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80050a2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d112      	bne.n	80050da <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	7f1b      	ldrb	r3, [r3, #28]
 80050b8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	7f5b      	ldrb	r3, [r3, #29]
 80050be:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050c0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	7f9b      	ldrb	r3, [r3, #30]
 80050c6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80050c8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	7fdb      	ldrb	r3, [r3, #31]
 80050d0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80050d6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050d8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 021e 	orr.w	r2, r2, #30
 80050e8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	ffe0f007 	.word	0xffe0f007

08005108 <HAL_DCMI_MspInit>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_DCMI_Start_DMA+0x1c>
 8005134:	2302      	movs	r3, #2
 8005136:	e0ab      	b.n	8005290 <HAL_DCMI_Start_DMA+0x174>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005156:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0202 	bic.w	r2, r2, #2
 8005166:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6819      	ldr	r1, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	430a      	orrs	r2, r1
 8005176:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517c:	4a46      	ldr	r2, [pc, #280]	; (8005298 <HAL_DCMI_Start_DMA+0x17c>)
 800517e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005184:	4a45      	ldr	r2, [pc, #276]	; (800529c <HAL_DCMI_Start_DMA+0x180>)
 8005186:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518c:	2200      	movs	r2, #0
 800518e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ae:	d219      	bcs.n	80051e4 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3328      	adds	r3, #40	; 0x28
 80051ba:	4619      	mov	r1, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	f000 fd0e 	bl	8005be0 <HAL_DMA_Start_IT>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d055      	beq.n	8005276 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2240      	movs	r2, #64	; 0x40
 80051ce:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e055      	b.n	8005290 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e8:	4a2b      	ldr	r2, [pc, #172]	; (8005298 <HAL_DCMI_Start_DMA+0x17c>)
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80051fe:	e009      	b.n	8005214 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	085a      	lsrs	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	005a      	lsls	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521c:	d2f0      	bcs.n	8005200 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	1e9a      	subs	r2, r3, #2
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3328      	adds	r3, #40	; 0x28
 8005246:	4619      	mov	r1, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	f001 ff89 	bl	8007168 <HAL_DMAEx_MultiBufferStart_IT>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00c      	beq.n	8005276 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2240      	movs	r2, #64	; 0x40
 8005260:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e00c      	b.n	8005290 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	08005361 	.word	0x08005361
 800529c:	08005487 	.word	0x08005487

080052a0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80052a8:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <HAL_DCMI_Stop+0xb8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a2b      	ldr	r2, [pc, #172]	; (800535c <HAL_DCMI_Stop+0xbc>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	0a5b      	lsrs	r3, r3, #9
 80052b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052b8:	fb02 f303 	mul.w	r3, r2, r3
 80052bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_DCMI_Stop+0x30>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e03f      	b.n	8005350 <HAL_DCMI_Stop+0xb0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d108      	bne.n	800530e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005300:	f043 0220 	orr.w	r2, r3, #32
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	72fb      	strb	r3, [r7, #11]
      break;
 800530c:	e006      	b.n	800531c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e9      	bne.n	80052f0 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800532a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005330:	4618      	mov	r0, r3
 8005332:	f000 febf 	bl	80060b4 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800534e:	7afb      	ldrb	r3, [r7, #11]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	24000008 	.word	0x24000008
 800535c:	10624dd3 	.word	0x10624dd3

08005360 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	2b00      	cmp	r3, #0
 8005374:	d043      	beq.n	80053fe <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005382:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d118      	bne.n	80053c2 <DCMI_DMAXferCplt+0x62>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d015      	beq.n	80053c2 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	00da      	lsls	r2, r3, #3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4413      	add	r3, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	4619      	mov	r1, r3
 80053b2:	f002 fa37 	bl	8007824 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	1e5a      	subs	r2, r3, #1
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	639a      	str	r2, [r3, #56]	; 0x38
 80053c0:	e044      	b.n	800544c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d13c      	bne.n	800544c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	00da      	lsls	r2, r3, #3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	4413      	add	r3, r2
 80053ea:	2201      	movs	r2, #1
 80053ec:	4619      	mov	r1, r3
 80053ee:	f002 fa19 	bl	8007824 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	1e5a      	subs	r2, r3, #1
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38
 80053fc:	e026      	b.n	800544c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d006      	beq.n	800541c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005418:	60da      	str	r2, [r3, #12]
 800541a:	e017      	b.n	800544c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10f      	bne.n	800544c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005430:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	0099      	lsls	r1, r3, #2
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	440a      	add	r2, r1
 8005442:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	429a      	cmp	r2, r3
 8005456:	d112      	bne.n	800547e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d103      	bne.n	800547e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	2b02      	cmp	r3, #2
 800549c:	d009      	beq.n	80054b2 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff f84e 	bl	8004554 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80054c8:	f7ff fc64 	bl	8004d94 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e37f      	b.n	8005bd8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a66      	ldr	r2, [pc, #408]	; (8005678 <HAL_DMA_Init+0x1b8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d04a      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a65      	ldr	r2, [pc, #404]	; (800567c <HAL_DMA_Init+0x1bc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d045      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a63      	ldr	r2, [pc, #396]	; (8005680 <HAL_DMA_Init+0x1c0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d040      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a62      	ldr	r2, [pc, #392]	; (8005684 <HAL_DMA_Init+0x1c4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d03b      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a60      	ldr	r2, [pc, #384]	; (8005688 <HAL_DMA_Init+0x1c8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d036      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a5f      	ldr	r2, [pc, #380]	; (800568c <HAL_DMA_Init+0x1cc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d031      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a5d      	ldr	r2, [pc, #372]	; (8005690 <HAL_DMA_Init+0x1d0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d02c      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a5c      	ldr	r2, [pc, #368]	; (8005694 <HAL_DMA_Init+0x1d4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d027      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a5a      	ldr	r2, [pc, #360]	; (8005698 <HAL_DMA_Init+0x1d8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d022      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a59      	ldr	r2, [pc, #356]	; (800569c <HAL_DMA_Init+0x1dc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d01d      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a57      	ldr	r2, [pc, #348]	; (80056a0 <HAL_DMA_Init+0x1e0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d018      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a56      	ldr	r2, [pc, #344]	; (80056a4 <HAL_DMA_Init+0x1e4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d013      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a54      	ldr	r2, [pc, #336]	; (80056a8 <HAL_DMA_Init+0x1e8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00e      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a53      	ldr	r2, [pc, #332]	; (80056ac <HAL_DMA_Init+0x1ec>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d009      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a51      	ldr	r2, [pc, #324]	; (80056b0 <HAL_DMA_Init+0x1f0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d004      	beq.n	8005578 <HAL_DMA_Init+0xb8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a50      	ldr	r2, [pc, #320]	; (80056b4 <HAL_DMA_Init+0x1f4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d101      	bne.n	800557c <HAL_DMA_Init+0xbc>
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <HAL_DMA_Init+0xbe>
 800557c:	2300      	movs	r3, #0
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 813c 	beq.w	80057fc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a37      	ldr	r2, [pc, #220]	; (8005678 <HAL_DMA_Init+0x1b8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d04a      	beq.n	8005634 <HAL_DMA_Init+0x174>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a36      	ldr	r2, [pc, #216]	; (800567c <HAL_DMA_Init+0x1bc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d045      	beq.n	8005634 <HAL_DMA_Init+0x174>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a34      	ldr	r2, [pc, #208]	; (8005680 <HAL_DMA_Init+0x1c0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d040      	beq.n	8005634 <HAL_DMA_Init+0x174>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a33      	ldr	r2, [pc, #204]	; (8005684 <HAL_DMA_Init+0x1c4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d03b      	beq.n	8005634 <HAL_DMA_Init+0x174>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a31      	ldr	r2, [pc, #196]	; (8005688 <HAL_DMA_Init+0x1c8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d036      	beq.n	8005634 <HAL_DMA_Init+0x174>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a30      	ldr	r2, [pc, #192]	; (800568c <HAL_DMA_Init+0x1cc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d031      	beq.n	8005634 <HAL_DMA_Init+0x174>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a2e      	ldr	r2, [pc, #184]	; (8005690 <HAL_DMA_Init+0x1d0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d02c      	beq.n	8005634 <HAL_DMA_Init+0x174>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a2d      	ldr	r2, [pc, #180]	; (8005694 <HAL_DMA_Init+0x1d4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d027      	beq.n	8005634 <HAL_DMA_Init+0x174>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <HAL_DMA_Init+0x1d8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d022      	beq.n	8005634 <HAL_DMA_Init+0x174>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2a      	ldr	r2, [pc, #168]	; (800569c <HAL_DMA_Init+0x1dc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d01d      	beq.n	8005634 <HAL_DMA_Init+0x174>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a28      	ldr	r2, [pc, #160]	; (80056a0 <HAL_DMA_Init+0x1e0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d018      	beq.n	8005634 <HAL_DMA_Init+0x174>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a27      	ldr	r2, [pc, #156]	; (80056a4 <HAL_DMA_Init+0x1e4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d013      	beq.n	8005634 <HAL_DMA_Init+0x174>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <HAL_DMA_Init+0x1e8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00e      	beq.n	8005634 <HAL_DMA_Init+0x174>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a24      	ldr	r2, [pc, #144]	; (80056ac <HAL_DMA_Init+0x1ec>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d009      	beq.n	8005634 <HAL_DMA_Init+0x174>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <HAL_DMA_Init+0x1f0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_DMA_Init+0x174>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a21      	ldr	r2, [pc, #132]	; (80056b4 <HAL_DMA_Init+0x1f4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d108      	bne.n	8005646 <HAL_DMA_Init+0x186>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e007      	b.n	8005656 <HAL_DMA_Init+0x196>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0201 	bic.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005656:	e02f      	b.n	80056b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005658:	f7ff fb9c 	bl	8004d94 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b05      	cmp	r3, #5
 8005664:	d928      	bls.n	80056b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2203      	movs	r2, #3
 8005670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e2af      	b.n	8005bd8 <HAL_DMA_Init+0x718>
 8005678:	40020010 	.word	0x40020010
 800567c:	40020028 	.word	0x40020028
 8005680:	40020040 	.word	0x40020040
 8005684:	40020058 	.word	0x40020058
 8005688:	40020070 	.word	0x40020070
 800568c:	40020088 	.word	0x40020088
 8005690:	400200a0 	.word	0x400200a0
 8005694:	400200b8 	.word	0x400200b8
 8005698:	40020410 	.word	0x40020410
 800569c:	40020428 	.word	0x40020428
 80056a0:	40020440 	.word	0x40020440
 80056a4:	40020458 	.word	0x40020458
 80056a8:	40020470 	.word	0x40020470
 80056ac:	40020488 	.word	0x40020488
 80056b0:	400204a0 	.word	0x400204a0
 80056b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1c8      	bne.n	8005658 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_DMA_Init+0x3e0>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80056de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b04      	cmp	r3, #4
 800570a:	d107      	bne.n	800571c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	4313      	orrs	r3, r2
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b28      	cmp	r3, #40	; 0x28
 8005722:	d903      	bls.n	800572c <HAL_DMA_Init+0x26c>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b2e      	cmp	r3, #46	; 0x2e
 800572a:	d91f      	bls.n	800576c <HAL_DMA_Init+0x2ac>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b3e      	cmp	r3, #62	; 0x3e
 8005732:	d903      	bls.n	800573c <HAL_DMA_Init+0x27c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b42      	cmp	r3, #66	; 0x42
 800573a:	d917      	bls.n	800576c <HAL_DMA_Init+0x2ac>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b46      	cmp	r3, #70	; 0x46
 8005742:	d903      	bls.n	800574c <HAL_DMA_Init+0x28c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b48      	cmp	r3, #72	; 0x48
 800574a:	d90f      	bls.n	800576c <HAL_DMA_Init+0x2ac>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b4e      	cmp	r3, #78	; 0x4e
 8005752:	d903      	bls.n	800575c <HAL_DMA_Init+0x29c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b52      	cmp	r3, #82	; 0x52
 800575a:	d907      	bls.n	800576c <HAL_DMA_Init+0x2ac>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b73      	cmp	r3, #115	; 0x73
 8005762:	d905      	bls.n	8005770 <HAL_DMA_Init+0x2b0>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b77      	cmp	r3, #119	; 0x77
 800576a:	d801      	bhi.n	8005770 <HAL_DMA_Init+0x2b0>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <HAL_DMA_Init+0x2b2>
 8005770:	2300      	movs	r3, #0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800577c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d117      	bne.n	80057d8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00e      	beq.n	80057d8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 fa2e 	bl	8006c1c <DMA_CheckFifoParam>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2240      	movs	r2, #64	; 0x40
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e1ff      	b.n	8005bd8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 f969 	bl	8006ab8 <DMA_CalcBaseAndBitshift>
 80057e6:	4603      	mov	r3, r0
 80057e8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	223f      	movs	r2, #63	; 0x3f
 80057f4:	409a      	lsls	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	609a      	str	r2, [r3, #8]
 80057fa:	e0fe      	b.n	80059fa <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a28      	ldr	r2, [pc, #160]	; (80058a4 <HAL_DMA_Init+0x3e4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d04a      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a27      	ldr	r2, [pc, #156]	; (80058a8 <HAL_DMA_Init+0x3e8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d045      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a25      	ldr	r2, [pc, #148]	; (80058ac <HAL_DMA_Init+0x3ec>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d040      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a24      	ldr	r2, [pc, #144]	; (80058b0 <HAL_DMA_Init+0x3f0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d03b      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a22      	ldr	r2, [pc, #136]	; (80058b4 <HAL_DMA_Init+0x3f4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d036      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a21      	ldr	r2, [pc, #132]	; (80058b8 <HAL_DMA_Init+0x3f8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d031      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <HAL_DMA_Init+0x3fc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d02c      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1e      	ldr	r2, [pc, #120]	; (80058c0 <HAL_DMA_Init+0x400>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d027      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <HAL_DMA_Init+0x404>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d022      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <HAL_DMA_Init+0x408>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d01d      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a19      	ldr	r2, [pc, #100]	; (80058cc <HAL_DMA_Init+0x40c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d018      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <HAL_DMA_Init+0x410>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d013      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <HAL_DMA_Init+0x414>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00e      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <HAL_DMA_Init+0x418>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d009      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a13      	ldr	r2, [pc, #76]	; (80058dc <HAL_DMA_Init+0x41c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <HAL_DMA_Init+0x3dc>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a12      	ldr	r2, [pc, #72]	; (80058e0 <HAL_DMA_Init+0x420>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d123      	bne.n	80058e4 <HAL_DMA_Init+0x424>
 800589c:	2301      	movs	r3, #1
 800589e:	e022      	b.n	80058e6 <HAL_DMA_Init+0x426>
 80058a0:	fe10803f 	.word	0xfe10803f
 80058a4:	48022c08 	.word	0x48022c08
 80058a8:	48022c1c 	.word	0x48022c1c
 80058ac:	48022c30 	.word	0x48022c30
 80058b0:	48022c44 	.word	0x48022c44
 80058b4:	48022c58 	.word	0x48022c58
 80058b8:	48022c6c 	.word	0x48022c6c
 80058bc:	48022c80 	.word	0x48022c80
 80058c0:	48022c94 	.word	0x48022c94
 80058c4:	58025408 	.word	0x58025408
 80058c8:	5802541c 	.word	0x5802541c
 80058cc:	58025430 	.word	0x58025430
 80058d0:	58025444 	.word	0x58025444
 80058d4:	58025458 	.word	0x58025458
 80058d8:	5802546c 	.word	0x5802546c
 80058dc:	58025480 	.word	0x58025480
 80058e0:	58025494 	.word	0x58025494
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d07e      	beq.n	80059e8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a80      	ldr	r2, [pc, #512]	; (8005af0 <HAL_DMA_Init+0x630>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d021      	beq.n	8005938 <HAL_DMA_Init+0x478>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a7e      	ldr	r2, [pc, #504]	; (8005af4 <HAL_DMA_Init+0x634>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01c      	beq.n	8005938 <HAL_DMA_Init+0x478>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a7d      	ldr	r2, [pc, #500]	; (8005af8 <HAL_DMA_Init+0x638>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d017      	beq.n	8005938 <HAL_DMA_Init+0x478>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a7b      	ldr	r2, [pc, #492]	; (8005afc <HAL_DMA_Init+0x63c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d012      	beq.n	8005938 <HAL_DMA_Init+0x478>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a7a      	ldr	r2, [pc, #488]	; (8005b00 <HAL_DMA_Init+0x640>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00d      	beq.n	8005938 <HAL_DMA_Init+0x478>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a78      	ldr	r2, [pc, #480]	; (8005b04 <HAL_DMA_Init+0x644>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d008      	beq.n	8005938 <HAL_DMA_Init+0x478>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a77      	ldr	r2, [pc, #476]	; (8005b08 <HAL_DMA_Init+0x648>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <HAL_DMA_Init+0x478>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a75      	ldr	r2, [pc, #468]	; (8005b0c <HAL_DMA_Init+0x64c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4b6e      	ldr	r3, [pc, #440]	; (8005b10 <HAL_DMA_Init+0x650>)
 8005956:	4013      	ands	r3, r2
 8005958:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d008      	beq.n	8005974 <HAL_DMA_Init+0x4b4>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b80      	cmp	r3, #128	; 0x80
 8005968:	d102      	bne.n	8005970 <HAL_DMA_Init+0x4b0>
 800596a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800596e:	e002      	b.n	8005976 <HAL_DMA_Init+0x4b6>
 8005970:	2300      	movs	r3, #0
 8005972:	e000      	b.n	8005976 <HAL_DMA_Init+0x4b6>
 8005974:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68d2      	ldr	r2, [r2, #12]
 800597a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800597c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005984:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800598c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800599c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	4b56      	ldr	r3, [pc, #344]	; (8005b14 <HAL_DMA_Init+0x654>)
 80059bc:	4413      	add	r3, r2
 80059be:	4a56      	ldr	r2, [pc, #344]	; (8005b18 <HAL_DMA_Init+0x658>)
 80059c0:	fba2 2303 	umull	r2, r3, r2, r3
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	009a      	lsls	r2, r3, #2
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 f873 	bl	8006ab8 <DMA_CalcBaseAndBitshift>
 80059d2:	4603      	mov	r3, r0
 80059d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2201      	movs	r2, #1
 80059e0:	409a      	lsls	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	e008      	b.n	80059fa <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2240      	movs	r2, #64	; 0x40
 80059ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2203      	movs	r2, #3
 80059f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e0ee      	b.n	8005bd8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a47      	ldr	r2, [pc, #284]	; (8005b1c <HAL_DMA_Init+0x65c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d072      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a45      	ldr	r2, [pc, #276]	; (8005b20 <HAL_DMA_Init+0x660>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d06d      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a44      	ldr	r2, [pc, #272]	; (8005b24 <HAL_DMA_Init+0x664>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d068      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a42      	ldr	r2, [pc, #264]	; (8005b28 <HAL_DMA_Init+0x668>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d063      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a41      	ldr	r2, [pc, #260]	; (8005b2c <HAL_DMA_Init+0x66c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d05e      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a3f      	ldr	r2, [pc, #252]	; (8005b30 <HAL_DMA_Init+0x670>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d059      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a3e      	ldr	r2, [pc, #248]	; (8005b34 <HAL_DMA_Init+0x674>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d054      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a3c      	ldr	r2, [pc, #240]	; (8005b38 <HAL_DMA_Init+0x678>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d04f      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a3b      	ldr	r2, [pc, #236]	; (8005b3c <HAL_DMA_Init+0x67c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d04a      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a39      	ldr	r2, [pc, #228]	; (8005b40 <HAL_DMA_Init+0x680>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d045      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a38      	ldr	r2, [pc, #224]	; (8005b44 <HAL_DMA_Init+0x684>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d040      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a36      	ldr	r2, [pc, #216]	; (8005b48 <HAL_DMA_Init+0x688>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d03b      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a35      	ldr	r2, [pc, #212]	; (8005b4c <HAL_DMA_Init+0x68c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d036      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a33      	ldr	r2, [pc, #204]	; (8005b50 <HAL_DMA_Init+0x690>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d031      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a32      	ldr	r2, [pc, #200]	; (8005b54 <HAL_DMA_Init+0x694>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d02c      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a30      	ldr	r2, [pc, #192]	; (8005b58 <HAL_DMA_Init+0x698>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d027      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <HAL_DMA_Init+0x630>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d022      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a12      	ldr	r2, [pc, #72]	; (8005af4 <HAL_DMA_Init+0x634>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d01d      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a11      	ldr	r2, [pc, #68]	; (8005af8 <HAL_DMA_Init+0x638>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d018      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a0f      	ldr	r2, [pc, #60]	; (8005afc <HAL_DMA_Init+0x63c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d013      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a0e      	ldr	r2, [pc, #56]	; (8005b00 <HAL_DMA_Init+0x640>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00e      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a0c      	ldr	r2, [pc, #48]	; (8005b04 <HAL_DMA_Init+0x644>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d009      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a0b      	ldr	r2, [pc, #44]	; (8005b08 <HAL_DMA_Init+0x648>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d004      	beq.n	8005aea <HAL_DMA_Init+0x62a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <HAL_DMA_Init+0x64c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d138      	bne.n	8005b5c <HAL_DMA_Init+0x69c>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e037      	b.n	8005b5e <HAL_DMA_Init+0x69e>
 8005aee:	bf00      	nop
 8005af0:	58025408 	.word	0x58025408
 8005af4:	5802541c 	.word	0x5802541c
 8005af8:	58025430 	.word	0x58025430
 8005afc:	58025444 	.word	0x58025444
 8005b00:	58025458 	.word	0x58025458
 8005b04:	5802546c 	.word	0x5802546c
 8005b08:	58025480 	.word	0x58025480
 8005b0c:	58025494 	.word	0x58025494
 8005b10:	fffe000f 	.word	0xfffe000f
 8005b14:	a7fdabf8 	.word	0xa7fdabf8
 8005b18:	cccccccd 	.word	0xcccccccd
 8005b1c:	40020010 	.word	0x40020010
 8005b20:	40020028 	.word	0x40020028
 8005b24:	40020040 	.word	0x40020040
 8005b28:	40020058 	.word	0x40020058
 8005b2c:	40020070 	.word	0x40020070
 8005b30:	40020088 	.word	0x40020088
 8005b34:	400200a0 	.word	0x400200a0
 8005b38:	400200b8 	.word	0x400200b8
 8005b3c:	40020410 	.word	0x40020410
 8005b40:	40020428 	.word	0x40020428
 8005b44:	40020440 	.word	0x40020440
 8005b48:	40020458 	.word	0x40020458
 8005b4c:	40020470 	.word	0x40020470
 8005b50:	40020488 	.word	0x40020488
 8005b54:	400204a0 	.word	0x400204a0
 8005b58:	400204b8 	.word	0x400204b8
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d032      	beq.n	8005bc8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 f8d6 	bl	8006d14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b80      	cmp	r3, #128	; 0x80
 8005b6e:	d102      	bne.n	8005b76 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b8a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d010      	beq.n	8005bb6 <HAL_DMA_Init+0x6f6>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d80c      	bhi.n	8005bb6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 f953 	bl	8006e48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bb2:	605a      	str	r2, [r3, #4]
 8005bb4:	e008      	b.n	8005bc8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e226      	b.n	800604a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_DMA_Start_IT+0x2a>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e21f      	b.n	800604a <HAL_DMA_Start_IT+0x46a>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	f040 820a 	bne.w	8006034 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a68      	ldr	r2, [pc, #416]	; (8005dd4 <HAL_DMA_Start_IT+0x1f4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d04a      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a66      	ldr	r2, [pc, #408]	; (8005dd8 <HAL_DMA_Start_IT+0x1f8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d045      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a65      	ldr	r2, [pc, #404]	; (8005ddc <HAL_DMA_Start_IT+0x1fc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d040      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a63      	ldr	r2, [pc, #396]	; (8005de0 <HAL_DMA_Start_IT+0x200>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d03b      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a62      	ldr	r2, [pc, #392]	; (8005de4 <HAL_DMA_Start_IT+0x204>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d036      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a60      	ldr	r2, [pc, #384]	; (8005de8 <HAL_DMA_Start_IT+0x208>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d031      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a5f      	ldr	r2, [pc, #380]	; (8005dec <HAL_DMA_Start_IT+0x20c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d02c      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a5d      	ldr	r2, [pc, #372]	; (8005df0 <HAL_DMA_Start_IT+0x210>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d027      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a5c      	ldr	r2, [pc, #368]	; (8005df4 <HAL_DMA_Start_IT+0x214>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d022      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a5a      	ldr	r2, [pc, #360]	; (8005df8 <HAL_DMA_Start_IT+0x218>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01d      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a59      	ldr	r2, [pc, #356]	; (8005dfc <HAL_DMA_Start_IT+0x21c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d018      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a57      	ldr	r2, [pc, #348]	; (8005e00 <HAL_DMA_Start_IT+0x220>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a56      	ldr	r2, [pc, #344]	; (8005e04 <HAL_DMA_Start_IT+0x224>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00e      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a54      	ldr	r2, [pc, #336]	; (8005e08 <HAL_DMA_Start_IT+0x228>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a53      	ldr	r2, [pc, #332]	; (8005e0c <HAL_DMA_Start_IT+0x22c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d004      	beq.n	8005cce <HAL_DMA_Start_IT+0xee>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a51      	ldr	r2, [pc, #324]	; (8005e10 <HAL_DMA_Start_IT+0x230>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d108      	bne.n	8005ce0 <HAL_DMA_Start_IT+0x100>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e007      	b.n	8005cf0 <HAL_DMA_Start_IT+0x110>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fcfa 	bl	80066f0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a34      	ldr	r2, [pc, #208]	; (8005dd4 <HAL_DMA_Start_IT+0x1f4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d04a      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a33      	ldr	r2, [pc, #204]	; (8005dd8 <HAL_DMA_Start_IT+0x1f8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d045      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a31      	ldr	r2, [pc, #196]	; (8005ddc <HAL_DMA_Start_IT+0x1fc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d040      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a30      	ldr	r2, [pc, #192]	; (8005de0 <HAL_DMA_Start_IT+0x200>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d03b      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a2e      	ldr	r2, [pc, #184]	; (8005de4 <HAL_DMA_Start_IT+0x204>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d036      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a2d      	ldr	r2, [pc, #180]	; (8005de8 <HAL_DMA_Start_IT+0x208>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d031      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a2b      	ldr	r2, [pc, #172]	; (8005dec <HAL_DMA_Start_IT+0x20c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d02c      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a2a      	ldr	r2, [pc, #168]	; (8005df0 <HAL_DMA_Start_IT+0x210>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d027      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a28      	ldr	r2, [pc, #160]	; (8005df4 <HAL_DMA_Start_IT+0x214>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d022      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a27      	ldr	r2, [pc, #156]	; (8005df8 <HAL_DMA_Start_IT+0x218>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d01d      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a25      	ldr	r2, [pc, #148]	; (8005dfc <HAL_DMA_Start_IT+0x21c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d018      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a24      	ldr	r2, [pc, #144]	; (8005e00 <HAL_DMA_Start_IT+0x220>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d013      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a22      	ldr	r2, [pc, #136]	; (8005e04 <HAL_DMA_Start_IT+0x224>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00e      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a21      	ldr	r2, [pc, #132]	; (8005e08 <HAL_DMA_Start_IT+0x228>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d009      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <HAL_DMA_Start_IT+0x22c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d004      	beq.n	8005d9c <HAL_DMA_Start_IT+0x1bc>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <HAL_DMA_Start_IT+0x230>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d101      	bne.n	8005da0 <HAL_DMA_Start_IT+0x1c0>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <HAL_DMA_Start_IT+0x1c2>
 8005da0:	2300      	movs	r3, #0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d036      	beq.n	8005e14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f023 021e 	bic.w	r2, r3, #30
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0216 	orr.w	r2, r2, #22
 8005db8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d03e      	beq.n	8005e40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0208 	orr.w	r2, r2, #8
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e035      	b.n	8005e40 <HAL_DMA_Start_IT+0x260>
 8005dd4:	40020010 	.word	0x40020010
 8005dd8:	40020028 	.word	0x40020028
 8005ddc:	40020040 	.word	0x40020040
 8005de0:	40020058 	.word	0x40020058
 8005de4:	40020070 	.word	0x40020070
 8005de8:	40020088 	.word	0x40020088
 8005dec:	400200a0 	.word	0x400200a0
 8005df0:	400200b8 	.word	0x400200b8
 8005df4:	40020410 	.word	0x40020410
 8005df8:	40020428 	.word	0x40020428
 8005dfc:	40020440 	.word	0x40020440
 8005e00:	40020458 	.word	0x40020458
 8005e04:	40020470 	.word	0x40020470
 8005e08:	40020488 	.word	0x40020488
 8005e0c:	400204a0 	.word	0x400204a0
 8005e10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f023 020e 	bic.w	r2, r3, #14
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 020a 	orr.w	r2, r2, #10
 8005e26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0204 	orr.w	r2, r2, #4
 8005e3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a83      	ldr	r2, [pc, #524]	; (8006054 <HAL_DMA_Start_IT+0x474>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d072      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a82      	ldr	r2, [pc, #520]	; (8006058 <HAL_DMA_Start_IT+0x478>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d06d      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a80      	ldr	r2, [pc, #512]	; (800605c <HAL_DMA_Start_IT+0x47c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d068      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a7f      	ldr	r2, [pc, #508]	; (8006060 <HAL_DMA_Start_IT+0x480>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d063      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a7d      	ldr	r2, [pc, #500]	; (8006064 <HAL_DMA_Start_IT+0x484>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d05e      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a7c      	ldr	r2, [pc, #496]	; (8006068 <HAL_DMA_Start_IT+0x488>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d059      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a7a      	ldr	r2, [pc, #488]	; (800606c <HAL_DMA_Start_IT+0x48c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d054      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a79      	ldr	r2, [pc, #484]	; (8006070 <HAL_DMA_Start_IT+0x490>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d04f      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a77      	ldr	r2, [pc, #476]	; (8006074 <HAL_DMA_Start_IT+0x494>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d04a      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a76      	ldr	r2, [pc, #472]	; (8006078 <HAL_DMA_Start_IT+0x498>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d045      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a74      	ldr	r2, [pc, #464]	; (800607c <HAL_DMA_Start_IT+0x49c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d040      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a73      	ldr	r2, [pc, #460]	; (8006080 <HAL_DMA_Start_IT+0x4a0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d03b      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a71      	ldr	r2, [pc, #452]	; (8006084 <HAL_DMA_Start_IT+0x4a4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d036      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a70      	ldr	r2, [pc, #448]	; (8006088 <HAL_DMA_Start_IT+0x4a8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d031      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a6e      	ldr	r2, [pc, #440]	; (800608c <HAL_DMA_Start_IT+0x4ac>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d02c      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a6d      	ldr	r2, [pc, #436]	; (8006090 <HAL_DMA_Start_IT+0x4b0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d027      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a6b      	ldr	r2, [pc, #428]	; (8006094 <HAL_DMA_Start_IT+0x4b4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d022      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a6a      	ldr	r2, [pc, #424]	; (8006098 <HAL_DMA_Start_IT+0x4b8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d01d      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a68      	ldr	r2, [pc, #416]	; (800609c <HAL_DMA_Start_IT+0x4bc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d018      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a67      	ldr	r2, [pc, #412]	; (80060a0 <HAL_DMA_Start_IT+0x4c0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a65      	ldr	r2, [pc, #404]	; (80060a4 <HAL_DMA_Start_IT+0x4c4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00e      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a64      	ldr	r2, [pc, #400]	; (80060a8 <HAL_DMA_Start_IT+0x4c8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d009      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a62      	ldr	r2, [pc, #392]	; (80060ac <HAL_DMA_Start_IT+0x4cc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_DMA_Start_IT+0x350>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a61      	ldr	r2, [pc, #388]	; (80060b0 <HAL_DMA_Start_IT+0x4d0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d101      	bne.n	8005f34 <HAL_DMA_Start_IT+0x354>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <HAL_DMA_Start_IT+0x356>
 8005f34:	2300      	movs	r3, #0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01a      	beq.n	8005f70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d007      	beq.n	8005f70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a37      	ldr	r2, [pc, #220]	; (8006054 <HAL_DMA_Start_IT+0x474>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d04a      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a36      	ldr	r2, [pc, #216]	; (8006058 <HAL_DMA_Start_IT+0x478>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d045      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a34      	ldr	r2, [pc, #208]	; (800605c <HAL_DMA_Start_IT+0x47c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d040      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a33      	ldr	r2, [pc, #204]	; (8006060 <HAL_DMA_Start_IT+0x480>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d03b      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a31      	ldr	r2, [pc, #196]	; (8006064 <HAL_DMA_Start_IT+0x484>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d036      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a30      	ldr	r2, [pc, #192]	; (8006068 <HAL_DMA_Start_IT+0x488>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d031      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a2e      	ldr	r2, [pc, #184]	; (800606c <HAL_DMA_Start_IT+0x48c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d02c      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a2d      	ldr	r2, [pc, #180]	; (8006070 <HAL_DMA_Start_IT+0x490>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d027      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a2b      	ldr	r2, [pc, #172]	; (8006074 <HAL_DMA_Start_IT+0x494>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d022      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <HAL_DMA_Start_IT+0x498>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d01d      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a28      	ldr	r2, [pc, #160]	; (800607c <HAL_DMA_Start_IT+0x49c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d018      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a27      	ldr	r2, [pc, #156]	; (8006080 <HAL_DMA_Start_IT+0x4a0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a25      	ldr	r2, [pc, #148]	; (8006084 <HAL_DMA_Start_IT+0x4a4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00e      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a24      	ldr	r2, [pc, #144]	; (8006088 <HAL_DMA_Start_IT+0x4a8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a22      	ldr	r2, [pc, #136]	; (800608c <HAL_DMA_Start_IT+0x4ac>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_DMA_Start_IT+0x430>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a21      	ldr	r2, [pc, #132]	; (8006090 <HAL_DMA_Start_IT+0x4b0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <HAL_DMA_Start_IT+0x442>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	e012      	b.n	8006048 <HAL_DMA_Start_IT+0x468>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0201 	orr.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e009      	b.n	8006048 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800603a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40020010 	.word	0x40020010
 8006058:	40020028 	.word	0x40020028
 800605c:	40020040 	.word	0x40020040
 8006060:	40020058 	.word	0x40020058
 8006064:	40020070 	.word	0x40020070
 8006068:	40020088 	.word	0x40020088
 800606c:	400200a0 	.word	0x400200a0
 8006070:	400200b8 	.word	0x400200b8
 8006074:	40020410 	.word	0x40020410
 8006078:	40020428 	.word	0x40020428
 800607c:	40020440 	.word	0x40020440
 8006080:	40020458 	.word	0x40020458
 8006084:	40020470 	.word	0x40020470
 8006088:	40020488 	.word	0x40020488
 800608c:	400204a0 	.word	0x400204a0
 8006090:	400204b8 	.word	0x400204b8
 8006094:	58025408 	.word	0x58025408
 8006098:	5802541c 	.word	0x5802541c
 800609c:	58025430 	.word	0x58025430
 80060a0:	58025444 	.word	0x58025444
 80060a4:	58025458 	.word	0x58025458
 80060a8:	5802546c 	.word	0x5802546c
 80060ac:	58025480 	.word	0x58025480
 80060b0:	58025494 	.word	0x58025494

080060b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80060bc:	f7fe fe6a 	bl	8004d94 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e2dc      	b.n	8006686 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d008      	beq.n	80060ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2280      	movs	r2, #128	; 0x80
 80060dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e2cd      	b.n	8006686 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a76      	ldr	r2, [pc, #472]	; (80062c8 <HAL_DMA_Abort+0x214>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d04a      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a74      	ldr	r2, [pc, #464]	; (80062cc <HAL_DMA_Abort+0x218>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d045      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a73      	ldr	r2, [pc, #460]	; (80062d0 <HAL_DMA_Abort+0x21c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d040      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a71      	ldr	r2, [pc, #452]	; (80062d4 <HAL_DMA_Abort+0x220>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d03b      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a70      	ldr	r2, [pc, #448]	; (80062d8 <HAL_DMA_Abort+0x224>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d036      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a6e      	ldr	r2, [pc, #440]	; (80062dc <HAL_DMA_Abort+0x228>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d031      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a6d      	ldr	r2, [pc, #436]	; (80062e0 <HAL_DMA_Abort+0x22c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d02c      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a6b      	ldr	r2, [pc, #428]	; (80062e4 <HAL_DMA_Abort+0x230>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d027      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a6a      	ldr	r2, [pc, #424]	; (80062e8 <HAL_DMA_Abort+0x234>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d022      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a68      	ldr	r2, [pc, #416]	; (80062ec <HAL_DMA_Abort+0x238>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01d      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a67      	ldr	r2, [pc, #412]	; (80062f0 <HAL_DMA_Abort+0x23c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d018      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a65      	ldr	r2, [pc, #404]	; (80062f4 <HAL_DMA_Abort+0x240>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a64      	ldr	r2, [pc, #400]	; (80062f8 <HAL_DMA_Abort+0x244>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00e      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a62      	ldr	r2, [pc, #392]	; (80062fc <HAL_DMA_Abort+0x248>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d009      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a61      	ldr	r2, [pc, #388]	; (8006300 <HAL_DMA_Abort+0x24c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_DMA_Abort+0xd6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a5f      	ldr	r2, [pc, #380]	; (8006304 <HAL_DMA_Abort+0x250>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d101      	bne.n	800618e <HAL_DMA_Abort+0xda>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_DMA_Abort+0xdc>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d013      	beq.n	80061bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 021e 	bic.w	r2, r2, #30
 80061a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	e00a      	b.n	80061d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 020e 	bic.w	r2, r2, #14
 80061ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a3c      	ldr	r2, [pc, #240]	; (80062c8 <HAL_DMA_Abort+0x214>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d072      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a3a      	ldr	r2, [pc, #232]	; (80062cc <HAL_DMA_Abort+0x218>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d06d      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a39      	ldr	r2, [pc, #228]	; (80062d0 <HAL_DMA_Abort+0x21c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d068      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a37      	ldr	r2, [pc, #220]	; (80062d4 <HAL_DMA_Abort+0x220>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d063      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a36      	ldr	r2, [pc, #216]	; (80062d8 <HAL_DMA_Abort+0x224>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d05e      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a34      	ldr	r2, [pc, #208]	; (80062dc <HAL_DMA_Abort+0x228>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d059      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a33      	ldr	r2, [pc, #204]	; (80062e0 <HAL_DMA_Abort+0x22c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d054      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a31      	ldr	r2, [pc, #196]	; (80062e4 <HAL_DMA_Abort+0x230>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d04f      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a30      	ldr	r2, [pc, #192]	; (80062e8 <HAL_DMA_Abort+0x234>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d04a      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a2e      	ldr	r2, [pc, #184]	; (80062ec <HAL_DMA_Abort+0x238>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d045      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a2d      	ldr	r2, [pc, #180]	; (80062f0 <HAL_DMA_Abort+0x23c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d040      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a2b      	ldr	r2, [pc, #172]	; (80062f4 <HAL_DMA_Abort+0x240>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d03b      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2a      	ldr	r2, [pc, #168]	; (80062f8 <HAL_DMA_Abort+0x244>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d036      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a28      	ldr	r2, [pc, #160]	; (80062fc <HAL_DMA_Abort+0x248>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d031      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a27      	ldr	r2, [pc, #156]	; (8006300 <HAL_DMA_Abort+0x24c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d02c      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a25      	ldr	r2, [pc, #148]	; (8006304 <HAL_DMA_Abort+0x250>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d027      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a24      	ldr	r2, [pc, #144]	; (8006308 <HAL_DMA_Abort+0x254>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a22      	ldr	r2, [pc, #136]	; (800630c <HAL_DMA_Abort+0x258>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01d      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a21      	ldr	r2, [pc, #132]	; (8006310 <HAL_DMA_Abort+0x25c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d018      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <HAL_DMA_Abort+0x260>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1e      	ldr	r2, [pc, #120]	; (8006318 <HAL_DMA_Abort+0x264>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1c      	ldr	r2, [pc, #112]	; (800631c <HAL_DMA_Abort+0x268>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1b      	ldr	r2, [pc, #108]	; (8006320 <HAL_DMA_Abort+0x26c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_DMA_Abort+0x20e>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a19      	ldr	r2, [pc, #100]	; (8006324 <HAL_DMA_Abort+0x270>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d132      	bne.n	8006328 <HAL_DMA_Abort+0x274>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e031      	b.n	800632a <HAL_DMA_Abort+0x276>
 80062c6:	bf00      	nop
 80062c8:	40020010 	.word	0x40020010
 80062cc:	40020028 	.word	0x40020028
 80062d0:	40020040 	.word	0x40020040
 80062d4:	40020058 	.word	0x40020058
 80062d8:	40020070 	.word	0x40020070
 80062dc:	40020088 	.word	0x40020088
 80062e0:	400200a0 	.word	0x400200a0
 80062e4:	400200b8 	.word	0x400200b8
 80062e8:	40020410 	.word	0x40020410
 80062ec:	40020428 	.word	0x40020428
 80062f0:	40020440 	.word	0x40020440
 80062f4:	40020458 	.word	0x40020458
 80062f8:	40020470 	.word	0x40020470
 80062fc:	40020488 	.word	0x40020488
 8006300:	400204a0 	.word	0x400204a0
 8006304:	400204b8 	.word	0x400204b8
 8006308:	58025408 	.word	0x58025408
 800630c:	5802541c 	.word	0x5802541c
 8006310:	58025430 	.word	0x58025430
 8006314:	58025444 	.word	0x58025444
 8006318:	58025458 	.word	0x58025458
 800631c:	5802546c 	.word	0x5802546c
 8006320:	58025480 	.word	0x58025480
 8006324:	58025494 	.word	0x58025494
 8006328:	2300      	movs	r3, #0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800633c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a6d      	ldr	r2, [pc, #436]	; (80064f8 <HAL_DMA_Abort+0x444>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d04a      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a6b      	ldr	r2, [pc, #428]	; (80064fc <HAL_DMA_Abort+0x448>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d045      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a6a      	ldr	r2, [pc, #424]	; (8006500 <HAL_DMA_Abort+0x44c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d040      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a68      	ldr	r2, [pc, #416]	; (8006504 <HAL_DMA_Abort+0x450>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d03b      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a67      	ldr	r2, [pc, #412]	; (8006508 <HAL_DMA_Abort+0x454>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d036      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a65      	ldr	r2, [pc, #404]	; (800650c <HAL_DMA_Abort+0x458>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d031      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a64      	ldr	r2, [pc, #400]	; (8006510 <HAL_DMA_Abort+0x45c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d02c      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a62      	ldr	r2, [pc, #392]	; (8006514 <HAL_DMA_Abort+0x460>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d027      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a61      	ldr	r2, [pc, #388]	; (8006518 <HAL_DMA_Abort+0x464>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d022      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a5f      	ldr	r2, [pc, #380]	; (800651c <HAL_DMA_Abort+0x468>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01d      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a5e      	ldr	r2, [pc, #376]	; (8006520 <HAL_DMA_Abort+0x46c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d018      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a5c      	ldr	r2, [pc, #368]	; (8006524 <HAL_DMA_Abort+0x470>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a5b      	ldr	r2, [pc, #364]	; (8006528 <HAL_DMA_Abort+0x474>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00e      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a59      	ldr	r2, [pc, #356]	; (800652c <HAL_DMA_Abort+0x478>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a58      	ldr	r2, [pc, #352]	; (8006530 <HAL_DMA_Abort+0x47c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_DMA_Abort+0x32a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a56      	ldr	r2, [pc, #344]	; (8006534 <HAL_DMA_Abort+0x480>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d108      	bne.n	80063f0 <HAL_DMA_Abort+0x33c>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e007      	b.n	8006400 <HAL_DMA_Abort+0x34c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0201 	bic.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006400:	e013      	b.n	800642a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006402:	f7fe fcc7 	bl	8004d94 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b05      	cmp	r3, #5
 800640e:	d90c      	bls.n	800642a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2203      	movs	r2, #3
 800641a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e12d      	b.n	8006686 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e5      	bne.n	8006402 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a2f      	ldr	r2, [pc, #188]	; (80064f8 <HAL_DMA_Abort+0x444>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d04a      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a2d      	ldr	r2, [pc, #180]	; (80064fc <HAL_DMA_Abort+0x448>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d045      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a2c      	ldr	r2, [pc, #176]	; (8006500 <HAL_DMA_Abort+0x44c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d040      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2a      	ldr	r2, [pc, #168]	; (8006504 <HAL_DMA_Abort+0x450>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d03b      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a29      	ldr	r2, [pc, #164]	; (8006508 <HAL_DMA_Abort+0x454>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d036      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a27      	ldr	r2, [pc, #156]	; (800650c <HAL_DMA_Abort+0x458>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d031      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a26      	ldr	r2, [pc, #152]	; (8006510 <HAL_DMA_Abort+0x45c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d02c      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a24      	ldr	r2, [pc, #144]	; (8006514 <HAL_DMA_Abort+0x460>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d027      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a23      	ldr	r2, [pc, #140]	; (8006518 <HAL_DMA_Abort+0x464>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d022      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a21      	ldr	r2, [pc, #132]	; (800651c <HAL_DMA_Abort+0x468>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01d      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a20      	ldr	r2, [pc, #128]	; (8006520 <HAL_DMA_Abort+0x46c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d018      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <HAL_DMA_Abort+0x470>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d013      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1d      	ldr	r2, [pc, #116]	; (8006528 <HAL_DMA_Abort+0x474>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00e      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1b      	ldr	r2, [pc, #108]	; (800652c <HAL_DMA_Abort+0x478>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d009      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1a      	ldr	r2, [pc, #104]	; (8006530 <HAL_DMA_Abort+0x47c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d004      	beq.n	80064d6 <HAL_DMA_Abort+0x422>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a18      	ldr	r2, [pc, #96]	; (8006534 <HAL_DMA_Abort+0x480>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d101      	bne.n	80064da <HAL_DMA_Abort+0x426>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <HAL_DMA_Abort+0x428>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d02b      	beq.n	8006538 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	223f      	movs	r2, #63	; 0x3f
 80064f0:	409a      	lsls	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	609a      	str	r2, [r3, #8]
 80064f6:	e02a      	b.n	800654e <HAL_DMA_Abort+0x49a>
 80064f8:	40020010 	.word	0x40020010
 80064fc:	40020028 	.word	0x40020028
 8006500:	40020040 	.word	0x40020040
 8006504:	40020058 	.word	0x40020058
 8006508:	40020070 	.word	0x40020070
 800650c:	40020088 	.word	0x40020088
 8006510:	400200a0 	.word	0x400200a0
 8006514:	400200b8 	.word	0x400200b8
 8006518:	40020410 	.word	0x40020410
 800651c:	40020428 	.word	0x40020428
 8006520:	40020440 	.word	0x40020440
 8006524:	40020458 	.word	0x40020458
 8006528:	40020470 	.word	0x40020470
 800652c:	40020488 	.word	0x40020488
 8006530:	400204a0 	.word	0x400204a0
 8006534:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	2201      	movs	r2, #1
 8006548:	409a      	lsls	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a4f      	ldr	r2, [pc, #316]	; (8006690 <HAL_DMA_Abort+0x5dc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d072      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a4d      	ldr	r2, [pc, #308]	; (8006694 <HAL_DMA_Abort+0x5e0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d06d      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a4c      	ldr	r2, [pc, #304]	; (8006698 <HAL_DMA_Abort+0x5e4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d068      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a4a      	ldr	r2, [pc, #296]	; (800669c <HAL_DMA_Abort+0x5e8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d063      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a49      	ldr	r2, [pc, #292]	; (80066a0 <HAL_DMA_Abort+0x5ec>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d05e      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a47      	ldr	r2, [pc, #284]	; (80066a4 <HAL_DMA_Abort+0x5f0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d059      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a46      	ldr	r2, [pc, #280]	; (80066a8 <HAL_DMA_Abort+0x5f4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d054      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a44      	ldr	r2, [pc, #272]	; (80066ac <HAL_DMA_Abort+0x5f8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d04f      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a43      	ldr	r2, [pc, #268]	; (80066b0 <HAL_DMA_Abort+0x5fc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d04a      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a41      	ldr	r2, [pc, #260]	; (80066b4 <HAL_DMA_Abort+0x600>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d045      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a40      	ldr	r2, [pc, #256]	; (80066b8 <HAL_DMA_Abort+0x604>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d040      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a3e      	ldr	r2, [pc, #248]	; (80066bc <HAL_DMA_Abort+0x608>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d03b      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a3d      	ldr	r2, [pc, #244]	; (80066c0 <HAL_DMA_Abort+0x60c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d036      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a3b      	ldr	r2, [pc, #236]	; (80066c4 <HAL_DMA_Abort+0x610>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d031      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a3a      	ldr	r2, [pc, #232]	; (80066c8 <HAL_DMA_Abort+0x614>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d02c      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a38      	ldr	r2, [pc, #224]	; (80066cc <HAL_DMA_Abort+0x618>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d027      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a37      	ldr	r2, [pc, #220]	; (80066d0 <HAL_DMA_Abort+0x61c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d022      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a35      	ldr	r2, [pc, #212]	; (80066d4 <HAL_DMA_Abort+0x620>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01d      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a34      	ldr	r2, [pc, #208]	; (80066d8 <HAL_DMA_Abort+0x624>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d018      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a32      	ldr	r2, [pc, #200]	; (80066dc <HAL_DMA_Abort+0x628>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a31      	ldr	r2, [pc, #196]	; (80066e0 <HAL_DMA_Abort+0x62c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00e      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a2f      	ldr	r2, [pc, #188]	; (80066e4 <HAL_DMA_Abort+0x630>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d009      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2e      	ldr	r2, [pc, #184]	; (80066e8 <HAL_DMA_Abort+0x634>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d004      	beq.n	800663e <HAL_DMA_Abort+0x58a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a2c      	ldr	r2, [pc, #176]	; (80066ec <HAL_DMA_Abort+0x638>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <HAL_DMA_Abort+0x58e>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <HAL_DMA_Abort+0x590>
 8006642:	2300      	movs	r3, #0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d015      	beq.n	8006674 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006650:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00c      	beq.n	8006674 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006668:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006672:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40020010 	.word	0x40020010
 8006694:	40020028 	.word	0x40020028
 8006698:	40020040 	.word	0x40020040
 800669c:	40020058 	.word	0x40020058
 80066a0:	40020070 	.word	0x40020070
 80066a4:	40020088 	.word	0x40020088
 80066a8:	400200a0 	.word	0x400200a0
 80066ac:	400200b8 	.word	0x400200b8
 80066b0:	40020410 	.word	0x40020410
 80066b4:	40020428 	.word	0x40020428
 80066b8:	40020440 	.word	0x40020440
 80066bc:	40020458 	.word	0x40020458
 80066c0:	40020470 	.word	0x40020470
 80066c4:	40020488 	.word	0x40020488
 80066c8:	400204a0 	.word	0x400204a0
 80066cc:	400204b8 	.word	0x400204b8
 80066d0:	58025408 	.word	0x58025408
 80066d4:	5802541c 	.word	0x5802541c
 80066d8:	58025430 	.word	0x58025430
 80066dc:	58025444 	.word	0x58025444
 80066e0:	58025458 	.word	0x58025458
 80066e4:	5802546c 	.word	0x5802546c
 80066e8:	58025480 	.word	0x58025480
 80066ec:	58025494 	.word	0x58025494

080066f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006702:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006708:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a7f      	ldr	r2, [pc, #508]	; (800690c <DMA_SetConfig+0x21c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d072      	beq.n	80067fa <DMA_SetConfig+0x10a>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a7d      	ldr	r2, [pc, #500]	; (8006910 <DMA_SetConfig+0x220>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d06d      	beq.n	80067fa <DMA_SetConfig+0x10a>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a7c      	ldr	r2, [pc, #496]	; (8006914 <DMA_SetConfig+0x224>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d068      	beq.n	80067fa <DMA_SetConfig+0x10a>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a7a      	ldr	r2, [pc, #488]	; (8006918 <DMA_SetConfig+0x228>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d063      	beq.n	80067fa <DMA_SetConfig+0x10a>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a79      	ldr	r2, [pc, #484]	; (800691c <DMA_SetConfig+0x22c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d05e      	beq.n	80067fa <DMA_SetConfig+0x10a>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a77      	ldr	r2, [pc, #476]	; (8006920 <DMA_SetConfig+0x230>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d059      	beq.n	80067fa <DMA_SetConfig+0x10a>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a76      	ldr	r2, [pc, #472]	; (8006924 <DMA_SetConfig+0x234>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d054      	beq.n	80067fa <DMA_SetConfig+0x10a>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a74      	ldr	r2, [pc, #464]	; (8006928 <DMA_SetConfig+0x238>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d04f      	beq.n	80067fa <DMA_SetConfig+0x10a>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a73      	ldr	r2, [pc, #460]	; (800692c <DMA_SetConfig+0x23c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d04a      	beq.n	80067fa <DMA_SetConfig+0x10a>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a71      	ldr	r2, [pc, #452]	; (8006930 <DMA_SetConfig+0x240>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d045      	beq.n	80067fa <DMA_SetConfig+0x10a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a70      	ldr	r2, [pc, #448]	; (8006934 <DMA_SetConfig+0x244>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d040      	beq.n	80067fa <DMA_SetConfig+0x10a>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a6e      	ldr	r2, [pc, #440]	; (8006938 <DMA_SetConfig+0x248>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d03b      	beq.n	80067fa <DMA_SetConfig+0x10a>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a6d      	ldr	r2, [pc, #436]	; (800693c <DMA_SetConfig+0x24c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d036      	beq.n	80067fa <DMA_SetConfig+0x10a>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a6b      	ldr	r2, [pc, #428]	; (8006940 <DMA_SetConfig+0x250>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d031      	beq.n	80067fa <DMA_SetConfig+0x10a>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a6a      	ldr	r2, [pc, #424]	; (8006944 <DMA_SetConfig+0x254>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d02c      	beq.n	80067fa <DMA_SetConfig+0x10a>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a68      	ldr	r2, [pc, #416]	; (8006948 <DMA_SetConfig+0x258>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d027      	beq.n	80067fa <DMA_SetConfig+0x10a>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a67      	ldr	r2, [pc, #412]	; (800694c <DMA_SetConfig+0x25c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d022      	beq.n	80067fa <DMA_SetConfig+0x10a>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a65      	ldr	r2, [pc, #404]	; (8006950 <DMA_SetConfig+0x260>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01d      	beq.n	80067fa <DMA_SetConfig+0x10a>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a64      	ldr	r2, [pc, #400]	; (8006954 <DMA_SetConfig+0x264>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d018      	beq.n	80067fa <DMA_SetConfig+0x10a>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a62      	ldr	r2, [pc, #392]	; (8006958 <DMA_SetConfig+0x268>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d013      	beq.n	80067fa <DMA_SetConfig+0x10a>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a61      	ldr	r2, [pc, #388]	; (800695c <DMA_SetConfig+0x26c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00e      	beq.n	80067fa <DMA_SetConfig+0x10a>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a5f      	ldr	r2, [pc, #380]	; (8006960 <DMA_SetConfig+0x270>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d009      	beq.n	80067fa <DMA_SetConfig+0x10a>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a5e      	ldr	r2, [pc, #376]	; (8006964 <DMA_SetConfig+0x274>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d004      	beq.n	80067fa <DMA_SetConfig+0x10a>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a5c      	ldr	r2, [pc, #368]	; (8006968 <DMA_SetConfig+0x278>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d101      	bne.n	80067fe <DMA_SetConfig+0x10e>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <DMA_SetConfig+0x110>
 80067fe:	2300      	movs	r3, #0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00d      	beq.n	8006820 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800680c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d004      	beq.n	8006820 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800681e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a39      	ldr	r2, [pc, #228]	; (800690c <DMA_SetConfig+0x21c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d04a      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a38      	ldr	r2, [pc, #224]	; (8006910 <DMA_SetConfig+0x220>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d045      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a36      	ldr	r2, [pc, #216]	; (8006914 <DMA_SetConfig+0x224>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d040      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a35      	ldr	r2, [pc, #212]	; (8006918 <DMA_SetConfig+0x228>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d03b      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a33      	ldr	r2, [pc, #204]	; (800691c <DMA_SetConfig+0x22c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d036      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a32      	ldr	r2, [pc, #200]	; (8006920 <DMA_SetConfig+0x230>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d031      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a30      	ldr	r2, [pc, #192]	; (8006924 <DMA_SetConfig+0x234>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d02c      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a2f      	ldr	r2, [pc, #188]	; (8006928 <DMA_SetConfig+0x238>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d027      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a2d      	ldr	r2, [pc, #180]	; (800692c <DMA_SetConfig+0x23c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d022      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2c      	ldr	r2, [pc, #176]	; (8006930 <DMA_SetConfig+0x240>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d01d      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a2a      	ldr	r2, [pc, #168]	; (8006934 <DMA_SetConfig+0x244>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d018      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a29      	ldr	r2, [pc, #164]	; (8006938 <DMA_SetConfig+0x248>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d013      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a27      	ldr	r2, [pc, #156]	; (800693c <DMA_SetConfig+0x24c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a26      	ldr	r2, [pc, #152]	; (8006940 <DMA_SetConfig+0x250>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a24      	ldr	r2, [pc, #144]	; (8006944 <DMA_SetConfig+0x254>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <DMA_SetConfig+0x1d0>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a23      	ldr	r2, [pc, #140]	; (8006948 <DMA_SetConfig+0x258>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d101      	bne.n	80068c4 <DMA_SetConfig+0x1d4>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <DMA_SetConfig+0x1d6>
 80068c4:	2300      	movs	r3, #0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d059      	beq.n	800697e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	223f      	movs	r2, #63	; 0x3f
 80068d4:	409a      	lsls	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d138      	bne.n	800696c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800690a:	e0ae      	b.n	8006a6a <DMA_SetConfig+0x37a>
 800690c:	40020010 	.word	0x40020010
 8006910:	40020028 	.word	0x40020028
 8006914:	40020040 	.word	0x40020040
 8006918:	40020058 	.word	0x40020058
 800691c:	40020070 	.word	0x40020070
 8006920:	40020088 	.word	0x40020088
 8006924:	400200a0 	.word	0x400200a0
 8006928:	400200b8 	.word	0x400200b8
 800692c:	40020410 	.word	0x40020410
 8006930:	40020428 	.word	0x40020428
 8006934:	40020440 	.word	0x40020440
 8006938:	40020458 	.word	0x40020458
 800693c:	40020470 	.word	0x40020470
 8006940:	40020488 	.word	0x40020488
 8006944:	400204a0 	.word	0x400204a0
 8006948:	400204b8 	.word	0x400204b8
 800694c:	58025408 	.word	0x58025408
 8006950:	5802541c 	.word	0x5802541c
 8006954:	58025430 	.word	0x58025430
 8006958:	58025444 	.word	0x58025444
 800695c:	58025458 	.word	0x58025458
 8006960:	5802546c 	.word	0x5802546c
 8006964:	58025480 	.word	0x58025480
 8006968:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]
}
 800697c:	e075      	b.n	8006a6a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a3d      	ldr	r2, [pc, #244]	; (8006a78 <DMA_SetConfig+0x388>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d04a      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a3b      	ldr	r2, [pc, #236]	; (8006a7c <DMA_SetConfig+0x38c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d045      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a3a      	ldr	r2, [pc, #232]	; (8006a80 <DMA_SetConfig+0x390>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d040      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a38      	ldr	r2, [pc, #224]	; (8006a84 <DMA_SetConfig+0x394>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d03b      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a37      	ldr	r2, [pc, #220]	; (8006a88 <DMA_SetConfig+0x398>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d036      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a35      	ldr	r2, [pc, #212]	; (8006a8c <DMA_SetConfig+0x39c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d031      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a34      	ldr	r2, [pc, #208]	; (8006a90 <DMA_SetConfig+0x3a0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d02c      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a32      	ldr	r2, [pc, #200]	; (8006a94 <DMA_SetConfig+0x3a4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d027      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a31      	ldr	r2, [pc, #196]	; (8006a98 <DMA_SetConfig+0x3a8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d022      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a2f      	ldr	r2, [pc, #188]	; (8006a9c <DMA_SetConfig+0x3ac>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01d      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a2e      	ldr	r2, [pc, #184]	; (8006aa0 <DMA_SetConfig+0x3b0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d018      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a2c      	ldr	r2, [pc, #176]	; (8006aa4 <DMA_SetConfig+0x3b4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a2b      	ldr	r2, [pc, #172]	; (8006aa8 <DMA_SetConfig+0x3b8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a29      	ldr	r2, [pc, #164]	; (8006aac <DMA_SetConfig+0x3bc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a28      	ldr	r2, [pc, #160]	; (8006ab0 <DMA_SetConfig+0x3c0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <DMA_SetConfig+0x32e>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a26      	ldr	r2, [pc, #152]	; (8006ab4 <DMA_SetConfig+0x3c4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d101      	bne.n	8006a22 <DMA_SetConfig+0x332>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <DMA_SetConfig+0x334>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d020      	beq.n	8006a6a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2c:	f003 031f 	and.w	r3, r3, #31
 8006a30:	2201      	movs	r2, #1
 8006a32:	409a      	lsls	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d108      	bne.n	8006a5a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	60da      	str	r2, [r3, #12]
}
 8006a58:	e007      	b.n	8006a6a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	60da      	str	r2, [r3, #12]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	48022c08 	.word	0x48022c08
 8006a7c:	48022c1c 	.word	0x48022c1c
 8006a80:	48022c30 	.word	0x48022c30
 8006a84:	48022c44 	.word	0x48022c44
 8006a88:	48022c58 	.word	0x48022c58
 8006a8c:	48022c6c 	.word	0x48022c6c
 8006a90:	48022c80 	.word	0x48022c80
 8006a94:	48022c94 	.word	0x48022c94
 8006a98:	58025408 	.word	0x58025408
 8006a9c:	5802541c 	.word	0x5802541c
 8006aa0:	58025430 	.word	0x58025430
 8006aa4:	58025444 	.word	0x58025444
 8006aa8:	58025458 	.word	0x58025458
 8006aac:	5802546c 	.word	0x5802546c
 8006ab0:	58025480 	.word	0x58025480
 8006ab4:	58025494 	.word	0x58025494

08006ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a42      	ldr	r2, [pc, #264]	; (8006bd0 <DMA_CalcBaseAndBitshift+0x118>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d04a      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a41      	ldr	r2, [pc, #260]	; (8006bd4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d045      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a3f      	ldr	r2, [pc, #252]	; (8006bd8 <DMA_CalcBaseAndBitshift+0x120>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d040      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a3e      	ldr	r2, [pc, #248]	; (8006bdc <DMA_CalcBaseAndBitshift+0x124>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d03b      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a3c      	ldr	r2, [pc, #240]	; (8006be0 <DMA_CalcBaseAndBitshift+0x128>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d036      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a3b      	ldr	r2, [pc, #236]	; (8006be4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d031      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a39      	ldr	r2, [pc, #228]	; (8006be8 <DMA_CalcBaseAndBitshift+0x130>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d02c      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a38      	ldr	r2, [pc, #224]	; (8006bec <DMA_CalcBaseAndBitshift+0x134>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d027      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a36      	ldr	r2, [pc, #216]	; (8006bf0 <DMA_CalcBaseAndBitshift+0x138>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d022      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a35      	ldr	r2, [pc, #212]	; (8006bf4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d01d      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a33      	ldr	r2, [pc, #204]	; (8006bf8 <DMA_CalcBaseAndBitshift+0x140>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d018      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a32      	ldr	r2, [pc, #200]	; (8006bfc <DMA_CalcBaseAndBitshift+0x144>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d013      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a30      	ldr	r2, [pc, #192]	; (8006c00 <DMA_CalcBaseAndBitshift+0x148>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00e      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2f      	ldr	r2, [pc, #188]	; (8006c04 <DMA_CalcBaseAndBitshift+0x14c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a2d      	ldr	r2, [pc, #180]	; (8006c08 <DMA_CalcBaseAndBitshift+0x150>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <DMA_CalcBaseAndBitshift+0xa8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a2c      	ldr	r2, [pc, #176]	; (8006c0c <DMA_CalcBaseAndBitshift+0x154>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d101      	bne.n	8006b64 <DMA_CalcBaseAndBitshift+0xac>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <DMA_CalcBaseAndBitshift+0xae>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d024      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	3b10      	subs	r3, #16
 8006b72:	4a27      	ldr	r2, [pc, #156]	; (8006c10 <DMA_CalcBaseAndBitshift+0x158>)
 8006b74:	fba2 2303 	umull	r2, r3, r2, r3
 8006b78:	091b      	lsrs	r3, r3, #4
 8006b7a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	4a24      	ldr	r2, [pc, #144]	; (8006c14 <DMA_CalcBaseAndBitshift+0x15c>)
 8006b84:	5cd3      	ldrb	r3, [r2, r3]
 8006b86:	461a      	mov	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d908      	bls.n	8006ba4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	4b1f      	ldr	r3, [pc, #124]	; (8006c18 <DMA_CalcBaseAndBitshift+0x160>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	1d1a      	adds	r2, r3, #4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	659a      	str	r2, [r3, #88]	; 0x58
 8006ba2:	e00d      	b.n	8006bc0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <DMA_CalcBaseAndBitshift+0x160>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8006bb2:	e005      	b.n	8006bc0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	40020010 	.word	0x40020010
 8006bd4:	40020028 	.word	0x40020028
 8006bd8:	40020040 	.word	0x40020040
 8006bdc:	40020058 	.word	0x40020058
 8006be0:	40020070 	.word	0x40020070
 8006be4:	40020088 	.word	0x40020088
 8006be8:	400200a0 	.word	0x400200a0
 8006bec:	400200b8 	.word	0x400200b8
 8006bf0:	40020410 	.word	0x40020410
 8006bf4:	40020428 	.word	0x40020428
 8006bf8:	40020440 	.word	0x40020440
 8006bfc:	40020458 	.word	0x40020458
 8006c00:	40020470 	.word	0x40020470
 8006c04:	40020488 	.word	0x40020488
 8006c08:	400204a0 	.word	0x400204a0
 8006c0c:	400204b8 	.word	0x400204b8
 8006c10:	aaaaaaab 	.word	0xaaaaaaab
 8006c14:	080117f8 	.word	0x080117f8
 8006c18:	fffffc00 	.word	0xfffffc00

08006c1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d120      	bne.n	8006c72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d858      	bhi.n	8006cea <DMA_CheckFifoParam+0xce>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <DMA_CheckFifoParam+0x24>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c51 	.word	0x08006c51
 8006c44:	08006c63 	.word	0x08006c63
 8006c48:	08006c51 	.word	0x08006c51
 8006c4c:	08006ceb 	.word	0x08006ceb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d048      	beq.n	8006cee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c60:	e045      	b.n	8006cee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c6a:	d142      	bne.n	8006cf2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c70:	e03f      	b.n	8006cf2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c7a:	d123      	bne.n	8006cc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d838      	bhi.n	8006cf6 <DMA_CheckFifoParam+0xda>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <DMA_CheckFifoParam+0x70>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006ca3 	.word	0x08006ca3
 8006c94:	08006c9d 	.word	0x08006c9d
 8006c98:	08006cb5 	.word	0x08006cb5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	73fb      	strb	r3, [r7, #15]
        break;
 8006ca0:	e030      	b.n	8006d04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d025      	beq.n	8006cfa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cb2:	e022      	b.n	8006cfa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cbc:	d11f      	bne.n	8006cfe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cc2:	e01c      	b.n	8006cfe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d902      	bls.n	8006cd2 <DMA_CheckFifoParam+0xb6>
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d003      	beq.n	8006cd8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006cd0:	e018      	b.n	8006d04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8006cd6:	e015      	b.n	8006d04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00e      	beq.n	8006d02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ce8:	e00b      	b.n	8006d02 <DMA_CheckFifoParam+0xe6>
        break;
 8006cea:	bf00      	nop
 8006cec:	e00a      	b.n	8006d04 <DMA_CheckFifoParam+0xe8>
        break;
 8006cee:	bf00      	nop
 8006cf0:	e008      	b.n	8006d04 <DMA_CheckFifoParam+0xe8>
        break;
 8006cf2:	bf00      	nop
 8006cf4:	e006      	b.n	8006d04 <DMA_CheckFifoParam+0xe8>
        break;
 8006cf6:	bf00      	nop
 8006cf8:	e004      	b.n	8006d04 <DMA_CheckFifoParam+0xe8>
        break;
 8006cfa:	bf00      	nop
 8006cfc:	e002      	b.n	8006d04 <DMA_CheckFifoParam+0xe8>
        break;
 8006cfe:	bf00      	nop
 8006d00:	e000      	b.n	8006d04 <DMA_CheckFifoParam+0xe8>
    break;
 8006d02:	bf00      	nop
    }
  }

  return status;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop

08006d14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a38      	ldr	r2, [pc, #224]	; (8006e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d022      	beq.n	8006d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a36      	ldr	r2, [pc, #216]	; (8006e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01d      	beq.n	8006d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a35      	ldr	r2, [pc, #212]	; (8006e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d018      	beq.n	8006d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a33      	ldr	r2, [pc, #204]	; (8006e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d013      	beq.n	8006d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a32      	ldr	r2, [pc, #200]	; (8006e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00e      	beq.n	8006d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a30      	ldr	r2, [pc, #192]	; (8006e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d009      	beq.n	8006d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a2f      	ldr	r2, [pc, #188]	; (8006e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d004      	beq.n	8006d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a2d      	ldr	r2, [pc, #180]	; (8006e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d101      	bne.n	8006d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006d76:	2300      	movs	r3, #0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01a      	beq.n	8006db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	3b08      	subs	r3, #8
 8006d84:	4a28      	ldr	r2, [pc, #160]	; (8006e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006d86:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8a:	091b      	lsrs	r3, r3, #4
 8006d8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4b26      	ldr	r3, [pc, #152]	; (8006e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	461a      	mov	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a24      	ldr	r2, [pc, #144]	; (8006e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006da0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	2201      	movs	r2, #1
 8006daa:	409a      	lsls	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006db0:	e024      	b.n	8006dfc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	3b10      	subs	r3, #16
 8006dba:	4a1e      	ldr	r2, [pc, #120]	; (8006e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	091b      	lsrs	r3, r3, #4
 8006dc2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4a1c      	ldr	r2, [pc, #112]	; (8006e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d806      	bhi.n	8006dda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4a1b      	ldr	r2, [pc, #108]	; (8006e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d902      	bls.n	8006dda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4b18      	ldr	r3, [pc, #96]	; (8006e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006dec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2201      	movs	r2, #1
 8006df6:	409a      	lsls	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	58025408 	.word	0x58025408
 8006e0c:	5802541c 	.word	0x5802541c
 8006e10:	58025430 	.word	0x58025430
 8006e14:	58025444 	.word	0x58025444
 8006e18:	58025458 	.word	0x58025458
 8006e1c:	5802546c 	.word	0x5802546c
 8006e20:	58025480 	.word	0x58025480
 8006e24:	58025494 	.word	0x58025494
 8006e28:	cccccccd 	.word	0xcccccccd
 8006e2c:	16009600 	.word	0x16009600
 8006e30:	58025880 	.word	0x58025880
 8006e34:	aaaaaaab 	.word	0xaaaaaaab
 8006e38:	400204b8 	.word	0x400204b8
 8006e3c:	4002040f 	.word	0x4002040f
 8006e40:	10008200 	.word	0x10008200
 8006e44:	40020880 	.word	0x40020880

08006e48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d04a      	beq.n	8006ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d847      	bhi.n	8006ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a25      	ldr	r2, [pc, #148]	; (8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d022      	beq.n	8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a24      	ldr	r2, [pc, #144]	; (8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d01d      	beq.n	8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d018      	beq.n	8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d013      	beq.n	8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1f      	ldr	r2, [pc, #124]	; (8006f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00e      	beq.n	8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d009      	beq.n	8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d004      	beq.n	8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1b      	ldr	r2, [pc, #108]	; (8006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d101      	bne.n	8006eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a15      	ldr	r2, [pc, #84]	; (8006f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006ed0:	671a      	str	r2, [r3, #112]	; 0x70
 8006ed2:	e009      	b.n	8006ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	461a      	mov	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a11      	ldr	r2, [pc, #68]	; (8006f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006ee6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	2201      	movs	r2, #1
 8006eee:	409a      	lsls	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006ef4:	bf00      	nop
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	58025408 	.word	0x58025408
 8006f04:	5802541c 	.word	0x5802541c
 8006f08:	58025430 	.word	0x58025430
 8006f0c:	58025444 	.word	0x58025444
 8006f10:	58025458 	.word	0x58025458
 8006f14:	5802546c 	.word	0x5802546c
 8006f18:	58025480 	.word	0x58025480
 8006f1c:	58025494 	.word	0x58025494
 8006f20:	1600963f 	.word	0x1600963f
 8006f24:	58025940 	.word	0x58025940
 8006f28:	1000823f 	.word	0x1000823f
 8006f2c:	40020940 	.word	0x40020940

08006f30 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e04f      	b.n	8006fe2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f84e 	bl	8006ff8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4b20      	ldr	r3, [pc, #128]	; (8006fec <HAL_DMA2D_Init+0xbc>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6851      	ldr	r1, [r2, #4]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	69d2      	ldr	r2, [r2, #28]
 8006f76:	4311      	orrs	r1, r2
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f86:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <HAL_DMA2D_Init+0xc0>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6891      	ldr	r1, [r2, #8]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6992      	ldr	r2, [r2, #24]
 8006f92:	4311      	orrs	r1, r2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fa2:	4b14      	ldr	r3, [pc, #80]	; (8006ff4 <HAL_DMA2D_Init+0xc4>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	68d1      	ldr	r1, [r2, #12]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6812      	ldr	r2, [r2, #0]
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	051a      	lsls	r2, r3, #20
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	055b      	lsls	r3, r3, #21
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	fff8ffbf 	.word	0xfff8ffbf
 8006ff0:	fffffef8 	.word	0xfffffef8
 8006ff4:	ffff0000 	.word	0xffff0000

08006ff8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_DMA2D_ConfigLayer+0x24>
 800702c:	2302      	movs	r3, #2
 800702e:	e092      	b.n	8007156 <HAL_DMA2D_ConfigLayer+0x14a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	4613      	mov	r3, r2
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	3328      	adds	r3, #40	; 0x28
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	4413      	add	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	041b      	lsls	r3, r3, #16
 800705c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007064:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800706c:	4313      	orrs	r3, r2
 800706e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007070:	4b3c      	ldr	r3, [pc, #240]	; (8007164 <HAL_DMA2D_ConfigLayer+0x158>)
 8007072:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2b0a      	cmp	r3, #10
 800707a:	d003      	beq.n	8007084 <HAL_DMA2D_ConfigLayer+0x78>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b09      	cmp	r3, #9
 8007082:	d107      	bne.n	8007094 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	e005      	b.n	80070a0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	061b      	lsls	r3, r3, #24
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d120      	bne.n	80070e8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	43db      	mvns	r3, r3
 80070b0:	ea02 0103 	and.w	r1, r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b0a      	cmp	r3, #10
 80070ce:	d003      	beq.n	80070d8 <HAL_DMA2D_ConfigLayer+0xcc>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	d135      	bne.n	8007144 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68da      	ldr	r2, [r3, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80070e4:	629a      	str	r2, [r3, #40]	; 0x28
 80070e6:	e02d      	b.n	8007144 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2b0b      	cmp	r3, #11
 80070ee:	d109      	bne.n	8007104 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	049b      	lsls	r3, r3, #18
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007102:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	69da      	ldr	r2, [r3, #28]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	43db      	mvns	r3, r3
 800710e:	ea02 0103 	and.w	r1, r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	430a      	orrs	r2, r1
 800711a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b0a      	cmp	r3, #10
 800712c:	d003      	beq.n	8007136 <HAL_DMA2D_ConfigLayer+0x12a>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2b09      	cmp	r3, #9
 8007134:	d106      	bne.n	8007144 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007142:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	ff33000f 	.word	0xff33000f

08007168 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	2b80      	cmp	r3, #128	; 0x80
 8007180:	d105      	bne.n	800718e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007188:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e315      	b.n	80077ba <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8007198:	2302      	movs	r3, #2
 800719a:	e30e      	b.n	80077ba <HAL_DMAEx_MultiBufferStart_IT+0x652>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	f040 82fd 	bne.w	80077ac <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2202      	movs	r2, #2
 80071b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a82      	ldr	r2, [pc, #520]	; (80073d0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d04a      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a81      	ldr	r2, [pc, #516]	; (80073d4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d045      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a7f      	ldr	r2, [pc, #508]	; (80073d8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d040      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a7e      	ldr	r2, [pc, #504]	; (80073dc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d03b      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a7c      	ldr	r2, [pc, #496]	; (80073e0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d036      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a7b      	ldr	r2, [pc, #492]	; (80073e4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d031      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a79      	ldr	r2, [pc, #484]	; (80073e8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d02c      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a78      	ldr	r2, [pc, #480]	; (80073ec <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d027      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a76      	ldr	r2, [pc, #472]	; (80073f0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d022      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a75      	ldr	r2, [pc, #468]	; (80073f4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d01d      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a73      	ldr	r2, [pc, #460]	; (80073f8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d018      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a72      	ldr	r2, [pc, #456]	; (80073fc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d013      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a70      	ldr	r2, [pc, #448]	; (8007400 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00e      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a6f      	ldr	r2, [pc, #444]	; (8007404 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d009      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a6d      	ldr	r2, [pc, #436]	; (8007408 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d004      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a6c      	ldr	r2, [pc, #432]	; (800740c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d101      	bne.n	8007264 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8007260:	2301      	movs	r3, #1
 8007262:	e000      	b.n	8007266 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8007264:	2300      	movs	r3, #0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d018      	beq.n	800729c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007278:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007286:	3308      	adds	r3, #8
 8007288:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	f003 031f 	and.w	r3, r3, #31
 8007292:	223f      	movs	r2, #63	; 0x3f
 8007294:	409a      	lsls	r2, r3
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	e018      	b.n	80072ce <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	f248 0320 	movw	r3, #32800	; 0x8020
 80072aa:	430b      	orrs	r3, r1
 80072ac:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ba:	3304      	adds	r3, #4
 80072bc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	2201      	movs	r2, #1
 80072c8:	409a      	lsls	r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 fb41 	bl	800795c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a3c      	ldr	r2, [pc, #240]	; (80073d0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d072      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a3a      	ldr	r2, [pc, #232]	; (80073d4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d06d      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a39      	ldr	r2, [pc, #228]	; (80073d8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d068      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a37      	ldr	r2, [pc, #220]	; (80073dc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d063      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a36      	ldr	r2, [pc, #216]	; (80073e0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d05e      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a34      	ldr	r2, [pc, #208]	; (80073e4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d059      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a33      	ldr	r2, [pc, #204]	; (80073e8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d054      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a31      	ldr	r2, [pc, #196]	; (80073ec <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d04f      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a30      	ldr	r2, [pc, #192]	; (80073f0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d04a      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a2e      	ldr	r2, [pc, #184]	; (80073f4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d045      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a2d      	ldr	r2, [pc, #180]	; (80073f8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d040      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a2b      	ldr	r2, [pc, #172]	; (80073fc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d03b      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2a      	ldr	r2, [pc, #168]	; (8007400 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d036      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a28      	ldr	r2, [pc, #160]	; (8007404 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d031      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a27      	ldr	r2, [pc, #156]	; (8007408 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d02c      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a25      	ldr	r2, [pc, #148]	; (800740c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d027      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a24      	ldr	r2, [pc, #144]	; (8007410 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d022      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a22      	ldr	r2, [pc, #136]	; (8007414 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d01d      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a21      	ldr	r2, [pc, #132]	; (8007418 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d018      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a1f      	ldr	r2, [pc, #124]	; (800741c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1e      	ldr	r2, [pc, #120]	; (8007420 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00e      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1c      	ldr	r2, [pc, #112]	; (8007424 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d009      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a1b      	ldr	r2, [pc, #108]	; (8007428 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a19      	ldr	r2, [pc, #100]	; (800742c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d132      	bne.n	8007430 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e031      	b.n	8007432 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80073ce:	bf00      	nop
 80073d0:	40020010 	.word	0x40020010
 80073d4:	40020028 	.word	0x40020028
 80073d8:	40020040 	.word	0x40020040
 80073dc:	40020058 	.word	0x40020058
 80073e0:	40020070 	.word	0x40020070
 80073e4:	40020088 	.word	0x40020088
 80073e8:	400200a0 	.word	0x400200a0
 80073ec:	400200b8 	.word	0x400200b8
 80073f0:	40020410 	.word	0x40020410
 80073f4:	40020428 	.word	0x40020428
 80073f8:	40020440 	.word	0x40020440
 80073fc:	40020458 	.word	0x40020458
 8007400:	40020470 	.word	0x40020470
 8007404:	40020488 	.word	0x40020488
 8007408:	400204a0 	.word	0x400204a0
 800740c:	400204b8 	.word	0x400204b8
 8007410:	58025408 	.word	0x58025408
 8007414:	5802541c 	.word	0x5802541c
 8007418:	58025430 	.word	0x58025430
 800741c:	58025444 	.word	0x58025444
 8007420:	58025458 	.word	0x58025458
 8007424:	5802546c 	.word	0x5802546c
 8007428:	58025480 	.word	0x58025480
 800742c:	58025494 	.word	0x58025494
 8007430:	2300      	movs	r3, #0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00d      	beq.n	8007452 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800743e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007450:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a3b      	ldr	r2, [pc, #236]	; (8007544 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d04a      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a39      	ldr	r2, [pc, #228]	; (8007548 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d045      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a38      	ldr	r2, [pc, #224]	; (800754c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d040      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a36      	ldr	r2, [pc, #216]	; (8007550 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d03b      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a35      	ldr	r2, [pc, #212]	; (8007554 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d036      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a33      	ldr	r2, [pc, #204]	; (8007558 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d031      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a32      	ldr	r2, [pc, #200]	; (800755c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d02c      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a30      	ldr	r2, [pc, #192]	; (8007560 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d027      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a2f      	ldr	r2, [pc, #188]	; (8007564 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d022      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a2d      	ldr	r2, [pc, #180]	; (8007568 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d01d      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a2c      	ldr	r2, [pc, #176]	; (800756c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d018      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a2a      	ldr	r2, [pc, #168]	; (8007570 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a29      	ldr	r2, [pc, #164]	; (8007574 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00e      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a27      	ldr	r2, [pc, #156]	; (8007578 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a26      	ldr	r2, [pc, #152]	; (800757c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a24      	ldr	r2, [pc, #144]	; (8007580 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d101      	bne.n	80074f6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d043      	beq.n	8007584 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f023 021e 	bic.w	r2, r3, #30
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0216 	orr.w	r2, r2, #22
 800750e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800751e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	2b00      	cmp	r3, #0
 8007526:	d103      	bne.n	8007530 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752c:	2b00      	cmp	r3, #0
 800752e:	d043      	beq.n	80075b8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0208 	orr.w	r2, r2, #8
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	e03a      	b.n	80075b8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8007542:	bf00      	nop
 8007544:	40020010 	.word	0x40020010
 8007548:	40020028 	.word	0x40020028
 800754c:	40020040 	.word	0x40020040
 8007550:	40020058 	.word	0x40020058
 8007554:	40020070 	.word	0x40020070
 8007558:	40020088 	.word	0x40020088
 800755c:	400200a0 	.word	0x400200a0
 8007560:	400200b8 	.word	0x400200b8
 8007564:	40020410 	.word	0x40020410
 8007568:	40020428 	.word	0x40020428
 800756c:	40020440 	.word	0x40020440
 8007570:	40020458 	.word	0x40020458
 8007574:	40020470 	.word	0x40020470
 8007578:	40020488 	.word	0x40020488
 800757c:	400204a0 	.word	0x400204a0
 8007580:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f023 020e 	bic.w	r2, r3, #14
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 020a 	orr.w	r2, r2, #10
 8007596:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d103      	bne.n	80075a8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d007      	beq.n	80075b8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0204 	orr.w	r2, r2, #4
 80075b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a81      	ldr	r2, [pc, #516]	; (80077c4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d072      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a80      	ldr	r2, [pc, #512]	; (80077c8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d06d      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a7e      	ldr	r2, [pc, #504]	; (80077cc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d068      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a7d      	ldr	r2, [pc, #500]	; (80077d0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d063      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a7b      	ldr	r2, [pc, #492]	; (80077d4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d05e      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a7a      	ldr	r2, [pc, #488]	; (80077d8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d059      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a78      	ldr	r2, [pc, #480]	; (80077dc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d054      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a77      	ldr	r2, [pc, #476]	; (80077e0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d04f      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a75      	ldr	r2, [pc, #468]	; (80077e4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d04a      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a74      	ldr	r2, [pc, #464]	; (80077e8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d045      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a72      	ldr	r2, [pc, #456]	; (80077ec <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d040      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a71      	ldr	r2, [pc, #452]	; (80077f0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d03b      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a6f      	ldr	r2, [pc, #444]	; (80077f4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d036      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a6e      	ldr	r2, [pc, #440]	; (80077f8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d031      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a6c      	ldr	r2, [pc, #432]	; (80077fc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d02c      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a6b      	ldr	r2, [pc, #428]	; (8007800 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d027      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a69      	ldr	r2, [pc, #420]	; (8007804 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d022      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a68      	ldr	r2, [pc, #416]	; (8007808 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d01d      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a66      	ldr	r2, [pc, #408]	; (800780c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d018      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a65      	ldr	r2, [pc, #404]	; (8007810 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d013      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a63      	ldr	r2, [pc, #396]	; (8007814 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00e      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a62      	ldr	r2, [pc, #392]	; (8007818 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d009      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a60      	ldr	r2, [pc, #384]	; (800781c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d004      	beq.n	80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a5f      	ldr	r2, [pc, #380]	; (8007820 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d101      	bne.n	80076ac <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80076ac:	2300      	movs	r3, #0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d01a      	beq.n	80076e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a35      	ldr	r2, [pc, #212]	; (80077c4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d04a      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a34      	ldr	r2, [pc, #208]	; (80077c8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d045      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a32      	ldr	r2, [pc, #200]	; (80077cc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d040      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a31      	ldr	r2, [pc, #196]	; (80077d0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d03b      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a2f      	ldr	r2, [pc, #188]	; (80077d4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d036      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a2e      	ldr	r2, [pc, #184]	; (80077d8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d031      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a2c      	ldr	r2, [pc, #176]	; (80077dc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d02c      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a2b      	ldr	r2, [pc, #172]	; (80077e0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d027      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a29      	ldr	r2, [pc, #164]	; (80077e4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d022      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a28      	ldr	r2, [pc, #160]	; (80077e8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d01d      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a26      	ldr	r2, [pc, #152]	; (80077ec <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d018      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a25      	ldr	r2, [pc, #148]	; (80077f0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d013      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a23      	ldr	r2, [pc, #140]	; (80077f4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00e      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a22      	ldr	r2, [pc, #136]	; (80077f8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d009      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a20      	ldr	r2, [pc, #128]	; (80077fc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1f      	ldr	r2, [pc, #124]	; (8007800 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d108      	bne.n	800779a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	e00e      	b.n	80077b8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0201 	orr.w	r2, r2, #1
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	e005      	b.n	80077b8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40020010 	.word	0x40020010
 80077c8:	40020028 	.word	0x40020028
 80077cc:	40020040 	.word	0x40020040
 80077d0:	40020058 	.word	0x40020058
 80077d4:	40020070 	.word	0x40020070
 80077d8:	40020088 	.word	0x40020088
 80077dc:	400200a0 	.word	0x400200a0
 80077e0:	400200b8 	.word	0x400200b8
 80077e4:	40020410 	.word	0x40020410
 80077e8:	40020428 	.word	0x40020428
 80077ec:	40020440 	.word	0x40020440
 80077f0:	40020458 	.word	0x40020458
 80077f4:	40020470 	.word	0x40020470
 80077f8:	40020488 	.word	0x40020488
 80077fc:	400204a0 	.word	0x400204a0
 8007800:	400204b8 	.word	0x400204b8
 8007804:	58025408 	.word	0x58025408
 8007808:	5802541c 	.word	0x5802541c
 800780c:	58025430 	.word	0x58025430
 8007810:	58025444 	.word	0x58025444
 8007814:	58025458 	.word	0x58025458
 8007818:	5802546c 	.word	0x5802546c
 800781c:	58025480 	.word	0x58025480
 8007820:	58025494 	.word	0x58025494

08007824 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a39      	ldr	r2, [pc, #228]	; (800791c <HAL_DMAEx_ChangeMemory+0xf8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d04a      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a37      	ldr	r2, [pc, #220]	; (8007920 <HAL_DMAEx_ChangeMemory+0xfc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d045      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a36      	ldr	r2, [pc, #216]	; (8007924 <HAL_DMAEx_ChangeMemory+0x100>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d040      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a34      	ldr	r2, [pc, #208]	; (8007928 <HAL_DMAEx_ChangeMemory+0x104>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d03b      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a33      	ldr	r2, [pc, #204]	; (800792c <HAL_DMAEx_ChangeMemory+0x108>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d036      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a31      	ldr	r2, [pc, #196]	; (8007930 <HAL_DMAEx_ChangeMemory+0x10c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d031      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a30      	ldr	r2, [pc, #192]	; (8007934 <HAL_DMAEx_ChangeMemory+0x110>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d02c      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2e      	ldr	r2, [pc, #184]	; (8007938 <HAL_DMAEx_ChangeMemory+0x114>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d027      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a2d      	ldr	r2, [pc, #180]	; (800793c <HAL_DMAEx_ChangeMemory+0x118>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d022      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2b      	ldr	r2, [pc, #172]	; (8007940 <HAL_DMAEx_ChangeMemory+0x11c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d01d      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a2a      	ldr	r2, [pc, #168]	; (8007944 <HAL_DMAEx_ChangeMemory+0x120>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d018      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a28      	ldr	r2, [pc, #160]	; (8007948 <HAL_DMAEx_ChangeMemory+0x124>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d013      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a27      	ldr	r2, [pc, #156]	; (800794c <HAL_DMAEx_ChangeMemory+0x128>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00e      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a25      	ldr	r2, [pc, #148]	; (8007950 <HAL_DMAEx_ChangeMemory+0x12c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d009      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a24      	ldr	r2, [pc, #144]	; (8007954 <HAL_DMAEx_ChangeMemory+0x130>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d004      	beq.n	80078d2 <HAL_DMAEx_ChangeMemory+0xae>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a22      	ldr	r2, [pc, #136]	; (8007958 <HAL_DMAEx_ChangeMemory+0x134>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d101      	bne.n	80078d6 <HAL_DMAEx_ChangeMemory+0xb2>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <HAL_DMAEx_ChangeMemory+0xb4>
 80078d6:	2300      	movs	r3, #0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00c      	beq.n	80078f6 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	60da      	str	r2, [r3, #12]
 80078ea:	e010      	b.n	800790e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	611a      	str	r2, [r3, #16]
 80078f4:	e00b      	b.n	800790e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d104      	bne.n	8007906 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	60da      	str	r2, [r3, #12]
 8007904:	e003      	b.n	800790e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	40020010 	.word	0x40020010
 8007920:	40020028 	.word	0x40020028
 8007924:	40020040 	.word	0x40020040
 8007928:	40020058 	.word	0x40020058
 800792c:	40020070 	.word	0x40020070
 8007930:	40020088 	.word	0x40020088
 8007934:	400200a0 	.word	0x400200a0
 8007938:	400200b8 	.word	0x400200b8
 800793c:	40020410 	.word	0x40020410
 8007940:	40020428 	.word	0x40020428
 8007944:	40020440 	.word	0x40020440
 8007948:	40020458 	.word	0x40020458
 800794c:	40020470 	.word	0x40020470
 8007950:	40020488 	.word	0x40020488
 8007954:	400204a0 	.word	0x400204a0
 8007958:	400204b8 	.word	0x400204b8

0800795c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a46      	ldr	r2, [pc, #280]	; (8007a88 <DMA_MultiBufferSetConfig+0x12c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d04a      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a44      	ldr	r2, [pc, #272]	; (8007a8c <DMA_MultiBufferSetConfig+0x130>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d045      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a43      	ldr	r2, [pc, #268]	; (8007a90 <DMA_MultiBufferSetConfig+0x134>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d040      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a41      	ldr	r2, [pc, #260]	; (8007a94 <DMA_MultiBufferSetConfig+0x138>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d03b      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a40      	ldr	r2, [pc, #256]	; (8007a98 <DMA_MultiBufferSetConfig+0x13c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d036      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a3e      	ldr	r2, [pc, #248]	; (8007a9c <DMA_MultiBufferSetConfig+0x140>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d031      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a3d      	ldr	r2, [pc, #244]	; (8007aa0 <DMA_MultiBufferSetConfig+0x144>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d02c      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a3b      	ldr	r2, [pc, #236]	; (8007aa4 <DMA_MultiBufferSetConfig+0x148>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d027      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a3a      	ldr	r2, [pc, #232]	; (8007aa8 <DMA_MultiBufferSetConfig+0x14c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d022      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a38      	ldr	r2, [pc, #224]	; (8007aac <DMA_MultiBufferSetConfig+0x150>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d01d      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a37      	ldr	r2, [pc, #220]	; (8007ab0 <DMA_MultiBufferSetConfig+0x154>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d018      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a35      	ldr	r2, [pc, #212]	; (8007ab4 <DMA_MultiBufferSetConfig+0x158>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d013      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a34      	ldr	r2, [pc, #208]	; (8007ab8 <DMA_MultiBufferSetConfig+0x15c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00e      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a32      	ldr	r2, [pc, #200]	; (8007abc <DMA_MultiBufferSetConfig+0x160>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d009      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a31      	ldr	r2, [pc, #196]	; (8007ac0 <DMA_MultiBufferSetConfig+0x164>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d004      	beq.n	8007a0a <DMA_MultiBufferSetConfig+0xae>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a2f      	ldr	r2, [pc, #188]	; (8007ac4 <DMA_MultiBufferSetConfig+0x168>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d101      	bne.n	8007a0e <DMA_MultiBufferSetConfig+0xb2>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e000      	b.n	8007a10 <DMA_MultiBufferSetConfig+0xb4>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d019      	beq.n	8007a48 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d108      	bne.n	8007a36 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8007a34:	e021      	b.n	8007a7a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	60da      	str	r2, [r3, #12]
}
 8007a46:	e018      	b.n	8007a7a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d108      	bne.n	8007a6a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	60da      	str	r2, [r3, #12]
}
 8007a68:	e007      	b.n	8007a7a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	60da      	str	r2, [r3, #12]
}
 8007a7a:	bf00      	nop
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40020010 	.word	0x40020010
 8007a8c:	40020028 	.word	0x40020028
 8007a90:	40020040 	.word	0x40020040
 8007a94:	40020058 	.word	0x40020058
 8007a98:	40020070 	.word	0x40020070
 8007a9c:	40020088 	.word	0x40020088
 8007aa0:	400200a0 	.word	0x400200a0
 8007aa4:	400200b8 	.word	0x400200b8
 8007aa8:	40020410 	.word	0x40020410
 8007aac:	40020428 	.word	0x40020428
 8007ab0:	40020440 	.word	0x40020440
 8007ab4:	40020458 	.word	0x40020458
 8007ab8:	40020470 	.word	0x40020470
 8007abc:	40020488 	.word	0x40020488
 8007ac0:	400204a0 	.word	0x400204a0
 8007ac4:	400204b8 	.word	0x400204b8

08007ac8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e00a      	b.n	8007afa <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8007ae4:	7afb      	ldrb	r3, [r7, #11]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d103      	bne.n	8007af2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	605a      	str	r2, [r3, #4]
      break;
 8007af0:	e002      	b.n	8007af8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
      break;
 8007af6:	bf00      	nop
  }

  return status;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e003      	b.n	8007b22 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007b20:	2300      	movs	r3, #0
  }
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
	...

08007b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b089      	sub	sp, #36	; 0x24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b3e:	4b89      	ldr	r3, [pc, #548]	; (8007d64 <HAL_GPIO_Init+0x234>)
 8007b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b42:	e194      	b.n	8007e6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	2101      	movs	r1, #1
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b50:	4013      	ands	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 8186 	beq.w	8007e68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d005      	beq.n	8007b74 <HAL_GPIO_Init+0x44>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f003 0303 	and.w	r3, r3, #3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d130      	bne.n	8007bd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	2203      	movs	r2, #3
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	43db      	mvns	r3, r3
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	fa02 f303 	lsl.w	r3, r2, r3
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007baa:	2201      	movs	r2, #1
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	091b      	lsrs	r3, r3, #4
 8007bc0:	f003 0201 	and.w	r2, r3, #1
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d017      	beq.n	8007c12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	2203      	movs	r2, #3
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	fa02 f303 	lsl.w	r3, r2, r3
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d123      	bne.n	8007c66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	08da      	lsrs	r2, r3, #3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3208      	adds	r2, #8
 8007c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	220f      	movs	r2, #15
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	691a      	ldr	r2, [r3, #16]
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	08da      	lsrs	r2, r3, #3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3208      	adds	r2, #8
 8007c60:	69b9      	ldr	r1, [r7, #24]
 8007c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	2203      	movs	r2, #3
 8007c72:	fa02 f303 	lsl.w	r3, r2, r3
 8007c76:	43db      	mvns	r3, r3
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f003 0203 	and.w	r2, r3, #3
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 80e0 	beq.w	8007e68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ca8:	4b2f      	ldr	r3, [pc, #188]	; (8007d68 <HAL_GPIO_Init+0x238>)
 8007caa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007cae:	4a2e      	ldr	r2, [pc, #184]	; (8007d68 <HAL_GPIO_Init+0x238>)
 8007cb0:	f043 0302 	orr.w	r3, r3, #2
 8007cb4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8007cb8:	4b2b      	ldr	r3, [pc, #172]	; (8007d68 <HAL_GPIO_Init+0x238>)
 8007cba:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cc6:	4a29      	ldr	r2, [pc, #164]	; (8007d6c <HAL_GPIO_Init+0x23c>)
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	089b      	lsrs	r3, r3, #2
 8007ccc:	3302      	adds	r3, #2
 8007cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	220f      	movs	r2, #15
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a20      	ldr	r2, [pc, #128]	; (8007d70 <HAL_GPIO_Init+0x240>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d052      	beq.n	8007d98 <HAL_GPIO_Init+0x268>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a1f      	ldr	r2, [pc, #124]	; (8007d74 <HAL_GPIO_Init+0x244>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d031      	beq.n	8007d5e <HAL_GPIO_Init+0x22e>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a1e      	ldr	r2, [pc, #120]	; (8007d78 <HAL_GPIO_Init+0x248>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d02b      	beq.n	8007d5a <HAL_GPIO_Init+0x22a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a1d      	ldr	r2, [pc, #116]	; (8007d7c <HAL_GPIO_Init+0x24c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d025      	beq.n	8007d56 <HAL_GPIO_Init+0x226>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a1c      	ldr	r2, [pc, #112]	; (8007d80 <HAL_GPIO_Init+0x250>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d01f      	beq.n	8007d52 <HAL_GPIO_Init+0x222>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a1b      	ldr	r2, [pc, #108]	; (8007d84 <HAL_GPIO_Init+0x254>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d019      	beq.n	8007d4e <HAL_GPIO_Init+0x21e>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a1a      	ldr	r2, [pc, #104]	; (8007d88 <HAL_GPIO_Init+0x258>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d013      	beq.n	8007d4a <HAL_GPIO_Init+0x21a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a19      	ldr	r2, [pc, #100]	; (8007d8c <HAL_GPIO_Init+0x25c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00d      	beq.n	8007d46 <HAL_GPIO_Init+0x216>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <HAL_GPIO_Init+0x260>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d007      	beq.n	8007d42 <HAL_GPIO_Init+0x212>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a17      	ldr	r2, [pc, #92]	; (8007d94 <HAL_GPIO_Init+0x264>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d101      	bne.n	8007d3e <HAL_GPIO_Init+0x20e>
 8007d3a:	2309      	movs	r3, #9
 8007d3c:	e02d      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d3e:	230a      	movs	r3, #10
 8007d40:	e02b      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d42:	2308      	movs	r3, #8
 8007d44:	e029      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d46:	2307      	movs	r3, #7
 8007d48:	e027      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d4a:	2306      	movs	r3, #6
 8007d4c:	e025      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d4e:	2305      	movs	r3, #5
 8007d50:	e023      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d52:	2304      	movs	r3, #4
 8007d54:	e021      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d56:	2303      	movs	r3, #3
 8007d58:	e01f      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e01d      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e01b      	b.n	8007d9a <HAL_GPIO_Init+0x26a>
 8007d62:	bf00      	nop
 8007d64:	58000080 	.word	0x58000080
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	58000400 	.word	0x58000400
 8007d70:	58020000 	.word	0x58020000
 8007d74:	58020400 	.word	0x58020400
 8007d78:	58020800 	.word	0x58020800
 8007d7c:	58020c00 	.word	0x58020c00
 8007d80:	58021000 	.word	0x58021000
 8007d84:	58021400 	.word	0x58021400
 8007d88:	58021800 	.word	0x58021800
 8007d8c:	58021c00 	.word	0x58021c00
 8007d90:	58022000 	.word	0x58022000
 8007d94:	58022400 	.word	0x58022400
 8007d98:	2300      	movs	r3, #0
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	f002 0203 	and.w	r2, r2, #3
 8007da0:	0092      	lsls	r2, r2, #2
 8007da2:	4093      	lsls	r3, r2
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007daa:	4938      	ldr	r1, [pc, #224]	; (8007e8c <HAL_GPIO_Init+0x35c>)
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	089b      	lsrs	r3, r3, #2
 8007db0:	3302      	adds	r3, #2
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	43db      	mvns	r3, r3
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	43db      	mvns	r3, r3
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	4013      	ands	r3, r2
 8007df6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	4013      	ands	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	43db      	mvns	r3, r3
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f47f ae63 	bne.w	8007b44 <HAL_GPIO_Init+0x14>
  }
}
 8007e7e:	bf00      	nop
 8007e80:	bf00      	nop
 8007e82:	3724      	adds	r7, #36	; 0x24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	58000400 	.word	0x58000400

08007e90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e9e:	4b75      	ldr	r3, [pc, #468]	; (8008074 <HAL_GPIO_DeInit+0x1e4>)
 8007ea0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007ea2:	e0d9      	b.n	8008058 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 80cc 	beq.w	8008052 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007eba:	4a6f      	ldr	r2, [pc, #444]	; (8008078 <HAL_GPIO_DeInit+0x1e8>)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	089b      	lsrs	r3, r3, #2
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	220f      	movs	r2, #15
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	4013      	ands	r3, r2
 8007eda:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a67      	ldr	r2, [pc, #412]	; (800807c <HAL_GPIO_DeInit+0x1ec>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d037      	beq.n	8007f54 <HAL_GPIO_DeInit+0xc4>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a66      	ldr	r2, [pc, #408]	; (8008080 <HAL_GPIO_DeInit+0x1f0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d031      	beq.n	8007f50 <HAL_GPIO_DeInit+0xc0>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a65      	ldr	r2, [pc, #404]	; (8008084 <HAL_GPIO_DeInit+0x1f4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d02b      	beq.n	8007f4c <HAL_GPIO_DeInit+0xbc>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a64      	ldr	r2, [pc, #400]	; (8008088 <HAL_GPIO_DeInit+0x1f8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d025      	beq.n	8007f48 <HAL_GPIO_DeInit+0xb8>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a63      	ldr	r2, [pc, #396]	; (800808c <HAL_GPIO_DeInit+0x1fc>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d01f      	beq.n	8007f44 <HAL_GPIO_DeInit+0xb4>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a62      	ldr	r2, [pc, #392]	; (8008090 <HAL_GPIO_DeInit+0x200>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d019      	beq.n	8007f40 <HAL_GPIO_DeInit+0xb0>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a61      	ldr	r2, [pc, #388]	; (8008094 <HAL_GPIO_DeInit+0x204>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d013      	beq.n	8007f3c <HAL_GPIO_DeInit+0xac>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a60      	ldr	r2, [pc, #384]	; (8008098 <HAL_GPIO_DeInit+0x208>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00d      	beq.n	8007f38 <HAL_GPIO_DeInit+0xa8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a5f      	ldr	r2, [pc, #380]	; (800809c <HAL_GPIO_DeInit+0x20c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <HAL_GPIO_DeInit+0xa4>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a5e      	ldr	r2, [pc, #376]	; (80080a0 <HAL_GPIO_DeInit+0x210>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d101      	bne.n	8007f30 <HAL_GPIO_DeInit+0xa0>
 8007f2c:	2309      	movs	r3, #9
 8007f2e:	e012      	b.n	8007f56 <HAL_GPIO_DeInit+0xc6>
 8007f30:	230a      	movs	r3, #10
 8007f32:	e010      	b.n	8007f56 <HAL_GPIO_DeInit+0xc6>
 8007f34:	2308      	movs	r3, #8
 8007f36:	e00e      	b.n	8007f56 <HAL_GPIO_DeInit+0xc6>
 8007f38:	2307      	movs	r3, #7
 8007f3a:	e00c      	b.n	8007f56 <HAL_GPIO_DeInit+0xc6>
 8007f3c:	2306      	movs	r3, #6
 8007f3e:	e00a      	b.n	8007f56 <HAL_GPIO_DeInit+0xc6>
 8007f40:	2305      	movs	r3, #5
 8007f42:	e008      	b.n	8007f56 <HAL_GPIO_DeInit+0xc6>
 8007f44:	2304      	movs	r3, #4
 8007f46:	e006      	b.n	8007f56 <HAL_GPIO_DeInit+0xc6>
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e004      	b.n	8007f56 <HAL_GPIO_DeInit+0xc6>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e002      	b.n	8007f56 <HAL_GPIO_DeInit+0xc6>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <HAL_GPIO_DeInit+0xc6>
 8007f54:	2300      	movs	r3, #0
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	f002 0203 	and.w	r2, r2, #3
 8007f5c:	0092      	lsls	r2, r2, #2
 8007f5e:	4093      	lsls	r3, r2
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d136      	bne.n	8007fd4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	401a      	ands	r2, r3
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	43db      	mvns	r3, r3
 8007f7c:	401a      	ands	r2, r3
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	43db      	mvns	r3, r3
 8007f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f90:	4013      	ands	r3, r2
 8007f92:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	43db      	mvns	r3, r3
 8007f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	220f      	movs	r2, #15
 8007fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007fb6:	4a30      	ldr	r2, [pc, #192]	; (8008078 <HAL_GPIO_DeInit+0x1e8>)
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	089b      	lsrs	r3, r3, #2
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	43da      	mvns	r2, r3
 8007fc6:	482c      	ldr	r0, [pc, #176]	; (8008078 <HAL_GPIO_DeInit+0x1e8>)
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	089b      	lsrs	r3, r3, #2
 8007fcc:	400a      	ands	r2, r1
 8007fce:	3302      	adds	r3, #2
 8007fd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	2103      	movs	r1, #3
 8007fde:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	08da      	lsrs	r2, r3, #3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3208      	adds	r2, #8
 8007ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	220f      	movs	r2, #15
 8007ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8008002:	43db      	mvns	r3, r3
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	08d2      	lsrs	r2, r2, #3
 8008008:	4019      	ands	r1, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3208      	adds	r2, #8
 800800e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	2103      	movs	r1, #3
 800801c:	fa01 f303 	lsl.w	r3, r1, r3
 8008020:	43db      	mvns	r3, r3
 8008022:	401a      	ands	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	2101      	movs	r1, #1
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	fa01 f303 	lsl.w	r3, r1, r3
 8008034:	43db      	mvns	r3, r3
 8008036:	401a      	ands	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	2103      	movs	r1, #3
 8008046:	fa01 f303 	lsl.w	r3, r1, r3
 800804a:	43db      	mvns	r3, r3
 800804c:	401a      	ands	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	3301      	adds	r3, #1
 8008056:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	fa22 f303 	lsr.w	r3, r2, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	f47f af1f 	bne.w	8007ea4 <HAL_GPIO_DeInit+0x14>
  }
}
 8008066:	bf00      	nop
 8008068:	bf00      	nop
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	58000080 	.word	0x58000080
 8008078:	58000400 	.word	0x58000400
 800807c:	58020000 	.word	0x58020000
 8008080:	58020400 	.word	0x58020400
 8008084:	58020800 	.word	0x58020800
 8008088:	58020c00 	.word	0x58020c00
 800808c:	58021000 	.word	0x58021000
 8008090:	58021400 	.word	0x58021400
 8008094:	58021800 	.word	0x58021800
 8008098:	58021c00 	.word	0x58021c00
 800809c:	58022000 	.word	0x58022000
 80080a0:	58022400 	.word	0x58022400

080080a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	807b      	strh	r3, [r7, #2]
 80080b0:	4613      	mov	r3, r2
 80080b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080b4:	787b      	ldrb	r3, [r7, #1]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080ba:	887a      	ldrh	r2, [r7, #2]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80080c0:	e003      	b.n	80080ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80080c2:	887b      	ldrh	r3, [r7, #2]
 80080c4:	041a      	lsls	r2, r3, #16
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	619a      	str	r2, [r3, #24]
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
	...

080080d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e07f      	b.n	80081ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f8a9 	bl	8008256 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2224      	movs	r2, #36	; 0x24
 8008108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0201 	bic.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008128:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689a      	ldr	r2, [r3, #8]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008138:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d107      	bne.n	8008152 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689a      	ldr	r2, [r3, #8]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800814e:	609a      	str	r2, [r3, #8]
 8008150:	e006      	b.n	8008160 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689a      	ldr	r2, [r3, #8]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800815e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d104      	bne.n	8008172 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008170:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6859      	ldr	r1, [r3, #4]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	4b1d      	ldr	r3, [pc, #116]	; (80081f4 <HAL_I2C_Init+0x11c>)
 800817e:	430b      	orrs	r3, r1
 8008180:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008190:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69d9      	ldr	r1, [r3, #28]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0201 	orr.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	02008000 	.word	0x02008000

080081f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e021      	b.n	800824e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2224      	movs	r2, #36	; 0x24
 800820e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0201 	bic.w	r2, r2, #1
 8008220:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f821 	bl	800826a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
	...

08008280 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af02      	add	r7, sp, #8
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	4608      	mov	r0, r1
 800828a:	4611      	mov	r1, r2
 800828c:	461a      	mov	r2, r3
 800828e:	4603      	mov	r3, r0
 8008290:	817b      	strh	r3, [r7, #10]
 8008292:	460b      	mov	r3, r1
 8008294:	813b      	strh	r3, [r7, #8]
 8008296:	4613      	mov	r3, r2
 8008298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	f040 80f9 	bne.w	800849a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_I2C_Mem_Write+0x34>
 80082ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d105      	bne.n	80082c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e0ed      	b.n	800849c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <HAL_I2C_Mem_Write+0x4e>
 80082ca:	2302      	movs	r3, #2
 80082cc:	e0e6      	b.n	800849c <HAL_I2C_Mem_Write+0x21c>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082d6:	f7fc fd5d 	bl	8004d94 <HAL_GetTick>
 80082da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	2319      	movs	r3, #25
 80082e2:	2201      	movs	r2, #1
 80082e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fadd 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e0d1      	b.n	800849c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2221      	movs	r2, #33	; 0x21
 80082fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2240      	movs	r2, #64	; 0x40
 8008304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a3a      	ldr	r2, [r7, #32]
 8008312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008320:	88f8      	ldrh	r0, [r7, #6]
 8008322:	893a      	ldrh	r2, [r7, #8]
 8008324:	8979      	ldrh	r1, [r7, #10]
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	4603      	mov	r3, r0
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f9ed 	bl	8008710 <I2C_RequestMemoryWrite>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e0a9      	b.n	800849c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834c:	b29b      	uxth	r3, r3
 800834e:	2bff      	cmp	r3, #255	; 0xff
 8008350:	d90e      	bls.n	8008370 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	22ff      	movs	r2, #255	; 0xff
 8008356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800835c:	b2da      	uxtb	r2, r3
 800835e:	8979      	ldrh	r1, [r7, #10]
 8008360:	2300      	movs	r3, #0
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fc57 	bl	8008c1c <I2C_TransferConfig>
 800836e:	e00f      	b.n	8008390 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008374:	b29a      	uxth	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800837e:	b2da      	uxtb	r2, r3
 8008380:	8979      	ldrh	r1, [r7, #10]
 8008382:	2300      	movs	r3, #0
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fc46 	bl	8008c1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 fad6 	bl	8008946 <I2C_WaitOnTXISFlagUntilTimeout>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e07b      	b.n	800849c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	781a      	ldrb	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083be:	b29b      	uxth	r3, r3
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083cc:	3b01      	subs	r3, #1
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d8:	b29b      	uxth	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d034      	beq.n	8008448 <HAL_I2C_Mem_Write+0x1c8>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d130      	bne.n	8008448 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	2200      	movs	r2, #0
 80083ee:	2180      	movs	r1, #128	; 0x80
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fa59 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e04d      	b.n	800849c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008404:	b29b      	uxth	r3, r3
 8008406:	2bff      	cmp	r3, #255	; 0xff
 8008408:	d90e      	bls.n	8008428 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	22ff      	movs	r2, #255	; 0xff
 800840e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008414:	b2da      	uxtb	r2, r3
 8008416:	8979      	ldrh	r1, [r7, #10]
 8008418:	2300      	movs	r3, #0
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fbfb 	bl	8008c1c <I2C_TransferConfig>
 8008426:	e00f      	b.n	8008448 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842c:	b29a      	uxth	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008436:	b2da      	uxtb	r2, r3
 8008438:	8979      	ldrh	r1, [r7, #10]
 800843a:	2300      	movs	r3, #0
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 fbea 	bl	8008c1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800844c:	b29b      	uxth	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d19e      	bne.n	8008390 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 fabc 	bl	80089d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e01a      	b.n	800849c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2220      	movs	r2, #32
 800846c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6859      	ldr	r1, [r3, #4]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <HAL_I2C_Mem_Write+0x224>)
 800847a:	400b      	ands	r3, r1
 800847c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	e000      	b.n	800849c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800849a:	2302      	movs	r3, #2
  }
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	fe00e800 	.word	0xfe00e800

080084a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	4608      	mov	r0, r1
 80084b2:	4611      	mov	r1, r2
 80084b4:	461a      	mov	r2, r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	817b      	strh	r3, [r7, #10]
 80084ba:	460b      	mov	r3, r1
 80084bc:	813b      	strh	r3, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	f040 80fd 	bne.w	80086ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_I2C_Mem_Read+0x34>
 80084d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d105      	bne.n	80084e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e0f1      	b.n	80086cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d101      	bne.n	80084f6 <HAL_I2C_Mem_Read+0x4e>
 80084f2:	2302      	movs	r3, #2
 80084f4:	e0ea      	b.n	80086cc <HAL_I2C_Mem_Read+0x224>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80084fe:	f7fc fc49 	bl	8004d94 <HAL_GetTick>
 8008502:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	2319      	movs	r3, #25
 800850a:	2201      	movs	r2, #1
 800850c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f9c9 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e0d5      	b.n	80086cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2222      	movs	r2, #34	; 0x22
 8008524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2240      	movs	r2, #64	; 0x40
 800852c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a3a      	ldr	r2, [r7, #32]
 800853a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008540:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008548:	88f8      	ldrh	r0, [r7, #6]
 800854a:	893a      	ldrh	r2, [r7, #8]
 800854c:	8979      	ldrh	r1, [r7, #10]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	4603      	mov	r3, r0
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 f92d 	bl	80087b8 <I2C_RequestMemoryRead>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e0ad      	b.n	80086cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008574:	b29b      	uxth	r3, r3
 8008576:	2bff      	cmp	r3, #255	; 0xff
 8008578:	d90e      	bls.n	8008598 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	22ff      	movs	r2, #255	; 0xff
 800857e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008584:	b2da      	uxtb	r2, r3
 8008586:	8979      	ldrh	r1, [r7, #10]
 8008588:	4b52      	ldr	r3, [pc, #328]	; (80086d4 <HAL_I2C_Mem_Read+0x22c>)
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 fb43 	bl	8008c1c <I2C_TransferConfig>
 8008596:	e00f      	b.n	80085b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	8979      	ldrh	r1, [r7, #10]
 80085aa:	4b4a      	ldr	r3, [pc, #296]	; (80086d4 <HAL_I2C_Mem_Read+0x22c>)
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 fb32 	bl	8008c1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	2200      	movs	r2, #0
 80085c0:	2104      	movs	r1, #4
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 f970 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e07c      	b.n	80086cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	b2d2      	uxtb	r2, r2
 80085de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ee:	3b01      	subs	r3, #1
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d034      	beq.n	8008678 <HAL_I2C_Mem_Read+0x1d0>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008612:	2b00      	cmp	r3, #0
 8008614:	d130      	bne.n	8008678 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861c:	2200      	movs	r2, #0
 800861e:	2180      	movs	r1, #128	; 0x80
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f941 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e04d      	b.n	80086cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008634:	b29b      	uxth	r3, r3
 8008636:	2bff      	cmp	r3, #255	; 0xff
 8008638:	d90e      	bls.n	8008658 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	22ff      	movs	r2, #255	; 0xff
 800863e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008644:	b2da      	uxtb	r2, r3
 8008646:	8979      	ldrh	r1, [r7, #10]
 8008648:	2300      	movs	r3, #0
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 fae3 	bl	8008c1c <I2C_TransferConfig>
 8008656:	e00f      	b.n	8008678 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800865c:	b29a      	uxth	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008666:	b2da      	uxtb	r2, r3
 8008668:	8979      	ldrh	r1, [r7, #10]
 800866a:	2300      	movs	r3, #0
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fad2 	bl	8008c1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867c:	b29b      	uxth	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d19a      	bne.n	80085b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f9a4 	bl	80089d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e01a      	b.n	80086cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2220      	movs	r2, #32
 800869c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6859      	ldr	r1, [r3, #4]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	4b0b      	ldr	r3, [pc, #44]	; (80086d8 <HAL_I2C_Mem_Read+0x230>)
 80086aa:	400b      	ands	r3, r1
 80086ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	e000      	b.n	80086cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80086ca:	2302      	movs	r3, #2
  }
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	80002400 	.word	0x80002400
 80086d8:	fe00e800 	.word	0xfe00e800

080086dc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086ea:	b2db      	uxtb	r3, r3
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008704:	4618      	mov	r0, r3
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	4608      	mov	r0, r1
 800871a:	4611      	mov	r1, r2
 800871c:	461a      	mov	r2, r3
 800871e:	4603      	mov	r3, r0
 8008720:	817b      	strh	r3, [r7, #10]
 8008722:	460b      	mov	r3, r1
 8008724:	813b      	strh	r3, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800872a:	88fb      	ldrh	r3, [r7, #6]
 800872c:	b2da      	uxtb	r2, r3
 800872e:	8979      	ldrh	r1, [r7, #10]
 8008730:	4b20      	ldr	r3, [pc, #128]	; (80087b4 <I2C_RequestMemoryWrite+0xa4>)
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 fa6f 	bl	8008c1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800873e:	69fa      	ldr	r2, [r7, #28]
 8008740:	69b9      	ldr	r1, [r7, #24]
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 f8ff 	bl	8008946 <I2C_WaitOnTXISFlagUntilTimeout>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e02c      	b.n	80087ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008752:	88fb      	ldrh	r3, [r7, #6]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d105      	bne.n	8008764 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008758:	893b      	ldrh	r3, [r7, #8]
 800875a:	b2da      	uxtb	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	629a      	str	r2, [r3, #40]	; 0x28
 8008762:	e015      	b.n	8008790 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008764:	893b      	ldrh	r3, [r7, #8]
 8008766:	0a1b      	lsrs	r3, r3, #8
 8008768:	b29b      	uxth	r3, r3
 800876a:	b2da      	uxtb	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	69b9      	ldr	r1, [r7, #24]
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f8e5 	bl	8008946 <I2C_WaitOnTXISFlagUntilTimeout>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e012      	b.n	80087ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008786:	893b      	ldrh	r3, [r7, #8]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	2200      	movs	r2, #0
 8008798:	2180      	movs	r1, #128	; 0x80
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 f884 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	80002000 	.word	0x80002000

080087b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af02      	add	r7, sp, #8
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	4608      	mov	r0, r1
 80087c2:	4611      	mov	r1, r2
 80087c4:	461a      	mov	r2, r3
 80087c6:	4603      	mov	r3, r0
 80087c8:	817b      	strh	r3, [r7, #10]
 80087ca:	460b      	mov	r3, r1
 80087cc:	813b      	strh	r3, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80087d2:	88fb      	ldrh	r3, [r7, #6]
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	8979      	ldrh	r1, [r7, #10]
 80087d8:	4b20      	ldr	r3, [pc, #128]	; (800885c <I2C_RequestMemoryRead+0xa4>)
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	2300      	movs	r3, #0
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 fa1c 	bl	8008c1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	69b9      	ldr	r1, [r7, #24]
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 f8ac 	bl	8008946 <I2C_WaitOnTXISFlagUntilTimeout>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e02c      	b.n	8008852 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087f8:	88fb      	ldrh	r3, [r7, #6]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d105      	bne.n	800880a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087fe:	893b      	ldrh	r3, [r7, #8]
 8008800:	b2da      	uxtb	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	629a      	str	r2, [r3, #40]	; 0x28
 8008808:	e015      	b.n	8008836 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800880a:	893b      	ldrh	r3, [r7, #8]
 800880c:	0a1b      	lsrs	r3, r3, #8
 800880e:	b29b      	uxth	r3, r3
 8008810:	b2da      	uxtb	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008818:	69fa      	ldr	r2, [r7, #28]
 800881a:	69b9      	ldr	r1, [r7, #24]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 f892 	bl	8008946 <I2C_WaitOnTXISFlagUntilTimeout>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e012      	b.n	8008852 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800882c:	893b      	ldrh	r3, [r7, #8]
 800882e:	b2da      	uxtb	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2200      	movs	r2, #0
 800883e:	2140      	movs	r1, #64	; 0x40
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f831 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	80002000 	.word	0x80002000

08008860 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b02      	cmp	r3, #2
 8008874:	d103      	bne.n	800887e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2200      	movs	r2, #0
 800887c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b01      	cmp	r3, #1
 800888a:	d007      	beq.n	800889c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0201 	orr.w	r2, r2, #1
 800889a:	619a      	str	r2, [r3, #24]
  }
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088b8:	e031      	b.n	800891e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c0:	d02d      	beq.n	800891e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c2:	f7fc fa67 	bl	8004d94 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d302      	bcc.n	80088d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d122      	bne.n	800891e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	4013      	ands	r3, r2
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	bf0c      	ite	eq
 80088e8:	2301      	moveq	r3, #1
 80088ea:	2300      	movne	r3, #0
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	461a      	mov	r2, r3
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d113      	bne.n	800891e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fa:	f043 0220 	orr.w	r2, r3, #32
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2220      	movs	r2, #32
 8008906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e00f      	b.n	800893e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	699a      	ldr	r2, [r3, #24]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4013      	ands	r3, r2
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	429a      	cmp	r2, r3
 800892c:	bf0c      	ite	eq
 800892e:	2301      	moveq	r3, #1
 8008930:	2300      	movne	r3, #0
 8008932:	b2db      	uxtb	r3, r3
 8008934:	461a      	mov	r2, r3
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	429a      	cmp	r2, r3
 800893a:	d0be      	beq.n	80088ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008952:	e033      	b.n	80089bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 f87f 	bl	8008a5c <I2C_IsErrorOccurred>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e031      	b.n	80089cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896e:	d025      	beq.n	80089bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008970:	f7fc fa10 	bl	8004d94 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	429a      	cmp	r2, r3
 800897e:	d302      	bcc.n	8008986 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d11a      	bne.n	80089bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b02      	cmp	r3, #2
 8008992:	d013      	beq.n	80089bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008998:	f043 0220 	orr.w	r2, r3, #32
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e007      	b.n	80089cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d1c4      	bne.n	8008954 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089e0:	e02f      	b.n	8008a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 f838 	bl	8008a5c <I2C_IsErrorOccurred>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e02d      	b.n	8008a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089f6:	f7fc f9cd 	bl	8004d94 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d302      	bcc.n	8008a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d11a      	bne.n	8008a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	d013      	beq.n	8008a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1e:	f043 0220 	orr.w	r2, r3, #32
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e007      	b.n	8008a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f003 0320 	and.w	r3, r3, #32
 8008a4c:	2b20      	cmp	r3, #32
 8008a4e:	d1c8      	bne.n	80089e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
	...

08008a5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	; 0x28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	f003 0310 	and.w	r3, r3, #16
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d068      	beq.n	8008b5a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2210      	movs	r2, #16
 8008a8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a90:	e049      	b.n	8008b26 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d045      	beq.n	8008b26 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a9a:	f7fc f97b 	bl	8004d94 <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d302      	bcc.n	8008ab0 <I2C_IsErrorOccurred+0x54>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d13a      	bne.n	8008b26 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008aba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ac2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad2:	d121      	bne.n	8008b18 <I2C_IsErrorOccurred+0xbc>
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ada:	d01d      	beq.n	8008b18 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008adc:	7cfb      	ldrb	r3, [r7, #19]
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	d01a      	beq.n	8008b18 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008af0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008af2:	f7fc f94f 	bl	8004d94 <HAL_GetTick>
 8008af6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008af8:	e00e      	b.n	8008b18 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008afa:	f7fc f94b 	bl	8004d94 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b19      	cmp	r3, #25
 8008b06:	d907      	bls.n	8008b18 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	f043 0320 	orr.w	r3, r3, #32
 8008b0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008b16:	e006      	b.n	8008b26 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	f003 0320 	and.w	r3, r3, #32
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	d1e9      	bne.n	8008afa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	f003 0320 	and.w	r3, r3, #32
 8008b30:	2b20      	cmp	r3, #32
 8008b32:	d003      	beq.n	8008b3c <I2C_IsErrorOccurred+0xe0>
 8008b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0aa      	beq.n	8008a92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d103      	bne.n	8008b4c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	f043 0304 	orr.w	r3, r3, #4
 8008b52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00b      	beq.n	8008b84 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	f043 0301 	orr.w	r3, r3, #1
 8008b72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00b      	beq.n	8008ba6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	f043 0308 	orr.w	r3, r3, #8
 8008b94:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	f043 0302 	orr.w	r3, r3, #2
 8008bb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01c      	beq.n	8008c0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff fe45 	bl	8008860 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6859      	ldr	r1, [r3, #4]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	4b0d      	ldr	r3, [pc, #52]	; (8008c18 <I2C_IsErrorOccurred+0x1bc>)
 8008be2:	400b      	ands	r3, r1
 8008be4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3728      	adds	r7, #40	; 0x28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	fe00e800 	.word	0xfe00e800

08008c1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	607b      	str	r3, [r7, #4]
 8008c26:	460b      	mov	r3, r1
 8008c28:	817b      	strh	r3, [r7, #10]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c2e:	897b      	ldrh	r3, [r7, #10]
 8008c30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c34:	7a7b      	ldrb	r3, [r7, #9]
 8008c36:	041b      	lsls	r3, r3, #16
 8008c38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	0d5b      	lsrs	r3, r3, #21
 8008c56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008c5a:	4b08      	ldr	r3, [pc, #32]	; (8008c7c <I2C_TransferConfig+0x60>)
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	43db      	mvns	r3, r3
 8008c60:	ea02 0103 	and.w	r1, r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008c6e:	bf00      	nop
 8008c70:	371c      	adds	r7, #28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	03ff63ff 	.word	0x03ff63ff

08008c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d138      	bne.n	8008d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d101      	bne.n	8008ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	e032      	b.n	8008d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2224      	movs	r2, #36	; 0x24
 8008cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0201 	bic.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6819      	ldr	r1, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e000      	b.n	8008d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d08:	2302      	movs	r3, #2
  }
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d139      	bne.n	8008da0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d101      	bne.n	8008d3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d36:	2302      	movs	r3, #2
 8008d38:	e033      	b.n	8008da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2224      	movs	r2, #36	; 0x24
 8008d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0201 	bic.w	r2, r2, #1
 8008d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0201 	orr.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e000      	b.n	8008da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008da0:	2302      	movs	r3, #2
  }
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
	...

08008db0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e11a      	b.n	8008ff8 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f91a 	bl	8009010 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d107      	bne.n	8008e02 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0201 	bic.w	r2, r2, #1
 8008e00:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2200      	movs	r2, #0
 8008e08:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d008      	beq.n	8008e24 <HAL_I2S_Init+0x74>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	2b06      	cmp	r3, #6
 8008e18:	d004      	beq.n	8008e24 <HAL_I2S_Init+0x74>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2b0a      	cmp	r3, #10
 8008e20:	f040 8094 	bne.w	8008f4c <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	695b      	ldr	r3, [r3, #20]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d067      	beq.n	8008efc <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8008e34:	2302      	movs	r3, #2
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	e001      	b.n	8008e3e <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2b30      	cmp	r3, #48	; 0x30
 8008e44:	d003      	beq.n	8008e4e <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8008e4a:	2bb0      	cmp	r3, #176	; 0xb0
 8008e4c:	d102      	bne.n	8008e54 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	60bb      	str	r3, [r7, #8]
 8008e52:	e001      	b.n	8008e58 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a68      	ldr	r2, [pc, #416]	; (8009000 <HAL_I2S_Init+0x250>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d107      	bne.n	8008e72 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 8008e62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008e66:	f04f 0100 	mov.w	r1, #0
 8008e6a:	f003 fc8d 	bl	800c788 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	e006      	b.n	8008e80 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8008e72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008e76:	f04f 0100 	mov.w	r1, #0
 8008e7a:	f003 fc85 	bl	800c788 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e7e:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e88:	d113      	bne.n	8008eb2 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8008e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	fa22 f303 	lsr.w	r3, r2, r3
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	005b      	lsls	r3, r3, #1
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eac:	3305      	adds	r3, #5
 8008eae:	613b      	str	r3, [r7, #16]
 8008eb0:	e014      	b.n	8008edc <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	fb02 f303 	mul.w	r3, r2, r3
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	461a      	mov	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed8:	3305      	adds	r3, #5
 8008eda:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	4a49      	ldr	r2, [pc, #292]	; (8009004 <HAL_I2S_Init+0x254>)
 8008ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee4:	08db      	lsrs	r3, r3, #3
 8008ee6:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	085b      	lsrs	r3, r3, #1
 8008ef8:	61fb      	str	r3, [r7, #28]
 8008efa:	e003      	b.n	8008f04 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8008efc:	2302      	movs	r3, #2
 8008efe:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8008f00:	2300      	movs	r3, #0
 8008f02:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d102      	bne.n	8008f10 <HAL_I2S_Init+0x160>
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d002      	beq.n	8008f16 <HAL_I2S_Init+0x166>
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	2bff      	cmp	r3, #255	; 0xff
 8008f14:	d907      	bls.n	8008f26 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1a:	f043 0210 	orr.w	r2, r3, #16
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e068      	b.n	8008ff8 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f36:	4b34      	ldr	r3, [pc, #208]	; (8009008 <HAL_I2S_Init+0x258>)
 8008f38:	4013      	ands	r3, r2
 8008f3a:	69fa      	ldr	r2, [r7, #28]
 8008f3c:	0411      	lsls	r1, r2, #16
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	0612      	lsls	r2, r2, #24
 8008f42:	4311      	orrs	r1, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	6812      	ldr	r2, [r2, #0]
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f52:	4b2e      	ldr	r3, [pc, #184]	; (800900c <HAL_I2S_Init+0x25c>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	6851      	ldr	r1, [r2, #4]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6892      	ldr	r2, [r2, #8]
 8008f5e:	4311      	orrs	r1, r2
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	68d2      	ldr	r2, [r2, #12]
 8008f64:	4311      	orrs	r1, r2
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	6992      	ldr	r2, [r2, #24]
 8008f6a:	4311      	orrs	r1, r2
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	6a12      	ldr	r2, [r2, #32]
 8008f70:	4311      	orrs	r1, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f76:	4311      	orrs	r1, r2
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	6912      	ldr	r2, [r2, #16]
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f042 0201 	orr.w	r2, r2, #1
 8008f88:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f640 72f8 	movw	r2, #4088	; 0xff8
 8008f92:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008fa2:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	69da      	ldr	r2, [r3, #28]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	d007      	beq.n	8008fd2 <HAL_I2S_Init+0x222>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b06      	cmp	r3, #6
 8008fc8:	d003      	beq.n	8008fd2 <HAL_I2S_Init+0x222>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2b0a      	cmp	r3, #10
 8008fd0:	d10a      	bne.n	8008fe8 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3720      	adds	r7, #32
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	58001400 	.word	0x58001400
 8009004:	cccccccd 	.word	0xcccccccd
 8009008:	fe00ffff 	.word	0xfe00ffff
 800900c:	fdff9040 	.word	0xfdff9040

08009010 <HAL_I2S_MspInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e0bf      	b.n	80091b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d106      	bne.n	8009050 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f8ba 	bl	80091c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699a      	ldr	r2, [r3, #24]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009066:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6999      	ldr	r1, [r3, #24]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800907c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	430a      	orrs	r2, r1
 800908a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6899      	ldr	r1, [r3, #8]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	4b4a      	ldr	r3, [pc, #296]	; (80091c0 <HAL_LTDC_Init+0x19c>)
 8009098:	400b      	ands	r3, r1
 800909a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	041b      	lsls	r3, r3, #16
 80090a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6899      	ldr	r1, [r3, #8]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	699a      	ldr	r2, [r3, #24]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	431a      	orrs	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	430a      	orrs	r2, r1
 80090b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68d9      	ldr	r1, [r3, #12]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	4b3e      	ldr	r3, [pc, #248]	; (80091c0 <HAL_LTDC_Init+0x19c>)
 80090c6:	400b      	ands	r3, r1
 80090c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	041b      	lsls	r3, r3, #16
 80090d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68d9      	ldr	r1, [r3, #12]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a1a      	ldr	r2, [r3, #32]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	431a      	orrs	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6919      	ldr	r1, [r3, #16]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	4b33      	ldr	r3, [pc, #204]	; (80091c0 <HAL_LTDC_Init+0x19c>)
 80090f4:	400b      	ands	r3, r1
 80090f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	041b      	lsls	r3, r3, #16
 80090fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6919      	ldr	r1, [r3, #16]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	430a      	orrs	r2, r1
 8009114:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6959      	ldr	r1, [r3, #20]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	4b27      	ldr	r3, [pc, #156]	; (80091c0 <HAL_LTDC_Init+0x19c>)
 8009122:	400b      	ands	r3, r1
 8009124:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	041b      	lsls	r3, r3, #16
 800912c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6959      	ldr	r1, [r3, #20]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800914a:	021b      	lsls	r3, r3, #8
 800914c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009154:	041b      	lsls	r3, r3, #16
 8009156:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009166:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4313      	orrs	r3, r2
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800917a:	431a      	orrs	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0206 	orr.w	r2, r2, #6
 8009192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	699a      	ldr	r2, [r3, #24]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0201 	orr.w	r2, r2, #1
 80091a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	f000f800 	.word	0xf000f800

080091c4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80091d8:	b5b0      	push	{r4, r5, r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d101      	bne.n	80091f2 <HAL_LTDC_ConfigLayer+0x1a>
 80091ee:	2302      	movs	r3, #2
 80091f0:	e02c      	b.n	800924c <HAL_LTDC_ConfigLayer+0x74>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2202      	movs	r2, #2
 80091fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2134      	movs	r1, #52	; 0x34
 8009208:	fb01 f303 	mul.w	r3, r1, r3
 800920c:	4413      	add	r3, r2
 800920e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	4614      	mov	r4, r2
 8009216:	461d      	mov	r5, r3
 8009218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800921a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800921c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800921e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f811 	bl	8009254 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2201      	movs	r2, #1
 8009238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bdb0      	pop	{r4, r5, r7, pc}

08009254 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009254:	b480      	push	{r7}
 8009256:	b089      	sub	sp, #36	; 0x24
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	0c1b      	lsrs	r3, r3, #16
 800926c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009270:	4413      	add	r3, r2
 8009272:	041b      	lsls	r3, r3, #16
 8009274:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	01db      	lsls	r3, r3, #7
 8009280:	4413      	add	r3, r2
 8009282:	3384      	adds	r3, #132	; 0x84
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	6812      	ldr	r2, [r2, #0]
 800928a:	4611      	mov	r1, r2
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	01d2      	lsls	r2, r2, #7
 8009290:	440a      	add	r2, r1
 8009292:	3284      	adds	r2, #132	; 0x84
 8009294:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009298:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	0c1b      	lsrs	r3, r3, #16
 80092a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80092ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4619      	mov	r1, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	01db      	lsls	r3, r3, #7
 80092b8:	440b      	add	r3, r1
 80092ba:	3384      	adds	r3, #132	; 0x84
 80092bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	68da      	ldr	r2, [r3, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092d2:	4413      	add	r3, r2
 80092d4:	041b      	lsls	r3, r3, #16
 80092d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	461a      	mov	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	01db      	lsls	r3, r3, #7
 80092e2:	4413      	add	r3, r2
 80092e4:	3384      	adds	r3, #132	; 0x84
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	6812      	ldr	r2, [r2, #0]
 80092ec:	4611      	mov	r1, r2
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	01d2      	lsls	r2, r2, #7
 80092f2:	440a      	add	r2, r1
 80092f4:	3284      	adds	r2, #132	; 0x84
 80092f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80092fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800930a:	4413      	add	r3, r2
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4619      	mov	r1, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	01db      	lsls	r3, r3, #7
 8009318:	440b      	add	r3, r1
 800931a:	3384      	adds	r3, #132	; 0x84
 800931c:	4619      	mov	r1, r3
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	4313      	orrs	r3, r2
 8009322:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	461a      	mov	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	01db      	lsls	r3, r3, #7
 800932e:	4413      	add	r3, r2
 8009330:	3384      	adds	r3, #132	; 0x84
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	6812      	ldr	r2, [r2, #0]
 8009338:	4611      	mov	r1, r2
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	01d2      	lsls	r2, r2, #7
 800933e:	440a      	add	r2, r1
 8009340:	3284      	adds	r2, #132	; 0x84
 8009342:	f023 0307 	bic.w	r3, r3, #7
 8009346:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	01db      	lsls	r3, r3, #7
 8009352:	4413      	add	r3, r2
 8009354:	3384      	adds	r3, #132	; 0x84
 8009356:	461a      	mov	r2, r3
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009364:	021b      	lsls	r3, r3, #8
 8009366:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800936e:	041b      	lsls	r3, r3, #16
 8009370:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	061b      	lsls	r3, r3, #24
 8009378:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	01db      	lsls	r3, r3, #7
 8009384:	4413      	add	r3, r2
 8009386:	3384      	adds	r3, #132	; 0x84
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	01db      	lsls	r3, r3, #7
 8009394:	4413      	add	r3, r2
 8009396:	3384      	adds	r3, #132	; 0x84
 8009398:	461a      	mov	r2, r3
 800939a:	2300      	movs	r3, #0
 800939c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093a4:	461a      	mov	r2, r3
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	431a      	orrs	r2, r3
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	431a      	orrs	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4619      	mov	r1, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	01db      	lsls	r3, r3, #7
 80093b8:	440b      	add	r3, r1
 80093ba:	3384      	adds	r3, #132	; 0x84
 80093bc:	4619      	mov	r1, r3
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	01db      	lsls	r3, r3, #7
 80093ce:	4413      	add	r3, r2
 80093d0:	3384      	adds	r3, #132	; 0x84
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	6812      	ldr	r2, [r2, #0]
 80093d8:	4611      	mov	r1, r2
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	01d2      	lsls	r2, r2, #7
 80093de:	440a      	add	r2, r1
 80093e0:	3284      	adds	r2, #132	; 0x84
 80093e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	01db      	lsls	r3, r3, #7
 80093f2:	4413      	add	r3, r2
 80093f4:	3384      	adds	r3, #132	; 0x84
 80093f6:	461a      	mov	r2, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	01db      	lsls	r3, r3, #7
 8009408:	4413      	add	r3, r2
 800940a:	3384      	adds	r3, #132	; 0x84
 800940c:	69da      	ldr	r2, [r3, #28]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4619      	mov	r1, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	01db      	lsls	r3, r3, #7
 8009418:	440b      	add	r3, r1
 800941a:	3384      	adds	r3, #132	; 0x84
 800941c:	4619      	mov	r1, r3
 800941e:	4b58      	ldr	r3, [pc, #352]	; (8009580 <LTDC_SetConfig+0x32c>)
 8009420:	4013      	ands	r3, r2
 8009422:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	69da      	ldr	r2, [r3, #28]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	6a1b      	ldr	r3, [r3, #32]
 800942c:	68f9      	ldr	r1, [r7, #12]
 800942e:	6809      	ldr	r1, [r1, #0]
 8009430:	4608      	mov	r0, r1
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	01c9      	lsls	r1, r1, #7
 8009436:	4401      	add	r1, r0
 8009438:	3184      	adds	r1, #132	; 0x84
 800943a:	4313      	orrs	r3, r2
 800943c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	01db      	lsls	r3, r3, #7
 8009448:	4413      	add	r3, r2
 800944a:	3384      	adds	r3, #132	; 0x84
 800944c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	01db      	lsls	r3, r3, #7
 8009458:	4413      	add	r3, r2
 800945a:	3384      	adds	r3, #132	; 0x84
 800945c:	461a      	mov	r2, r3
 800945e:	2300      	movs	r3, #0
 8009460:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	01db      	lsls	r3, r3, #7
 800946c:	4413      	add	r3, r2
 800946e:	3384      	adds	r3, #132	; 0x84
 8009470:	461a      	mov	r2, r3
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d102      	bne.n	8009486 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009480:	2304      	movs	r3, #4
 8009482:	61fb      	str	r3, [r7, #28]
 8009484:	e01b      	b.n	80094be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d102      	bne.n	8009494 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800948e:	2303      	movs	r3, #3
 8009490:	61fb      	str	r3, [r7, #28]
 8009492:	e014      	b.n	80094be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2b04      	cmp	r3, #4
 800949a:	d00b      	beq.n	80094b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d007      	beq.n	80094b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d003      	beq.n	80094b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80094b0:	2b07      	cmp	r3, #7
 80094b2:	d102      	bne.n	80094ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80094b4:	2302      	movs	r3, #2
 80094b6:	61fb      	str	r3, [r7, #28]
 80094b8:	e001      	b.n	80094be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80094ba:	2301      	movs	r3, #1
 80094bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	01db      	lsls	r3, r3, #7
 80094c8:	4413      	add	r3, r2
 80094ca:	3384      	adds	r3, #132	; 0x84
 80094cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	6812      	ldr	r2, [r2, #0]
 80094d2:	4611      	mov	r1, r2
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	01d2      	lsls	r2, r2, #7
 80094d8:	440a      	add	r2, r1
 80094da:	3284      	adds	r2, #132	; 0x84
 80094dc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80094e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e6:	69fa      	ldr	r2, [r7, #28]
 80094e8:	fb02 f303 	mul.w	r3, r2, r3
 80094ec:	041a      	lsls	r2, r3, #16
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	6859      	ldr	r1, [r3, #4]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	1acb      	subs	r3, r1, r3
 80094f8:	69f9      	ldr	r1, [r7, #28]
 80094fa:	fb01 f303 	mul.w	r3, r1, r3
 80094fe:	3307      	adds	r3, #7
 8009500:	68f9      	ldr	r1, [r7, #12]
 8009502:	6809      	ldr	r1, [r1, #0]
 8009504:	4608      	mov	r0, r1
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	01c9      	lsls	r1, r1, #7
 800950a:	4401      	add	r1, r0
 800950c:	3184      	adds	r1, #132	; 0x84
 800950e:	4313      	orrs	r3, r2
 8009510:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	01db      	lsls	r3, r3, #7
 800951c:	4413      	add	r3, r2
 800951e:	3384      	adds	r3, #132	; 0x84
 8009520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4619      	mov	r1, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	01db      	lsls	r3, r3, #7
 800952c:	440b      	add	r3, r1
 800952e:	3384      	adds	r3, #132	; 0x84
 8009530:	4619      	mov	r1, r3
 8009532:	4b14      	ldr	r3, [pc, #80]	; (8009584 <LTDC_SetConfig+0x330>)
 8009534:	4013      	ands	r3, r2
 8009536:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	01db      	lsls	r3, r3, #7
 8009542:	4413      	add	r3, r2
 8009544:	3384      	adds	r3, #132	; 0x84
 8009546:	461a      	mov	r2, r3
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	01db      	lsls	r3, r3, #7
 8009558:	4413      	add	r3, r2
 800955a:	3384      	adds	r3, #132	; 0x84
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	6812      	ldr	r2, [r2, #0]
 8009562:	4611      	mov	r1, r2
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	01d2      	lsls	r2, r2, #7
 8009568:	440a      	add	r2, r1
 800956a:	3284      	adds	r2, #132	; 0x84
 800956c:	f043 0301 	orr.w	r3, r3, #1
 8009570:	6013      	str	r3, [r2, #0]
}
 8009572:	bf00      	nop
 8009574:	3724      	adds	r7, #36	; 0x24
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	fffff8f8 	.word	0xfffff8f8
 8009584:	fffff800 	.word	0xfffff800

08009588 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af02      	add	r7, sp, #8
 800958e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009594:	f7fb fbfe 	bl	8004d94 <HAL_GetTick>
 8009598:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d102      	bne.n	80095a6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	73fb      	strb	r3, [r7, #15]
 80095a4:	e0a5      	b.n	80096f2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f040 809e 	bne.w	80096f2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f8a2 	bl	8009700 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80095bc:	f241 3188 	movw	r1, #5000	; 0x1388
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f8a7 	bl	8009714 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	4b4b      	ldr	r3, [pc, #300]	; (80096fc <HAL_OSPI_Init+0x174>)
 80095ce:	4013      	ands	r3, r2
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	68d1      	ldr	r1, [r2, #12]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	6912      	ldr	r2, [r2, #16]
 80095d8:	3a01      	subs	r2, #1
 80095da:	0412      	lsls	r2, r2, #16
 80095dc:	4311      	orrs	r1, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6952      	ldr	r2, [r2, #20]
 80095e2:	3a01      	subs	r2, #1
 80095e4:	0212      	lsls	r2, r2, #8
 80095e6:	4311      	orrs	r1, r2
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80095ec:	4311      	orrs	r1, r2
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	69d2      	ldr	r2, [r2, #28]
 80095f2:	4311      	orrs	r1, r2
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6812      	ldr	r2, [r2, #0]
 80095f8:	430b      	orrs	r3, r1
 80095fa:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1a      	ldr	r2, [r3, #32]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009616:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800962c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	3b01      	subs	r3, #1
 800963e:	021a      	lsls	r2, r3, #8
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	430a      	orrs	r2, r1
 8009646:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2200      	movs	r2, #0
 8009652:	2120      	movs	r1, #32
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fd55 	bl	800a104 <OSPI_WaitFlagStateUntilTimeout>
 800965a:	4603      	mov	r3, r0
 800965c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d146      	bne.n	80096f2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	1e5a      	subs	r2, r3, #1
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	430a      	orrs	r2, r1
 800967a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689a      	ldr	r2, [r3, #8]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800969a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	431a      	orrs	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f042 0201 	orr.w	r2, r2, #1
 80096c0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d107      	bne.n	80096da <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689a      	ldr	r2, [r3, #8]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f042 0202 	orr.w	r2, r2, #2
 80096d8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096e2:	d103      	bne.n	80096ec <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	651a      	str	r2, [r3, #80]	; 0x50
 80096ea:	e002      	b.n	80096f2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	f8e0f8f4 	.word	0xf8e0f8f4

08009700 <HAL_OSPI_MspInit>:
  * @brief  Initialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspInit(OSPI_HandleTypeDef *hospi)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspInit can be implemented in the user file
   */
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
	...

08009734 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b094      	sub	sp, #80	; 0x50
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a9d      	ldr	r2, [pc, #628]	; (80099c8 <HAL_OSPIM_Config+0x294>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d105      	bne.n	8009762 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800975a:	2301      	movs	r3, #1
 800975c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009760:	e004      	b.n	800976c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8009762:	2301      	movs	r3, #1
 8009764:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800976c:	2300      	movs	r3, #0
 800976e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009772:	e01d      	b.n	80097b0 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8009774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009778:	3301      	adds	r3, #1
 800977a:	b2d8      	uxtb	r0, r3
 800977c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009780:	f107 0114 	add.w	r1, r7, #20
 8009784:	4613      	mov	r3, r2
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	4413      	add	r3, r2
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	440b      	add	r3, r1
 800978e:	4619      	mov	r1, r3
 8009790:	f000 fcf0 	bl	800a174 <OSPIM_GetConfig>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d005      	beq.n	80097a6 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2208      	movs	r2, #8
 80097a4:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80097a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80097aa:	3301      	adds	r3, #1
 80097ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80097b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d9dd      	bls.n	8009774 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80097b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 8495 	bne.w	800a0ec <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80097c2:	4b81      	ldr	r3, [pc, #516]	; (80099c8 <HAL_OSPIM_Config+0x294>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80097ce:	4b7e      	ldr	r3, [pc, #504]	; (80099c8 <HAL_OSPIM_Config+0x294>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a7d      	ldr	r2, [pc, #500]	; (80099c8 <HAL_OSPIM_Config+0x294>)
 80097d4:	f023 0301 	bic.w	r3, r3, #1
 80097d8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80097da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80097de:	f043 0301 	orr.w	r3, r3, #1
 80097e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80097e6:	4b79      	ldr	r3, [pc, #484]	; (80099cc <HAL_OSPIM_Config+0x298>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80097f2:	4b76      	ldr	r3, [pc, #472]	; (80099cc <HAL_OSPIM_Config+0x298>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a75      	ldr	r2, [pc, #468]	; (80099cc <HAL_OSPIM_Config+0x298>)
 80097f8:	f023 0301 	bic.w	r3, r3, #1
 80097fc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80097fe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009802:	f043 0302 	orr.w	r3, r3, #2
 8009806:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800980a:	4971      	ldr	r1, [pc, #452]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 800980c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800980e:	4613      	mov	r3, r2
 8009810:	005b      	lsls	r3, r3, #1
 8009812:	4413      	add	r3, r2
 8009814:	00db      	lsls	r3, r3, #3
 8009816:	3350      	adds	r3, #80	; 0x50
 8009818:	443b      	add	r3, r7
 800981a:	3b34      	subs	r3, #52	; 0x34
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3b01      	subs	r3, #1
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	6859      	ldr	r1, [r3, #4]
 8009826:	486a      	ldr	r0, [pc, #424]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 8009828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800982a:	4613      	mov	r3, r2
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	4413      	add	r3, r2
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	3350      	adds	r3, #80	; 0x50
 8009834:	443b      	add	r3, r7
 8009836:	3b34      	subs	r3, #52	; 0x34
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3b01      	subs	r3, #1
 800983c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4403      	add	r3, r0
 8009844:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009846:	4b62      	ldr	r3, [pc, #392]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 80c0 	beq.w	80099d4 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009854:	4b5e      	ldr	r3, [pc, #376]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a5d      	ldr	r2, [pc, #372]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 800985a:	f023 0301 	bic.w	r3, r3, #1
 800985e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8009860:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009864:	2b01      	cmp	r3, #1
 8009866:	f040 8162 	bne.w	8009b2e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800986a:	4959      	ldr	r1, [pc, #356]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 800986c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009870:	4613      	mov	r3, r2
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	4413      	add	r3, r2
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	3350      	adds	r3, #80	; 0x50
 800987a:	443b      	add	r3, r7
 800987c:	3b3c      	subs	r3, #60	; 0x3c
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3b01      	subs	r3, #1
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	440b      	add	r3, r1
 8009886:	6859      	ldr	r1, [r3, #4]
 8009888:	4851      	ldr	r0, [pc, #324]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 800988a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800988e:	4613      	mov	r3, r2
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	4413      	add	r3, r2
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	3350      	adds	r3, #80	; 0x50
 8009898:	443b      	add	r3, r7
 800989a:	3b3c      	subs	r3, #60	; 0x3c
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3b01      	subs	r3, #1
 80098a0:	f041 0202 	orr.w	r2, r1, #2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4403      	add	r3, r0
 80098a8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80098aa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80098ae:	4613      	mov	r3, r2
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	4413      	add	r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	3350      	adds	r3, #80	; 0x50
 80098b8:	443b      	add	r3, r7
 80098ba:	3b38      	subs	r3, #56	; 0x38
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d01f      	beq.n	8009902 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 80098c2:	4943      	ldr	r1, [pc, #268]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 80098c4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80098c8:	4613      	mov	r3, r2
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	4413      	add	r3, r2
 80098ce:	00db      	lsls	r3, r3, #3
 80098d0:	3350      	adds	r3, #80	; 0x50
 80098d2:	443b      	add	r3, r7
 80098d4:	3b38      	subs	r3, #56	; 0x38
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3b01      	subs	r3, #1
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	6859      	ldr	r1, [r3, #4]
 80098e0:	483b      	ldr	r0, [pc, #236]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 80098e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80098e6:	4613      	mov	r3, r2
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	4413      	add	r3, r2
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	3350      	adds	r3, #80	; 0x50
 80098f0:	443b      	add	r3, r7
 80098f2:	3b38      	subs	r3, #56	; 0x38
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	f041 0220 	orr.w	r2, r1, #32
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4403      	add	r3, r0
 8009900:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009902:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009906:	4613      	mov	r3, r2
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	4413      	add	r3, r2
 800990c:	00db      	lsls	r3, r3, #3
 800990e:	3350      	adds	r3, #80	; 0x50
 8009910:	443b      	add	r3, r7
 8009912:	3b30      	subs	r3, #48	; 0x30
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d023      	beq.n	8009962 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 800991a:	492d      	ldr	r1, [pc, #180]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 800991c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009920:	4613      	mov	r3, r2
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	4413      	add	r3, r2
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	3350      	adds	r3, #80	; 0x50
 800992a:	443b      	add	r3, r7
 800992c:	3b30      	subs	r3, #48	; 0x30
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3b01      	subs	r3, #1
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	440b      	add	r3, r1
 800993a:	6859      	ldr	r1, [r3, #4]
 800993c:	4824      	ldr	r0, [pc, #144]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 800993e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009942:	4613      	mov	r3, r2
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	4413      	add	r3, r2
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	3350      	adds	r3, #80	; 0x50
 800994c:	443b      	add	r3, r7
 800994e:	3b30      	subs	r3, #48	; 0x30
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3b01      	subs	r3, #1
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4403      	add	r3, r0
 8009960:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009962:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009966:	4613      	mov	r3, r2
 8009968:	005b      	lsls	r3, r3, #1
 800996a:	4413      	add	r3, r2
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	3350      	adds	r3, #80	; 0x50
 8009970:	443b      	add	r3, r7
 8009972:	3b2c      	subs	r3, #44	; 0x2c
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 80d9 	beq.w	8009b2e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 800997c:	4914      	ldr	r1, [pc, #80]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 800997e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009982:	4613      	mov	r3, r2
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	4413      	add	r3, r2
 8009988:	00db      	lsls	r3, r3, #3
 800998a:	3350      	adds	r3, #80	; 0x50
 800998c:	443b      	add	r3, r7
 800998e:	3b2c      	subs	r3, #44	; 0x2c
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3b01      	subs	r3, #1
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	6859      	ldr	r1, [r3, #4]
 800999e:	480c      	ldr	r0, [pc, #48]	; (80099d0 <HAL_OSPIM_Config+0x29c>)
 80099a0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80099a4:	4613      	mov	r3, r2
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	4413      	add	r3, r2
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	3350      	adds	r3, #80	; 0x50
 80099ae:	443b      	add	r3, r7
 80099b0:	3b2c      	subs	r3, #44	; 0x2c
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4403      	add	r3, r0
 80099c2:	605a      	str	r2, [r3, #4]
 80099c4:	e0b3      	b.n	8009b2e <HAL_OSPIM_Config+0x3fa>
 80099c6:	bf00      	nop
 80099c8:	52005000 	.word	0x52005000
 80099cc:	5200a000 	.word	0x5200a000
 80099d0:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80099d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099d6:	4613      	mov	r3, r2
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	4413      	add	r3, r2
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	3350      	adds	r3, #80	; 0x50
 80099e0:	443b      	add	r3, r7
 80099e2:	3b3c      	subs	r3, #60	; 0x3c
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 80a1 	beq.w	8009b2e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80099ec:	4993      	ldr	r1, [pc, #588]	; (8009c3c <HAL_OSPIM_Config+0x508>)
 80099ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099f0:	4613      	mov	r3, r2
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	4413      	add	r3, r2
 80099f6:	00db      	lsls	r3, r3, #3
 80099f8:	3350      	adds	r3, #80	; 0x50
 80099fa:	443b      	add	r3, r7
 80099fc:	3b3c      	subs	r3, #60	; 0x3c
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	440b      	add	r3, r1
 8009a06:	6859      	ldr	r1, [r3, #4]
 8009a08:	488c      	ldr	r0, [pc, #560]	; (8009c3c <HAL_OSPIM_Config+0x508>)
 8009a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	4413      	add	r3, r2
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	3350      	adds	r3, #80	; 0x50
 8009a16:	443b      	add	r3, r7
 8009a18:	3b3c      	subs	r3, #60	; 0x3c
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	f021 0201 	bic.w	r2, r1, #1
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4403      	add	r3, r0
 8009a26:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8009a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	4413      	add	r3, r2
 8009a30:	00db      	lsls	r3, r3, #3
 8009a32:	3350      	adds	r3, #80	; 0x50
 8009a34:	443b      	add	r3, r7
 8009a36:	3b38      	subs	r3, #56	; 0x38
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d01d      	beq.n	8009a7a <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8009a3e:	497f      	ldr	r1, [pc, #508]	; (8009c3c <HAL_OSPIM_Config+0x508>)
 8009a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a42:	4613      	mov	r3, r2
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	4413      	add	r3, r2
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	3350      	adds	r3, #80	; 0x50
 8009a4c:	443b      	add	r3, r7
 8009a4e:	3b38      	subs	r3, #56	; 0x38
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	440b      	add	r3, r1
 8009a58:	6859      	ldr	r1, [r3, #4]
 8009a5a:	4878      	ldr	r0, [pc, #480]	; (8009c3c <HAL_OSPIM_Config+0x508>)
 8009a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a5e:	4613      	mov	r3, r2
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	4413      	add	r3, r2
 8009a64:	00db      	lsls	r3, r3, #3
 8009a66:	3350      	adds	r3, #80	; 0x50
 8009a68:	443b      	add	r3, r7
 8009a6a:	3b38      	subs	r3, #56	; 0x38
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	f021 0210 	bic.w	r2, r1, #16
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4403      	add	r3, r0
 8009a78:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	4413      	add	r3, r2
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	3350      	adds	r3, #80	; 0x50
 8009a86:	443b      	add	r3, r7
 8009a88:	3b30      	subs	r3, #48	; 0x30
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d021      	beq.n	8009ad4 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8009a90:	496a      	ldr	r1, [pc, #424]	; (8009c3c <HAL_OSPIM_Config+0x508>)
 8009a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	3350      	adds	r3, #80	; 0x50
 8009a9e:	443b      	add	r3, r7
 8009aa0:	3b30      	subs	r3, #48	; 0x30
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	6859      	ldr	r1, [r3, #4]
 8009ab0:	4862      	ldr	r0, [pc, #392]	; (8009c3c <HAL_OSPIM_Config+0x508>)
 8009ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	4413      	add	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	3350      	adds	r3, #80	; 0x50
 8009abe:	443b      	add	r3, r7
 8009ac0:	3b30      	subs	r3, #48	; 0x30
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4403      	add	r3, r0
 8009ad2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	00db      	lsls	r3, r3, #3
 8009ade:	3350      	adds	r3, #80	; 0x50
 8009ae0:	443b      	add	r3, r7
 8009ae2:	3b2c      	subs	r3, #44	; 0x2c
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d021      	beq.n	8009b2e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8009aea:	4954      	ldr	r1, [pc, #336]	; (8009c3c <HAL_OSPIM_Config+0x508>)
 8009aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009aee:	4613      	mov	r3, r2
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	4413      	add	r3, r2
 8009af4:	00db      	lsls	r3, r3, #3
 8009af6:	3350      	adds	r3, #80	; 0x50
 8009af8:	443b      	add	r3, r7
 8009afa:	3b2c      	subs	r3, #44	; 0x2c
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	440b      	add	r3, r1
 8009b08:	6859      	ldr	r1, [r3, #4]
 8009b0a:	484c      	ldr	r0, [pc, #304]	; (8009c3c <HAL_OSPIM_Config+0x508>)
 8009b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b0e:	4613      	mov	r3, r2
 8009b10:	005b      	lsls	r3, r3, #1
 8009b12:	4413      	add	r3, r2
 8009b14:	00db      	lsls	r3, r3, #3
 8009b16:	3350      	adds	r3, #80	; 0x50
 8009b18:	443b      	add	r3, r7
 8009b1a:	3b2c      	subs	r3, #44	; 0x2c
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4403      	add	r3, r0
 8009b2c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	6819      	ldr	r1, [r3, #0]
 8009b32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009b36:	4613      	mov	r3, r2
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	4413      	add	r3, r2
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	3350      	adds	r3, #80	; 0x50
 8009b40:	443b      	add	r3, r7
 8009b42:	3b3c      	subs	r3, #60	; 0x3c
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4299      	cmp	r1, r3
 8009b48:	d038      	beq.n	8009bbc <HAL_OSPIM_Config+0x488>
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	6859      	ldr	r1, [r3, #4]
 8009b4e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009b52:	4613      	mov	r3, r2
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	4413      	add	r3, r2
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	3350      	adds	r3, #80	; 0x50
 8009b5c:	443b      	add	r3, r7
 8009b5e:	3b38      	subs	r3, #56	; 0x38
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4299      	cmp	r1, r3
 8009b64:	d02a      	beq.n	8009bbc <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	6899      	ldr	r1, [r3, #8]
 8009b6a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009b6e:	4613      	mov	r3, r2
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	4413      	add	r3, r2
 8009b74:	00db      	lsls	r3, r3, #3
 8009b76:	3350      	adds	r3, #80	; 0x50
 8009b78:	443b      	add	r3, r7
 8009b7a:	3b34      	subs	r3, #52	; 0x34
 8009b7c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8009b7e:	4299      	cmp	r1, r3
 8009b80:	d01c      	beq.n	8009bbc <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	68d9      	ldr	r1, [r3, #12]
 8009b86:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	005b      	lsls	r3, r3, #1
 8009b8e:	4413      	add	r3, r2
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	3350      	adds	r3, #80	; 0x50
 8009b94:	443b      	add	r3, r7
 8009b96:	3b30      	subs	r3, #48	; 0x30
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4299      	cmp	r1, r3
 8009b9c:	d00e      	beq.n	8009bbc <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	6919      	ldr	r1, [r3, #16]
 8009ba2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	4413      	add	r3, r2
 8009bac:	00db      	lsls	r3, r3, #3
 8009bae:	3350      	adds	r3, #80	; 0x50
 8009bb0:	443b      	add	r3, r7
 8009bb2:	3b2c      	subs	r3, #44	; 0x2c
 8009bb4:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009bb6:	4299      	cmp	r1, r3
 8009bb8:	f040 810e 	bne.w	8009dd8 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	6819      	ldr	r1, [r3, #0]
 8009bc0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	4413      	add	r3, r2
 8009bca:	00db      	lsls	r3, r3, #3
 8009bcc:	3350      	adds	r3, #80	; 0x50
 8009bce:	443b      	add	r3, r7
 8009bd0:	3b3c      	subs	r3, #60	; 0x3c
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4299      	cmp	r1, r3
 8009bd6:	d133      	bne.n	8009c40 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	6859      	ldr	r1, [r3, #4]
 8009bdc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009be0:	4613      	mov	r3, r2
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	4413      	add	r3, r2
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	3350      	adds	r3, #80	; 0x50
 8009bea:	443b      	add	r3, r7
 8009bec:	3b38      	subs	r3, #56	; 0x38
 8009bee:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	d125      	bne.n	8009c40 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	68d9      	ldr	r1, [r3, #12]
 8009bf8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	4413      	add	r3, r2
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	3350      	adds	r3, #80	; 0x50
 8009c06:	443b      	add	r3, r7
 8009c08:	3b30      	subs	r3, #48	; 0x30
 8009c0a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009c0c:	4299      	cmp	r1, r3
 8009c0e:	d117      	bne.n	8009c40 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	6919      	ldr	r1, [r3, #16]
 8009c14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c18:	4613      	mov	r3, r2
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	4413      	add	r3, r2
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	3350      	adds	r3, #80	; 0x50
 8009c22:	443b      	add	r3, r7
 8009c24:	3b2c      	subs	r3, #44	; 0x2c
 8009c26:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8009c28:	4299      	cmp	r1, r3
 8009c2a:	d109      	bne.n	8009c40 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009c2c:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <HAL_OSPIM_Config+0x508>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a02      	ldr	r2, [pc, #8]	; (8009c3c <HAL_OSPIM_Config+0x508>)
 8009c32:	f043 0301 	orr.w	r3, r3, #1
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	e0ce      	b.n	8009dd8 <HAL_OSPIM_Config+0x6a4>
 8009c3a:	bf00      	nop
 8009c3c:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8009c40:	49bb      	ldr	r1, [pc, #748]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009c42:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c46:	4613      	mov	r3, r2
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	4413      	add	r3, r2
 8009c4c:	00db      	lsls	r3, r3, #3
 8009c4e:	3350      	adds	r3, #80	; 0x50
 8009c50:	443b      	add	r3, r7
 8009c52:	3b3c      	subs	r3, #60	; 0x3c
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	440b      	add	r3, r1
 8009c5c:	6859      	ldr	r1, [r3, #4]
 8009c5e:	48b4      	ldr	r0, [pc, #720]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009c60:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c64:	4613      	mov	r3, r2
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	4413      	add	r3, r2
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	3350      	adds	r3, #80	; 0x50
 8009c6e:	443b      	add	r3, r7
 8009c70:	3b3c      	subs	r3, #60	; 0x3c
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	f021 0201 	bic.w	r2, r1, #1
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4403      	add	r3, r0
 8009c7e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8009c80:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c84:	4613      	mov	r3, r2
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	4413      	add	r3, r2
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	3350      	adds	r3, #80	; 0x50
 8009c8e:	443b      	add	r3, r7
 8009c90:	3b38      	subs	r3, #56	; 0x38
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d01f      	beq.n	8009cd8 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8009c98:	49a5      	ldr	r1, [pc, #660]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009c9a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	4413      	add	r3, r2
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	3350      	adds	r3, #80	; 0x50
 8009ca8:	443b      	add	r3, r7
 8009caa:	3b38      	subs	r3, #56	; 0x38
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	440b      	add	r3, r1
 8009cb4:	6859      	ldr	r1, [r3, #4]
 8009cb6:	489e      	ldr	r0, [pc, #632]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009cb8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	4413      	add	r3, r2
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	3350      	adds	r3, #80	; 0x50
 8009cc6:	443b      	add	r3, r7
 8009cc8:	3b38      	subs	r3, #56	; 0x38
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	f021 0210 	bic.w	r2, r1, #16
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4403      	add	r3, r0
 8009cd6:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8009cd8:	4995      	ldr	r1, [pc, #596]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009cda:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009cde:	4613      	mov	r3, r2
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	4413      	add	r3, r2
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	3350      	adds	r3, #80	; 0x50
 8009ce8:	443b      	add	r3, r7
 8009cea:	3b34      	subs	r3, #52	; 0x34
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	440b      	add	r3, r1
 8009cf4:	6859      	ldr	r1, [r3, #4]
 8009cf6:	488e      	ldr	r0, [pc, #568]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009cf8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	005b      	lsls	r3, r3, #1
 8009d00:	4413      	add	r3, r2
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	3350      	adds	r3, #80	; 0x50
 8009d06:	443b      	add	r3, r7
 8009d08:	3b34      	subs	r3, #52	; 0x34
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4403      	add	r3, r0
 8009d16:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009d18:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	4413      	add	r3, r2
 8009d22:	00db      	lsls	r3, r3, #3
 8009d24:	3350      	adds	r3, #80	; 0x50
 8009d26:	443b      	add	r3, r7
 8009d28:	3b30      	subs	r3, #48	; 0x30
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d023      	beq.n	8009d78 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009d30:	497f      	ldr	r1, [pc, #508]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009d32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009d36:	4613      	mov	r3, r2
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	4413      	add	r3, r2
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	3350      	adds	r3, #80	; 0x50
 8009d40:	443b      	add	r3, r7
 8009d42:	3b30      	subs	r3, #48	; 0x30
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	440b      	add	r3, r1
 8009d50:	6859      	ldr	r1, [r3, #4]
 8009d52:	4877      	ldr	r0, [pc, #476]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009d54:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009d58:	4613      	mov	r3, r2
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	4413      	add	r3, r2
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	3350      	adds	r3, #80	; 0x50
 8009d62:	443b      	add	r3, r7
 8009d64:	3b30      	subs	r3, #48	; 0x30
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4403      	add	r3, r0
 8009d76:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009d78:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	4413      	add	r3, r2
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	3350      	adds	r3, #80	; 0x50
 8009d86:	443b      	add	r3, r7
 8009d88:	3b2c      	subs	r3, #44	; 0x2c
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d023      	beq.n	8009dd8 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009d90:	4967      	ldr	r1, [pc, #412]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009d92:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009d96:	4613      	mov	r3, r2
 8009d98:	005b      	lsls	r3, r3, #1
 8009d9a:	4413      	add	r3, r2
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	3350      	adds	r3, #80	; 0x50
 8009da0:	443b      	add	r3, r7
 8009da2:	3b2c      	subs	r3, #44	; 0x2c
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3b01      	subs	r3, #1
 8009da8:	f003 0301 	and.w	r3, r3, #1
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	440b      	add	r3, r1
 8009db0:	6859      	ldr	r1, [r3, #4]
 8009db2:	485f      	ldr	r0, [pc, #380]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009db4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009db8:	4613      	mov	r3, r2
 8009dba:	005b      	lsls	r3, r3, #1
 8009dbc:	4413      	add	r3, r2
 8009dbe:	00db      	lsls	r3, r3, #3
 8009dc0:	3350      	adds	r3, #80	; 0x50
 8009dc2:	443b      	add	r3, r7
 8009dc4:	3b2c      	subs	r3, #44	; 0x2c
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4403      	add	r3, r0
 8009dd6:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8009dd8:	4a55      	ldr	r2, [pc, #340]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dec:	025b      	lsls	r3, r3, #9
 8009dee:	431a      	orrs	r2, r3
 8009df0:	494f      	ldr	r1, [pc, #316]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	440b      	add	r3, r1
 8009e00:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	1e5a      	subs	r2, r3, #1
 8009e08:	4b49      	ldr	r3, [pc, #292]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	0c1b      	lsrs	r3, r3, #16
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d90a      	bls.n	8009e2a <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8009e14:	4b46      	ldr	r3, [pc, #280]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	041b      	lsls	r3, r3, #16
 8009e24:	4942      	ldr	r1, [pc, #264]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009e2a:	4b41      	ldr	r3, [pc, #260]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 809a 	beq.w	8009f6c <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8009e38:	4a3d      	ldr	r2, [pc, #244]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f023 0203 	bic.w	r2, r3, #3
 8009e4a:	4939      	ldr	r1, [pc, #228]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	f042 0201 	orr.w	r2, r2, #1
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	440b      	add	r3, r1
 8009e5a:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d011      	beq.n	8009e88 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8009e64:	4a32      	ldr	r2, [pc, #200]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e76:	492e      	ldr	r1, [pc, #184]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	f042 0210 	orr.w	r2, r2, #16
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d016      	beq.n	8009ec2 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009e94:	4a26      	ldr	r2, [pc, #152]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009eaa:	4921      	ldr	r1, [pc, #132]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	440b      	add	r3, r1
 8009ebe:	605a      	str	r2, [r3, #4]
 8009ec0:	e019      	b.n	8009ef6 <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d015      	beq.n	8009ef6 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009eca:	4a19      	ldr	r2, [pc, #100]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009ee0:	4913      	ldr	r1, [pc, #76]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	440b      	add	r3, r1
 8009ef4:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d018      	beq.n	8009f34 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009f02:	4a0b      	ldr	r2, [pc, #44]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009f18:	4905      	ldr	r1, [pc, #20]	; (8009f30 <HAL_OSPIM_Config+0x7fc>)
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	440b      	add	r3, r1
 8009f2c:	605a      	str	r2, [r3, #4]
 8009f2e:	e0c5      	b.n	800a0bc <HAL_OSPIM_Config+0x988>
 8009f30:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 80bf 	beq.w	800a0bc <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009f3e:	4a6e      	ldr	r2, [pc, #440]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	f003 0301 	and.w	r3, r3, #1
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009f54:	4968      	ldr	r1, [pc, #416]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	440b      	add	r3, r1
 8009f68:	605a      	str	r2, [r3, #4]
 8009f6a:	e0a7      	b.n	800a0bc <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8009f6c:	4a62      	ldr	r2, [pc, #392]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f023 0203 	bic.w	r2, r3, #3
 8009f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	431a      	orrs	r2, r3
 8009f84:	495c      	ldr	r1, [pc, #368]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	f042 0201 	orr.w	r2, r2, #1
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d014      	beq.n	8009fc8 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8009f9e:	4a56      	ldr	r2, [pc, #344]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fb2:	015b      	lsls	r3, r3, #5
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	4950      	ldr	r1, [pc, #320]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	f042 0210 	orr.w	r2, r2, #16
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d019      	beq.n	800a008 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009fd4:	4a48      	ldr	r2, [pc, #288]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fec:	049b      	lsls	r3, r3, #18
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	4941      	ldr	r1, [pc, #260]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	440b      	add	r3, r1
 800a004:	605a      	str	r2, [r3, #4]
 800a006:	e01c      	b.n	800a042 <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d018      	beq.n	800a042 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800a010:	4a39      	ldr	r2, [pc, #228]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	3b01      	subs	r3, #1
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a028:	069b      	lsls	r3, r3, #26
 800a02a:	431a      	orrs	r2, r3
 800a02c:	4932      	ldr	r1, [pc, #200]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	3b01      	subs	r3, #1
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	440b      	add	r3, r1
 800a040:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d019      	beq.n	800a082 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a04e:	4a2a      	ldr	r2, [pc, #168]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	3b01      	subs	r3, #1
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a066:	049b      	lsls	r3, r3, #18
 800a068:	431a      	orrs	r2, r3
 800a06a:	4923      	ldr	r1, [pc, #140]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	3b01      	subs	r3, #1
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	605a      	str	r2, [r3, #4]
 800a080:	e01c      	b.n	800a0bc <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d018      	beq.n	800a0bc <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a08a:	4a1b      	ldr	r2, [pc, #108]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	3b01      	subs	r3, #1
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a0a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0a2:	069b      	lsls	r3, r3, #26
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	4914      	ldr	r1, [pc, #80]	; (800a0f8 <HAL_OSPIM_Config+0x9c4>)
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	440b      	add	r3, r1
 800a0ba:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800a0bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a0c0:	f003 0301 	and.w	r3, r3, #1
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d005      	beq.n	800a0d4 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a0c8:	4b0c      	ldr	r3, [pc, #48]	; (800a0fc <HAL_OSPIM_Config+0x9c8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a0b      	ldr	r2, [pc, #44]	; (800a0fc <HAL_OSPIM_Config+0x9c8>)
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800a0d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a0d8:	f003 0302 	and.w	r3, r3, #2
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d005      	beq.n	800a0ec <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a0e0:	4b07      	ldr	r3, [pc, #28]	; (800a100 <HAL_OSPIM_Config+0x9cc>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a06      	ldr	r2, [pc, #24]	; (800a100 <HAL_OSPIM_Config+0x9cc>)
 800a0e6:	f043 0301 	orr.w	r3, r3, #1
 800a0ea:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800a0ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3750      	adds	r7, #80	; 0x50
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	5200b400 	.word	0x5200b400
 800a0fc:	52005000 	.word	0x52005000
 800a100:	5200a000 	.word	0x5200a000

0800a104 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	4613      	mov	r3, r2
 800a112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a114:	e01a      	b.n	800a14c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11c:	d016      	beq.n	800a14c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a11e:	f7fa fe39 	bl	8004d94 <HAL_GetTick>
 800a122:	4602      	mov	r2, r0
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	69ba      	ldr	r2, [r7, #24]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d302      	bcc.n	800a134 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10b      	bne.n	800a14c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a13a:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a140:	f043 0201 	orr.w	r2, r3, #1
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e00e      	b.n	800a16a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6a1a      	ldr	r2, [r3, #32]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	4013      	ands	r3, r2
 800a156:	2b00      	cmp	r3, #0
 800a158:	bf14      	ite	ne
 800a15a:	2301      	movne	r3, #1
 800a15c:	2300      	moveq	r3, #0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	461a      	mov	r2, r3
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	429a      	cmp	r2, r3
 800a166:	d1d6      	bne.n	800a116 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800a174:	b480      	push	{r7}
 800a176:	b087      	sub	sp, #28
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	6039      	str	r1, [r7, #0]
 800a17e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800a188:	79fb      	ldrb	r3, [r7, #7]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <OSPIM_GetConfig+0x26>
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	2b02      	cmp	r3, #2
 800a192:	d802      	bhi.n	800a19a <OSPIM_GetConfig+0x26>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d102      	bne.n	800a1a0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	75fb      	strb	r3, [r7, #23]
 800a19e:	e098      	b.n	800a2d2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800a1be:	79fb      	ldrb	r3, [r7, #7]
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d10b      	bne.n	800a1dc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800a1c4:	4b46      	ldr	r3, [pc, #280]	; (800a2e0 <OSPIM_GetConfig+0x16c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d102      	bne.n	800a1d6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800a1d0:	4b44      	ldr	r3, [pc, #272]	; (800a2e4 <OSPIM_GetConfig+0x170>)
 800a1d2:	613b      	str	r3, [r7, #16]
 800a1d4:	e002      	b.n	800a1dc <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800a1d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1da:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	e074      	b.n	800a2cc <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800a1e2:	4a3f      	ldr	r2, [pc, #252]	; (800a2e0 <OSPIM_GetConfig+0x16c>)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	f003 0301 	and.w	r3, r3, #1
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00a      	beq.n	800a20e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	4053      	eors	r3, r2
 800a1fe:	f003 0302 	and.w	r3, r3, #2
 800a202:	2b00      	cmp	r3, #0
 800a204:	d103      	bne.n	800a20e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f003 0310 	and.w	r3, r3, #16
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00a      	beq.n	800a22e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	4053      	eors	r3, r2
 800a21e:	f003 0320 	and.w	r3, r3, #32
 800a222:	2b00      	cmp	r3, #0
 800a224:	d103      	bne.n	800a22e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	4053      	eors	r3, r2
 800a23e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a242:	2b00      	cmp	r3, #0
 800a244:	d103      	bne.n	800a24e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d018      	beq.n	800a28a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	4053      	eors	r3, r2
 800a25e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d111      	bne.n	800a28a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d106      	bne.n	800a27e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3301      	adds	r3, #1
 800a274:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	60da      	str	r2, [r3, #12]
 800a27c:	e005      	b.n	800a28a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3301      	adds	r3, #1
 800a282:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d018      	beq.n	800a2c6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	4053      	eors	r3, r2
 800a29a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d111      	bne.n	800a2c6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d106      	bne.n	800a2ba <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	611a      	str	r2, [r3, #16]
 800a2b8:	e005      	b.n	800a2c6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d987      	bls.n	800a1e2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	5200b400 	.word	0x5200b400
 800a2e4:	04040222 	.word	0x04040222

0800a2e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a2ec:	4b05      	ldr	r3, [pc, #20]	; (800a304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a04      	ldr	r2, [pc, #16]	; (800a304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a2f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2f6:	6013      	str	r3, [r2, #0]
}
 800a2f8:	bf00      	nop
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	58024800 	.word	0x58024800

0800a308 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a310:	4b29      	ldr	r3, [pc, #164]	; (800a3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	f003 0307 	and.w	r3, r3, #7
 800a318:	2b06      	cmp	r3, #6
 800a31a:	d00a      	beq.n	800a332 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a31c:	4b26      	ldr	r3, [pc, #152]	; (800a3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	429a      	cmp	r2, r3
 800a328:	d001      	beq.n	800a32e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e040      	b.n	800a3b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	e03e      	b.n	800a3b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a332:	4b21      	ldr	r3, [pc, #132]	; (800a3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a33a:	491f      	ldr	r1, [pc, #124]	; (800a3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a342:	f7fa fd27 	bl	8004d94 <HAL_GetTick>
 800a346:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a348:	e009      	b.n	800a35e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a34a:	f7fa fd23 	bl	8004d94 <HAL_GetTick>
 800a34e:	4602      	mov	r2, r0
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a358:	d901      	bls.n	800a35e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e028      	b.n	800a3b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a35e:	4b16      	ldr	r3, [pc, #88]	; (800a3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a36a:	d1ee      	bne.n	800a34a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b1e      	cmp	r3, #30
 800a370:	d008      	beq.n	800a384 <HAL_PWREx_ConfigSupply+0x7c>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b2e      	cmp	r3, #46	; 0x2e
 800a376:	d005      	beq.n	800a384 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b1d      	cmp	r3, #29
 800a37c:	d002      	beq.n	800a384 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b2d      	cmp	r3, #45	; 0x2d
 800a382:	d114      	bne.n	800a3ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a384:	f7fa fd06 	bl	8004d94 <HAL_GetTick>
 800a388:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a38a:	e009      	b.n	800a3a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a38c:	f7fa fd02 	bl	8004d94 <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a39a:	d901      	bls.n	800a3a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e007      	b.n	800a3b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a3a0:	4b05      	ldr	r3, [pc, #20]	; (800a3b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3ac:	d1ee      	bne.n	800a38c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	58024800 	.word	0x58024800

0800a3bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b08c      	sub	sp, #48	; 0x30
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d102      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	f000 bc1f 	b.w	800ac0e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 80b3 	beq.w	800a544 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3de:	4b95      	ldr	r3, [pc, #596]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3e8:	4b92      	ldr	r3, [pc, #584]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	2b10      	cmp	r3, #16
 800a3f2:	d007      	beq.n	800a404 <HAL_RCC_OscConfig+0x48>
 800a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f6:	2b18      	cmp	r3, #24
 800a3f8:	d112      	bne.n	800a420 <HAL_RCC_OscConfig+0x64>
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	f003 0303 	and.w	r3, r3, #3
 800a400:	2b02      	cmp	r3, #2
 800a402:	d10d      	bne.n	800a420 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a404:	4b8b      	ldr	r3, [pc, #556]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 8098 	beq.w	800a542 <HAL_RCC_OscConfig+0x186>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f040 8093 	bne.w	800a542 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e3f6      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a428:	d106      	bne.n	800a438 <HAL_RCC_OscConfig+0x7c>
 800a42a:	4b82      	ldr	r3, [pc, #520]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a81      	ldr	r2, [pc, #516]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	e058      	b.n	800a4ea <HAL_RCC_OscConfig+0x12e>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d112      	bne.n	800a466 <HAL_RCC_OscConfig+0xaa>
 800a440:	4b7c      	ldr	r3, [pc, #496]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a7b      	ldr	r2, [pc, #492]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a44a:	6013      	str	r3, [r2, #0]
 800a44c:	4b79      	ldr	r3, [pc, #484]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a78      	ldr	r2, [pc, #480]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a452:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a456:	6013      	str	r3, [r2, #0]
 800a458:	4b76      	ldr	r3, [pc, #472]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a75      	ldr	r2, [pc, #468]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a45e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	e041      	b.n	800a4ea <HAL_RCC_OscConfig+0x12e>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a46e:	d112      	bne.n	800a496 <HAL_RCC_OscConfig+0xda>
 800a470:	4b70      	ldr	r3, [pc, #448]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a6f      	ldr	r2, [pc, #444]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	4b6d      	ldr	r3, [pc, #436]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a6c      	ldr	r2, [pc, #432]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a482:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	4b6a      	ldr	r3, [pc, #424]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a69      	ldr	r2, [pc, #420]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a48e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	e029      	b.n	800a4ea <HAL_RCC_OscConfig+0x12e>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a49e:	d112      	bne.n	800a4c6 <HAL_RCC_OscConfig+0x10a>
 800a4a0:	4b64      	ldr	r3, [pc, #400]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a63      	ldr	r2, [pc, #396]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4aa:	6013      	str	r3, [r2, #0]
 800a4ac:	4b61      	ldr	r3, [pc, #388]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a60      	ldr	r2, [pc, #384]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4b6:	6013      	str	r3, [r2, #0]
 800a4b8:	4b5e      	ldr	r3, [pc, #376]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a5d      	ldr	r2, [pc, #372]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	e011      	b.n	800a4ea <HAL_RCC_OscConfig+0x12e>
 800a4c6:	4b5b      	ldr	r3, [pc, #364]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a5a      	ldr	r2, [pc, #360]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	4b58      	ldr	r3, [pc, #352]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a57      	ldr	r2, [pc, #348]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	4b55      	ldr	r3, [pc, #340]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a54      	ldr	r2, [pc, #336]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a4e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a4e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d013      	beq.n	800a51a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4f2:	f7fa fc4f 	bl	8004d94 <HAL_GetTick>
 800a4f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4f8:	e008      	b.n	800a50c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4fa:	f7fa fc4b 	bl	8004d94 <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	2b64      	cmp	r3, #100	; 0x64
 800a506:	d901      	bls.n	800a50c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e380      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a50c:	4b49      	ldr	r3, [pc, #292]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d0f0      	beq.n	800a4fa <HAL_RCC_OscConfig+0x13e>
 800a518:	e014      	b.n	800a544 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a51a:	f7fa fc3b 	bl	8004d94 <HAL_GetTick>
 800a51e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a520:	e008      	b.n	800a534 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a522:	f7fa fc37 	bl	8004d94 <HAL_GetTick>
 800a526:	4602      	mov	r2, r0
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	2b64      	cmp	r3, #100	; 0x64
 800a52e:	d901      	bls.n	800a534 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	e36c      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a534:	4b3f      	ldr	r3, [pc, #252]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1f0      	bne.n	800a522 <HAL_RCC_OscConfig+0x166>
 800a540:	e000      	b.n	800a544 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a542:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0302 	and.w	r3, r3, #2
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 808c 	beq.w	800a66a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a552:	4b38      	ldr	r3, [pc, #224]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a55a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a55c:	4b35      	ldr	r3, [pc, #212]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a560:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a562:	6a3b      	ldr	r3, [r7, #32]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d007      	beq.n	800a578 <HAL_RCC_OscConfig+0x1bc>
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	2b18      	cmp	r3, #24
 800a56c:	d137      	bne.n	800a5de <HAL_RCC_OscConfig+0x222>
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	f003 0303 	and.w	r3, r3, #3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d132      	bne.n	800a5de <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a578:	4b2e      	ldr	r3, [pc, #184]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	2b00      	cmp	r3, #0
 800a582:	d005      	beq.n	800a590 <HAL_RCC_OscConfig+0x1d4>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e33e      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a590:	4b28      	ldr	r3, [pc, #160]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f023 0219 	bic.w	r2, r3, #25
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	4925      	ldr	r1, [pc, #148]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5a2:	f7fa fbf7 	bl	8004d94 <HAL_GetTick>
 800a5a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5a8:	e008      	b.n	800a5bc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5aa:	f7fa fbf3 	bl	8004d94 <HAL_GetTick>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d901      	bls.n	800a5bc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	e328      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5bc:	4b1d      	ldr	r3, [pc, #116]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d0f0      	beq.n	800a5aa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5c8:	4b1a      	ldr	r3, [pc, #104]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	061b      	lsls	r3, r3, #24
 800a5d6:	4917      	ldr	r1, [pc, #92]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5dc:	e045      	b.n	800a66a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d028      	beq.n	800a638 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a5e6:	4b13      	ldr	r3, [pc, #76]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f023 0219 	bic.w	r2, r3, #25
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	4910      	ldr	r1, [pc, #64]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5f8:	f7fa fbcc 	bl	8004d94 <HAL_GetTick>
 800a5fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5fe:	e008      	b.n	800a612 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a600:	f7fa fbc8 	bl	8004d94 <HAL_GetTick>
 800a604:	4602      	mov	r2, r0
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d901      	bls.n	800a612 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e2fd      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a612:	4b08      	ldr	r3, [pc, #32]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0304 	and.w	r3, r3, #4
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d0f0      	beq.n	800a600 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a61e:	4b05      	ldr	r3, [pc, #20]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	061b      	lsls	r3, r3, #24
 800a62c:	4901      	ldr	r1, [pc, #4]	; (800a634 <HAL_RCC_OscConfig+0x278>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	604b      	str	r3, [r1, #4]
 800a632:	e01a      	b.n	800a66a <HAL_RCC_OscConfig+0x2ae>
 800a634:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a638:	4b97      	ldr	r3, [pc, #604]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a96      	ldr	r2, [pc, #600]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a63e:	f023 0301 	bic.w	r3, r3, #1
 800a642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a644:	f7fa fba6 	bl	8004d94 <HAL_GetTick>
 800a648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a64a:	e008      	b.n	800a65e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a64c:	f7fa fba2 	bl	8004d94 <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	2b02      	cmp	r3, #2
 800a658:	d901      	bls.n	800a65e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e2d7      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a65e:	4b8e      	ldr	r3, [pc, #568]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 0304 	and.w	r3, r3, #4
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1f0      	bne.n	800a64c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0310 	and.w	r3, r3, #16
 800a672:	2b00      	cmp	r3, #0
 800a674:	d06a      	beq.n	800a74c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a676:	4b88      	ldr	r3, [pc, #544]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a67e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a680:	4b85      	ldr	r3, [pc, #532]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	2b08      	cmp	r3, #8
 800a68a:	d007      	beq.n	800a69c <HAL_RCC_OscConfig+0x2e0>
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	2b18      	cmp	r3, #24
 800a690:	d11b      	bne.n	800a6ca <HAL_RCC_OscConfig+0x30e>
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f003 0303 	and.w	r3, r3, #3
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d116      	bne.n	800a6ca <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a69c:	4b7e      	ldr	r3, [pc, #504]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d005      	beq.n	800a6b4 <HAL_RCC_OscConfig+0x2f8>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	69db      	ldr	r3, [r3, #28]
 800a6ac:	2b80      	cmp	r3, #128	; 0x80
 800a6ae:	d001      	beq.n	800a6b4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e2ac      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6b4:	4b78      	ldr	r3, [pc, #480]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	061b      	lsls	r3, r3, #24
 800a6c2:	4975      	ldr	r1, [pc, #468]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6c8:	e040      	b.n	800a74c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d023      	beq.n	800a71a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a6d2:	4b71      	ldr	r3, [pc, #452]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a70      	ldr	r2, [pc, #448]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6de:	f7fa fb59 	bl	8004d94 <HAL_GetTick>
 800a6e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6e4:	e008      	b.n	800a6f8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a6e6:	f7fa fb55 	bl	8004d94 <HAL_GetTick>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d901      	bls.n	800a6f8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e28a      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6f8:	4b67      	ldr	r3, [pc, #412]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a700:	2b00      	cmp	r3, #0
 800a702:	d0f0      	beq.n	800a6e6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a704:	4b64      	ldr	r3, [pc, #400]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	061b      	lsls	r3, r3, #24
 800a712:	4961      	ldr	r1, [pc, #388]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a714:	4313      	orrs	r3, r2
 800a716:	60cb      	str	r3, [r1, #12]
 800a718:	e018      	b.n	800a74c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a71a:	4b5f      	ldr	r3, [pc, #380]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a5e      	ldr	r2, [pc, #376]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a726:	f7fa fb35 	bl	8004d94 <HAL_GetTick>
 800a72a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a72c:	e008      	b.n	800a740 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a72e:	f7fa fb31 	bl	8004d94 <HAL_GetTick>
 800a732:	4602      	mov	r2, r0
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d901      	bls.n	800a740 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a73c:	2303      	movs	r3, #3
 800a73e:	e266      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a740:	4b55      	ldr	r3, [pc, #340]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1f0      	bne.n	800a72e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	2b00      	cmp	r3, #0
 800a756:	d036      	beq.n	800a7c6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d019      	beq.n	800a794 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a760:	4b4d      	ldr	r3, [pc, #308]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a764:	4a4c      	ldr	r2, [pc, #304]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a766:	f043 0301 	orr.w	r3, r3, #1
 800a76a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a76c:	f7fa fb12 	bl	8004d94 <HAL_GetTick>
 800a770:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a772:	e008      	b.n	800a786 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a774:	f7fa fb0e 	bl	8004d94 <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e243      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a786:	4b44      	ldr	r3, [pc, #272]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0f0      	beq.n	800a774 <HAL_RCC_OscConfig+0x3b8>
 800a792:	e018      	b.n	800a7c6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a794:	4b40      	ldr	r3, [pc, #256]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a798:	4a3f      	ldr	r2, [pc, #252]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a79a:	f023 0301 	bic.w	r3, r3, #1
 800a79e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7a0:	f7fa faf8 	bl	8004d94 <HAL_GetTick>
 800a7a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a7a6:	e008      	b.n	800a7ba <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7a8:	f7fa faf4 	bl	8004d94 <HAL_GetTick>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d901      	bls.n	800a7ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e229      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a7ba:	4b37      	ldr	r3, [pc, #220]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a7bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7be:	f003 0302 	and.w	r3, r3, #2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1f0      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0320 	and.w	r3, r3, #32
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d036      	beq.n	800a840 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d019      	beq.n	800a80e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a7da:	4b2f      	ldr	r3, [pc, #188]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a2e      	ldr	r2, [pc, #184]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a7e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a7e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a7e6:	f7fa fad5 	bl	8004d94 <HAL_GetTick>
 800a7ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a7ec:	e008      	b.n	800a800 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7ee:	f7fa fad1 	bl	8004d94 <HAL_GetTick>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d901      	bls.n	800a800 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e206      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a800:	4b25      	ldr	r3, [pc, #148]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0f0      	beq.n	800a7ee <HAL_RCC_OscConfig+0x432>
 800a80c:	e018      	b.n	800a840 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a80e:	4b22      	ldr	r3, [pc, #136]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a21      	ldr	r2, [pc, #132]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a818:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a81a:	f7fa fabb 	bl	8004d94 <HAL_GetTick>
 800a81e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a820:	e008      	b.n	800a834 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a822:	f7fa fab7 	bl	8004d94 <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d901      	bls.n	800a834 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a830:	2303      	movs	r3, #3
 800a832:	e1ec      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a834:	4b18      	ldr	r3, [pc, #96]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1f0      	bne.n	800a822 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0304 	and.w	r3, r3, #4
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 80af 	beq.w	800a9ac <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a84e:	4b13      	ldr	r3, [pc, #76]	; (800a89c <HAL_RCC_OscConfig+0x4e0>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a12      	ldr	r2, [pc, #72]	; (800a89c <HAL_RCC_OscConfig+0x4e0>)
 800a854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a858:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a85a:	f7fa fa9b 	bl	8004d94 <HAL_GetTick>
 800a85e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a860:	e008      	b.n	800a874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a862:	f7fa fa97 	bl	8004d94 <HAL_GetTick>
 800a866:	4602      	mov	r2, r0
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	2b64      	cmp	r3, #100	; 0x64
 800a86e:	d901      	bls.n	800a874 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a870:	2303      	movs	r3, #3
 800a872:	e1cc      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a874:	4b09      	ldr	r3, [pc, #36]	; (800a89c <HAL_RCC_OscConfig+0x4e0>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d0f0      	beq.n	800a862 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d10b      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x4e4>
 800a888:	4b03      	ldr	r3, [pc, #12]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a88a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a88c:	4a02      	ldr	r2, [pc, #8]	; (800a898 <HAL_RCC_OscConfig+0x4dc>)
 800a88e:	f043 0301 	orr.w	r3, r3, #1
 800a892:	6713      	str	r3, [r2, #112]	; 0x70
 800a894:	e05b      	b.n	800a94e <HAL_RCC_OscConfig+0x592>
 800a896:	bf00      	nop
 800a898:	58024400 	.word	0x58024400
 800a89c:	58024800 	.word	0x58024800
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d112      	bne.n	800a8ce <HAL_RCC_OscConfig+0x512>
 800a8a8:	4b9d      	ldr	r3, [pc, #628]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ac:	4a9c      	ldr	r2, [pc, #624]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8ae:	f023 0301 	bic.w	r3, r3, #1
 800a8b2:	6713      	str	r3, [r2, #112]	; 0x70
 800a8b4:	4b9a      	ldr	r3, [pc, #616]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b8:	4a99      	ldr	r2, [pc, #612]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8be:	6713      	str	r3, [r2, #112]	; 0x70
 800a8c0:	4b97      	ldr	r3, [pc, #604]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c4:	4a96      	ldr	r2, [pc, #600]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8c6:	f023 0304 	bic.w	r3, r3, #4
 800a8ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a8cc:	e03f      	b.n	800a94e <HAL_RCC_OscConfig+0x592>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	2b05      	cmp	r3, #5
 800a8d4:	d112      	bne.n	800a8fc <HAL_RCC_OscConfig+0x540>
 800a8d6:	4b92      	ldr	r3, [pc, #584]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8da:	4a91      	ldr	r2, [pc, #580]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8dc:	f043 0304 	orr.w	r3, r3, #4
 800a8e0:	6713      	str	r3, [r2, #112]	; 0x70
 800a8e2:	4b8f      	ldr	r3, [pc, #572]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e6:	4a8e      	ldr	r2, [pc, #568]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8ec:	6713      	str	r3, [r2, #112]	; 0x70
 800a8ee:	4b8c      	ldr	r3, [pc, #560]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f2:	4a8b      	ldr	r2, [pc, #556]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a8f4:	f043 0301 	orr.w	r3, r3, #1
 800a8f8:	6713      	str	r3, [r2, #112]	; 0x70
 800a8fa:	e028      	b.n	800a94e <HAL_RCC_OscConfig+0x592>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	2b85      	cmp	r3, #133	; 0x85
 800a902:	d112      	bne.n	800a92a <HAL_RCC_OscConfig+0x56e>
 800a904:	4b86      	ldr	r3, [pc, #536]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a908:	4a85      	ldr	r2, [pc, #532]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a90a:	f043 0304 	orr.w	r3, r3, #4
 800a90e:	6713      	str	r3, [r2, #112]	; 0x70
 800a910:	4b83      	ldr	r3, [pc, #524]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a914:	4a82      	ldr	r2, [pc, #520]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a91a:	6713      	str	r3, [r2, #112]	; 0x70
 800a91c:	4b80      	ldr	r3, [pc, #512]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a91e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a920:	4a7f      	ldr	r2, [pc, #508]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a922:	f043 0301 	orr.w	r3, r3, #1
 800a926:	6713      	str	r3, [r2, #112]	; 0x70
 800a928:	e011      	b.n	800a94e <HAL_RCC_OscConfig+0x592>
 800a92a:	4b7d      	ldr	r3, [pc, #500]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92e:	4a7c      	ldr	r2, [pc, #496]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a930:	f023 0301 	bic.w	r3, r3, #1
 800a934:	6713      	str	r3, [r2, #112]	; 0x70
 800a936:	4b7a      	ldr	r3, [pc, #488]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a93a:	4a79      	ldr	r2, [pc, #484]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a93c:	f023 0304 	bic.w	r3, r3, #4
 800a940:	6713      	str	r3, [r2, #112]	; 0x70
 800a942:	4b77      	ldr	r3, [pc, #476]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a946:	4a76      	ldr	r2, [pc, #472]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a94c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d015      	beq.n	800a982 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a956:	f7fa fa1d 	bl	8004d94 <HAL_GetTick>
 800a95a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a95c:	e00a      	b.n	800a974 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a95e:	f7fa fa19 	bl	8004d94 <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	f241 3288 	movw	r2, #5000	; 0x1388
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d901      	bls.n	800a974 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800a970:	2303      	movs	r3, #3
 800a972:	e14c      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a974:	4b6a      	ldr	r3, [pc, #424]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d0ee      	beq.n	800a95e <HAL_RCC_OscConfig+0x5a2>
 800a980:	e014      	b.n	800a9ac <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a982:	f7fa fa07 	bl	8004d94 <HAL_GetTick>
 800a986:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a988:	e00a      	b.n	800a9a0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a98a:	f7fa fa03 	bl	8004d94 <HAL_GetTick>
 800a98e:	4602      	mov	r2, r0
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	f241 3288 	movw	r2, #5000	; 0x1388
 800a998:	4293      	cmp	r3, r2
 800a99a:	d901      	bls.n	800a9a0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e136      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9a0:	4b5f      	ldr	r3, [pc, #380]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a4:	f003 0302 	and.w	r3, r3, #2
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1ee      	bne.n	800a98a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 812b 	beq.w	800ac0c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a9b6:	4b5a      	ldr	r3, [pc, #360]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9be:	2b18      	cmp	r3, #24
 800a9c0:	f000 80bb 	beq.w	800ab3a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	f040 8095 	bne.w	800aaf8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9ce:	4b54      	ldr	r3, [pc, #336]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a53      	ldr	r2, [pc, #332]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a9d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9da:	f7fa f9db 	bl	8004d94 <HAL_GetTick>
 800a9de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9e0:	e008      	b.n	800a9f4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9e2:	f7fa f9d7 	bl	8004d94 <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d901      	bls.n	800a9f4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e10c      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9f4:	4b4a      	ldr	r3, [pc, #296]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1f0      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa00:	4b47      	ldr	r3, [pc, #284]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa04:	4b47      	ldr	r3, [pc, #284]	; (800ab24 <HAL_RCC_OscConfig+0x768>)
 800aa06:	4013      	ands	r3, r2
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aa10:	0112      	lsls	r2, r2, #4
 800aa12:	430a      	orrs	r2, r1
 800aa14:	4942      	ldr	r1, [pc, #264]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa16:	4313      	orrs	r3, r2
 800aa18:	628b      	str	r3, [r1, #40]	; 0x28
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	025b      	lsls	r3, r3, #9
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	431a      	orrs	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa34:	3b01      	subs	r3, #1
 800aa36:	041b      	lsls	r3, r3, #16
 800aa38:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa3c:	431a      	orrs	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa42:	3b01      	subs	r3, #1
 800aa44:	061b      	lsls	r3, r3, #24
 800aa46:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa4a:	4935      	ldr	r1, [pc, #212]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aa50:	4b33      	ldr	r3, [pc, #204]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa54:	4a32      	ldr	r2, [pc, #200]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa56:	f023 0301 	bic.w	r3, r3, #1
 800aa5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aa5c:	4b30      	ldr	r3, [pc, #192]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa60:	4b31      	ldr	r3, [pc, #196]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aa62:	4013      	ands	r3, r2
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aa68:	00d2      	lsls	r2, r2, #3
 800aa6a:	492d      	ldr	r1, [pc, #180]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aa70:	4b2b      	ldr	r3, [pc, #172]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa74:	f023 020c 	bic.w	r2, r3, #12
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7c:	4928      	ldr	r1, [pc, #160]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aa82:	4b27      	ldr	r3, [pc, #156]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa86:	f023 0202 	bic.w	r2, r3, #2
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8e:	4924      	ldr	r1, [pc, #144]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa90:	4313      	orrs	r3, r2
 800aa92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aa94:	4b22      	ldr	r3, [pc, #136]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa98:	4a21      	ldr	r2, [pc, #132]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aa9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaa0:	4b1f      	ldr	r3, [pc, #124]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa4:	4a1e      	ldr	r2, [pc, #120]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aaa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aaac:	4b1c      	ldr	r3, [pc, #112]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aaae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab0:	4a1b      	ldr	r2, [pc, #108]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aab8:	4b19      	ldr	r3, [pc, #100]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabc:	4a18      	ldr	r2, [pc, #96]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aabe:	f043 0301 	orr.w	r3, r3, #1
 800aac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aac4:	4b16      	ldr	r3, [pc, #88]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a15      	ldr	r2, [pc, #84]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aaca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aad0:	f7fa f960 	bl	8004d94 <HAL_GetTick>
 800aad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aad6:	e008      	b.n	800aaea <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aad8:	f7fa f95c 	bl	8004d94 <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e091      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aaea:	4b0d      	ldr	r3, [pc, #52]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d0f0      	beq.n	800aad8 <HAL_RCC_OscConfig+0x71c>
 800aaf6:	e089      	b.n	800ac0c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaf8:	4b09      	ldr	r3, [pc, #36]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a08      	ldr	r2, [pc, #32]	; (800ab20 <HAL_RCC_OscConfig+0x764>)
 800aafe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab04:	f7fa f946 	bl	8004d94 <HAL_GetTick>
 800ab08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab0a:	e00f      	b.n	800ab2c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab0c:	f7fa f942 	bl	8004d94 <HAL_GetTick>
 800ab10:	4602      	mov	r2, r0
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d908      	bls.n	800ab2c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e077      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
 800ab1e:	bf00      	nop
 800ab20:	58024400 	.word	0x58024400
 800ab24:	fffffc0c 	.word	0xfffffc0c
 800ab28:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab2c:	4b3a      	ldr	r3, [pc, #232]	; (800ac18 <HAL_RCC_OscConfig+0x85c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e9      	bne.n	800ab0c <HAL_RCC_OscConfig+0x750>
 800ab38:	e068      	b.n	800ac0c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ab3a:	4b37      	ldr	r3, [pc, #220]	; (800ac18 <HAL_RCC_OscConfig+0x85c>)
 800ab3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ab40:	4b35      	ldr	r3, [pc, #212]	; (800ac18 <HAL_RCC_OscConfig+0x85c>)
 800ab42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab44:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d031      	beq.n	800abb2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	f003 0203 	and.w	r2, r3, #3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d12a      	bne.n	800abb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	091b      	lsrs	r3, r3, #4
 800ab60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d122      	bne.n	800abb2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab76:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d11a      	bne.n	800abb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	0a5b      	lsrs	r3, r3, #9
 800ab80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab88:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d111      	bne.n	800abb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	0c1b      	lsrs	r3, r3, #16
 800ab92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d108      	bne.n	800abb2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	0e1b      	lsrs	r3, r3, #24
 800aba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800abae:	429a      	cmp	r2, r3
 800abb0:	d001      	beq.n	800abb6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e02b      	b.n	800ac0e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800abb6:	4b18      	ldr	r3, [pc, #96]	; (800ac18 <HAL_RCC_OscConfig+0x85c>)
 800abb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abba:	08db      	lsrs	r3, r3, #3
 800abbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abc0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d01f      	beq.n	800ac0c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800abcc:	4b12      	ldr	r3, [pc, #72]	; (800ac18 <HAL_RCC_OscConfig+0x85c>)
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	4a11      	ldr	r2, [pc, #68]	; (800ac18 <HAL_RCC_OscConfig+0x85c>)
 800abd2:	f023 0301 	bic.w	r3, r3, #1
 800abd6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800abd8:	f7fa f8dc 	bl	8004d94 <HAL_GetTick>
 800abdc:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800abde:	bf00      	nop
 800abe0:	f7fa f8d8 	bl	8004d94 <HAL_GetTick>
 800abe4:	4602      	mov	r2, r0
 800abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe8:	4293      	cmp	r3, r2
 800abea:	d0f9      	beq.n	800abe0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800abec:	4b0a      	ldr	r3, [pc, #40]	; (800ac18 <HAL_RCC_OscConfig+0x85c>)
 800abee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abf0:	4b0a      	ldr	r3, [pc, #40]	; (800ac1c <HAL_RCC_OscConfig+0x860>)
 800abf2:	4013      	ands	r3, r2
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800abf8:	00d2      	lsls	r2, r2, #3
 800abfa:	4907      	ldr	r1, [pc, #28]	; (800ac18 <HAL_RCC_OscConfig+0x85c>)
 800abfc:	4313      	orrs	r3, r2
 800abfe:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ac00:	4b05      	ldr	r3, [pc, #20]	; (800ac18 <HAL_RCC_OscConfig+0x85c>)
 800ac02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac04:	4a04      	ldr	r2, [pc, #16]	; (800ac18 <HAL_RCC_OscConfig+0x85c>)
 800ac06:	f043 0301 	orr.w	r3, r3, #1
 800ac0a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3730      	adds	r7, #48	; 0x30
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	58024400 	.word	0x58024400
 800ac1c:	ffff0007 	.word	0xffff0007

0800ac20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	e19c      	b.n	800af6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac34:	4b8a      	ldr	r3, [pc, #552]	; (800ae60 <HAL_RCC_ClockConfig+0x240>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 030f 	and.w	r3, r3, #15
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d910      	bls.n	800ac64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac42:	4b87      	ldr	r3, [pc, #540]	; (800ae60 <HAL_RCC_ClockConfig+0x240>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f023 020f 	bic.w	r2, r3, #15
 800ac4a:	4985      	ldr	r1, [pc, #532]	; (800ae60 <HAL_RCC_ClockConfig+0x240>)
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac52:	4b83      	ldr	r3, [pc, #524]	; (800ae60 <HAL_RCC_ClockConfig+0x240>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d001      	beq.n	800ac64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e184      	b.n	800af6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d010      	beq.n	800ac92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	691a      	ldr	r2, [r3, #16]
 800ac74:	4b7b      	ldr	r3, [pc, #492]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d908      	bls.n	800ac92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ac80:	4b78      	ldr	r3, [pc, #480]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	4975      	ldr	r1, [pc, #468]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0308 	and.w	r3, r3, #8
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d010      	beq.n	800acc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	695a      	ldr	r2, [r3, #20]
 800aca2:	4b70      	ldr	r3, [pc, #448]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acaa:	429a      	cmp	r2, r3
 800acac:	d908      	bls.n	800acc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800acae:	4b6d      	ldr	r3, [pc, #436]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	496a      	ldr	r1, [pc, #424]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800acbc:	4313      	orrs	r3, r2
 800acbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 0310 	and.w	r3, r3, #16
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d010      	beq.n	800acee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	699a      	ldr	r2, [r3, #24]
 800acd0:	4b64      	ldr	r3, [pc, #400]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acd8:	429a      	cmp	r2, r3
 800acda:	d908      	bls.n	800acee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800acdc:	4b61      	ldr	r3, [pc, #388]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	495e      	ldr	r1, [pc, #376]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800acea:	4313      	orrs	r3, r2
 800acec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0320 	and.w	r3, r3, #32
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d010      	beq.n	800ad1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	69da      	ldr	r2, [r3, #28]
 800acfe:	4b59      	ldr	r3, [pc, #356]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d908      	bls.n	800ad1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ad0a:	4b56      	ldr	r3, [pc, #344]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	4953      	ldr	r1, [pc, #332]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0302 	and.w	r3, r3, #2
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d010      	beq.n	800ad4a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68da      	ldr	r2, [r3, #12]
 800ad2c:	4b4d      	ldr	r3, [pc, #308]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	f003 030f 	and.w	r3, r3, #15
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d908      	bls.n	800ad4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad38:	4b4a      	ldr	r3, [pc, #296]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	f023 020f 	bic.w	r2, r3, #15
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	4947      	ldr	r1, [pc, #284]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d055      	beq.n	800ae02 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ad56:	4b43      	ldr	r3, [pc, #268]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	4940      	ldr	r1, [pc, #256]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ad64:	4313      	orrs	r3, r2
 800ad66:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d107      	bne.n	800ad80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad70:	4b3c      	ldr	r3, [pc, #240]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d121      	bne.n	800adc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e0f6      	b.n	800af6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	2b03      	cmp	r3, #3
 800ad86:	d107      	bne.n	800ad98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad88:	4b36      	ldr	r3, [pc, #216]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d115      	bne.n	800adc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e0ea      	b.n	800af6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d107      	bne.n	800adb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ada0:	4b30      	ldr	r3, [pc, #192]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d109      	bne.n	800adc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e0de      	b.n	800af6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800adb0:	4b2c      	ldr	r3, [pc, #176]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e0d6      	b.n	800af6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800adc0:	4b28      	ldr	r3, [pc, #160]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	f023 0207 	bic.w	r2, r3, #7
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	4925      	ldr	r1, [pc, #148]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800adce:	4313      	orrs	r3, r2
 800add0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800add2:	f7f9 ffdf 	bl	8004d94 <HAL_GetTick>
 800add6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800add8:	e00a      	b.n	800adf0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adda:	f7f9 ffdb 	bl	8004d94 <HAL_GetTick>
 800adde:	4602      	mov	r2, r0
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ade8:	4293      	cmp	r3, r2
 800adea:	d901      	bls.n	800adf0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800adec:	2303      	movs	r3, #3
 800adee:	e0be      	b.n	800af6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adf0:	4b1c      	ldr	r3, [pc, #112]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d1eb      	bne.n	800adda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 0302 	and.w	r3, r3, #2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d010      	beq.n	800ae30 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68da      	ldr	r2, [r3, #12]
 800ae12:	4b14      	ldr	r3, [pc, #80]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	f003 030f 	and.w	r3, r3, #15
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d208      	bcs.n	800ae30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae1e:	4b11      	ldr	r3, [pc, #68]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	f023 020f 	bic.w	r2, r3, #15
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	490e      	ldr	r1, [pc, #56]	; (800ae64 <HAL_RCC_ClockConfig+0x244>)
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae30:	4b0b      	ldr	r3, [pc, #44]	; (800ae60 <HAL_RCC_ClockConfig+0x240>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 030f 	and.w	r3, r3, #15
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d214      	bcs.n	800ae68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae3e:	4b08      	ldr	r3, [pc, #32]	; (800ae60 <HAL_RCC_ClockConfig+0x240>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f023 020f 	bic.w	r2, r3, #15
 800ae46:	4906      	ldr	r1, [pc, #24]	; (800ae60 <HAL_RCC_ClockConfig+0x240>)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae4e:	4b04      	ldr	r3, [pc, #16]	; (800ae60 <HAL_RCC_ClockConfig+0x240>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 030f 	and.w	r3, r3, #15
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d005      	beq.n	800ae68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e086      	b.n	800af6e <HAL_RCC_ClockConfig+0x34e>
 800ae60:	52002000 	.word	0x52002000
 800ae64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 0304 	and.w	r3, r3, #4
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d010      	beq.n	800ae96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691a      	ldr	r2, [r3, #16]
 800ae78:	4b3f      	ldr	r3, [pc, #252]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d208      	bcs.n	800ae96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ae84:	4b3c      	ldr	r3, [pc, #240]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800ae86:	699b      	ldr	r3, [r3, #24]
 800ae88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	4939      	ldr	r1, [pc, #228]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800ae92:	4313      	orrs	r3, r2
 800ae94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 0308 	and.w	r3, r3, #8
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d010      	beq.n	800aec4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	695a      	ldr	r2, [r3, #20]
 800aea6:	4b34      	ldr	r3, [pc, #208]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800aea8:	69db      	ldr	r3, [r3, #28]
 800aeaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d208      	bcs.n	800aec4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aeb2:	4b31      	ldr	r3, [pc, #196]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	492e      	ldr	r1, [pc, #184]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800aec0:	4313      	orrs	r3, r2
 800aec2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0310 	and.w	r3, r3, #16
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d010      	beq.n	800aef2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	699a      	ldr	r2, [r3, #24]
 800aed4:	4b28      	ldr	r3, [pc, #160]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800aed6:	69db      	ldr	r3, [r3, #28]
 800aed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aedc:	429a      	cmp	r2, r3
 800aede:	d208      	bcs.n	800aef2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aee0:	4b25      	ldr	r3, [pc, #148]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800aee2:	69db      	ldr	r3, [r3, #28]
 800aee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	4922      	ldr	r1, [pc, #136]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0320 	and.w	r3, r3, #32
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d010      	beq.n	800af20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	69da      	ldr	r2, [r3, #28]
 800af02:	4b1d      	ldr	r3, [pc, #116]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d208      	bcs.n	800af20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af0e:	4b1a      	ldr	r3, [pc, #104]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	4917      	ldr	r1, [pc, #92]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800af1c:	4313      	orrs	r3, r2
 800af1e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800af20:	f000 f89e 	bl	800b060 <HAL_RCC_GetSysClockFreq>
 800af24:	4602      	mov	r2, r0
 800af26:	4b14      	ldr	r3, [pc, #80]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	0a1b      	lsrs	r3, r3, #8
 800af2c:	f003 030f 	and.w	r3, r3, #15
 800af30:	4912      	ldr	r1, [pc, #72]	; (800af7c <HAL_RCC_ClockConfig+0x35c>)
 800af32:	5ccb      	ldrb	r3, [r1, r3]
 800af34:	f003 031f 	and.w	r3, r3, #31
 800af38:	fa22 f303 	lsr.w	r3, r2, r3
 800af3c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800af3e:	4b0e      	ldr	r3, [pc, #56]	; (800af78 <HAL_RCC_ClockConfig+0x358>)
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	f003 030f 	and.w	r3, r3, #15
 800af46:	4a0d      	ldr	r2, [pc, #52]	; (800af7c <HAL_RCC_ClockConfig+0x35c>)
 800af48:	5cd3      	ldrb	r3, [r2, r3]
 800af4a:	f003 031f 	and.w	r3, r3, #31
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	fa22 f303 	lsr.w	r3, r2, r3
 800af54:	4a0a      	ldr	r2, [pc, #40]	; (800af80 <HAL_RCC_ClockConfig+0x360>)
 800af56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800af58:	4a0a      	ldr	r2, [pc, #40]	; (800af84 <HAL_RCC_ClockConfig+0x364>)
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800af5e:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <HAL_RCC_ClockConfig+0x368>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4618      	mov	r0, r3
 800af64:	f7f9 fee0 	bl	8004d28 <HAL_InitTick>
 800af68:	4603      	mov	r3, r0
 800af6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800af6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	58024400 	.word	0x58024400
 800af7c:	08011268 	.word	0x08011268
 800af80:	2400000c 	.word	0x2400000c
 800af84:	24000008 	.word	0x24000008
 800af88:	24000080 	.word	0x24000080

0800af8c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08c      	sub	sp, #48	; 0x30
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d12a      	bne.n	800aff4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800af9e:	4b2d      	ldr	r3, [pc, #180]	; (800b054 <HAL_RCC_MCOConfig+0xc8>)
 800afa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800afa4:	4a2b      	ldr	r2, [pc, #172]	; (800b054 <HAL_RCC_MCOConfig+0xc8>)
 800afa6:	f043 0301 	orr.w	r3, r3, #1
 800afaa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800afae:	4b29      	ldr	r3, [pc, #164]	; (800b054 <HAL_RCC_MCOConfig+0xc8>)
 800afb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	61bb      	str	r3, [r7, #24]
 800afba:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800afbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afc2:	2302      	movs	r3, #2
 800afc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afc6:	2303      	movs	r3, #3
 800afc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afca:	2300      	movs	r3, #0
 800afcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800afce:	2300      	movs	r3, #0
 800afd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800afd2:	f107 031c 	add.w	r3, r7, #28
 800afd6:	4619      	mov	r1, r3
 800afd8:	481f      	ldr	r0, [pc, #124]	; (800b058 <HAL_RCC_MCOConfig+0xcc>)
 800afda:	f7fc fda9 	bl	8007b30 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800afde:	4b1d      	ldr	r3, [pc, #116]	; (800b054 <HAL_RCC_MCOConfig+0xc8>)
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800afe6:	68b9      	ldr	r1, [r7, #8]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	430b      	orrs	r3, r1
 800afec:	4919      	ldr	r1, [pc, #100]	; (800b054 <HAL_RCC_MCOConfig+0xc8>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800aff2:	e02a      	b.n	800b04a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800aff4:	4b17      	ldr	r3, [pc, #92]	; (800b054 <HAL_RCC_MCOConfig+0xc8>)
 800aff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800affa:	4a16      	ldr	r2, [pc, #88]	; (800b054 <HAL_RCC_MCOConfig+0xc8>)
 800affc:	f043 0304 	orr.w	r3, r3, #4
 800b000:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b004:	4b13      	ldr	r3, [pc, #76]	; (800b054 <HAL_RCC_MCOConfig+0xc8>)
 800b006:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b00a:	f003 0304 	and.w	r3, r3, #4
 800b00e:	617b      	str	r3, [r7, #20]
 800b010:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b012:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b018:	2302      	movs	r3, #2
 800b01a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b01c:	2303      	movs	r3, #3
 800b01e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b020:	2300      	movs	r3, #0
 800b022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b024:	2300      	movs	r3, #0
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b028:	f107 031c 	add.w	r3, r7, #28
 800b02c:	4619      	mov	r1, r3
 800b02e:	480b      	ldr	r0, [pc, #44]	; (800b05c <HAL_RCC_MCOConfig+0xd0>)
 800b030:	f7fc fd7e 	bl	8007b30 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b034:	4b07      	ldr	r3, [pc, #28]	; (800b054 <HAL_RCC_MCOConfig+0xc8>)
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	01d9      	lsls	r1, r3, #7
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	430b      	orrs	r3, r1
 800b044:	4903      	ldr	r1, [pc, #12]	; (800b054 <HAL_RCC_MCOConfig+0xc8>)
 800b046:	4313      	orrs	r3, r2
 800b048:	610b      	str	r3, [r1, #16]
}
 800b04a:	bf00      	nop
 800b04c:	3730      	adds	r7, #48	; 0x30
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	58024400 	.word	0x58024400
 800b058:	58020000 	.word	0x58020000
 800b05c:	58020800 	.word	0x58020800

0800b060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b060:	b480      	push	{r7}
 800b062:	b089      	sub	sp, #36	; 0x24
 800b064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b066:	4bb3      	ldr	r3, [pc, #716]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b06e:	2b18      	cmp	r3, #24
 800b070:	f200 8155 	bhi.w	800b31e <HAL_RCC_GetSysClockFreq+0x2be>
 800b074:	a201      	add	r2, pc, #4	; (adr r2, 800b07c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07a:	bf00      	nop
 800b07c:	0800b0e1 	.word	0x0800b0e1
 800b080:	0800b31f 	.word	0x0800b31f
 800b084:	0800b31f 	.word	0x0800b31f
 800b088:	0800b31f 	.word	0x0800b31f
 800b08c:	0800b31f 	.word	0x0800b31f
 800b090:	0800b31f 	.word	0x0800b31f
 800b094:	0800b31f 	.word	0x0800b31f
 800b098:	0800b31f 	.word	0x0800b31f
 800b09c:	0800b107 	.word	0x0800b107
 800b0a0:	0800b31f 	.word	0x0800b31f
 800b0a4:	0800b31f 	.word	0x0800b31f
 800b0a8:	0800b31f 	.word	0x0800b31f
 800b0ac:	0800b31f 	.word	0x0800b31f
 800b0b0:	0800b31f 	.word	0x0800b31f
 800b0b4:	0800b31f 	.word	0x0800b31f
 800b0b8:	0800b31f 	.word	0x0800b31f
 800b0bc:	0800b10d 	.word	0x0800b10d
 800b0c0:	0800b31f 	.word	0x0800b31f
 800b0c4:	0800b31f 	.word	0x0800b31f
 800b0c8:	0800b31f 	.word	0x0800b31f
 800b0cc:	0800b31f 	.word	0x0800b31f
 800b0d0:	0800b31f 	.word	0x0800b31f
 800b0d4:	0800b31f 	.word	0x0800b31f
 800b0d8:	0800b31f 	.word	0x0800b31f
 800b0dc:	0800b113 	.word	0x0800b113
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0e0:	4b94      	ldr	r3, [pc, #592]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 0320 	and.w	r3, r3, #32
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d009      	beq.n	800b100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0ec:	4b91      	ldr	r3, [pc, #580]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	08db      	lsrs	r3, r3, #3
 800b0f2:	f003 0303 	and.w	r3, r3, #3
 800b0f6:	4a90      	ldr	r2, [pc, #576]	; (800b338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b0fe:	e111      	b.n	800b324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b100:	4b8d      	ldr	r3, [pc, #564]	; (800b338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b102:	61bb      	str	r3, [r7, #24]
      break;
 800b104:	e10e      	b.n	800b324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b106:	4b8d      	ldr	r3, [pc, #564]	; (800b33c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b108:	61bb      	str	r3, [r7, #24]
      break;
 800b10a:	e10b      	b.n	800b324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b10c:	4b8c      	ldr	r3, [pc, #560]	; (800b340 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b10e:	61bb      	str	r3, [r7, #24]
      break;
 800b110:	e108      	b.n	800b324 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b112:	4b88      	ldr	r3, [pc, #544]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b116:	f003 0303 	and.w	r3, r3, #3
 800b11a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b11c:	4b85      	ldr	r3, [pc, #532]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b120:	091b      	lsrs	r3, r3, #4
 800b122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b126:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b128:	4b82      	ldr	r3, [pc, #520]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12c:	f003 0301 	and.w	r3, r3, #1
 800b130:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b132:	4b80      	ldr	r3, [pc, #512]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b136:	08db      	lsrs	r3, r3, #3
 800b138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	fb02 f303 	mul.w	r3, r2, r3
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 80e1 	beq.w	800b318 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b02      	cmp	r3, #2
 800b15a:	f000 8083 	beq.w	800b264 <HAL_RCC_GetSysClockFreq+0x204>
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2b02      	cmp	r3, #2
 800b162:	f200 80a1 	bhi.w	800b2a8 <HAL_RCC_GetSysClockFreq+0x248>
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <HAL_RCC_GetSysClockFreq+0x114>
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d056      	beq.n	800b220 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b172:	e099      	b.n	800b2a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b174:	4b6f      	ldr	r3, [pc, #444]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0320 	and.w	r3, r3, #32
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d02d      	beq.n	800b1dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b180:	4b6c      	ldr	r3, [pc, #432]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	08db      	lsrs	r3, r3, #3
 800b186:	f003 0303 	and.w	r3, r3, #3
 800b18a:	4a6b      	ldr	r2, [pc, #428]	; (800b338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b18c:	fa22 f303 	lsr.w	r3, r2, r3
 800b190:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	ee07 3a90 	vmov	s15, r3
 800b198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1aa:	4b62      	ldr	r3, [pc, #392]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b2:	ee07 3a90 	vmov	s15, r3
 800b1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1be:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b1da:	e087      	b.n	800b2ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b348 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ee:	4b51      	ldr	r3, [pc, #324]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f6:	ee07 3a90 	vmov	s15, r3
 800b1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b202:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b20e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b21a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b21e:	e065      	b.n	800b2ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	ee07 3a90 	vmov	s15, r3
 800b226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b22a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b34c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b232:	4b40      	ldr	r3, [pc, #256]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23a:	ee07 3a90 	vmov	s15, r3
 800b23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b242:	ed97 6a02 	vldr	s12, [r7, #8]
 800b246:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b262:	e043      	b.n	800b2ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	ee07 3a90 	vmov	s15, r3
 800b26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b26e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b350 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b276:	4b2f      	ldr	r3, [pc, #188]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b286:	ed97 6a02 	vldr	s12, [r7, #8]
 800b28a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b2a6:	e021      	b.n	800b2ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	ee07 3a90 	vmov	s15, r3
 800b2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b34c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ba:	4b1e      	ldr	r3, [pc, #120]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b2ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b2ec:	4b11      	ldr	r3, [pc, #68]	; (800b334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f0:	0a5b      	lsrs	r3, r3, #9
 800b2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	ee07 3a90 	vmov	s15, r3
 800b300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b304:	edd7 6a07 	vldr	s13, [r7, #28]
 800b308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b30c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b310:	ee17 3a90 	vmov	r3, s15
 800b314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b316:	e005      	b.n	800b324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	61bb      	str	r3, [r7, #24]
      break;
 800b31c:	e002      	b.n	800b324 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b31e:	4b07      	ldr	r3, [pc, #28]	; (800b33c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b320:	61bb      	str	r3, [r7, #24]
      break;
 800b322:	bf00      	nop
  }

  return sysclockfreq;
 800b324:	69bb      	ldr	r3, [r7, #24]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3724      	adds	r7, #36	; 0x24
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	58024400 	.word	0x58024400
 800b338:	03d09000 	.word	0x03d09000
 800b33c:	003d0900 	.word	0x003d0900
 800b340:	016e3600 	.word	0x016e3600
 800b344:	46000000 	.word	0x46000000
 800b348:	4c742400 	.word	0x4c742400
 800b34c:	4a742400 	.word	0x4a742400
 800b350:	4bb71b00 	.word	0x4bb71b00

0800b354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b35a:	f7ff fe81 	bl	800b060 <HAL_RCC_GetSysClockFreq>
 800b35e:	4602      	mov	r2, r0
 800b360:	4b10      	ldr	r3, [pc, #64]	; (800b3a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	0a1b      	lsrs	r3, r3, #8
 800b366:	f003 030f 	and.w	r3, r3, #15
 800b36a:	490f      	ldr	r1, [pc, #60]	; (800b3a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b36c:	5ccb      	ldrb	r3, [r1, r3]
 800b36e:	f003 031f 	and.w	r3, r3, #31
 800b372:	fa22 f303 	lsr.w	r3, r2, r3
 800b376:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b378:	4b0a      	ldr	r3, [pc, #40]	; (800b3a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	f003 030f 	and.w	r3, r3, #15
 800b380:	4a09      	ldr	r2, [pc, #36]	; (800b3a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b382:	5cd3      	ldrb	r3, [r2, r3]
 800b384:	f003 031f 	and.w	r3, r3, #31
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	fa22 f303 	lsr.w	r3, r2, r3
 800b38e:	4a07      	ldr	r2, [pc, #28]	; (800b3ac <HAL_RCC_GetHCLKFreq+0x58>)
 800b390:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b392:	4a07      	ldr	r2, [pc, #28]	; (800b3b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b398:	4b04      	ldr	r3, [pc, #16]	; (800b3ac <HAL_RCC_GetHCLKFreq+0x58>)
 800b39a:	681b      	ldr	r3, [r3, #0]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	58024400 	.word	0x58024400
 800b3a8:	08011268 	.word	0x08011268
 800b3ac:	2400000c 	.word	0x2400000c
 800b3b0:	24000008 	.word	0x24000008

0800b3b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b3b8:	f7ff ffcc 	bl	800b354 <HAL_RCC_GetHCLKFreq>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	4b06      	ldr	r3, [pc, #24]	; (800b3d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	091b      	lsrs	r3, r3, #4
 800b3c4:	f003 0307 	and.w	r3, r3, #7
 800b3c8:	4904      	ldr	r1, [pc, #16]	; (800b3dc <HAL_RCC_GetPCLK1Freq+0x28>)
 800b3ca:	5ccb      	ldrb	r3, [r1, r3]
 800b3cc:	f003 031f 	and.w	r3, r3, #31
 800b3d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	58024400 	.word	0x58024400
 800b3dc:	08011268 	.word	0x08011268

0800b3e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b3e4:	f7ff ffb6 	bl	800b354 <HAL_RCC_GetHCLKFreq>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	4b06      	ldr	r3, [pc, #24]	; (800b404 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	0a1b      	lsrs	r3, r3, #8
 800b3f0:	f003 0307 	and.w	r3, r3, #7
 800b3f4:	4904      	ldr	r1, [pc, #16]	; (800b408 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b3f6:	5ccb      	ldrb	r3, [r1, r3]
 800b3f8:	f003 031f 	and.w	r3, r3, #31
 800b3fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b400:	4618      	mov	r0, r3
 800b402:	bd80      	pop	{r7, pc}
 800b404:	58024400 	.word	0x58024400
 800b408:	08011268 	.word	0x08011268

0800b40c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b40c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b410:	b0c8      	sub	sp, #288	; 0x120
 800b412:	af00      	add	r7, sp, #0
 800b414:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b418:	2300      	movs	r3, #0
 800b41a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b41e:	2300      	movs	r3, #0
 800b420:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b430:	2500      	movs	r5, #0
 800b432:	ea54 0305 	orrs.w	r3, r4, r5
 800b436:	d049      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b43e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b442:	d02f      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b448:	d828      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b44a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b44e:	d01a      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b454:	d822      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b45a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b45e:	d007      	beq.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b460:	e01c      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b462:	4ba7      	ldr	r3, [pc, #668]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b466:	4aa6      	ldr	r2, [pc, #664]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b46c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b46e:	e01a      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b474:	3308      	adds	r3, #8
 800b476:	2102      	movs	r1, #2
 800b478:	4618      	mov	r0, r3
 800b47a:	f002 fa6d 	bl	800d958 <RCCEx_PLL2_Config>
 800b47e:	4603      	mov	r3, r0
 800b480:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b484:	e00f      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b48a:	3328      	adds	r3, #40	; 0x28
 800b48c:	2102      	movs	r1, #2
 800b48e:	4618      	mov	r0, r3
 800b490:	f002 fb14 	bl	800dabc <RCCEx_PLL3_Config>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b49a:	e004      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b4a2:	e000      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b4a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10a      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b4ae:	4b94      	ldr	r3, [pc, #592]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4bc:	4a90      	ldr	r2, [pc, #576]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4be:	430b      	orrs	r3, r1
 800b4c0:	6513      	str	r3, [r2, #80]	; 0x50
 800b4c2:	e003      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b4c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b4cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b4d8:	f04f 0900 	mov.w	r9, #0
 800b4dc:	ea58 0309 	orrs.w	r3, r8, r9
 800b4e0:	d047      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b4e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e8:	2b04      	cmp	r3, #4
 800b4ea:	d82a      	bhi.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b4ec:	a201      	add	r2, pc, #4	; (adr r2, 800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f2:	bf00      	nop
 800b4f4:	0800b509 	.word	0x0800b509
 800b4f8:	0800b517 	.word	0x0800b517
 800b4fc:	0800b52d 	.word	0x0800b52d
 800b500:	0800b54b 	.word	0x0800b54b
 800b504:	0800b54b 	.word	0x0800b54b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b508:	4b7d      	ldr	r3, [pc, #500]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50c:	4a7c      	ldr	r2, [pc, #496]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b50e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b514:	e01a      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b51a:	3308      	adds	r3, #8
 800b51c:	2100      	movs	r1, #0
 800b51e:	4618      	mov	r0, r3
 800b520:	f002 fa1a 	bl	800d958 <RCCEx_PLL2_Config>
 800b524:	4603      	mov	r3, r0
 800b526:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b52a:	e00f      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b52c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b530:	3328      	adds	r3, #40	; 0x28
 800b532:	2100      	movs	r1, #0
 800b534:	4618      	mov	r0, r3
 800b536:	f002 fac1 	bl	800dabc <RCCEx_PLL3_Config>
 800b53a:	4603      	mov	r3, r0
 800b53c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b540:	e004      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b548:	e000      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b54a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b54c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10a      	bne.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b554:	4b6a      	ldr	r3, [pc, #424]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b558:	f023 0107 	bic.w	r1, r3, #7
 800b55c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b562:	4a67      	ldr	r2, [pc, #412]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b564:	430b      	orrs	r3, r1
 800b566:	6513      	str	r3, [r2, #80]	; 0x50
 800b568:	e003      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b56a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b56e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b57e:	f04f 0b00 	mov.w	fp, #0
 800b582:	ea5a 030b 	orrs.w	r3, sl, fp
 800b586:	d054      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b58e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b592:	d036      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b594:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b598:	d82f      	bhi.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b59e:	d032      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b5a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a4:	d829      	bhi.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b5a6:	2bc0      	cmp	r3, #192	; 0xc0
 800b5a8:	d02f      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b5aa:	2bc0      	cmp	r3, #192	; 0xc0
 800b5ac:	d825      	bhi.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b5ae:	2b80      	cmp	r3, #128	; 0x80
 800b5b0:	d018      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b5b2:	2b80      	cmp	r3, #128	; 0x80
 800b5b4:	d821      	bhi.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b5ba:	2b40      	cmp	r3, #64	; 0x40
 800b5bc:	d007      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b5be:	e01c      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5c0:	4b4f      	ldr	r3, [pc, #316]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	4a4e      	ldr	r2, [pc, #312]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b5cc:	e01e      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f002 f9be 	bl	800d958 <RCCEx_PLL2_Config>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b5e2:	e013      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5e8:	3328      	adds	r3, #40	; 0x28
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f002 fa65 	bl	800dabc <RCCEx_PLL3_Config>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b5f8:	e008      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b600:	e004      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b602:	bf00      	nop
 800b604:	e002      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b606:	bf00      	nop
 800b608:	e000      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b60a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b60c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10a      	bne.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b614:	4b3a      	ldr	r3, [pc, #232]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b618:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b61c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b622:	4a37      	ldr	r2, [pc, #220]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b624:	430b      	orrs	r3, r1
 800b626:	6513      	str	r3, [r2, #80]	; 0x50
 800b628:	e003      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b62a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b62e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b63e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b642:	2300      	movs	r3, #0
 800b644:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b648:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b64c:	460b      	mov	r3, r1
 800b64e:	4313      	orrs	r3, r2
 800b650:	d05c      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b658:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b65c:	d03b      	beq.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b65e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b662:	d834      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b668:	d037      	beq.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b66a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b66e:	d82e      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b670:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b674:	d033      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b676:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b67a:	d828      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b67c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b680:	d01a      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b686:	d822      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d003      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b68c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b690:	d007      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b692:	e01c      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b694:	4b1a      	ldr	r3, [pc, #104]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b698:	4a19      	ldr	r2, [pc, #100]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b69a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b69e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b6a0:	e01e      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f002 f954 	bl	800d958 <RCCEx_PLL2_Config>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b6b6:	e013      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6bc:	3328      	adds	r3, #40	; 0x28
 800b6be:	2100      	movs	r1, #0
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f002 f9fb 	bl	800dabc <RCCEx_PLL3_Config>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b6cc:	e008      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b6d4:	e004      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b6d6:	bf00      	nop
 800b6d8:	e002      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b6da:	bf00      	nop
 800b6dc:	e000      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b6de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10d      	bne.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b6e8:	4b05      	ldr	r3, [pc, #20]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ec:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b6f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6f6:	4a02      	ldr	r2, [pc, #8]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	6513      	str	r3, [r2, #80]	; 0x50
 800b6fc:	e006      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b6fe:	bf00      	nop
 800b700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b704:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b708:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b71c:	2300      	movs	r3, #0
 800b71e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b722:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b726:	460b      	mov	r3, r1
 800b728:	4313      	orrs	r3, r2
 800b72a:	d03a      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b72c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b732:	2b30      	cmp	r3, #48	; 0x30
 800b734:	d01f      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b736:	2b30      	cmp	r3, #48	; 0x30
 800b738:	d819      	bhi.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b73a:	2b20      	cmp	r3, #32
 800b73c:	d00c      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b73e:	2b20      	cmp	r3, #32
 800b740:	d815      	bhi.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d019      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b746:	2b10      	cmp	r3, #16
 800b748:	d111      	bne.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b74a:	4bae      	ldr	r3, [pc, #696]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74e:	4aad      	ldr	r2, [pc, #692]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b756:	e011      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b75c:	3308      	adds	r3, #8
 800b75e:	2102      	movs	r1, #2
 800b760:	4618      	mov	r0, r3
 800b762:	f002 f8f9 	bl	800d958 <RCCEx_PLL2_Config>
 800b766:	4603      	mov	r3, r0
 800b768:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b76c:	e006      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b774:	e002      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b776:	bf00      	nop
 800b778:	e000      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b77a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b77c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10a      	bne.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b784:	4b9f      	ldr	r3, [pc, #636]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b788:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b78c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b792:	4a9c      	ldr	r2, [pc, #624]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b794:	430b      	orrs	r3, r1
 800b796:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b798:	e003      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b79e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b7a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b7ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	d051      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b7c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7cc:	d035      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b7ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7d2:	d82e      	bhi.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b7d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7d8:	d031      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b7da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7de:	d828      	bhi.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b7e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7e4:	d01a      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b7e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ea:	d822      	bhi.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d003      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b7f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7f4:	d007      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b7f6:	e01c      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7f8:	4b82      	ldr	r3, [pc, #520]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fc:	4a81      	ldr	r2, [pc, #516]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b804:	e01c      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b80a:	3308      	adds	r3, #8
 800b80c:	2100      	movs	r1, #0
 800b80e:	4618      	mov	r0, r3
 800b810:	f002 f8a2 	bl	800d958 <RCCEx_PLL2_Config>
 800b814:	4603      	mov	r3, r0
 800b816:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b81a:	e011      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b820:	3328      	adds	r3, #40	; 0x28
 800b822:	2100      	movs	r1, #0
 800b824:	4618      	mov	r0, r3
 800b826:	f002 f949 	bl	800dabc <RCCEx_PLL3_Config>
 800b82a:	4603      	mov	r3, r0
 800b82c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b830:	e006      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b838:	e002      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b83a:	bf00      	nop
 800b83c:	e000      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b83e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b840:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10a      	bne.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b848:	4b6e      	ldr	r3, [pc, #440]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b84c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b856:	4a6b      	ldr	r2, [pc, #428]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b858:	430b      	orrs	r3, r1
 800b85a:	6513      	str	r3, [r2, #80]	; 0x50
 800b85c:	e003      	b.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b85e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b862:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b876:	2300      	movs	r3, #0
 800b878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b87c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b880:	460b      	mov	r3, r1
 800b882:	4313      	orrs	r3, r2
 800b884:	d053      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b88a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b88c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b890:	d033      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b896:	d82c      	bhi.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b89c:	d02f      	beq.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b89e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8a2:	d826      	bhi.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b8a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8a8:	d02b      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b8aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8ae:	d820      	bhi.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b8b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8b4:	d012      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b8b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8ba:	d81a      	bhi.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d022      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800b8c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8c4:	d115      	bne.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f002 f842 	bl	800d958 <RCCEx_PLL2_Config>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b8da:	e015      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8e0:	3328      	adds	r3, #40	; 0x28
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f002 f8e9 	bl	800dabc <RCCEx_PLL3_Config>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b8f0:	e00a      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b8f8:	e006      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b8fa:	bf00      	nop
 800b8fc:	e004      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b8fe:	bf00      	nop
 800b900:	e002      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b902:	bf00      	nop
 800b904:	e000      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b906:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b908:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b910:	4b3c      	ldr	r3, [pc, #240]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b914:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b91c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b91e:	4a39      	ldr	r2, [pc, #228]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b920:	430b      	orrs	r3, r1
 800b922:	6513      	str	r3, [r2, #80]	; 0x50
 800b924:	e003      	b.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b926:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b92a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b92e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b93a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b93e:	2300      	movs	r3, #0
 800b940:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b944:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b948:	460b      	mov	r3, r1
 800b94a:	4313      	orrs	r3, r2
 800b94c:	d060      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b94e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b956:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b95a:	d039      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800b95c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b960:	d832      	bhi.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b966:	d035      	beq.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b96c:	d82c      	bhi.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b96e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b972:	d031      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b978:	d826      	bhi.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b97a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b97e:	d02d      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b980:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b984:	d820      	bhi.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b98a:	d012      	beq.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b98c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b990:	d81a      	bhi.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b992:	2b00      	cmp	r3, #0
 800b994:	d024      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b99a:	d115      	bne.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b99c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f001 ffd7 	bl	800d958 <RCCEx_PLL2_Config>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b9b0:	e017      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9b6:	3328      	adds	r3, #40	; 0x28
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f002 f87e 	bl	800dabc <RCCEx_PLL3_Config>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b9c6:	e00c      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b9ce:	e008      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b9d0:	bf00      	nop
 800b9d2:	e006      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b9d4:	bf00      	nop
 800b9d6:	e004      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b9d8:	bf00      	nop
 800b9da:	e002      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b9dc:	bf00      	nop
 800b9de:	e000      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b9e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10e      	bne.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b9ea:	4b06      	ldr	r3, [pc, #24]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b9f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b9fa:	4a02      	ldr	r2, [pc, #8]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	6593      	str	r3, [r2, #88]	; 0x58
 800ba00:	e006      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ba02:	bf00      	nop
 800ba04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ba10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ba1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba20:	2300      	movs	r3, #0
 800ba22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ba26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	d037      	beq.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ba30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba3a:	d00e      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ba3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba40:	d816      	bhi.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d018      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ba46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba4a:	d111      	bne.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba4c:	4bc4      	ldr	r3, [pc, #784]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba50:	4ac3      	ldr	r2, [pc, #780]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ba58:	e00f      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba5e:	3308      	adds	r3, #8
 800ba60:	2101      	movs	r1, #1
 800ba62:	4618      	mov	r0, r3
 800ba64:	f001 ff78 	bl	800d958 <RCCEx_PLL2_Config>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ba6e:	e004      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba76:	e000      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ba78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10a      	bne.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ba82:	4bb7      	ldr	r3, [pc, #732]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba86:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ba8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba90:	4ab3      	ldr	r2, [pc, #716]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba92:	430b      	orrs	r3, r1
 800ba94:	6513      	str	r3, [r2, #80]	; 0x50
 800ba96:	e003      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800baa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800baac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bab0:	2300      	movs	r3, #0
 800bab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bab6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800baba:	460b      	mov	r3, r1
 800babc:	4313      	orrs	r3, r2
 800babe:	d039      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac6:	2b03      	cmp	r3, #3
 800bac8:	d81c      	bhi.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800baca:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bb0d 	.word	0x0800bb0d
 800bad4:	0800bae1 	.word	0x0800bae1
 800bad8:	0800baef 	.word	0x0800baef
 800badc:	0800bb0d 	.word	0x0800bb0d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bae0:	4b9f      	ldr	r3, [pc, #636]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae4:	4a9e      	ldr	r2, [pc, #632]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800baec:	e00f      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800baee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baf2:	3308      	adds	r3, #8
 800baf4:	2102      	movs	r1, #2
 800baf6:	4618      	mov	r0, r3
 800baf8:	f001 ff2e 	bl	800d958 <RCCEx_PLL2_Config>
 800bafc:	4603      	mov	r3, r0
 800bafe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb02:	e004      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb0a:	e000      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bb0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10a      	bne.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bb16:	4b92      	ldr	r3, [pc, #584]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb1a:	f023 0103 	bic.w	r1, r3, #3
 800bb1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb24:	4a8e      	ldr	r2, [pc, #568]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb26:	430b      	orrs	r3, r1
 800bb28:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb2a:	e003      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bb40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb44:	2300      	movs	r3, #0
 800bb46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bb4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4313      	orrs	r3, r2
 800bb52:	f000 8099 	beq.w	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb56:	4b83      	ldr	r3, [pc, #524]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a82      	ldr	r2, [pc, #520]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bb5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb62:	f7f9 f917 	bl	8004d94 <HAL_GetTick>
 800bb66:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb6a:	e00b      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb6c:	f7f9 f912 	bl	8004d94 <HAL_GetTick>
 800bb70:	4602      	mov	r2, r0
 800bb72:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	2b64      	cmp	r3, #100	; 0x64
 800bb7a:	d903      	bls.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb82:	e005      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb84:	4b77      	ldr	r3, [pc, #476]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0ed      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bb90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d173      	bne.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bb98:	4b71      	ldr	r3, [pc, #452]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bba0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bba4:	4053      	eors	r3, r2
 800bba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d015      	beq.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bbae:	4b6c      	ldr	r3, [pc, #432]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbb6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bbba:	4b69      	ldr	r3, [pc, #420]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbbe:	4a68      	ldr	r2, [pc, #416]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbc4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bbc6:	4b66      	ldr	r3, [pc, #408]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbca:	4a65      	ldr	r2, [pc, #404]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbd0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bbd2:	4a63      	ldr	r2, [pc, #396]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bbda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bbe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbe6:	d118      	bne.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbe8:	f7f9 f8d4 	bl	8004d94 <HAL_GetTick>
 800bbec:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bbf0:	e00d      	b.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbf2:	f7f9 f8cf 	bl	8004d94 <HAL_GetTick>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bbfc:	1ad2      	subs	r2, r2, r3
 800bbfe:	f241 3388 	movw	r3, #5000	; 0x1388
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d903      	bls.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bc06:	2303      	movs	r3, #3
 800bc08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800bc0c:	e005      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc0e:	4b54      	ldr	r3, [pc, #336]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc12:	f003 0302 	and.w	r3, r3, #2
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d0eb      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bc1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d129      	bne.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc32:	d10e      	bne.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bc34:	4b4a      	ldr	r3, [pc, #296]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bc3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc44:	091a      	lsrs	r2, r3, #4
 800bc46:	4b48      	ldr	r3, [pc, #288]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bc48:	4013      	ands	r3, r2
 800bc4a:	4a45      	ldr	r2, [pc, #276]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc4c:	430b      	orrs	r3, r1
 800bc4e:	6113      	str	r3, [r2, #16]
 800bc50:	e005      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bc52:	4b43      	ldr	r3, [pc, #268]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	4a42      	ldr	r2, [pc, #264]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bc5c:	6113      	str	r3, [r2, #16]
 800bc5e:	4b40      	ldr	r3, [pc, #256]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc60:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bc62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc6e:	4a3c      	ldr	r2, [pc, #240]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc70:	430b      	orrs	r3, r1
 800bc72:	6713      	str	r3, [r2, #112]	; 0x70
 800bc74:	e008      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800bc7e:	e003      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bc88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f002 0301 	and.w	r3, r2, #1
 800bc94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4313      	orrs	r3, r2
 800bca6:	f000 8090 	beq.w	800bdca <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bcaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcb2:	2b28      	cmp	r3, #40	; 0x28
 800bcb4:	d870      	bhi.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bcb6:	a201      	add	r2, pc, #4	; (adr r2, 800bcbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcbc:	0800bda1 	.word	0x0800bda1
 800bcc0:	0800bd99 	.word	0x0800bd99
 800bcc4:	0800bd99 	.word	0x0800bd99
 800bcc8:	0800bd99 	.word	0x0800bd99
 800bccc:	0800bd99 	.word	0x0800bd99
 800bcd0:	0800bd99 	.word	0x0800bd99
 800bcd4:	0800bd99 	.word	0x0800bd99
 800bcd8:	0800bd99 	.word	0x0800bd99
 800bcdc:	0800bd6d 	.word	0x0800bd6d
 800bce0:	0800bd99 	.word	0x0800bd99
 800bce4:	0800bd99 	.word	0x0800bd99
 800bce8:	0800bd99 	.word	0x0800bd99
 800bcec:	0800bd99 	.word	0x0800bd99
 800bcf0:	0800bd99 	.word	0x0800bd99
 800bcf4:	0800bd99 	.word	0x0800bd99
 800bcf8:	0800bd99 	.word	0x0800bd99
 800bcfc:	0800bd83 	.word	0x0800bd83
 800bd00:	0800bd99 	.word	0x0800bd99
 800bd04:	0800bd99 	.word	0x0800bd99
 800bd08:	0800bd99 	.word	0x0800bd99
 800bd0c:	0800bd99 	.word	0x0800bd99
 800bd10:	0800bd99 	.word	0x0800bd99
 800bd14:	0800bd99 	.word	0x0800bd99
 800bd18:	0800bd99 	.word	0x0800bd99
 800bd1c:	0800bda1 	.word	0x0800bda1
 800bd20:	0800bd99 	.word	0x0800bd99
 800bd24:	0800bd99 	.word	0x0800bd99
 800bd28:	0800bd99 	.word	0x0800bd99
 800bd2c:	0800bd99 	.word	0x0800bd99
 800bd30:	0800bd99 	.word	0x0800bd99
 800bd34:	0800bd99 	.word	0x0800bd99
 800bd38:	0800bd99 	.word	0x0800bd99
 800bd3c:	0800bda1 	.word	0x0800bda1
 800bd40:	0800bd99 	.word	0x0800bd99
 800bd44:	0800bd99 	.word	0x0800bd99
 800bd48:	0800bd99 	.word	0x0800bd99
 800bd4c:	0800bd99 	.word	0x0800bd99
 800bd50:	0800bd99 	.word	0x0800bd99
 800bd54:	0800bd99 	.word	0x0800bd99
 800bd58:	0800bd99 	.word	0x0800bd99
 800bd5c:	0800bda1 	.word	0x0800bda1
 800bd60:	58024400 	.word	0x58024400
 800bd64:	58024800 	.word	0x58024800
 800bd68:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd70:	3308      	adds	r3, #8
 800bd72:	2101      	movs	r1, #1
 800bd74:	4618      	mov	r0, r3
 800bd76:	f001 fdef 	bl	800d958 <RCCEx_PLL2_Config>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bd80:	e00f      	b.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd86:	3328      	adds	r3, #40	; 0x28
 800bd88:	2101      	movs	r1, #1
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f001 fe96 	bl	800dabc <RCCEx_PLL3_Config>
 800bd90:	4603      	mov	r3, r0
 800bd92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bd96:	e004      	b.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd9e:	e000      	b.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bda0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bda2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10b      	bne.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bdaa:	4bc0      	ldr	r3, [pc, #768]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bdb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdba:	4abc      	ldr	r2, [pc, #752]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdbc:	430b      	orrs	r3, r1
 800bdbe:	6553      	str	r3, [r2, #84]	; 0x54
 800bdc0:	e003      	b.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdc6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bdca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f002 0302 	and.w	r3, r2, #2
 800bdd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdda:	2300      	movs	r3, #0
 800bddc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bde0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bde4:	460b      	mov	r3, r1
 800bde6:	4313      	orrs	r3, r2
 800bde8:	d043      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bdea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdf2:	2b05      	cmp	r3, #5
 800bdf4:	d824      	bhi.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bdf6:	a201      	add	r2, pc, #4	; (adr r2, 800bdfc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfc:	0800be49 	.word	0x0800be49
 800be00:	0800be15 	.word	0x0800be15
 800be04:	0800be2b 	.word	0x0800be2b
 800be08:	0800be49 	.word	0x0800be49
 800be0c:	0800be49 	.word	0x0800be49
 800be10:	0800be49 	.word	0x0800be49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be18:	3308      	adds	r3, #8
 800be1a:	2101      	movs	r1, #1
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 fd9b 	bl	800d958 <RCCEx_PLL2_Config>
 800be22:	4603      	mov	r3, r0
 800be24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800be28:	e00f      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be2e:	3328      	adds	r3, #40	; 0x28
 800be30:	2101      	movs	r1, #1
 800be32:	4618      	mov	r0, r3
 800be34:	f001 fe42 	bl	800dabc <RCCEx_PLL3_Config>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800be3e:	e004      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be46:	e000      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800be48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10b      	bne.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800be52:	4b96      	ldr	r3, [pc, #600]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be56:	f023 0107 	bic.w	r1, r3, #7
 800be5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be62:	4a92      	ldr	r2, [pc, #584]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be64:	430b      	orrs	r3, r1
 800be66:	6553      	str	r3, [r2, #84]	; 0x54
 800be68:	e003      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800be72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7a:	f002 0304 	and.w	r3, r2, #4
 800be7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be82:	2300      	movs	r3, #0
 800be84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be88:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4313      	orrs	r3, r2
 800be90:	d043      	beq.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800be92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be9a:	2b05      	cmp	r3, #5
 800be9c:	d824      	bhi.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800be9e:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800bea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea4:	0800bef1 	.word	0x0800bef1
 800bea8:	0800bebd 	.word	0x0800bebd
 800beac:	0800bed3 	.word	0x0800bed3
 800beb0:	0800bef1 	.word	0x0800bef1
 800beb4:	0800bef1 	.word	0x0800bef1
 800beb8:	0800bef1 	.word	0x0800bef1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bec0:	3308      	adds	r3, #8
 800bec2:	2101      	movs	r1, #1
 800bec4:	4618      	mov	r0, r3
 800bec6:	f001 fd47 	bl	800d958 <RCCEx_PLL2_Config>
 800beca:	4603      	mov	r3, r0
 800becc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bed0:	e00f      	b.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bed6:	3328      	adds	r3, #40	; 0x28
 800bed8:	2101      	movs	r1, #1
 800beda:	4618      	mov	r0, r3
 800bedc:	f001 fdee 	bl	800dabc <RCCEx_PLL3_Config>
 800bee0:	4603      	mov	r3, r0
 800bee2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bee6:	e004      	b.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800beee:	e000      	b.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800bef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bef2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10b      	bne.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800befa:	4b6c      	ldr	r3, [pc, #432]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800befc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800befe:	f023 0107 	bic.w	r1, r3, #7
 800bf02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf0a:	4a68      	ldr	r2, [pc, #416]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf0c:	430b      	orrs	r3, r1
 800bf0e:	6593      	str	r3, [r2, #88]	; 0x58
 800bf10:	e003      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bf1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	f002 0320 	and.w	r3, r2, #32
 800bf26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf34:	460b      	mov	r3, r1
 800bf36:	4313      	orrs	r3, r2
 800bf38:	d055      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bf3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf46:	d033      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800bf48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf4c:	d82c      	bhi.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bf4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf52:	d02f      	beq.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800bf54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf58:	d826      	bhi.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bf5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf5e:	d02b      	beq.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800bf60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf64:	d820      	bhi.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bf66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf6a:	d012      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800bf6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf70:	d81a      	bhi.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d022      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800bf76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf7a:	d115      	bne.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf80:	3308      	adds	r3, #8
 800bf82:	2100      	movs	r1, #0
 800bf84:	4618      	mov	r0, r3
 800bf86:	f001 fce7 	bl	800d958 <RCCEx_PLL2_Config>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bf90:	e015      	b.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf96:	3328      	adds	r3, #40	; 0x28
 800bf98:	2102      	movs	r1, #2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f001 fd8e 	bl	800dabc <RCCEx_PLL3_Config>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bfa6:	e00a      	b.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bfae:	e006      	b.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bfb0:	bf00      	nop
 800bfb2:	e004      	b.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bfb4:	bf00      	nop
 800bfb6:	e002      	b.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bfb8:	bf00      	nop
 800bfba:	e000      	b.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bfbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10b      	bne.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bfc6:	4b39      	ldr	r3, [pc, #228]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bfce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfd6:	4a35      	ldr	r2, [pc, #212]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfd8:	430b      	orrs	r3, r1
 800bfda:	6553      	str	r3, [r2, #84]	; 0x54
 800bfdc:	e003      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bfe2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bfe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bff6:	2300      	movs	r3, #0
 800bff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bffc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c000:	460b      	mov	r3, r1
 800c002:	4313      	orrs	r3, r2
 800c004:	d058      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c00a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c00e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c012:	d033      	beq.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c014:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c018:	d82c      	bhi.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c01a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c01e:	d02f      	beq.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c024:	d826      	bhi.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c026:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c02a:	d02b      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c02c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c030:	d820      	bhi.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c036:	d012      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c03c:	d81a      	bhi.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d022      	beq.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c046:	d115      	bne.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c04c:	3308      	adds	r3, #8
 800c04e:	2100      	movs	r1, #0
 800c050:	4618      	mov	r0, r3
 800c052:	f001 fc81 	bl	800d958 <RCCEx_PLL2_Config>
 800c056:	4603      	mov	r3, r0
 800c058:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c05c:	e015      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c05e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c062:	3328      	adds	r3, #40	; 0x28
 800c064:	2102      	movs	r1, #2
 800c066:	4618      	mov	r0, r3
 800c068:	f001 fd28 	bl	800dabc <RCCEx_PLL3_Config>
 800c06c:	4603      	mov	r3, r0
 800c06e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c072:	e00a      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c07a:	e006      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c07c:	bf00      	nop
 800c07e:	e004      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c080:	bf00      	nop
 800c082:	e002      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c084:	bf00      	nop
 800c086:	e000      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c08a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10e      	bne.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c092:	4b06      	ldr	r3, [pc, #24]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c096:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c09e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c0a2:	4a02      	ldr	r2, [pc, #8]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0a4:	430b      	orrs	r3, r1
 800c0a6:	6593      	str	r3, [r2, #88]	; 0x58
 800c0a8:	e006      	b.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c0aa:	bf00      	nop
 800c0ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c0b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c0c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c0ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	d055      	beq.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c0d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c0e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c0e4:	d033      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c0e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c0ea:	d82c      	bhi.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c0ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0f0:	d02f      	beq.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c0f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0f6:	d826      	bhi.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c0f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c0fc:	d02b      	beq.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c0fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c102:	d820      	bhi.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c108:	d012      	beq.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c10a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c10e:	d81a      	bhi.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c110:	2b00      	cmp	r3, #0
 800c112:	d022      	beq.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c118:	d115      	bne.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c11a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c11e:	3308      	adds	r3, #8
 800c120:	2100      	movs	r1, #0
 800c122:	4618      	mov	r0, r3
 800c124:	f001 fc18 	bl	800d958 <RCCEx_PLL2_Config>
 800c128:	4603      	mov	r3, r0
 800c12a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c12e:	e015      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c134:	3328      	adds	r3, #40	; 0x28
 800c136:	2102      	movs	r1, #2
 800c138:	4618      	mov	r0, r3
 800c13a:	f001 fcbf 	bl	800dabc <RCCEx_PLL3_Config>
 800c13e:	4603      	mov	r3, r0
 800c140:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c144:	e00a      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c14c:	e006      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c14e:	bf00      	nop
 800c150:	e004      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c152:	bf00      	nop
 800c154:	e002      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c156:	bf00      	nop
 800c158:	e000      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c15a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c15c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10b      	bne.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c164:	4ba1      	ldr	r3, [pc, #644]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c168:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c16c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c170:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c174:	4a9d      	ldr	r2, [pc, #628]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c176:	430b      	orrs	r3, r1
 800c178:	6593      	str	r3, [r2, #88]	; 0x58
 800c17a:	e003      	b.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c17c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c180:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f002 0308 	and.w	r3, r2, #8
 800c190:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c194:	2300      	movs	r3, #0
 800c196:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c19a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	d01e      	beq.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c1a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1b0:	d10c      	bne.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c1b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1b6:	3328      	adds	r3, #40	; 0x28
 800c1b8:	2102      	movs	r1, #2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f001 fc7e 	bl	800dabc <RCCEx_PLL3_Config>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d002      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c1cc:	4b87      	ldr	r3, [pc, #540]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c1ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c1d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1dc:	4a83      	ldr	r2, [pc, #524]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c1de:	430b      	orrs	r3, r1
 800c1e0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c1e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ea:	f002 0310 	and.w	r3, r2, #16
 800c1ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c1f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	4313      	orrs	r3, r2
 800c200:	d01e      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c206:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c20a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c20e:	d10c      	bne.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c214:	3328      	adds	r3, #40	; 0x28
 800c216:	2102      	movs	r1, #2
 800c218:	4618      	mov	r0, r3
 800c21a:	f001 fc4f 	bl	800dabc <RCCEx_PLL3_Config>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c22a:	4b70      	ldr	r3, [pc, #448]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c22e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c236:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c23a:	4a6c      	ldr	r2, [pc, #432]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c23c:	430b      	orrs	r3, r1
 800c23e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c24c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c250:	2300      	movs	r3, #0
 800c252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c256:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c25a:	460b      	mov	r3, r1
 800c25c:	4313      	orrs	r3, r2
 800c25e:	d03e      	beq.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c264:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c26c:	d022      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c26e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c272:	d81b      	bhi.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c274:	2b00      	cmp	r3, #0
 800c276:	d003      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c27c:	d00b      	beq.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c27e:	e015      	b.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c284:	3308      	adds	r3, #8
 800c286:	2100      	movs	r1, #0
 800c288:	4618      	mov	r0, r3
 800c28a:	f001 fb65 	bl	800d958 <RCCEx_PLL2_Config>
 800c28e:	4603      	mov	r3, r0
 800c290:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c294:	e00f      	b.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c29a:	3328      	adds	r3, #40	; 0x28
 800c29c:	2102      	movs	r1, #2
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f001 fc0c 	bl	800dabc <RCCEx_PLL3_Config>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c2aa:	e004      	b.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c2b2:	e000      	b.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c2b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10b      	bne.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c2be:	4b4b      	ldr	r3, [pc, #300]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c2c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c2ce:	4a47      	ldr	r2, [pc, #284]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2d0:	430b      	orrs	r3, r1
 800c2d2:	6593      	str	r3, [r2, #88]	; 0x58
 800c2d4:	e003      	b.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c2ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	d03b      	beq.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c302:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c306:	d01f      	beq.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c308:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c30c:	d818      	bhi.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c30e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c312:	d003      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c318:	d007      	beq.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c31a:	e011      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c31c:	4b33      	ldr	r3, [pc, #204]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c320:	4a32      	ldr	r2, [pc, #200]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c328:	e00f      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c32a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c32e:	3328      	adds	r3, #40	; 0x28
 800c330:	2101      	movs	r1, #1
 800c332:	4618      	mov	r0, r3
 800c334:	f001 fbc2 	bl	800dabc <RCCEx_PLL3_Config>
 800c338:	4603      	mov	r3, r0
 800c33a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c33e:	e004      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c346:	e000      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c34a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10b      	bne.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c352:	4b26      	ldr	r3, [pc, #152]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c356:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c35a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c362:	4a22      	ldr	r2, [pc, #136]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c364:	430b      	orrs	r3, r1
 800c366:	6553      	str	r3, [r2, #84]	; 0x54
 800c368:	e003      	b.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c36a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c36e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c37e:	673b      	str	r3, [r7, #112]	; 0x70
 800c380:	2300      	movs	r3, #0
 800c382:	677b      	str	r3, [r7, #116]	; 0x74
 800c384:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c388:	460b      	mov	r3, r1
 800c38a:	4313      	orrs	r3, r2
 800c38c:	d034      	beq.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c38e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c394:	2b00      	cmp	r3, #0
 800c396:	d003      	beq.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c39c:	d007      	beq.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c39e:	e011      	b.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3a0:	4b12      	ldr	r3, [pc, #72]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a4:	4a11      	ldr	r2, [pc, #68]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c3ac:	e00e      	b.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	2102      	movs	r1, #2
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f001 face 	bl	800d958 <RCCEx_PLL2_Config>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c3c2:	e003      	b.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c3ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10d      	bne.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c3d4:	4b05      	ldr	r3, [pc, #20]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c3dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3e2:	4a02      	ldr	r2, [pc, #8]	; (800c3ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3e4:	430b      	orrs	r3, r1
 800c3e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c3e8:	e006      	b.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c3ea:	bf00      	nop
 800c3ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c3f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c404:	66bb      	str	r3, [r7, #104]	; 0x68
 800c406:	2300      	movs	r3, #0
 800c408:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c40a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c40e:	460b      	mov	r3, r1
 800c410:	4313      	orrs	r3, r2
 800c412:	d00c      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c418:	3328      	adds	r3, #40	; 0x28
 800c41a:	2102      	movs	r1, #2
 800c41c:	4618      	mov	r0, r3
 800c41e:	f001 fb4d 	bl	800dabc <RCCEx_PLL3_Config>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c42e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c43a:	663b      	str	r3, [r7, #96]	; 0x60
 800c43c:	2300      	movs	r3, #0
 800c43e:	667b      	str	r3, [r7, #100]	; 0x64
 800c440:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c444:	460b      	mov	r3, r1
 800c446:	4313      	orrs	r3, r2
 800c448:	d038      	beq.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c44a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c456:	d018      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c45c:	d811      	bhi.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c45e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c462:	d014      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c468:	d80b      	bhi.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d011      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c472:	d106      	bne.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c474:	4bc3      	ldr	r3, [pc, #780]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c478:	4ac2      	ldr	r2, [pc, #776]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c47a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c47e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c480:	e008      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c488:	e004      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c48a:	bf00      	nop
 800c48c:	e002      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c48e:	bf00      	nop
 800c490:	e000      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c492:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c494:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10b      	bne.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c49c:	4bb9      	ldr	r3, [pc, #740]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c49e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c4a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ac:	4ab5      	ldr	r2, [pc, #724]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4ae:	430b      	orrs	r3, r1
 800c4b0:	6553      	str	r3, [r2, #84]	; 0x54
 800c4b2:	e003      	b.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c4b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c4c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	d009      	beq.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c4d8:	4baa      	ldr	r3, [pc, #680]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c4e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4e6:	4aa7      	ldr	r2, [pc, #668]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4e8:	430b      	orrs	r3, r1
 800c4ea:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c4ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c4f8:	653b      	str	r3, [r7, #80]	; 0x50
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	657b      	str	r3, [r7, #84]	; 0x54
 800c4fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c502:	460b      	mov	r3, r1
 800c504:	4313      	orrs	r3, r2
 800c506:	d009      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c508:	4b9e      	ldr	r3, [pc, #632]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c50c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c516:	4a9b      	ldr	r2, [pc, #620]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c518:	430b      	orrs	r3, r1
 800c51a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c51c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c528:	64bb      	str	r3, [r7, #72]	; 0x48
 800c52a:	2300      	movs	r3, #0
 800c52c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c52e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c532:	460b      	mov	r3, r1
 800c534:	4313      	orrs	r3, r2
 800c536:	d009      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c538:	4b92      	ldr	r3, [pc, #584]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c546:	4a8f      	ldr	r2, [pc, #572]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c548:	430b      	orrs	r3, r1
 800c54a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c54c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c558:	643b      	str	r3, [r7, #64]	; 0x40
 800c55a:	2300      	movs	r3, #0
 800c55c:	647b      	str	r3, [r7, #68]	; 0x44
 800c55e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c562:	460b      	mov	r3, r1
 800c564:	4313      	orrs	r3, r2
 800c566:	d00e      	beq.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c568:	4b86      	ldr	r3, [pc, #536]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	4a85      	ldr	r2, [pc, #532]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c56e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c572:	6113      	str	r3, [r2, #16]
 800c574:	4b83      	ldr	r3, [pc, #524]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c576:	6919      	ldr	r1, [r3, #16]
 800c578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c57c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c580:	4a80      	ldr	r2, [pc, #512]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c582:	430b      	orrs	r3, r1
 800c584:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c592:	63bb      	str	r3, [r7, #56]	; 0x38
 800c594:	2300      	movs	r3, #0
 800c596:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c598:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c59c:	460b      	mov	r3, r1
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	d009      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c5a2:	4b78      	ldr	r3, [pc, #480]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5a6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c5aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b0:	4a74      	ldr	r2, [pc, #464]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5b2:	430b      	orrs	r3, r1
 800c5b4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c5b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5be:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c5c2:	633b      	str	r3, [r7, #48]	; 0x30
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c5c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	d00a      	beq.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c5d2:	4b6c      	ldr	r3, [pc, #432]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c5da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5e2:	4a68      	ldr	r2, [pc, #416]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5e4:	430b      	orrs	r3, r1
 800c5e6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c5e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	62b9      	str	r1, [r7, #40]	; 0x28
 800c5f4:	f003 0301 	and.w	r3, r3, #1
 800c5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c5fe:	460b      	mov	r3, r1
 800c600:	4313      	orrs	r3, r2
 800c602:	d011      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c608:	3308      	adds	r3, #8
 800c60a:	2100      	movs	r1, #0
 800c60c:	4618      	mov	r0, r3
 800c60e:	f001 f9a3 	bl	800d958 <RCCEx_PLL2_Config>
 800c612:	4603      	mov	r3, r0
 800c614:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d003      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c620:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c624:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	2100      	movs	r1, #0
 800c632:	6239      	str	r1, [r7, #32]
 800c634:	f003 0302 	and.w	r3, r3, #2
 800c638:	627b      	str	r3, [r7, #36]	; 0x24
 800c63a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c63e:	460b      	mov	r3, r1
 800c640:	4313      	orrs	r3, r2
 800c642:	d011      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c648:	3308      	adds	r3, #8
 800c64a:	2101      	movs	r1, #1
 800c64c:	4618      	mov	r0, r3
 800c64e:	f001 f983 	bl	800d958 <RCCEx_PLL2_Config>
 800c652:	4603      	mov	r3, r0
 800c654:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c658:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d003      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c660:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c664:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	2100      	movs	r1, #0
 800c672:	61b9      	str	r1, [r7, #24]
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	61fb      	str	r3, [r7, #28]
 800c67a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c67e:	460b      	mov	r3, r1
 800c680:	4313      	orrs	r3, r2
 800c682:	d011      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c688:	3308      	adds	r3, #8
 800c68a:	2102      	movs	r1, #2
 800c68c:	4618      	mov	r0, r3
 800c68e:	f001 f963 	bl	800d958 <RCCEx_PLL2_Config>
 800c692:	4603      	mov	r3, r0
 800c694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d003      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c6a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	6139      	str	r1, [r7, #16]
 800c6b4:	f003 0308 	and.w	r3, r3, #8
 800c6b8:	617b      	str	r3, [r7, #20]
 800c6ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	d011      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c6c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6c8:	3328      	adds	r3, #40	; 0x28
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f001 f9f5 	bl	800dabc <RCCEx_PLL3_Config>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c6d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d003      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	60b9      	str	r1, [r7, #8]
 800c6f4:	f003 0310 	and.w	r3, r3, #16
 800c6f8:	60fb      	str	r3, [r7, #12]
 800c6fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c6fe:	460b      	mov	r3, r1
 800c700:	4313      	orrs	r3, r2
 800c702:	d011      	beq.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c708:	3328      	adds	r3, #40	; 0x28
 800c70a:	2101      	movs	r1, #1
 800c70c:	4618      	mov	r0, r3
 800c70e:	f001 f9d5 	bl	800dabc <RCCEx_PLL3_Config>
 800c712:	4603      	mov	r3, r0
 800c714:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d003      	beq.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c720:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c724:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c730:	2100      	movs	r1, #0
 800c732:	6039      	str	r1, [r7, #0]
 800c734:	f003 0320 	and.w	r3, r3, #32
 800c738:	607b      	str	r3, [r7, #4]
 800c73a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c73e:	460b      	mov	r3, r1
 800c740:	4313      	orrs	r3, r2
 800c742:	d011      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c748:	3328      	adds	r3, #40	; 0x28
 800c74a:	2102      	movs	r1, #2
 800c74c:	4618      	mov	r0, r3
 800c74e:	f001 f9b5 	bl	800dabc <RCCEx_PLL3_Config>
 800c752:	4603      	mov	r3, r0
 800c754:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d003      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c760:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c764:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c768:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	e000      	b.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c774:	2301      	movs	r3, #1
}
 800c776:	4618      	mov	r0, r3
 800c778:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c77c:	46bd      	mov	sp, r7
 800c77e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c782:	bf00      	nop
 800c784:	58024400 	.word	0x58024400

0800c788 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b090      	sub	sp, #64	; 0x40
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c792:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c796:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c79a:	430b      	orrs	r3, r1
 800c79c:	f040 8094 	bne.w	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c7a0:	4b97      	ldr	r3, [pc, #604]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a4:	f003 0307 	and.w	r3, r3, #7
 800c7a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	f200 8087 	bhi.w	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c7b2:	a201      	add	r2, pc, #4	; (adr r2, 800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b8:	0800c7cd 	.word	0x0800c7cd
 800c7bc:	0800c7f5 	.word	0x0800c7f5
 800c7c0:	0800c81d 	.word	0x0800c81d
 800c7c4:	0800c8b9 	.word	0x0800c8b9
 800c7c8:	0800c845 	.word	0x0800c845
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7cc:	4b8c      	ldr	r3, [pc, #560]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7d8:	d108      	bne.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f000 ff68 	bl	800d6b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e8:	f000 bc97 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f0:	f000 bc93 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7f4:	4b82      	ldr	r3, [pc, #520]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c800:	d108      	bne.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c802:	f107 0318 	add.w	r3, r7, #24
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fcac 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c810:	f000 bc83 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c818:	f000 bc7f 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c81c:	4b78      	ldr	r3, [pc, #480]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c828:	d108      	bne.n	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c82a:	f107 030c 	add.w	r3, r7, #12
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fdec 	bl	800d40c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c838:	f000 bc6f 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c840:	f000 bc6b 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c844:	4b6e      	ldr	r3, [pc, #440]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c84c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c84e:	4b6c      	ldr	r3, [pc, #432]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 0304 	and.w	r3, r3, #4
 800c856:	2b04      	cmp	r3, #4
 800c858:	d10c      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d109      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c860:	4b67      	ldr	r3, [pc, #412]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	08db      	lsrs	r3, r3, #3
 800c866:	f003 0303 	and.w	r3, r3, #3
 800c86a:	4a66      	ldr	r2, [pc, #408]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c86c:	fa22 f303 	lsr.w	r3, r2, r3
 800c870:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c872:	e01f      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c874:	4b62      	ldr	r3, [pc, #392]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c87c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c880:	d106      	bne.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c888:	d102      	bne.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c88a:	4b5f      	ldr	r3, [pc, #380]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c88c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c88e:	e011      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c890:	4b5b      	ldr	r3, [pc, #364]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c89c:	d106      	bne.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a4:	d102      	bne.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8a6:	4b59      	ldr	r3, [pc, #356]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8aa:	e003      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8b0:	f000 bc33 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800c8b4:	f000 bc31 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8b8:	4b55      	ldr	r3, [pc, #340]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8bc:	f000 bc2d 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c4:	f000 bc29 	b.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800c8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8cc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c8d0:	430b      	orrs	r3, r1
 800c8d2:	f040 809f 	bne.w	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800c8d6:	4b4a      	ldr	r3, [pc, #296]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8da:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c8de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8e6:	d04d      	beq.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ee:	f200 8084 	bhi.w	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	2bc0      	cmp	r3, #192	; 0xc0
 800c8f6:	d07d      	beq.n	800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800c8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fa:	2bc0      	cmp	r3, #192	; 0xc0
 800c8fc:	d87d      	bhi.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c900:	2b80      	cmp	r3, #128	; 0x80
 800c902:	d02d      	beq.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800c904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c906:	2b80      	cmp	r3, #128	; 0x80
 800c908:	d877      	bhi.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d003      	beq.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c912:	2b40      	cmp	r3, #64	; 0x40
 800c914:	d012      	beq.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800c916:	e070      	b.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c918:	4b39      	ldr	r3, [pc, #228]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c924:	d107      	bne.n	800c936 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 fec2 	bl	800d6b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c934:	e3f1      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c93a:	e3ee      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c93c:	4b30      	ldr	r3, [pc, #192]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c948:	d107      	bne.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c94a:	f107 0318 	add.w	r3, r7, #24
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 fc08 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c958:	e3df      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c95e:	e3dc      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c960:	4b27      	ldr	r3, [pc, #156]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c96c:	d107      	bne.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c96e:	f107 030c 	add.w	r3, r7, #12
 800c972:	4618      	mov	r0, r3
 800c974:	f000 fd4a 	bl	800d40c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c97c:	e3cd      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c982:	e3ca      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c984:	4b1e      	ldr	r3, [pc, #120]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c98c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c98e:	4b1c      	ldr	r3, [pc, #112]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f003 0304 	and.w	r3, r3, #4
 800c996:	2b04      	cmp	r3, #4
 800c998:	d10c      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800c99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d109      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9a0:	4b17      	ldr	r3, [pc, #92]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	08db      	lsrs	r3, r3, #3
 800c9a6:	f003 0303 	and.w	r3, r3, #3
 800c9aa:	4a16      	ldr	r2, [pc, #88]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c9ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9b2:	e01e      	b.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9b4:	4b12      	ldr	r3, [pc, #72]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9c0:	d106      	bne.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800c9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9c8:	d102      	bne.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ce:	e010      	b.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9dc:	d106      	bne.n	800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800c9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9e4:	d102      	bne.n	800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9e6:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ea:	e002      	b.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9f0:	e393      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800c9f2:	e392      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9f4:	4b06      	ldr	r3, [pc, #24]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f8:	e38f      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9fe:	e38c      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ca00:	58024400 	.word	0x58024400
 800ca04:	03d09000 	.word	0x03d09000
 800ca08:	003d0900 	.word	0x003d0900
 800ca0c:	016e3600 	.word	0x016e3600
 800ca10:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800ca14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca18:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ca1c:	430b      	orrs	r3, r1
 800ca1e:	f040 809c 	bne.w	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800ca22:	4b9e      	ldr	r3, [pc, #632]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ca24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca26:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800ca2a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ca2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca32:	d054      	beq.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800ca34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca3a:	f200 808b 	bhi.w	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ca44:	f000 8083 	beq.w	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800ca48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ca4e:	f200 8081 	bhi.w	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca58:	d02f      	beq.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca60:	d878      	bhi.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ca62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d004      	beq.n	800ca72 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca6e:	d012      	beq.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800ca70:	e070      	b.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca72:	4b8a      	ldr	r3, [pc, #552]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca7e:	d107      	bne.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca84:	4618      	mov	r0, r3
 800ca86:	f000 fe15 	bl	800d6b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca8e:	e344      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca94:	e341      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca96:	4b81      	ldr	r3, [pc, #516]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800caa2:	d107      	bne.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caa4:	f107 0318 	add.w	r3, r7, #24
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 fb5b 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cab2:	e332      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cab4:	2300      	movs	r3, #0
 800cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cab8:	e32f      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800caba:	4b78      	ldr	r3, [pc, #480]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cac6:	d107      	bne.n	800cad8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cac8:	f107 030c 	add.w	r3, r7, #12
 800cacc:	4618      	mov	r0, r3
 800cace:	f000 fc9d 	bl	800d40c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cad6:	e320      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cad8:	2300      	movs	r3, #0
 800cada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cadc:	e31d      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cade:	4b6f      	ldr	r3, [pc, #444]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cae6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cae8:	4b6c      	ldr	r3, [pc, #432]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f003 0304 	and.w	r3, r3, #4
 800caf0:	2b04      	cmp	r3, #4
 800caf2:	d10c      	bne.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800caf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d109      	bne.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cafa:	4b68      	ldr	r3, [pc, #416]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	08db      	lsrs	r3, r3, #3
 800cb00:	f003 0303 	and.w	r3, r3, #3
 800cb04:	4a66      	ldr	r2, [pc, #408]	; (800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800cb06:	fa22 f303 	lsr.w	r3, r2, r3
 800cb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb0c:	e01e      	b.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb0e:	4b63      	ldr	r3, [pc, #396]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb1a:	d106      	bne.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800cb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb22:	d102      	bne.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb24:	4b5f      	ldr	r3, [pc, #380]	; (800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800cb26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb28:	e010      	b.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb2a:	4b5c      	ldr	r3, [pc, #368]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb36:	d106      	bne.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb3e:	d102      	bne.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb40:	4b59      	ldr	r3, [pc, #356]	; (800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800cb42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb44:	e002      	b.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800cb4a:	e2e6      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cb4c:	e2e5      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb4e:	4b57      	ldr	r3, [pc, #348]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb52:	e2e2      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800cb54:	2300      	movs	r3, #0
 800cb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb58:	e2df      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cb5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb5e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cb62:	430b      	orrs	r3, r1
 800cb64:	f040 80a7 	bne.w	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cb68:	4b4c      	ldr	r3, [pc, #304]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cb6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cb70:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb78:	d055      	beq.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb80:	f200 8096 	bhi.w	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800cb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb8a:	f000 8084 	beq.w	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb94:	f200 808c 	bhi.w	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb9e:	d030      	beq.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cba6:	f200 8083 	bhi.w	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d004      	beq.n	800cbba <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbb6:	d012      	beq.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800cbb8:	e07a      	b.n	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbba:	4b38      	ldr	r3, [pc, #224]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbc6:	d107      	bne.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 fd71 	bl	800d6b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd6:	e2a0      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbdc:	e29d      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbde:	4b2f      	ldr	r3, [pc, #188]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbea:	d107      	bne.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbec:	f107 0318 	add.w	r3, r7, #24
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 fab7 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbfa:	e28e      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc00:	e28b      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc02:	4b26      	ldr	r3, [pc, #152]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc0e:	d107      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc10:	f107 030c 	add.w	r3, r7, #12
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 fbf9 	bl	800d40c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc1e:	e27c      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc24:	e279      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc26:	4b1d      	ldr	r3, [pc, #116]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc2e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc30:	4b1a      	ldr	r3, [pc, #104]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b04      	cmp	r3, #4
 800cc3a:	d10c      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d109      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc42:	4b16      	ldr	r3, [pc, #88]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	08db      	lsrs	r3, r3, #3
 800cc48:	f003 0303 	and.w	r3, r3, #3
 800cc4c:	4a14      	ldr	r2, [pc, #80]	; (800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800cc4e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc54:	e01e      	b.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc56:	4b11      	ldr	r3, [pc, #68]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc62:	d106      	bne.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800cc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc6a:	d102      	bne.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc6c:	4b0d      	ldr	r3, [pc, #52]	; (800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800cc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc70:	e010      	b.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc72:	4b0a      	ldr	r3, [pc, #40]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc7e:	d106      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc86:	d102      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc88:	4b07      	ldr	r3, [pc, #28]	; (800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800cc8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc8c:	e002      	b.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc92:	e242      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cc94:	e241      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc96:	4b05      	ldr	r3, [pc, #20]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc9a:	e23e      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cc9c:	58024400 	.word	0x58024400
 800cca0:	03d09000 	.word	0x03d09000
 800cca4:	003d0900 	.word	0x003d0900
 800cca8:	016e3600 	.word	0x016e3600
 800ccac:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccb4:	e231      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ccb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccba:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ccbe:	430b      	orrs	r3, r1
 800ccc0:	f040 8085 	bne.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ccc4:	4b9c      	ldr	r3, [pc, #624]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ccc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccc8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cccc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ccce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccd4:	d06b      	beq.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800ccd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccdc:	d874      	bhi.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ccde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cce4:	d056      	beq.n	800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccec:	d86c      	bhi.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ccee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccf4:	d03b      	beq.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccfc:	d864      	bhi.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ccfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd04:	d021      	beq.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800cd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd0c:	d85c      	bhi.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d004      	beq.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd1a:	d004      	beq.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800cd1c:	e054      	b.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cd1e:	f7fe fb49 	bl	800b3b4 <HAL_RCC_GetPCLK1Freq>
 800cd22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd24:	e1f9      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd26:	4b84      	ldr	r3, [pc, #528]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd32:	d107      	bne.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd34:	f107 0318 	add.w	r3, r7, #24
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 fa13 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd42:	e1ea      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd48:	e1e7      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd4a:	4b7b      	ldr	r3, [pc, #492]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd56:	d107      	bne.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd58:	f107 030c 	add.w	r3, r7, #12
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 fb55 	bl	800d40c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd66:	e1d8      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd6c:	e1d5      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd6e:	4b72      	ldr	r3, [pc, #456]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 0304 	and.w	r3, r3, #4
 800cd76:	2b04      	cmp	r3, #4
 800cd78:	d109      	bne.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd7a:	4b6f      	ldr	r3, [pc, #444]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	08db      	lsrs	r3, r3, #3
 800cd80:	f003 0303 	and.w	r3, r3, #3
 800cd84:	4a6d      	ldr	r2, [pc, #436]	; (800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cd86:	fa22 f303 	lsr.w	r3, r2, r3
 800cd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd8c:	e1c5      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd92:	e1c2      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cd94:	4b68      	ldr	r3, [pc, #416]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cda0:	d102      	bne.n	800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800cda2:	4b67      	ldr	r3, [pc, #412]	; (800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cda4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda6:	e1b8      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdac:	e1b5      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdae:	4b62      	ldr	r3, [pc, #392]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdba:	d102      	bne.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800cdbc:	4b61      	ldr	r3, [pc, #388]	; (800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800cdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdc0:	e1ab      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc6:	e1a8      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdcc:	e1a5      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cdce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdd2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cdd6:	430b      	orrs	r3, r1
 800cdd8:	d173      	bne.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cdda:	4b57      	ldr	r3, [pc, #348]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cde2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdea:	d02f      	beq.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdf2:	d863      	bhi.n	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d004      	beq.n	800ce04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce00:	d012      	beq.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800ce02:	e05b      	b.n	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce04:	4b4c      	ldr	r3, [pc, #304]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce10:	d107      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce12:	f107 0318 	add.w	r3, r7, #24
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 f9a4 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce20:	e17b      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce26:	e178      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce28:	4b43      	ldr	r3, [pc, #268]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce34:	d107      	bne.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce36:	f107 030c 	add.w	r3, r7, #12
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 fae6 	bl	800d40c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce44:	e169      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce4a:	e166      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce4c:	4b3a      	ldr	r3, [pc, #232]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce56:	4b38      	ldr	r3, [pc, #224]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f003 0304 	and.w	r3, r3, #4
 800ce5e:	2b04      	cmp	r3, #4
 800ce60:	d10c      	bne.n	800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800ce62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d109      	bne.n	800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce68:	4b33      	ldr	r3, [pc, #204]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	08db      	lsrs	r3, r3, #3
 800ce6e:	f003 0303 	and.w	r3, r3, #3
 800ce72:	4a32      	ldr	r2, [pc, #200]	; (800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ce74:	fa22 f303 	lsr.w	r3, r2, r3
 800ce78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce7a:	e01e      	b.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce7c:	4b2e      	ldr	r3, [pc, #184]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce88:	d106      	bne.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800ce8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce90:	d102      	bne.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce92:	4b2b      	ldr	r3, [pc, #172]	; (800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ce94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce96:	e010      	b.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce98:	4b27      	ldr	r3, [pc, #156]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cea4:	d106      	bne.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ceac:	d102      	bne.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ceae:	4b25      	ldr	r3, [pc, #148]	; (800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800ceb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceb2:	e002      	b.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ceb8:	e12f      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ceba:	e12e      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec0:	e12b      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cec6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ceca:	430b      	orrs	r3, r1
 800cecc:	d13c      	bne.n	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cece:	4b1a      	ldr	r3, [pc, #104]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ced0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ced6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ced8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d004      	beq.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800cede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cee4:	d012      	beq.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800cee6:	e023      	b.n	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cee8:	4b13      	ldr	r3, [pc, #76]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cef4:	d107      	bne.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cefa:	4618      	mov	r0, r3
 800cefc:	f000 fbda 	bl	800d6b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf04:	e109      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf0a:	e106      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf18:	d107      	bne.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf1a:	f107 0318 	add.w	r3, r7, #24
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 f920 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cf24:	6a3b      	ldr	r3, [r7, #32]
 800cf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf28:	e0f7      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf2e:	e0f4      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf34:	e0f1      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cf36:	bf00      	nop
 800cf38:	58024400 	.word	0x58024400
 800cf3c:	03d09000 	.word	0x03d09000
 800cf40:	003d0900 	.word	0x003d0900
 800cf44:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cf48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf4c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cf50:	430b      	orrs	r3, r1
 800cf52:	f040 8091 	bne.w	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cf56:	4b73      	ldr	r3, [pc, #460]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cf58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf5a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cf5e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800cf66:	f000 8081 	beq.w	800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800cf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800cf70:	d87f      	bhi.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800cf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf78:	d06b      	beq.n	800d052 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800cf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf80:	d877      	bhi.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf88:	d056      	beq.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800cf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf90:	d86f      	bhi.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800cf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf98:	d03b      	beq.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800cf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cfa0:	d867      	bhi.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfa8:	d021      	beq.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfb0:	d85f      	bhi.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d004      	beq.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfbe:	d004      	beq.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800cfc0:	e057      	b.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cfc2:	f000 f8b9 	bl	800d138 <HAL_RCCEx_GetD3PCLK1Freq>
 800cfc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfc8:	e0a7      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfca:	4b56      	ldr	r3, [pc, #344]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfd6:	d107      	bne.n	800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfd8:	f107 0318 	add.w	r3, r7, #24
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f000 f8c1 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfe6:	e098      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfec:	e095      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfee:	4b4d      	ldr	r3, [pc, #308]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cffa:	d107      	bne.n	800d00c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cffc:	f107 030c 	add.w	r3, r7, #12
 800d000:	4618      	mov	r0, r3
 800d002:	f000 fa03 	bl	800d40c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d00a:	e086      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d00c:	2300      	movs	r3, #0
 800d00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d010:	e083      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d012:	4b44      	ldr	r3, [pc, #272]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 0304 	and.w	r3, r3, #4
 800d01a:	2b04      	cmp	r3, #4
 800d01c:	d109      	bne.n	800d032 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d01e:	4b41      	ldr	r3, [pc, #260]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	08db      	lsrs	r3, r3, #3
 800d024:	f003 0303 	and.w	r3, r3, #3
 800d028:	4a3f      	ldr	r2, [pc, #252]	; (800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d02a:	fa22 f303 	lsr.w	r3, r2, r3
 800d02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d030:	e073      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d036:	e070      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d038:	4b3a      	ldr	r3, [pc, #232]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d044:	d102      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800d046:	4b39      	ldr	r3, [pc, #228]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800d048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d04a:	e066      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d050:	e063      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d052:	4b34      	ldr	r3, [pc, #208]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d05a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d05e:	d102      	bne.n	800d066 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800d060:	4b33      	ldr	r3, [pc, #204]	; (800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d064:	e059      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d06a:	e056      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d06c:	4b31      	ldr	r3, [pc, #196]	; (800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800d06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d070:	e053      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d076:	e050      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d07c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d080:	430b      	orrs	r3, r1
 800d082:	d148      	bne.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d084:	4b27      	ldr	r3, [pc, #156]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d08c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d094:	d02a      	beq.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d09c:	d838      	bhi.n	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d004      	beq.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800d0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0aa:	d00d      	beq.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800d0ac:	e030      	b.n	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d0ae:	4b1d      	ldr	r3, [pc, #116]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0ba:	d102      	bne.n	800d0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800d0bc:	4b1c      	ldr	r3, [pc, #112]	; (800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0c0:	e02b      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0c6:	e028      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0c8:	4b16      	ldr	r3, [pc, #88]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0d4:	d107      	bne.n	800d0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 faea 	bl	800d6b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0e4:	e019      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0ea:	e016      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0ec:	4b0d      	ldr	r3, [pc, #52]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0f8:	d107      	bne.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0fa:	f107 0318 	add.w	r3, r7, #24
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 f830 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d108:	e007      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d10e:	e004      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d114:	e001      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800d116:	2300      	movs	r3, #0
 800d118:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3740      	adds	r7, #64	; 0x40
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	58024400 	.word	0x58024400
 800d128:	03d09000 	.word	0x03d09000
 800d12c:	003d0900 	.word	0x003d0900
 800d130:	016e3600 	.word	0x016e3600
 800d134:	00bb8000 	.word	0x00bb8000

0800d138 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800d13c:	f7fe f90a 	bl	800b354 <HAL_RCC_GetHCLKFreq>
 800d140:	4602      	mov	r2, r0
 800d142:	4b06      	ldr	r3, [pc, #24]	; (800d15c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d144:	6a1b      	ldr	r3, [r3, #32]
 800d146:	091b      	lsrs	r3, r3, #4
 800d148:	f003 0307 	and.w	r3, r3, #7
 800d14c:	4904      	ldr	r1, [pc, #16]	; (800d160 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d14e:	5ccb      	ldrb	r3, [r1, r3]
 800d150:	f003 031f 	and.w	r3, r3, #31
 800d154:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d158:	4618      	mov	r0, r3
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	58024400 	.word	0x58024400
 800d160:	08011268 	.word	0x08011268

0800d164 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d164:	b480      	push	{r7}
 800d166:	b089      	sub	sp, #36	; 0x24
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d16c:	4ba1      	ldr	r3, [pc, #644]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d170:	f003 0303 	and.w	r3, r3, #3
 800d174:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d176:	4b9f      	ldr	r3, [pc, #636]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17a:	0b1b      	lsrs	r3, r3, #12
 800d17c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d180:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d182:	4b9c      	ldr	r3, [pc, #624]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d186:	091b      	lsrs	r3, r3, #4
 800d188:	f003 0301 	and.w	r3, r3, #1
 800d18c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d18e:	4b99      	ldr	r3, [pc, #612]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d192:	08db      	lsrs	r3, r3, #3
 800d194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d198:	693a      	ldr	r2, [r7, #16]
 800d19a:	fb02 f303 	mul.w	r3, r2, r3
 800d19e:	ee07 3a90 	vmov	s15, r3
 800d1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 8111 	beq.w	800d3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	f000 8083 	beq.w	800d2c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	f200 80a1 	bhi.w	800d304 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d003      	beq.n	800d1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d056      	beq.n	800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d1ce:	e099      	b.n	800d304 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1d0:	4b88      	ldr	r3, [pc, #544]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f003 0320 	and.w	r3, r3, #32
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d02d      	beq.n	800d238 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1dc:	4b85      	ldr	r3, [pc, #532]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	08db      	lsrs	r3, r3, #3
 800d1e2:	f003 0303 	and.w	r3, r3, #3
 800d1e6:	4a84      	ldr	r2, [pc, #528]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d1e8:	fa22 f303 	lsr.w	r3, r2, r3
 800d1ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	ee07 3a90 	vmov	s15, r3
 800d1f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	ee07 3a90 	vmov	s15, r3
 800d1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d206:	4b7b      	ldr	r3, [pc, #492]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d20e:	ee07 3a90 	vmov	s15, r3
 800d212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d216:	ed97 6a03 	vldr	s12, [r7, #12]
 800d21a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d21e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d22a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d232:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d236:	e087      	b.n	800d348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	ee07 3a90 	vmov	s15, r3
 800d23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d242:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d400 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d24a:	4b6a      	ldr	r3, [pc, #424]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d24e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d252:	ee07 3a90 	vmov	s15, r3
 800d256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d25a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d25e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d26a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d26e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d272:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d27a:	e065      	b.n	800d348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	ee07 3a90 	vmov	s15, r3
 800d282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d286:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d28a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d28e:	4b59      	ldr	r3, [pc, #356]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d296:	ee07 3a90 	vmov	s15, r3
 800d29a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d29e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2be:	e043      	b.n	800d348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	ee07 3a90 	vmov	s15, r3
 800d2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2d2:	4b48      	ldr	r3, [pc, #288]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2da:	ee07 3a90 	vmov	s15, r3
 800d2de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d302:	e021      	b.n	800d348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	ee07 3a90 	vmov	s15, r3
 800d30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d30e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d316:	4b37      	ldr	r3, [pc, #220]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d31e:	ee07 3a90 	vmov	s15, r3
 800d322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d326:	ed97 6a03 	vldr	s12, [r7, #12]
 800d32a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d346:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d348:	4b2a      	ldr	r3, [pc, #168]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34c:	0a5b      	lsrs	r3, r3, #9
 800d34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d352:	ee07 3a90 	vmov	s15, r3
 800d356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d35a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d35e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d362:	edd7 6a07 	vldr	s13, [r7, #28]
 800d366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d36a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d36e:	ee17 2a90 	vmov	r2, s15
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d376:	4b1f      	ldr	r3, [pc, #124]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d37a:	0c1b      	lsrs	r3, r3, #16
 800d37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d380:	ee07 3a90 	vmov	s15, r3
 800d384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d38c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d390:	edd7 6a07 	vldr	s13, [r7, #28]
 800d394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d39c:	ee17 2a90 	vmov	r2, s15
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d3a4:	4b13      	ldr	r3, [pc, #76]	; (800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a8:	0e1b      	lsrs	r3, r3, #24
 800d3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ae:	ee07 3a90 	vmov	s15, r3
 800d3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3be:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3ca:	ee17 2a90 	vmov	r2, s15
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d3d2:	e008      	b.n	800d3e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	609a      	str	r2, [r3, #8]
}
 800d3e6:	bf00      	nop
 800d3e8:	3724      	adds	r7, #36	; 0x24
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	58024400 	.word	0x58024400
 800d3f8:	03d09000 	.word	0x03d09000
 800d3fc:	46000000 	.word	0x46000000
 800d400:	4c742400 	.word	0x4c742400
 800d404:	4a742400 	.word	0x4a742400
 800d408:	4bb71b00 	.word	0x4bb71b00

0800d40c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b089      	sub	sp, #36	; 0x24
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d414:	4ba1      	ldr	r3, [pc, #644]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d418:	f003 0303 	and.w	r3, r3, #3
 800d41c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d41e:	4b9f      	ldr	r3, [pc, #636]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d422:	0d1b      	lsrs	r3, r3, #20
 800d424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d428:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d42a:	4b9c      	ldr	r3, [pc, #624]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42e:	0a1b      	lsrs	r3, r3, #8
 800d430:	f003 0301 	and.w	r3, r3, #1
 800d434:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d436:	4b99      	ldr	r3, [pc, #612]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d43a:	08db      	lsrs	r3, r3, #3
 800d43c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	fb02 f303 	mul.w	r3, r2, r3
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d44e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2b00      	cmp	r3, #0
 800d456:	f000 8111 	beq.w	800d67c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	f000 8083 	beq.w	800d568 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	2b02      	cmp	r3, #2
 800d466:	f200 80a1 	bhi.w	800d5ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d003      	beq.n	800d478 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d056      	beq.n	800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d476:	e099      	b.n	800d5ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d478:	4b88      	ldr	r3, [pc, #544]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f003 0320 	and.w	r3, r3, #32
 800d480:	2b00      	cmp	r3, #0
 800d482:	d02d      	beq.n	800d4e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d484:	4b85      	ldr	r3, [pc, #532]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	08db      	lsrs	r3, r3, #3
 800d48a:	f003 0303 	and.w	r3, r3, #3
 800d48e:	4a84      	ldr	r2, [pc, #528]	; (800d6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d490:	fa22 f303 	lsr.w	r3, r2, r3
 800d494:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	ee07 3a90 	vmov	s15, r3
 800d49c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	ee07 3a90 	vmov	s15, r3
 800d4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4ae:	4b7b      	ldr	r3, [pc, #492]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4b6:	ee07 3a90 	vmov	s15, r3
 800d4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d4de:	e087      	b.n	800d5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	ee07 3a90 	vmov	s15, r3
 800d4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d4ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4f2:	4b6a      	ldr	r3, [pc, #424]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4fa:	ee07 3a90 	vmov	s15, r3
 800d4fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d502:	ed97 6a03 	vldr	s12, [r7, #12]
 800d506:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d50a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d50e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d51a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d51e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d522:	e065      	b.n	800d5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	ee07 3a90 	vmov	s15, r3
 800d52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d52e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d6ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d536:	4b59      	ldr	r3, [pc, #356]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d53e:	ee07 3a90 	vmov	s15, r3
 800d542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d546:	ed97 6a03 	vldr	s12, [r7, #12]
 800d54a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d54e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d566:	e043      	b.n	800d5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	ee07 3a90 	vmov	s15, r3
 800d56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d572:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d57a:	4b48      	ldr	r3, [pc, #288]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d582:	ee07 3a90 	vmov	s15, r3
 800d586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d58a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d58e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d59a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d59e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5aa:	e021      	b.n	800d5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	ee07 3a90 	vmov	s15, r3
 800d5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d6ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5be:	4b37      	ldr	r3, [pc, #220]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5c6:	ee07 3a90 	vmov	s15, r3
 800d5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d5f0:	4b2a      	ldr	r3, [pc, #168]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f4:	0a5b      	lsrs	r3, r3, #9
 800d5f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d60a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d60e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d616:	ee17 2a90 	vmov	r2, s15
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d61e:	4b1f      	ldr	r3, [pc, #124]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d622:	0c1b      	lsrs	r3, r3, #16
 800d624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d628:	ee07 3a90 	vmov	s15, r3
 800d62c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d634:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d638:	edd7 6a07 	vldr	s13, [r7, #28]
 800d63c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d644:	ee17 2a90 	vmov	r2, s15
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d64c:	4b13      	ldr	r3, [pc, #76]	; (800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d650:	0e1b      	lsrs	r3, r3, #24
 800d652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d656:	ee07 3a90 	vmov	s15, r3
 800d65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d65e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d662:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d666:	edd7 6a07 	vldr	s13, [r7, #28]
 800d66a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d66e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d672:	ee17 2a90 	vmov	r2, s15
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d67a:	e008      	b.n	800d68e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	609a      	str	r2, [r3, #8]
}
 800d68e:	bf00      	nop
 800d690:	3724      	adds	r7, #36	; 0x24
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	58024400 	.word	0x58024400
 800d6a0:	03d09000 	.word	0x03d09000
 800d6a4:	46000000 	.word	0x46000000
 800d6a8:	4c742400 	.word	0x4c742400
 800d6ac:	4a742400 	.word	0x4a742400
 800d6b0:	4bb71b00 	.word	0x4bb71b00

0800d6b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b089      	sub	sp, #36	; 0x24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6bc:	4ba0      	ldr	r3, [pc, #640]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c0:	f003 0303 	and.w	r3, r3, #3
 800d6c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d6c6:	4b9e      	ldr	r3, [pc, #632]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ca:	091b      	lsrs	r3, r3, #4
 800d6cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d6d2:	4b9b      	ldr	r3, [pc, #620]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d6:	f003 0301 	and.w	r3, r3, #1
 800d6da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d6dc:	4b98      	ldr	r3, [pc, #608]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e0:	08db      	lsrs	r3, r3, #3
 800d6e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	fb02 f303 	mul.w	r3, r2, r3
 800d6ec:	ee07 3a90 	vmov	s15, r3
 800d6f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f000 8111 	beq.w	800d922 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	2b02      	cmp	r3, #2
 800d704:	f000 8083 	beq.w	800d80e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	f200 80a1 	bhi.w	800d852 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d003      	beq.n	800d71e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d056      	beq.n	800d7ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d71c:	e099      	b.n	800d852 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d71e:	4b88      	ldr	r3, [pc, #544]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f003 0320 	and.w	r3, r3, #32
 800d726:	2b00      	cmp	r3, #0
 800d728:	d02d      	beq.n	800d786 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d72a:	4b85      	ldr	r3, [pc, #532]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	08db      	lsrs	r3, r3, #3
 800d730:	f003 0303 	and.w	r3, r3, #3
 800d734:	4a83      	ldr	r2, [pc, #524]	; (800d944 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d736:	fa22 f303 	lsr.w	r3, r2, r3
 800d73a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	ee07 3a90 	vmov	s15, r3
 800d742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	ee07 3a90 	vmov	s15, r3
 800d74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d754:	4b7a      	ldr	r3, [pc, #488]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d75c:	ee07 3a90 	vmov	s15, r3
 800d760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d764:	ed97 6a03 	vldr	s12, [r7, #12]
 800d768:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d948 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d76c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d774:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d77c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d780:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d784:	e087      	b.n	800d896 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	ee07 3a90 	vmov	s15, r3
 800d78c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d790:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d94c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d798:	4b69      	ldr	r3, [pc, #420]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d79c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7a0:	ee07 3a90 	vmov	s15, r3
 800d7a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d948 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7c8:	e065      	b.n	800d896 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	ee07 3a90 	vmov	s15, r3
 800d7d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d950 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d7d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7dc:	4b58      	ldr	r3, [pc, #352]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7e4:	ee07 3a90 	vmov	s15, r3
 800d7e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d948 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d804:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d808:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d80c:	e043      	b.n	800d896 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	ee07 3a90 	vmov	s15, r3
 800d814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d818:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d81c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d820:	4b47      	ldr	r3, [pc, #284]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d828:	ee07 3a90 	vmov	s15, r3
 800d82c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d830:	ed97 6a03 	vldr	s12, [r7, #12]
 800d834:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d948 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d83c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d84c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d850:	e021      	b.n	800d896 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	ee07 3a90 	vmov	s15, r3
 800d858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d85c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d94c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d864:	4b36      	ldr	r3, [pc, #216]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d86c:	ee07 3a90 	vmov	s15, r3
 800d870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d874:	ed97 6a03 	vldr	s12, [r7, #12]
 800d878:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d948 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d87c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d88c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d890:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d894:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d896:	4b2a      	ldr	r3, [pc, #168]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d89a:	0a5b      	lsrs	r3, r3, #9
 800d89c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8a0:	ee07 3a90 	vmov	s15, r3
 800d8a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8bc:	ee17 2a90 	vmov	r2, s15
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d8c4:	4b1e      	ldr	r3, [pc, #120]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c8:	0c1b      	lsrs	r3, r3, #16
 800d8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ce:	ee07 3a90 	vmov	s15, r3
 800d8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8de:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8ea:	ee17 2a90 	vmov	r2, s15
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d8f2:	4b13      	ldr	r3, [pc, #76]	; (800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f6:	0e1b      	lsrs	r3, r3, #24
 800d8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8fc:	ee07 3a90 	vmov	s15, r3
 800d900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d90c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d918:	ee17 2a90 	vmov	r2, s15
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d920:	e008      	b.n	800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	609a      	str	r2, [r3, #8]
}
 800d934:	bf00      	nop
 800d936:	3724      	adds	r7, #36	; 0x24
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	58024400 	.word	0x58024400
 800d944:	03d09000 	.word	0x03d09000
 800d948:	46000000 	.word	0x46000000
 800d94c:	4c742400 	.word	0x4c742400
 800d950:	4a742400 	.word	0x4a742400
 800d954:	4bb71b00 	.word	0x4bb71b00

0800d958 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d966:	4b53      	ldr	r3, [pc, #332]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800d968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d96a:	f003 0303 	and.w	r3, r3, #3
 800d96e:	2b03      	cmp	r3, #3
 800d970:	d101      	bne.n	800d976 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	e099      	b.n	800daaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d976:	4b4f      	ldr	r3, [pc, #316]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a4e      	ldr	r2, [pc, #312]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800d97c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d982:	f7f7 fa07 	bl	8004d94 <HAL_GetTick>
 800d986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d988:	e008      	b.n	800d99c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d98a:	f7f7 fa03 	bl	8004d94 <HAL_GetTick>
 800d98e:	4602      	mov	r2, r0
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	2b02      	cmp	r3, #2
 800d996:	d901      	bls.n	800d99c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d998:	2303      	movs	r3, #3
 800d99a:	e086      	b.n	800daaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d99c:	4b45      	ldr	r3, [pc, #276]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1f0      	bne.n	800d98a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d9a8:	4b42      	ldr	r3, [pc, #264]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800d9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	031b      	lsls	r3, r3, #12
 800d9b6:	493f      	ldr	r1, [pc, #252]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	628b      	str	r3, [r1, #40]	; 0x28
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	025b      	lsls	r3, r3, #9
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	041b      	lsls	r3, r3, #16
 800d9da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9de:	431a      	orrs	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	691b      	ldr	r3, [r3, #16]
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	061b      	lsls	r3, r3, #24
 800d9e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9ec:	4931      	ldr	r1, [pc, #196]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d9f2:	4b30      	ldr	r3, [pc, #192]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800d9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	492d      	ldr	r1, [pc, #180]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da00:	4313      	orrs	r3, r2
 800da02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800da04:	4b2b      	ldr	r3, [pc, #172]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da08:	f023 0220 	bic.w	r2, r3, #32
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	4928      	ldr	r1, [pc, #160]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da12:	4313      	orrs	r3, r2
 800da14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800da16:	4b27      	ldr	r3, [pc, #156]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1a:	4a26      	ldr	r2, [pc, #152]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da1c:	f023 0310 	bic.w	r3, r3, #16
 800da20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800da22:	4b24      	ldr	r3, [pc, #144]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da26:	4b24      	ldr	r3, [pc, #144]	; (800dab8 <RCCEx_PLL2_Config+0x160>)
 800da28:	4013      	ands	r3, r2
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	69d2      	ldr	r2, [r2, #28]
 800da2e:	00d2      	lsls	r2, r2, #3
 800da30:	4920      	ldr	r1, [pc, #128]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da32:	4313      	orrs	r3, r2
 800da34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800da36:	4b1f      	ldr	r3, [pc, #124]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3a:	4a1e      	ldr	r2, [pc, #120]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da3c:	f043 0310 	orr.w	r3, r3, #16
 800da40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d106      	bne.n	800da56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800da48:	4b1a      	ldr	r3, [pc, #104]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4c:	4a19      	ldr	r2, [pc, #100]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da54:	e00f      	b.n	800da76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d106      	bne.n	800da6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800da5c:	4b15      	ldr	r3, [pc, #84]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da60:	4a14      	ldr	r2, [pc, #80]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da68:	e005      	b.n	800da76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800da6a:	4b12      	ldr	r3, [pc, #72]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6e:	4a11      	ldr	r2, [pc, #68]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800da76:	4b0f      	ldr	r3, [pc, #60]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a0e      	ldr	r2, [pc, #56]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800da80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da82:	f7f7 f987 	bl	8004d94 <HAL_GetTick>
 800da86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da88:	e008      	b.n	800da9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da8a:	f7f7 f983 	bl	8004d94 <HAL_GetTick>
 800da8e:	4602      	mov	r2, r0
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	1ad3      	subs	r3, r2, r3
 800da94:	2b02      	cmp	r3, #2
 800da96:	d901      	bls.n	800da9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da98:	2303      	movs	r3, #3
 800da9a:	e006      	b.n	800daaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da9c:	4b05      	ldr	r3, [pc, #20]	; (800dab4 <RCCEx_PLL2_Config+0x15c>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d0f0      	beq.n	800da8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800daa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	58024400 	.word	0x58024400
 800dab8:	ffff0007 	.word	0xffff0007

0800dabc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dac6:	2300      	movs	r3, #0
 800dac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800daca:	4b53      	ldr	r3, [pc, #332]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dace:	f003 0303 	and.w	r3, r3, #3
 800dad2:	2b03      	cmp	r3, #3
 800dad4:	d101      	bne.n	800dada <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	e099      	b.n	800dc0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dada:	4b4f      	ldr	r3, [pc, #316]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a4e      	ldr	r2, [pc, #312]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dae6:	f7f7 f955 	bl	8004d94 <HAL_GetTick>
 800daea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800daec:	e008      	b.n	800db00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800daee:	f7f7 f951 	bl	8004d94 <HAL_GetTick>
 800daf2:	4602      	mov	r2, r0
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	1ad3      	subs	r3, r2, r3
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d901      	bls.n	800db00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dafc:	2303      	movs	r3, #3
 800dafe:	e086      	b.n	800dc0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800db00:	4b45      	ldr	r3, [pc, #276]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1f0      	bne.n	800daee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800db0c:	4b42      	ldr	r3, [pc, #264]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	051b      	lsls	r3, r3, #20
 800db1a:	493f      	ldr	r1, [pc, #252]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db1c:	4313      	orrs	r3, r2
 800db1e:	628b      	str	r3, [r1, #40]	; 0x28
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	3b01      	subs	r3, #1
 800db26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	3b01      	subs	r3, #1
 800db30:	025b      	lsls	r3, r3, #9
 800db32:	b29b      	uxth	r3, r3
 800db34:	431a      	orrs	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	3b01      	subs	r3, #1
 800db3c:	041b      	lsls	r3, r3, #16
 800db3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800db42:	431a      	orrs	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	691b      	ldr	r3, [r3, #16]
 800db48:	3b01      	subs	r3, #1
 800db4a:	061b      	lsls	r3, r3, #24
 800db4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800db50:	4931      	ldr	r1, [pc, #196]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db52:	4313      	orrs	r3, r2
 800db54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800db56:	4b30      	ldr	r3, [pc, #192]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	492d      	ldr	r1, [pc, #180]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db64:	4313      	orrs	r3, r2
 800db66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800db68:	4b2b      	ldr	r3, [pc, #172]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	699b      	ldr	r3, [r3, #24]
 800db74:	4928      	ldr	r1, [pc, #160]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db76:	4313      	orrs	r3, r2
 800db78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800db7a:	4b27      	ldr	r3, [pc, #156]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db7e:	4a26      	ldr	r2, [pc, #152]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800db86:	4b24      	ldr	r3, [pc, #144]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db8a:	4b24      	ldr	r3, [pc, #144]	; (800dc1c <RCCEx_PLL3_Config+0x160>)
 800db8c:	4013      	ands	r3, r2
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	69d2      	ldr	r2, [r2, #28]
 800db92:	00d2      	lsls	r2, r2, #3
 800db94:	4920      	ldr	r1, [pc, #128]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db96:	4313      	orrs	r3, r2
 800db98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800db9a:	4b1f      	ldr	r3, [pc, #124]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800db9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9e:	4a1e      	ldr	r2, [pc, #120]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dba4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d106      	bne.n	800dbba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dbac:	4b1a      	ldr	r3, [pc, #104]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb0:	4a19      	ldr	r2, [pc, #100]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dbb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dbb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dbb8:	e00f      	b.n	800dbda <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d106      	bne.n	800dbce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dbc0:	4b15      	ldr	r3, [pc, #84]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc4:	4a14      	ldr	r2, [pc, #80]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dbc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dbca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dbcc:	e005      	b.n	800dbda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dbce:	4b12      	ldr	r3, [pc, #72]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd2:	4a11      	ldr	r2, [pc, #68]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dbd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dbd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dbda:	4b0f      	ldr	r3, [pc, #60]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	4a0e      	ldr	r2, [pc, #56]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dbe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbe6:	f7f7 f8d5 	bl	8004d94 <HAL_GetTick>
 800dbea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dbec:	e008      	b.n	800dc00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dbee:	f7f7 f8d1 	bl	8004d94 <HAL_GetTick>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	2b02      	cmp	r3, #2
 800dbfa:	d901      	bls.n	800dc00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dbfc:	2303      	movs	r3, #3
 800dbfe:	e006      	b.n	800dc0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dc00:	4b05      	ldr	r3, [pc, #20]	; (800dc18 <RCCEx_PLL3_Config+0x15c>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d0f0      	beq.n	800dbee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	58024400 	.word	0x58024400
 800dc1c:	ffff0007 	.word	0xffff0007

0800dc20 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d074      	beq.n	800dd1c <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d106      	bne.n	800dc4c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f870 	bl	800dd2c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2202      	movs	r2, #2
 800dc50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	f003 0310 	and.w	r3, r3, #16
 800dc5e:	2b10      	cmp	r3, #16
 800dc60:	d053      	beq.n	800dd0a <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	22ca      	movs	r2, #202	; 0xca
 800dc68:	625a      	str	r2, [r3, #36]	; 0x24
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2253      	movs	r2, #83	; 0x53
 800dc70:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f888 	bl	800dd88 <RTC_EnterInitMode>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d124      	bne.n	800dccc <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	6999      	ldr	r1, [r3, #24]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	4b26      	ldr	r3, [pc, #152]	; (800dd28 <HAL_RTC_Init+0x108>)
 800dc8e:	400b      	ands	r3, r1
 800dc90:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6999      	ldr	r1, [r3, #24]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	691b      	ldr	r3, [r3, #16]
 800dca0:	431a      	orrs	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	699b      	ldr	r3, [r3, #24]
 800dca6:	431a      	orrs	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	430a      	orrs	r2, r1
 800dcae:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	0419      	lsls	r1, r3, #16
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	68da      	ldr	r2, [r3, #12]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	430a      	orrs	r2, r1
 800dcc0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 f896 	bl	800ddf4 <RTC_ExitInitMode>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800dccc:	7bfb      	ldrb	r3, [r7, #15]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d116      	bne.n	800dd00 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	699a      	ldr	r2, [r3, #24]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800dce0:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	6999      	ldr	r1, [r3, #24]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a1a      	ldr	r2, [r3, #32]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	69db      	ldr	r3, [r3, #28]
 800dcf0:	431a      	orrs	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	695b      	ldr	r3, [r3, #20]
 800dcf6:	431a      	orrs	r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	430a      	orrs	r2, r1
 800dcfe:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	22ff      	movs	r2, #255	; 0xff
 800dd06:	625a      	str	r2, [r3, #36]	; 0x24
 800dd08:	e001      	b.n	800dd0e <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d103      	bne.n	800dd1c <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800dd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	fb8fffbf 	.word	0xfb8fffbf

0800dd2c <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a0d      	ldr	r2, [pc, #52]	; (800dd84 <HAL_RTC_WaitForSynchro+0x44>)
 800dd4e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dd50:	f7f7 f820 	bl	8004d94 <HAL_GetTick>
 800dd54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800dd56:	e009      	b.n	800dd6c <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dd58:	f7f7 f81c 	bl	8004d94 <HAL_GetTick>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd66:	d901      	bls.n	800dd6c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	e007      	b.n	800dd7c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	f003 0320 	and.w	r3, r3, #32
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d0ee      	beq.n	800dd58 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	0001005f 	.word	0x0001005f

0800dd88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d123      	bne.n	800ddea <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	68da      	ldr	r2, [r3, #12]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ddb0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ddb2:	f7f6 ffef 	bl	8004d94 <HAL_GetTick>
 800ddb6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ddb8:	e00d      	b.n	800ddd6 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ddba:	f7f6 ffeb 	bl	8004d94 <HAL_GetTick>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ddc8:	d905      	bls.n	800ddd6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800ddca:	2303      	movs	r3, #3
 800ddcc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2203      	movs	r2, #3
 800ddd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d102      	bne.n	800ddea <RTC_EnterInitMode+0x62>
 800dde4:	7bfb      	ldrb	r3, [r7, #15]
 800dde6:	2b03      	cmp	r3, #3
 800dde8:	d1e7      	bne.n	800ddba <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800ddea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800de00:	4b1a      	ldr	r3, [pc, #104]	; (800de6c <RTC_ExitInitMode+0x78>)
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	4a19      	ldr	r2, [pc, #100]	; (800de6c <RTC_ExitInitMode+0x78>)
 800de06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de0a:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800de0c:	4b17      	ldr	r3, [pc, #92]	; (800de6c <RTC_ExitInitMode+0x78>)
 800de0e:	699b      	ldr	r3, [r3, #24]
 800de10:	f003 0320 	and.w	r3, r3, #32
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10c      	bne.n	800de32 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7ff ff91 	bl	800dd40 <HAL_RTC_WaitForSynchro>
 800de1e:	4603      	mov	r3, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	d01e      	beq.n	800de62 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2203      	movs	r2, #3
 800de28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800de2c:	2303      	movs	r3, #3
 800de2e:	73fb      	strb	r3, [r7, #15]
 800de30:	e017      	b.n	800de62 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800de32:	4b0e      	ldr	r3, [pc, #56]	; (800de6c <RTC_ExitInitMode+0x78>)
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	4a0d      	ldr	r2, [pc, #52]	; (800de6c <RTC_ExitInitMode+0x78>)
 800de38:	f023 0320 	bic.w	r3, r3, #32
 800de3c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7ff ff7e 	bl	800dd40 <HAL_RTC_WaitForSynchro>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d005      	beq.n	800de56 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2203      	movs	r2, #3
 800de4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800de52:	2303      	movs	r3, #3
 800de54:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800de56:	4b05      	ldr	r3, [pc, #20]	; (800de6c <RTC_ExitInitMode+0x78>)
 800de58:	699b      	ldr	r3, [r3, #24]
 800de5a:	4a04      	ldr	r2, [pc, #16]	; (800de6c <RTC_ExitInitMode+0x78>)
 800de5c:	f043 0320 	orr.w	r3, r3, #32
 800de60:	6193      	str	r3, [r2, #24]
  }

  return status;
 800de62:	7bfb      	ldrb	r3, [r7, #15]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	58004000 	.word	0x58004000

0800de70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b08a      	sub	sp, #40	; 0x28
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d101      	bne.n	800de82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800de7e:	2301      	movs	r3, #1
 800de80:	e075      	b.n	800df6e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d105      	bne.n	800de9a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f90b 	bl	800e0b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2204      	movs	r2, #4
 800de9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 f868 	bl	800df78 <HAL_SD_InitCard>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800deae:	2301      	movs	r3, #1
 800deb0:	e05d      	b.n	800df6e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800deb2:	f107 0308 	add.w	r3, r7, #8
 800deb6:	4619      	mov	r1, r3
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 faa7 	bl	800e40c <HAL_SD_GetCardStatus>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d001      	beq.n	800dec8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	e052      	b.n	800df6e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800dec8:	7e3b      	ldrb	r3, [r7, #24]
 800deca:	b2db      	uxtb	r3, r3
 800decc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800dece:	7e7b      	ldrb	r3, [r7, #25]
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d10a      	bne.n	800def2 <HAL_SD_Init+0x82>
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d102      	bne.n	800dee8 <HAL_SD_Init+0x78>
 800dee2:	6a3b      	ldr	r3, [r7, #32]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d004      	beq.n	800def2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800deee:	659a      	str	r2, [r3, #88]	; 0x58
 800def0:	e00b      	b.n	800df0a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def6:	2b01      	cmp	r3, #1
 800def8:	d104      	bne.n	800df04 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df00:	659a      	str	r2, [r3, #88]	; 0x58
 800df02:	e002      	b.n	800df0a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	4619      	mov	r1, r3
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fb39 	bl	800e588 <HAL_SD_ConfigWideBusOperation>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d001      	beq.n	800df20 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800df1c:	2301      	movs	r3, #1
 800df1e:	e026      	b.n	800df6e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800df20:	f7f6 ff38 	bl	8004d94 <HAL_GetTick>
 800df24:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800df26:	e011      	b.n	800df4c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800df28:	f7f6 ff34 	bl	8004d94 <HAL_GetTick>
 800df2c:	4602      	mov	r2, r0
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	1ad3      	subs	r3, r2, r3
 800df32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df36:	d109      	bne.n	800df4c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800df3e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2201      	movs	r2, #1
 800df44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800df48:	2303      	movs	r3, #3
 800df4a:	e010      	b.n	800df6e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 fc2d 	bl	800e7ac <HAL_SD_GetCardState>
 800df52:	4603      	mov	r3, r0
 800df54:	2b04      	cmp	r3, #4
 800df56:	d1e7      	bne.n	800df28 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2200      	movs	r2, #0
 800df62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2201      	movs	r2, #1
 800df68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3728      	adds	r7, #40	; 0x28
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
	...

0800df78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df78:	b590      	push	{r4, r7, lr}
 800df7a:	b08d      	sub	sp, #52	; 0x34
 800df7c:	af02      	add	r7, sp, #8
 800df7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800df80:	2300      	movs	r3, #0
 800df82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800df84:	2300      	movs	r3, #0
 800df86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800df88:	2300      	movs	r3, #0
 800df8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800df8c:	2300      	movs	r3, #0
 800df8e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800df90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800df94:	f04f 0100 	mov.w	r1, #0
 800df98:	f7fe fbf6 	bl	800c788 <HAL_RCCEx_GetPeriphCLKFreq>
 800df9c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800df9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d109      	bne.n	800dfb8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dfb2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e070      	b.n	800e09a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800dfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfba:	0a1b      	lsrs	r3, r3, #8
 800dfbc:	4a39      	ldr	r2, [pc, #228]	; (800e0a4 <HAL_SD_InitCard+0x12c>)
 800dfbe:	fba2 2303 	umull	r2, r3, r2, r3
 800dfc2:	091b      	lsrs	r3, r3, #4
 800dfc4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681c      	ldr	r4, [r3, #0]
 800dfca:	466a      	mov	r2, sp
 800dfcc:	f107 0318 	add.w	r3, r7, #24
 800dfd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dfd4:	e882 0003 	stmia.w	r2, {r0, r1}
 800dfd8:	f107 030c 	add.w	r3, r7, #12
 800dfdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f002 fbf8 	bl	80107d4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f002 fc2a 	bl	8010842 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d005      	beq.n	800e000 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	005b      	lsls	r3, r3, #1
 800dff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dffa:	fbb2 f3f3 	udiv	r3, r2, r3
 800dffe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e002:	2b00      	cmp	r3, #0
 800e004:	d007      	beq.n	800e016 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e006:	4a28      	ldr	r2, [pc, #160]	; (800e0a8 <HAL_SD_InitCard+0x130>)
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e00e:	3301      	adds	r3, #1
 800e010:	4618      	mov	r0, r3
 800e012:	f7f6 fecb 	bl	8004dac <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 fcb6 	bl	800e988 <SD_PowerON>
 800e01c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e01e:	6a3b      	ldr	r3, [r7, #32]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d00b      	beq.n	800e03c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e030:	6a3b      	ldr	r3, [r7, #32]
 800e032:	431a      	orrs	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e038:	2301      	movs	r3, #1
 800e03a:	e02e      	b.n	800e09a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 fbd5 	bl	800e7ec <SD_InitCard>
 800e042:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e044:	6a3b      	ldr	r3, [r7, #32]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d00b      	beq.n	800e062 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e056:	6a3b      	ldr	r3, [r7, #32]
 800e058:	431a      	orrs	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e05e:	2301      	movs	r3, #1
 800e060:	e01b      	b.n	800e09a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e06a:	4618      	mov	r0, r3
 800e06c:	f002 fc7e 	bl	801096c <SDMMC_CmdBlockLength>
 800e070:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e072:	6a3b      	ldr	r3, [r7, #32]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00f      	beq.n	800e098 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a0b      	ldr	r2, [pc, #44]	; (800e0ac <HAL_SD_InitCard+0x134>)
 800e07e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	431a      	orrs	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e094:	2301      	movs	r3, #1
 800e096:	e000      	b.n	800e09a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e098:	2300      	movs	r3, #0
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	372c      	adds	r7, #44	; 0x2c
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd90      	pop	{r4, r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	014f8b59 	.word	0x014f8b59
 800e0a8:	00012110 	.word	0x00012110
 800e0ac:	1fe00fff 	.word	0x1fe00fff

0800e0b0 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800e0b8:	bf00      	nop
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0d2:	0f9b      	lsrs	r3, r3, #30
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0de:	0e9b      	lsrs	r3, r3, #26
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	f003 030f 	and.w	r3, r3, #15
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0f0:	0e1b      	lsrs	r3, r3, #24
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	f003 0303 	and.w	r3, r3, #3
 800e0f8:	b2da      	uxtb	r2, r3
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e102:	0c1b      	lsrs	r3, r3, #16
 800e104:	b2da      	uxtb	r2, r3
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e10e:	0a1b      	lsrs	r3, r3, #8
 800e110:	b2da      	uxtb	r2, r3
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e124:	0d1b      	lsrs	r3, r3, #20
 800e126:	b29a      	uxth	r2, r3
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e130:	0c1b      	lsrs	r3, r3, #16
 800e132:	b2db      	uxtb	r3, r3
 800e134:	f003 030f 	and.w	r3, r3, #15
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e142:	0bdb      	lsrs	r3, r3, #15
 800e144:	b2db      	uxtb	r3, r3
 800e146:	f003 0301 	and.w	r3, r3, #1
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e154:	0b9b      	lsrs	r3, r3, #14
 800e156:	b2db      	uxtb	r3, r3
 800e158:	f003 0301 	and.w	r3, r3, #1
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e166:	0b5b      	lsrs	r3, r3, #13
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	f003 0301 	and.w	r3, r3, #1
 800e16e:	b2da      	uxtb	r2, r3
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e178:	0b1b      	lsrs	r3, r3, #12
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	b2da      	uxtb	r2, r3
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	2200      	movs	r2, #0
 800e18a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e190:	2b00      	cmp	r3, #0
 800e192:	d163      	bne.n	800e25c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e198:	009a      	lsls	r2, r3, #2
 800e19a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e19e:	4013      	ands	r3, r2
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e1a4:	0f92      	lsrs	r2, r2, #30
 800e1a6:	431a      	orrs	r2, r3
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1b0:	0edb      	lsrs	r3, r3, #27
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	f003 0307 	and.w	r3, r3, #7
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1c2:	0e1b      	lsrs	r3, r3, #24
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	f003 0307 	and.w	r3, r3, #7
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1d4:	0d5b      	lsrs	r3, r3, #21
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	f003 0307 	and.w	r3, r3, #7
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1e6:	0c9b      	lsrs	r3, r3, #18
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	f003 0307 	and.w	r3, r3, #7
 800e1ee:	b2da      	uxtb	r2, r3
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1f8:	0bdb      	lsrs	r3, r3, #15
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	f003 0307 	and.w	r3, r3, #7
 800e200:	b2da      	uxtb	r2, r3
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	691b      	ldr	r3, [r3, #16]
 800e20a:	1c5a      	adds	r2, r3, #1
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	7e1b      	ldrb	r3, [r3, #24]
 800e214:	b2db      	uxtb	r3, r3
 800e216:	f003 0307 	and.w	r3, r3, #7
 800e21a:	3302      	adds	r3, #2
 800e21c:	2201      	movs	r2, #1
 800e21e:	fa02 f303 	lsl.w	r3, r2, r3
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e226:	fb03 f202 	mul.w	r2, r3, r2
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	7a1b      	ldrb	r3, [r3, #8]
 800e232:	b2db      	uxtb	r3, r3
 800e234:	f003 030f 	and.w	r3, r3, #15
 800e238:	2201      	movs	r2, #1
 800e23a:	409a      	lsls	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e248:	0a52      	lsrs	r2, r2, #9
 800e24a:	fb03 f202 	mul.w	r2, r3, r2
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e258:	655a      	str	r2, [r3, #84]	; 0x54
 800e25a:	e031      	b.n	800e2c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e260:	2b01      	cmp	r3, #1
 800e262:	d11d      	bne.n	800e2a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e268:	041b      	lsls	r3, r3, #16
 800e26a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e272:	0c1b      	lsrs	r3, r3, #16
 800e274:	431a      	orrs	r2, r3
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	3301      	adds	r3, #1
 800e280:	029a      	lsls	r2, r3, #10
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e294:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	655a      	str	r2, [r3, #84]	; 0x54
 800e29e:	e00f      	b.n	800e2c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a58      	ldr	r2, [pc, #352]	; (800e408 <HAL_SD_GetCardCSD+0x344>)
 800e2a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	e09d      	b.n	800e3fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2c4:	0b9b      	lsrs	r3, r3, #14
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	f003 0301 	and.w	r3, r3, #1
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2d6:	09db      	lsrs	r3, r3, #7
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2de:	b2da      	uxtb	r2, r3
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2ee:	b2da      	uxtb	r2, r3
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2f8:	0fdb      	lsrs	r3, r3, #31
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e304:	0f5b      	lsrs	r3, r3, #29
 800e306:	b2db      	uxtb	r3, r3
 800e308:	f003 0303 	and.w	r3, r3, #3
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e316:	0e9b      	lsrs	r3, r3, #26
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	f003 0307 	and.w	r3, r3, #7
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e328:	0d9b      	lsrs	r3, r3, #22
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	f003 030f 	and.w	r3, r3, #15
 800e330:	b2da      	uxtb	r2, r3
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e33a:	0d5b      	lsrs	r3, r3, #21
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	f003 0301 	and.w	r3, r3, #1
 800e342:	b2da      	uxtb	r2, r3
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	2200      	movs	r2, #0
 800e34e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e356:	0c1b      	lsrs	r3, r3, #16
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	f003 0301 	and.w	r3, r3, #1
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e36a:	0bdb      	lsrs	r3, r3, #15
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	b2da      	uxtb	r2, r3
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e37e:	0b9b      	lsrs	r3, r3, #14
 800e380:	b2db      	uxtb	r3, r3
 800e382:	f003 0301 	and.w	r3, r3, #1
 800e386:	b2da      	uxtb	r2, r3
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e392:	0b5b      	lsrs	r3, r3, #13
 800e394:	b2db      	uxtb	r3, r3
 800e396:	f003 0301 	and.w	r3, r3, #1
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3a6:	0b1b      	lsrs	r3, r3, #12
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	f003 0301 	and.w	r3, r3, #1
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3ba:	0a9b      	lsrs	r3, r3, #10
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	f003 0303 	and.w	r3, r3, #3
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3ce:	0a1b      	lsrs	r3, r3, #8
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	f003 0303 	and.w	r3, r3, #3
 800e3d6:	b2da      	uxtb	r2, r3
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3e2:	085b      	lsrs	r3, r3, #1
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr
 800e408:	1fe00fff 	.word	0x1fe00fff

0800e40c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b094      	sub	sp, #80	; 0x50
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e416:	2300      	movs	r3, #0
 800e418:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e422:	b2db      	uxtb	r3, r3
 800e424:	2b03      	cmp	r3, #3
 800e426:	d101      	bne.n	800e42c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e428:	2301      	movs	r3, #1
 800e42a:	e0a7      	b.n	800e57c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e42c:	f107 0308 	add.w	r3, r7, #8
 800e430:	4619      	mov	r1, r3
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 fb36 	bl	800eaa4 <SD_SendSDStatus>
 800e438:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d011      	beq.n	800e464 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a4f      	ldr	r2, [pc, #316]	; (800e584 <HAL_SD_GetCardStatus+0x178>)
 800e446:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e44c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e44e:	431a      	orrs	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2201      	movs	r2, #1
 800e458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e462:	e070      	b.n	800e546 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	099b      	lsrs	r3, r3, #6
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	f003 0303 	and.w	r3, r3, #3
 800e46e:	b2da      	uxtb	r2, r3
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	095b      	lsrs	r3, r3, #5
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	f003 0301 	and.w	r3, r3, #1
 800e47e:	b2da      	uxtb	r2, r3
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	0a1b      	lsrs	r3, r3, #8
 800e488:	b29b      	uxth	r3, r3
 800e48a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e48e:	b29a      	uxth	r2, r3
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	0e1b      	lsrs	r3, r3, #24
 800e494:	b29b      	uxth	r3, r3
 800e496:	4313      	orrs	r3, r2
 800e498:	b29a      	uxth	r2, r3
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	061a      	lsls	r2, r3, #24
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	021b      	lsls	r3, r3, #8
 800e4a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e4aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	0a1b      	lsrs	r3, r3, #8
 800e4b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e4b4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	0e1b      	lsrs	r3, r3, #24
 800e4ba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	0a1b      	lsrs	r3, r3, #8
 800e4cc:	b2da      	uxtb	r2, r3
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	0d1b      	lsrs	r3, r3, #20
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	f003 030f 	and.w	r3, r3, #15
 800e4dc:	b2da      	uxtb	r2, r3
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	0c1b      	lsrs	r3, r3, #16
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e4ec:	b29a      	uxth	r2, r3
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	b29a      	uxth	r2, r3
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	0a9b      	lsrs	r3, r3, #10
 800e502:	b2db      	uxtb	r3, r3
 800e504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	0a1b      	lsrs	r3, r3, #8
 800e512:	b2db      	uxtb	r3, r3
 800e514:	f003 0303 	and.w	r3, r3, #3
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	091b      	lsrs	r3, r3, #4
 800e522:	b2db      	uxtb	r3, r3
 800e524:	f003 030f 	and.w	r3, r3, #15
 800e528:	b2da      	uxtb	r2, r3
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	b2db      	uxtb	r3, r3
 800e532:	f003 030f 	and.w	r3, r3, #15
 800e536:	b2da      	uxtb	r2, r3
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	0e1b      	lsrs	r3, r3, #24
 800e540:	b2da      	uxtb	r2, r3
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e54e:	4618      	mov	r0, r3
 800e550:	f002 fa0c 	bl	801096c <SDMMC_CmdBlockLength>
 800e554:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00d      	beq.n	800e578 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4a08      	ldr	r2, [pc, #32]	; (800e584 <HAL_SD_GetCardStatus+0x178>)
 800e562:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e568:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e572:	2301      	movs	r3, #1
 800e574:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e578:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3750      	adds	r7, #80	; 0x50
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	1fe00fff 	.word	0x1fe00fff

0800e588 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e588:	b590      	push	{r4, r7, lr}
 800e58a:	b08d      	sub	sp, #52	; 0x34
 800e58c:	af02      	add	r7, sp, #8
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2203      	movs	r2, #3
 800e59c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a4:	2b03      	cmp	r3, #3
 800e5a6:	d02e      	beq.n	800e606 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5ae:	d106      	bne.n	800e5be <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	635a      	str	r2, [r3, #52]	; 0x34
 800e5bc:	e029      	b.n	800e612 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5c4:	d10a      	bne.n	800e5dc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 fb64 	bl	800ec94 <SD_WideBus_Enable>
 800e5cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5d2:	6a3b      	ldr	r3, [r7, #32]
 800e5d4:	431a      	orrs	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	635a      	str	r2, [r3, #52]	; 0x34
 800e5da:	e01a      	b.n	800e612 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d10a      	bne.n	800e5f8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fba1 	bl	800ed2a <SD_WideBus_Disable>
 800e5e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5ee:	6a3b      	ldr	r3, [r7, #32]
 800e5f0:	431a      	orrs	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	635a      	str	r2, [r3, #52]	; 0x34
 800e5f6:	e00c      	b.n	800e612 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	635a      	str	r2, [r3, #52]	; 0x34
 800e604:	e005      	b.n	800e612 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e60a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e616:	2b00      	cmp	r3, #0
 800e618:	d007      	beq.n	800e62a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a5f      	ldr	r2, [pc, #380]	; (800e79c <HAL_SD_ConfigWideBusOperation+0x214>)
 800e620:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e628:	e096      	b.n	800e758 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e62a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e62e:	f04f 0100 	mov.w	r1, #0
 800e632:	f7fe f8a9 	bl	800c788 <HAL_RCCEx_GetPeriphCLKFreq>
 800e636:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	f000 8083 	beq.w	800e746 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	691b      	ldr	r3, [r3, #16]
 800e654:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	695a      	ldr	r2, [r3, #20]
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	4950      	ldr	r1, [pc, #320]	; (800e7a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e65e:	fba1 1303 	umull	r1, r3, r1, r3
 800e662:	0e1b      	lsrs	r3, r3, #24
 800e664:	429a      	cmp	r2, r3
 800e666:	d303      	bcc.n	800e670 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	695b      	ldr	r3, [r3, #20]
 800e66c:	61bb      	str	r3, [r7, #24]
 800e66e:	e05a      	b.n	800e726 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e678:	d103      	bne.n	800e682 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	695b      	ldr	r3, [r3, #20]
 800e67e:	61bb      	str	r3, [r7, #24]
 800e680:	e051      	b.n	800e726 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e68a:	d126      	bne.n	800e6da <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	695b      	ldr	r3, [r3, #20]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d10e      	bne.n	800e6b2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	4a43      	ldr	r2, [pc, #268]	; (800e7a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d906      	bls.n	800e6aa <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	4a40      	ldr	r2, [pc, #256]	; (800e7a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e6a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e6a4:	0e5b      	lsrs	r3, r3, #25
 800e6a6:	61bb      	str	r3, [r7, #24]
 800e6a8:	e03d      	b.n	800e726 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	695b      	ldr	r3, [r3, #20]
 800e6ae:	61bb      	str	r3, [r7, #24]
 800e6b0:	e039      	b.n	800e726 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	695b      	ldr	r3, [r3, #20]
 800e6b6:	005b      	lsls	r3, r3, #1
 800e6b8:	69fa      	ldr	r2, [r7, #28]
 800e6ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6be:	4a39      	ldr	r2, [pc, #228]	; (800e7a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d906      	bls.n	800e6d2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	4a36      	ldr	r2, [pc, #216]	; (800e7a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e6c8:	fba2 2303 	umull	r2, r3, r2, r3
 800e6cc:	0e5b      	lsrs	r3, r3, #25
 800e6ce:	61bb      	str	r3, [r7, #24]
 800e6d0:	e029      	b.n	800e726 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	695b      	ldr	r3, [r3, #20]
 800e6d6:	61bb      	str	r3, [r7, #24]
 800e6d8:	e025      	b.n	800e726 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	695b      	ldr	r3, [r3, #20]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10e      	bne.n	800e700 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	4a30      	ldr	r2, [pc, #192]	; (800e7a8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d906      	bls.n	800e6f8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	4a2c      	ldr	r2, [pc, #176]	; (800e7a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e6f2:	0e1b      	lsrs	r3, r3, #24
 800e6f4:	61bb      	str	r3, [r7, #24]
 800e6f6:	e016      	b.n	800e726 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	695b      	ldr	r3, [r3, #20]
 800e6fc:	61bb      	str	r3, [r7, #24]
 800e6fe:	e012      	b.n	800e726 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	695b      	ldr	r3, [r3, #20]
 800e704:	005b      	lsls	r3, r3, #1
 800e706:	69fa      	ldr	r2, [r7, #28]
 800e708:	fbb2 f3f3 	udiv	r3, r2, r3
 800e70c:	4a26      	ldr	r2, [pc, #152]	; (800e7a8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d906      	bls.n	800e720 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	4a22      	ldr	r2, [pc, #136]	; (800e7a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e716:	fba2 2303 	umull	r2, r3, r2, r3
 800e71a:	0e1b      	lsrs	r3, r3, #24
 800e71c:	61bb      	str	r3, [r7, #24]
 800e71e:	e002      	b.n	800e726 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	695b      	ldr	r3, [r3, #20]
 800e724:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681c      	ldr	r4, [r3, #0]
 800e72a:	466a      	mov	r2, sp
 800e72c:	f107 0314 	add.w	r3, r7, #20
 800e730:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e734:	e882 0003 	stmia.w	r2, {r0, r1}
 800e738:	f107 0308 	add.w	r3, r7, #8
 800e73c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e73e:	4620      	mov	r0, r4
 800e740:	f002 f848 	bl	80107d4 <SDMMC_Init>
 800e744:	e008      	b.n	800e758 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e74a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e760:	4618      	mov	r0, r3
 800e762:	f002 f903 	bl	801096c <SDMMC_CmdBlockLength>
 800e766:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e768:	6a3b      	ldr	r3, [r7, #32]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00c      	beq.n	800e788 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4a0a      	ldr	r2, [pc, #40]	; (800e79c <HAL_SD_ConfigWideBusOperation+0x214>)
 800e774:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e77a:	6a3b      	ldr	r3, [r7, #32]
 800e77c:	431a      	orrs	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e782:	2301      	movs	r3, #1
 800e784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2201      	movs	r2, #1
 800e78c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e794:	4618      	mov	r0, r3
 800e796:	372c      	adds	r7, #44	; 0x2c
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd90      	pop	{r4, r7, pc}
 800e79c:	1fe00fff 	.word	0x1fe00fff
 800e7a0:	55e63b89 	.word	0x55e63b89
 800e7a4:	02faf080 	.word	0x02faf080
 800e7a8:	017d7840 	.word	0x017d7840

0800e7ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e7b8:	f107 030c 	add.w	r3, r7, #12
 800e7bc:	4619      	mov	r1, r3
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fa40 	bl	800ec44 <SD_SendStatus>
 800e7c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d005      	beq.n	800e7d8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	431a      	orrs	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	0a5b      	lsrs	r3, r3, #9
 800e7dc:	f003 030f 	and.w	r3, r3, #15
 800e7e0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e7e2:	693b      	ldr	r3, [r7, #16]
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3718      	adds	r7, #24
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b090      	sub	sp, #64	; 0x40
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e7f8:	f7f6 facc 	bl	8004d94 <HAL_GetTick>
 800e7fc:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4618      	mov	r0, r3
 800e804:	f002 f82e 	bl	8010864 <SDMMC_GetPowerState>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d102      	bne.n	800e814 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e80e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e812:	e0b5      	b.n	800e980 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e818:	2b03      	cmp	r3, #3
 800e81a:	d02e      	beq.n	800e87a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4618      	mov	r0, r3
 800e822:	f002 f9af 	bl	8010b84 <SDMMC_CmdSendCID>
 800e826:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <SD_InitCard+0x46>
    {
      return errorstate;
 800e82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e830:	e0a6      	b.n	800e980 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2100      	movs	r1, #0
 800e838:	4618      	mov	r0, r3
 800e83a:	f002 f858 	bl	80108ee <SDMMC_GetResponse>
 800e83e:	4602      	mov	r2, r0
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2104      	movs	r1, #4
 800e84a:	4618      	mov	r0, r3
 800e84c:	f002 f84f 	bl	80108ee <SDMMC_GetResponse>
 800e850:	4602      	mov	r2, r0
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2108      	movs	r1, #8
 800e85c:	4618      	mov	r0, r3
 800e85e:	f002 f846 	bl	80108ee <SDMMC_GetResponse>
 800e862:	4602      	mov	r2, r0
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	210c      	movs	r1, #12
 800e86e:	4618      	mov	r0, r3
 800e870:	f002 f83d 	bl	80108ee <SDMMC_GetResponse>
 800e874:	4602      	mov	r2, r0
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87e:	2b03      	cmp	r3, #3
 800e880:	d01d      	beq.n	800e8be <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e882:	e019      	b.n	800e8b8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f107 020a 	add.w	r2, r7, #10
 800e88c:	4611      	mov	r1, r2
 800e88e:	4618      	mov	r0, r3
 800e890:	f002 f9b7 	bl	8010c02 <SDMMC_CmdSetRelAdd>
 800e894:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d001      	beq.n	800e8a0 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89e:	e06f      	b.n	800e980 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e8a0:	f7f6 fa78 	bl	8004d94 <HAL_GetTick>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a8:	1ad3      	subs	r3, r2, r3
 800e8aa:	f241 3287 	movw	r2, #4999	; 0x1387
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d902      	bls.n	800e8b8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e8b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8b6:	e063      	b.n	800e980 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e8b8:	897b      	ldrh	r3, [r7, #10]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d0e2      	beq.n	800e884 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d036      	beq.n	800e934 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e8c6:	897b      	ldrh	r3, [r7, #10]
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8d6:	041b      	lsls	r3, r3, #16
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f002 f971 	bl	8010bc2 <SDMMC_CmdSendCSD>
 800e8e0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <SD_InitCard+0x100>
    {
      return errorstate;
 800e8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ea:	e049      	b.n	800e980 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f001 fffb 	bl	80108ee <SDMMC_GetResponse>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2104      	movs	r1, #4
 800e904:	4618      	mov	r0, r3
 800e906:	f001 fff2 	bl	80108ee <SDMMC_GetResponse>
 800e90a:	4602      	mov	r2, r0
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2108      	movs	r1, #8
 800e916:	4618      	mov	r0, r3
 800e918:	f001 ffe9 	bl	80108ee <SDMMC_GetResponse>
 800e91c:	4602      	mov	r2, r0
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	210c      	movs	r1, #12
 800e928:	4618      	mov	r0, r3
 800e92a:	f001 ffe0 	bl	80108ee <SDMMC_GetResponse>
 800e92e:	4602      	mov	r2, r0
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	2104      	movs	r1, #4
 800e93a:	4618      	mov	r0, r3
 800e93c:	f001 ffd7 	bl	80108ee <SDMMC_GetResponse>
 800e940:	4603      	mov	r3, r0
 800e942:	0d1a      	lsrs	r2, r3, #20
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e948:	f107 030c 	add.w	r3, r7, #12
 800e94c:	4619      	mov	r1, r3
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7ff fbb8 	bl	800e0c4 <HAL_SD_GetCardCSD>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d002      	beq.n	800e960 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e95a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e95e:	e00f      	b.n	800e980 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e968:	041b      	lsls	r3, r3, #16
 800e96a:	4619      	mov	r1, r3
 800e96c:	4610      	mov	r0, r2
 800e96e:	f002 f820 	bl	80109b2 <SDMMC_CmdSelDesel>
 800e972:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <SD_InitCard+0x192>
  {
    return errorstate;
 800e97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97c:	e000      	b.n	800e980 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3740      	adds	r7, #64	; 0x40
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e990:	2300      	movs	r3, #0
 800e992:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e994:	2300      	movs	r3, #0
 800e996:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e998:	2300      	movs	r3, #0
 800e99a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f002 f829 	bl	80109f8 <SDMMC_CmdGoIdleState>
 800e9a6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	e072      	b.n	800ea98 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f002 f83c 	bl	8010a34 <SDMMC_CmdOperCond>
 800e9bc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e9c4:	d10d      	bne.n	800e9e2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f002 f811 	bl	80109f8 <SDMMC_CmdGoIdleState>
 800e9d6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d004      	beq.n	800e9e8 <SD_PowerON+0x60>
    {
      return errorstate;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	e05a      	b.n	800ea98 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d137      	bne.n	800ea60 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f002 f83c 	bl	8010a74 <SDMMC_CmdAppCommand>
 800e9fc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d02d      	beq.n	800ea60 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea08:	e046      	b.n	800ea98 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2100      	movs	r1, #0
 800ea10:	4618      	mov	r0, r3
 800ea12:	f002 f82f 	bl	8010a74 <SDMMC_CmdAppCommand>
 800ea16:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d001      	beq.n	800ea22 <SD_PowerON+0x9a>
    {
      return errorstate;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	e03a      	b.n	800ea98 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	491e      	ldr	r1, [pc, #120]	; (800eaa0 <SD_PowerON+0x118>)
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f002 f846 	bl	8010aba <SDMMC_CmdAppOperCommand>
 800ea2e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d002      	beq.n	800ea3c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea3a:	e02d      	b.n	800ea98 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2100      	movs	r1, #0
 800ea42:	4618      	mov	r0, r3
 800ea44:	f001 ff53 	bl	80108ee <SDMMC_GetResponse>
 800ea48:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	0fdb      	lsrs	r3, r3, #31
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	d101      	bne.n	800ea56 <SD_PowerON+0xce>
 800ea52:	2301      	movs	r3, #1
 800ea54:	e000      	b.n	800ea58 <SD_PowerON+0xd0>
 800ea56:	2300      	movs	r3, #0
 800ea58:	613b      	str	r3, [r7, #16]

    count++;
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d802      	bhi.n	800ea70 <SD_PowerON+0xe8>
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d0cc      	beq.n	800ea0a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d902      	bls.n	800ea80 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ea7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea7e:	e00b      	b.n	800ea98 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d002      	beq.n	800ea96 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2201      	movs	r2, #1
 800ea94:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ea96:	2300      	movs	r3, #0
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3718      	adds	r7, #24
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	c1100000 	.word	0xc1100000

0800eaa4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b08c      	sub	sp, #48	; 0x30
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eaae:	f7f6 f971 	bl	8004d94 <HAL_GetTick>
 800eab2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2100      	movs	r1, #0
 800eabe:	4618      	mov	r0, r3
 800eac0:	f001 ff15 	bl	80108ee <SDMMC_GetResponse>
 800eac4:	4603      	mov	r3, r0
 800eac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eaca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eace:	d102      	bne.n	800ead6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ead0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ead4:	e0b0      	b.n	800ec38 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2140      	movs	r1, #64	; 0x40
 800eadc:	4618      	mov	r0, r3
 800eade:	f001 ff45 	bl	801096c <SDMMC_CmdBlockLength>
 800eae2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d005      	beq.n	800eaf6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800eaf2:	6a3b      	ldr	r3, [r7, #32]
 800eaf4:	e0a0      	b.n	800ec38 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eafe:	041b      	lsls	r3, r3, #16
 800eb00:	4619      	mov	r1, r3
 800eb02:	4610      	mov	r0, r2
 800eb04:	f001 ffb6 	bl	8010a74 <SDMMC_CmdAppCommand>
 800eb08:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d005      	beq.n	800eb1c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800eb18:	6a3b      	ldr	r3, [r7, #32]
 800eb1a:	e08d      	b.n	800ec38 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb20:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800eb22:	2340      	movs	r3, #64	; 0x40
 800eb24:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800eb26:	2360      	movs	r3, #96	; 0x60
 800eb28:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eb2a:	2302      	movs	r3, #2
 800eb2c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eb32:	2301      	movs	r3, #1
 800eb34:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f107 0208 	add.w	r2, r7, #8
 800eb3e:	4611      	mov	r1, r2
 800eb40:	4618      	mov	r0, r3
 800eb42:	f001 fee7 	bl	8010914 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f002 f89e 	bl	8010c8c <SDMMC_CmdStatusRegister>
 800eb50:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb52:	6a3b      	ldr	r3, [r7, #32]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d02b      	beq.n	800ebb0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800eb60:	6a3b      	ldr	r3, [r7, #32]
 800eb62:	e069      	b.n	800ec38 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d013      	beq.n	800eb9a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800eb72:	2300      	movs	r3, #0
 800eb74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb76:	e00d      	b.n	800eb94 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f001 fe53 	bl	8010828 <SDMMC_ReadFIFO>
 800eb82:	4602      	mov	r2, r0
 800eb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb86:	601a      	str	r2, [r3, #0]
        pData++;
 800eb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8a:	3304      	adds	r3, #4
 800eb8c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800eb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb90:	3301      	adds	r3, #1
 800eb92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb96:	2b07      	cmp	r3, #7
 800eb98:	d9ee      	bls.n	800eb78 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eb9a:	f7f6 f8fb 	bl	8004d94 <HAL_GetTick>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba2:	1ad3      	subs	r3, r2, r3
 800eba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba8:	d102      	bne.n	800ebb0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ebaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebae:	e043      	b.n	800ec38 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d0d2      	beq.n	800eb64 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc4:	f003 0308 	and.w	r3, r3, #8
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d001      	beq.n	800ebd0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ebcc:	2308      	movs	r3, #8
 800ebce:	e033      	b.n	800ec38 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebd6:	f003 0302 	and.w	r3, r3, #2
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ebde:	2302      	movs	r3, #2
 800ebe0:	e02a      	b.n	800ec38 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebe8:	f003 0320 	and.w	r3, r3, #32
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d017      	beq.n	800ec20 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ebf0:	2320      	movs	r3, #32
 800ebf2:	e021      	b.n	800ec38 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f001 fe15 	bl	8010828 <SDMMC_ReadFIFO>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec02:	601a      	str	r2, [r3, #0]
    pData++;
 800ec04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec06:	3304      	adds	r3, #4
 800ec08:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec0a:	f7f6 f8c3 	bl	8004d94 <HAL_GetTick>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec18:	d102      	bne.n	800ec20 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec1e:	e00b      	b.n	800ec38 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e2      	bne.n	800ebf4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4a03      	ldr	r2, [pc, #12]	; (800ec40 <SD_SendSDStatus+0x19c>)
 800ec34:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3730      	adds	r7, #48	; 0x30
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	18000f3a 	.word	0x18000f3a

0800ec44 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d102      	bne.n	800ec5a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ec54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec58:	e018      	b.n	800ec8c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec62:	041b      	lsls	r3, r3, #16
 800ec64:	4619      	mov	r1, r3
 800ec66:	4610      	mov	r0, r2
 800ec68:	f001 ffed 	bl	8010c46 <SDMMC_CmdSendStatus>
 800ec6c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d001      	beq.n	800ec78 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	e009      	b.n	800ec8c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f001 fe35 	bl	80108ee <SDMMC_GetResponse>
 800ec84:	4602      	mov	r2, r0
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ec8a:	2300      	movs	r3, #0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	60fb      	str	r3, [r7, #12]
 800eca0:	2300      	movs	r3, #0
 800eca2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2100      	movs	r1, #0
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f001 fe1f 	bl	80108ee <SDMMC_GetResponse>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ecba:	d102      	bne.n	800ecc2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ecbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ecc0:	e02f      	b.n	800ed22 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ecc2:	f107 030c 	add.w	r3, r7, #12
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 f879 	bl	800edc0 <SD_FindSCR>
 800ecce:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	e023      	b.n	800ed22 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d01c      	beq.n	800ed1e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecec:	041b      	lsls	r3, r3, #16
 800ecee:	4619      	mov	r1, r3
 800ecf0:	4610      	mov	r0, r2
 800ecf2:	f001 febf 	bl	8010a74 <SDMMC_CmdAppCommand>
 800ecf6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	e00f      	b.n	800ed22 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2102      	movs	r1, #2
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f001 fef6 	bl	8010afa <SDMMC_CmdBusWidth>
 800ed0e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d001      	beq.n	800ed1a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	e003      	b.n	800ed22 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e001      	b.n	800ed22 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ed1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3718      	adds	r7, #24
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b086      	sub	sp, #24
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ed32:	2300      	movs	r3, #0
 800ed34:	60fb      	str	r3, [r7, #12]
 800ed36:	2300      	movs	r3, #0
 800ed38:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2100      	movs	r1, #0
 800ed40:	4618      	mov	r0, r3
 800ed42:	f001 fdd4 	bl	80108ee <SDMMC_GetResponse>
 800ed46:	4603      	mov	r3, r0
 800ed48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed50:	d102      	bne.n	800ed58 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ed52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed56:	e02f      	b.n	800edb8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ed58:	f107 030c 	add.w	r3, r7, #12
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 f82e 	bl	800edc0 <SD_FindSCR>
 800ed64:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d001      	beq.n	800ed70 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	e023      	b.n	800edb8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d01c      	beq.n	800edb4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed82:	041b      	lsls	r3, r3, #16
 800ed84:	4619      	mov	r1, r3
 800ed86:	4610      	mov	r0, r2
 800ed88:	f001 fe74 	bl	8010a74 <SDMMC_CmdAppCommand>
 800ed8c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	e00f      	b.n	800edb8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f001 feab 	bl	8010afa <SDMMC_CmdBusWidth>
 800eda4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d001      	beq.n	800edb0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	e003      	b.n	800edb8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800edb0:	2300      	movs	r3, #0
 800edb2:	e001      	b.n	800edb8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800edb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3718      	adds	r7, #24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b08e      	sub	sp, #56	; 0x38
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800edca:	f7f5 ffe3 	bl	8004d94 <HAL_GetTick>
 800edce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800edd0:	2300      	movs	r3, #0
 800edd2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800edd4:	2300      	movs	r3, #0
 800edd6:	60bb      	str	r3, [r7, #8]
 800edd8:	2300      	movs	r3, #0
 800edda:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2108      	movs	r1, #8
 800ede6:	4618      	mov	r0, r3
 800ede8:	f001 fdc0 	bl	801096c <SDMMC_CmdBlockLength>
 800edec:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800edee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d001      	beq.n	800edf8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	e0ad      	b.n	800ef54 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee00:	041b      	lsls	r3, r3, #16
 800ee02:	4619      	mov	r1, r3
 800ee04:	4610      	mov	r0, r2
 800ee06:	f001 fe35 	bl	8010a74 <SDMMC_CmdAppCommand>
 800ee0a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d001      	beq.n	800ee16 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ee12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee14:	e09e      	b.n	800ef54 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ee16:	f04f 33ff 	mov.w	r3, #4294967295
 800ee1a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ee1c:	2308      	movs	r3, #8
 800ee1e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ee20:	2330      	movs	r3, #48	; 0x30
 800ee22:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ee24:	2302      	movs	r3, #2
 800ee26:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f107 0210 	add.w	r2, r7, #16
 800ee38:	4611      	mov	r1, r2
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f001 fd6a 	bl	8010914 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	4618      	mov	r0, r3
 800ee46:	f001 fe7b 	bl	8010b40 <SDMMC_CmdSendSCR>
 800ee4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d027      	beq.n	800eea2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ee52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee54:	e07e      	b.n	800ef54 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d113      	bne.n	800ee8c <SD_FindSCR+0xcc>
 800ee64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d110      	bne.n	800ee8c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f001 fcda 	bl	8010828 <SDMMC_ReadFIFO>
 800ee74:	4603      	mov	r3, r0
 800ee76:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f001 fcd3 	bl	8010828 <SDMMC_ReadFIFO>
 800ee82:	4603      	mov	r3, r0
 800ee84:	60fb      	str	r3, [r7, #12]
      index++;
 800ee86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee88:	3301      	adds	r3, #1
 800ee8a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ee8c:	f7f5 ff82 	bl	8004d94 <HAL_GetTick>
 800ee90:	4602      	mov	r2, r0
 800ee92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee94:	1ad3      	subs	r3, r2, r3
 800ee96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee9a:	d102      	bne.n	800eea2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ee9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eea0:	e058      	b.n	800ef54 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eea8:	f240 532a 	movw	r3, #1322	; 0x52a
 800eeac:	4013      	ands	r3, r2
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d0d1      	beq.n	800ee56 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeb8:	f003 0308 	and.w	r3, r3, #8
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d005      	beq.n	800eecc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2208      	movs	r2, #8
 800eec6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800eec8:	2308      	movs	r3, #8
 800eeca:	e043      	b.n	800ef54 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eed2:	f003 0302 	and.w	r3, r3, #2
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d005      	beq.n	800eee6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2202      	movs	r2, #2
 800eee0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eee2:	2302      	movs	r3, #2
 800eee4:	e036      	b.n	800ef54 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeec:	f003 0320 	and.w	r3, r3, #32
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d005      	beq.n	800ef00 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2220      	movs	r2, #32
 800eefa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eefc:	2320      	movs	r3, #32
 800eefe:	e029      	b.n	800ef54 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a15      	ldr	r2, [pc, #84]	; (800ef5c <SD_FindSCR+0x19c>)
 800ef06:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	061a      	lsls	r2, r3, #24
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	021b      	lsls	r3, r3, #8
 800ef10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef14:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	0a1b      	lsrs	r3, r3, #8
 800ef1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ef1e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	0e1b      	lsrs	r3, r3, #24
 800ef24:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ef26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef28:	601a      	str	r2, [r3, #0]
    scr++;
 800ef2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2c:	3304      	adds	r3, #4
 800ef2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	061a      	lsls	r2, r3, #24
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	021b      	lsls	r3, r3, #8
 800ef38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef3c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	0a1b      	lsrs	r3, r3, #8
 800ef42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ef46:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	0e1b      	lsrs	r3, r3, #24
 800ef4c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ef4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef50:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ef52:	2300      	movs	r3, #0
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3738      	adds	r7, #56	; 0x38
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	18000f3a 	.word	0x18000f3a

0800ef60 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d101      	bne.n	800ef74 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ef70:	2301      	movs	r3, #1
 800ef72:	e02b      	b.n	800efcc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d106      	bne.n	800ef8e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f825 	bl	800efd8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2202      	movs	r2, #2
 800ef92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	3304      	adds	r3, #4
 800ef9e:	4619      	mov	r1, r3
 800efa0:	4610      	mov	r0, r2
 800efa2:	f001 fb51 	bl	8010648 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6818      	ldr	r0, [r3, #0]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	461a      	mov	r2, r3
 800efb0:	6839      	ldr	r1, [r7, #0]
 800efb2:	f001 fba5 	bl	8010700 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800efb6:	4b07      	ldr	r3, [pc, #28]	; (800efd4 <HAL_SDRAM_Init+0x74>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a06      	ldr	r2, [pc, #24]	; (800efd4 <HAL_SDRAM_Init+0x74>)
 800efbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800efc0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2201      	movs	r2, #1
 800efc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800efca:	2300      	movs	r3, #0
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	52004000 	.word	0x52004000

0800efd8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800efe0:	bf00      	nop
 800efe2:	370c      	adds	r7, #12
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr

0800efec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d101      	bne.n	800effe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800effa:	2301      	movs	r3, #1
 800effc:	e10f      	b.n	800f21e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4a87      	ldr	r2, [pc, #540]	; (800f228 <HAL_SPI_Init+0x23c>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d00f      	beq.n	800f02e <HAL_SPI_Init+0x42>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	4a86      	ldr	r2, [pc, #536]	; (800f22c <HAL_SPI_Init+0x240>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d00a      	beq.n	800f02e <HAL_SPI_Init+0x42>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4a84      	ldr	r2, [pc, #528]	; (800f230 <HAL_SPI_Init+0x244>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d005      	beq.n	800f02e <HAL_SPI_Init+0x42>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	68db      	ldr	r3, [r3, #12]
 800f026:	2b0f      	cmp	r3, #15
 800f028:	d901      	bls.n	800f02e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f02a:	2301      	movs	r3, #1
 800f02c:	e0f7      	b.n	800f21e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 f90a 	bl	800f248 <SPI_GetPacketSize>
 800f034:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a7b      	ldr	r2, [pc, #492]	; (800f228 <HAL_SPI_Init+0x23c>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d00c      	beq.n	800f05a <HAL_SPI_Init+0x6e>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4a79      	ldr	r2, [pc, #484]	; (800f22c <HAL_SPI_Init+0x240>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d007      	beq.n	800f05a <HAL_SPI_Init+0x6e>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a78      	ldr	r2, [pc, #480]	; (800f230 <HAL_SPI_Init+0x244>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d002      	beq.n	800f05a <HAL_SPI_Init+0x6e>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2b08      	cmp	r3, #8
 800f058:	d811      	bhi.n	800f07e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f05e:	4a72      	ldr	r2, [pc, #456]	; (800f228 <HAL_SPI_Init+0x23c>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d009      	beq.n	800f078 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a70      	ldr	r2, [pc, #448]	; (800f22c <HAL_SPI_Init+0x240>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d004      	beq.n	800f078 <HAL_SPI_Init+0x8c>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4a6f      	ldr	r2, [pc, #444]	; (800f230 <HAL_SPI_Init+0x244>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d104      	bne.n	800f082 <HAL_SPI_Init+0x96>
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b10      	cmp	r3, #16
 800f07c:	d901      	bls.n	800f082 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f07e:	2301      	movs	r3, #1
 800f080:	e0cd      	b.n	800f21e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d106      	bne.n	800f09c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 f8cc 	bl	800f234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2202      	movs	r2, #2
 800f0a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f022 0201 	bic.w	r2, r2, #1
 800f0b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	689b      	ldr	r3, [r3, #8]
 800f0ba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f0be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	699b      	ldr	r3, [r3, #24]
 800f0c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f0c8:	d119      	bne.n	800f0fe <HAL_SPI_Init+0x112>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f0d2:	d103      	bne.n	800f0dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d008      	beq.n	800f0ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d10c      	bne.n	800f0fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f0e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f0ec:	d107      	bne.n	800f0fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f0fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00f      	beq.n	800f12a <HAL_SPI_Init+0x13e>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	2b06      	cmp	r3, #6
 800f110:	d90b      	bls.n	800f12a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	430a      	orrs	r2, r1
 800f126:	601a      	str	r2, [r3, #0]
 800f128:	e007      	b.n	800f13a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f138:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	69da      	ldr	r2, [r3, #28]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f142:	431a      	orrs	r2, r3
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	431a      	orrs	r2, r3
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f14c:	ea42 0103 	orr.w	r1, r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	68da      	ldr	r2, [r3, #12]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	430a      	orrs	r2, r1
 800f15a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f164:	431a      	orrs	r2, r3
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f16a:	431a      	orrs	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	699b      	ldr	r3, [r3, #24]
 800f170:	431a      	orrs	r2, r3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	691b      	ldr	r3, [r3, #16]
 800f176:	431a      	orrs	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	431a      	orrs	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6a1b      	ldr	r3, [r3, #32]
 800f182:	431a      	orrs	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	431a      	orrs	r2, r3
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f18e:	431a      	orrs	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	431a      	orrs	r2, r3
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f19a:	ea42 0103 	orr.w	r1, r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	430a      	orrs	r2, r1
 800f1a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d113      	bne.n	800f1da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f1d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f022 0201 	bic.w	r2, r2, #1
 800f1e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00a      	beq.n	800f20c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	430a      	orrs	r2, r1
 800f20a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	40013000 	.word	0x40013000
 800f22c:	40003800 	.word	0x40003800
 800f230:	40003c00 	.word	0x40003c00

0800f234 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800f23c:	bf00      	nop
 800f23e:	370c      	adds	r7, #12
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr

0800f248 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f248:	b480      	push	{r7}
 800f24a:	b085      	sub	sp, #20
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f254:	095b      	lsrs	r3, r3, #5
 800f256:	3301      	adds	r3, #1
 800f258:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	3301      	adds	r3, #1
 800f260:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	3307      	adds	r3, #7
 800f266:	08db      	lsrs	r3, r3, #3
 800f268:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	68fa      	ldr	r2, [r7, #12]
 800f26e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f272:	4618      	mov	r0, r3
 800f274:	3714      	adds	r7, #20
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr

0800f27e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b082      	sub	sp, #8
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d101      	bne.n	800f290 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	e042      	b.n	800f316 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f296:	2b00      	cmp	r3, #0
 800f298:	d106      	bne.n	800f2a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2200      	movs	r2, #0
 800f29e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 f83b 	bl	800f31e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2224      	movs	r2, #36	; 0x24
 800f2ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	681a      	ldr	r2, [r3, #0]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f022 0201 	bic.w	r2, r2, #1
 800f2be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 f837 	bl	800f334 <UART_SetConfig>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	d101      	bne.n	800f2d0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e022      	b.n	800f316 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d002      	beq.n	800f2de <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f000 fe97 	bl	801000c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	685a      	ldr	r2, [r3, #4]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f2ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	689a      	ldr	r2, [r3, #8]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f2fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f042 0201 	orr.w	r2, r2, #1
 800f30c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 ff1e 	bl	8010150 <UART_CheckIdleState>
 800f314:	4603      	mov	r3, r0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3708      	adds	r7, #8
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800f31e:	b480      	push	{r7}
 800f320:	b083      	sub	sp, #12
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800f326:	bf00      	nop
 800f328:	370c      	adds	r7, #12
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
	...

0800f334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f338:	b092      	sub	sp, #72	; 0x48
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f33e:	2300      	movs	r3, #0
 800f340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	689a      	ldr	r2, [r3, #8]
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	431a      	orrs	r2, r3
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	695b      	ldr	r3, [r3, #20]
 800f352:	431a      	orrs	r2, r3
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	69db      	ldr	r3, [r3, #28]
 800f358:	4313      	orrs	r3, r2
 800f35a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	4bbe      	ldr	r3, [pc, #760]	; (800f65c <UART_SetConfig+0x328>)
 800f364:	4013      	ands	r3, r2
 800f366:	697a      	ldr	r2, [r7, #20]
 800f368:	6812      	ldr	r2, [r2, #0]
 800f36a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f36c:	430b      	orrs	r3, r1
 800f36e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	68da      	ldr	r2, [r3, #12]
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	430a      	orrs	r2, r1
 800f384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	699b      	ldr	r3, [r3, #24]
 800f38a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4ab3      	ldr	r2, [pc, #716]	; (800f660 <UART_SetConfig+0x32c>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d004      	beq.n	800f3a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	6a1b      	ldr	r3, [r3, #32]
 800f39a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f39c:	4313      	orrs	r3, r2
 800f39e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	689a      	ldr	r2, [r3, #8]
 800f3a6:	4baf      	ldr	r3, [pc, #700]	; (800f664 <UART_SetConfig+0x330>)
 800f3a8:	4013      	ands	r3, r2
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	6812      	ldr	r2, [r2, #0]
 800f3ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3b0:	430b      	orrs	r3, r1
 800f3b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ba:	f023 010f 	bic.w	r1, r3, #15
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	430a      	orrs	r2, r1
 800f3c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4aa6      	ldr	r2, [pc, #664]	; (800f668 <UART_SetConfig+0x334>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d177      	bne.n	800f4c4 <UART_SetConfig+0x190>
 800f3d4:	4ba5      	ldr	r3, [pc, #660]	; (800f66c <UART_SetConfig+0x338>)
 800f3d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f3dc:	2b28      	cmp	r3, #40	; 0x28
 800f3de:	d86d      	bhi.n	800f4bc <UART_SetConfig+0x188>
 800f3e0:	a201      	add	r2, pc, #4	; (adr r2, 800f3e8 <UART_SetConfig+0xb4>)
 800f3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e6:	bf00      	nop
 800f3e8:	0800f48d 	.word	0x0800f48d
 800f3ec:	0800f4bd 	.word	0x0800f4bd
 800f3f0:	0800f4bd 	.word	0x0800f4bd
 800f3f4:	0800f4bd 	.word	0x0800f4bd
 800f3f8:	0800f4bd 	.word	0x0800f4bd
 800f3fc:	0800f4bd 	.word	0x0800f4bd
 800f400:	0800f4bd 	.word	0x0800f4bd
 800f404:	0800f4bd 	.word	0x0800f4bd
 800f408:	0800f495 	.word	0x0800f495
 800f40c:	0800f4bd 	.word	0x0800f4bd
 800f410:	0800f4bd 	.word	0x0800f4bd
 800f414:	0800f4bd 	.word	0x0800f4bd
 800f418:	0800f4bd 	.word	0x0800f4bd
 800f41c:	0800f4bd 	.word	0x0800f4bd
 800f420:	0800f4bd 	.word	0x0800f4bd
 800f424:	0800f4bd 	.word	0x0800f4bd
 800f428:	0800f49d 	.word	0x0800f49d
 800f42c:	0800f4bd 	.word	0x0800f4bd
 800f430:	0800f4bd 	.word	0x0800f4bd
 800f434:	0800f4bd 	.word	0x0800f4bd
 800f438:	0800f4bd 	.word	0x0800f4bd
 800f43c:	0800f4bd 	.word	0x0800f4bd
 800f440:	0800f4bd 	.word	0x0800f4bd
 800f444:	0800f4bd 	.word	0x0800f4bd
 800f448:	0800f4a5 	.word	0x0800f4a5
 800f44c:	0800f4bd 	.word	0x0800f4bd
 800f450:	0800f4bd 	.word	0x0800f4bd
 800f454:	0800f4bd 	.word	0x0800f4bd
 800f458:	0800f4bd 	.word	0x0800f4bd
 800f45c:	0800f4bd 	.word	0x0800f4bd
 800f460:	0800f4bd 	.word	0x0800f4bd
 800f464:	0800f4bd 	.word	0x0800f4bd
 800f468:	0800f4ad 	.word	0x0800f4ad
 800f46c:	0800f4bd 	.word	0x0800f4bd
 800f470:	0800f4bd 	.word	0x0800f4bd
 800f474:	0800f4bd 	.word	0x0800f4bd
 800f478:	0800f4bd 	.word	0x0800f4bd
 800f47c:	0800f4bd 	.word	0x0800f4bd
 800f480:	0800f4bd 	.word	0x0800f4bd
 800f484:	0800f4bd 	.word	0x0800f4bd
 800f488:	0800f4b5 	.word	0x0800f4b5
 800f48c:	2301      	movs	r3, #1
 800f48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f492:	e326      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f494:	2304      	movs	r3, #4
 800f496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f49a:	e322      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f49c:	2308      	movs	r3, #8
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4a2:	e31e      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f4a4:	2310      	movs	r3, #16
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4aa:	e31a      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f4ac:	2320      	movs	r3, #32
 800f4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4b2:	e316      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f4b4:	2340      	movs	r3, #64	; 0x40
 800f4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ba:	e312      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f4bc:	2380      	movs	r3, #128	; 0x80
 800f4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4c2:	e30e      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a69      	ldr	r2, [pc, #420]	; (800f670 <UART_SetConfig+0x33c>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d130      	bne.n	800f530 <UART_SetConfig+0x1fc>
 800f4ce:	4b67      	ldr	r3, [pc, #412]	; (800f66c <UART_SetConfig+0x338>)
 800f4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4d2:	f003 0307 	and.w	r3, r3, #7
 800f4d6:	2b05      	cmp	r3, #5
 800f4d8:	d826      	bhi.n	800f528 <UART_SetConfig+0x1f4>
 800f4da:	a201      	add	r2, pc, #4	; (adr r2, 800f4e0 <UART_SetConfig+0x1ac>)
 800f4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4e0:	0800f4f9 	.word	0x0800f4f9
 800f4e4:	0800f501 	.word	0x0800f501
 800f4e8:	0800f509 	.word	0x0800f509
 800f4ec:	0800f511 	.word	0x0800f511
 800f4f0:	0800f519 	.word	0x0800f519
 800f4f4:	0800f521 	.word	0x0800f521
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4fe:	e2f0      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f500:	2304      	movs	r3, #4
 800f502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f506:	e2ec      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f508:	2308      	movs	r3, #8
 800f50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f50e:	e2e8      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f510:	2310      	movs	r3, #16
 800f512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f516:	e2e4      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f518:	2320      	movs	r3, #32
 800f51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f51e:	e2e0      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f520:	2340      	movs	r3, #64	; 0x40
 800f522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f526:	e2dc      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f528:	2380      	movs	r3, #128	; 0x80
 800f52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f52e:	e2d8      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4a4f      	ldr	r2, [pc, #316]	; (800f674 <UART_SetConfig+0x340>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d130      	bne.n	800f59c <UART_SetConfig+0x268>
 800f53a:	4b4c      	ldr	r3, [pc, #304]	; (800f66c <UART_SetConfig+0x338>)
 800f53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f53e:	f003 0307 	and.w	r3, r3, #7
 800f542:	2b05      	cmp	r3, #5
 800f544:	d826      	bhi.n	800f594 <UART_SetConfig+0x260>
 800f546:	a201      	add	r2, pc, #4	; (adr r2, 800f54c <UART_SetConfig+0x218>)
 800f548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f54c:	0800f565 	.word	0x0800f565
 800f550:	0800f56d 	.word	0x0800f56d
 800f554:	0800f575 	.word	0x0800f575
 800f558:	0800f57d 	.word	0x0800f57d
 800f55c:	0800f585 	.word	0x0800f585
 800f560:	0800f58d 	.word	0x0800f58d
 800f564:	2300      	movs	r3, #0
 800f566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f56a:	e2ba      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f56c:	2304      	movs	r3, #4
 800f56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f572:	e2b6      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f574:	2308      	movs	r3, #8
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f57a:	e2b2      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f57c:	2310      	movs	r3, #16
 800f57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f582:	e2ae      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f584:	2320      	movs	r3, #32
 800f586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f58a:	e2aa      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f58c:	2340      	movs	r3, #64	; 0x40
 800f58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f592:	e2a6      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f594:	2380      	movs	r3, #128	; 0x80
 800f596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f59a:	e2a2      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4a35      	ldr	r2, [pc, #212]	; (800f678 <UART_SetConfig+0x344>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d130      	bne.n	800f608 <UART_SetConfig+0x2d4>
 800f5a6:	4b31      	ldr	r3, [pc, #196]	; (800f66c <UART_SetConfig+0x338>)
 800f5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5aa:	f003 0307 	and.w	r3, r3, #7
 800f5ae:	2b05      	cmp	r3, #5
 800f5b0:	d826      	bhi.n	800f600 <UART_SetConfig+0x2cc>
 800f5b2:	a201      	add	r2, pc, #4	; (adr r2, 800f5b8 <UART_SetConfig+0x284>)
 800f5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b8:	0800f5d1 	.word	0x0800f5d1
 800f5bc:	0800f5d9 	.word	0x0800f5d9
 800f5c0:	0800f5e1 	.word	0x0800f5e1
 800f5c4:	0800f5e9 	.word	0x0800f5e9
 800f5c8:	0800f5f1 	.word	0x0800f5f1
 800f5cc:	0800f5f9 	.word	0x0800f5f9
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5d6:	e284      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f5d8:	2304      	movs	r3, #4
 800f5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5de:	e280      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f5e0:	2308      	movs	r3, #8
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e6:	e27c      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f5e8:	2310      	movs	r3, #16
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ee:	e278      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f5f0:	2320      	movs	r3, #32
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f6:	e274      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f5f8:	2340      	movs	r3, #64	; 0x40
 800f5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fe:	e270      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f600:	2380      	movs	r3, #128	; 0x80
 800f602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f606:	e26c      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	4a1b      	ldr	r2, [pc, #108]	; (800f67c <UART_SetConfig+0x348>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d142      	bne.n	800f698 <UART_SetConfig+0x364>
 800f612:	4b16      	ldr	r3, [pc, #88]	; (800f66c <UART_SetConfig+0x338>)
 800f614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f616:	f003 0307 	and.w	r3, r3, #7
 800f61a:	2b05      	cmp	r3, #5
 800f61c:	d838      	bhi.n	800f690 <UART_SetConfig+0x35c>
 800f61e:	a201      	add	r2, pc, #4	; (adr r2, 800f624 <UART_SetConfig+0x2f0>)
 800f620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f624:	0800f63d 	.word	0x0800f63d
 800f628:	0800f645 	.word	0x0800f645
 800f62c:	0800f64d 	.word	0x0800f64d
 800f630:	0800f655 	.word	0x0800f655
 800f634:	0800f681 	.word	0x0800f681
 800f638:	0800f689 	.word	0x0800f689
 800f63c:	2300      	movs	r3, #0
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f642:	e24e      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f644:	2304      	movs	r3, #4
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64a:	e24a      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f64c:	2308      	movs	r3, #8
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f652:	e246      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f654:	2310      	movs	r3, #16
 800f656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f65a:	e242      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f65c:	cfff69f3 	.word	0xcfff69f3
 800f660:	58000c00 	.word	0x58000c00
 800f664:	11fff4ff 	.word	0x11fff4ff
 800f668:	40011000 	.word	0x40011000
 800f66c:	58024400 	.word	0x58024400
 800f670:	40004400 	.word	0x40004400
 800f674:	40004800 	.word	0x40004800
 800f678:	40004c00 	.word	0x40004c00
 800f67c:	40005000 	.word	0x40005000
 800f680:	2320      	movs	r3, #32
 800f682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f686:	e22c      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f688:	2340      	movs	r3, #64	; 0x40
 800f68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f68e:	e228      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f690:	2380      	movs	r3, #128	; 0x80
 800f692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f696:	e224      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4ab1      	ldr	r2, [pc, #708]	; (800f964 <UART_SetConfig+0x630>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d176      	bne.n	800f790 <UART_SetConfig+0x45c>
 800f6a2:	4bb1      	ldr	r3, [pc, #708]	; (800f968 <UART_SetConfig+0x634>)
 800f6a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f6aa:	2b28      	cmp	r3, #40	; 0x28
 800f6ac:	d86c      	bhi.n	800f788 <UART_SetConfig+0x454>
 800f6ae:	a201      	add	r2, pc, #4	; (adr r2, 800f6b4 <UART_SetConfig+0x380>)
 800f6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b4:	0800f759 	.word	0x0800f759
 800f6b8:	0800f789 	.word	0x0800f789
 800f6bc:	0800f789 	.word	0x0800f789
 800f6c0:	0800f789 	.word	0x0800f789
 800f6c4:	0800f789 	.word	0x0800f789
 800f6c8:	0800f789 	.word	0x0800f789
 800f6cc:	0800f789 	.word	0x0800f789
 800f6d0:	0800f789 	.word	0x0800f789
 800f6d4:	0800f761 	.word	0x0800f761
 800f6d8:	0800f789 	.word	0x0800f789
 800f6dc:	0800f789 	.word	0x0800f789
 800f6e0:	0800f789 	.word	0x0800f789
 800f6e4:	0800f789 	.word	0x0800f789
 800f6e8:	0800f789 	.word	0x0800f789
 800f6ec:	0800f789 	.word	0x0800f789
 800f6f0:	0800f789 	.word	0x0800f789
 800f6f4:	0800f769 	.word	0x0800f769
 800f6f8:	0800f789 	.word	0x0800f789
 800f6fc:	0800f789 	.word	0x0800f789
 800f700:	0800f789 	.word	0x0800f789
 800f704:	0800f789 	.word	0x0800f789
 800f708:	0800f789 	.word	0x0800f789
 800f70c:	0800f789 	.word	0x0800f789
 800f710:	0800f789 	.word	0x0800f789
 800f714:	0800f771 	.word	0x0800f771
 800f718:	0800f789 	.word	0x0800f789
 800f71c:	0800f789 	.word	0x0800f789
 800f720:	0800f789 	.word	0x0800f789
 800f724:	0800f789 	.word	0x0800f789
 800f728:	0800f789 	.word	0x0800f789
 800f72c:	0800f789 	.word	0x0800f789
 800f730:	0800f789 	.word	0x0800f789
 800f734:	0800f779 	.word	0x0800f779
 800f738:	0800f789 	.word	0x0800f789
 800f73c:	0800f789 	.word	0x0800f789
 800f740:	0800f789 	.word	0x0800f789
 800f744:	0800f789 	.word	0x0800f789
 800f748:	0800f789 	.word	0x0800f789
 800f74c:	0800f789 	.word	0x0800f789
 800f750:	0800f789 	.word	0x0800f789
 800f754:	0800f781 	.word	0x0800f781
 800f758:	2301      	movs	r3, #1
 800f75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f75e:	e1c0      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f760:	2304      	movs	r3, #4
 800f762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f766:	e1bc      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f768:	2308      	movs	r3, #8
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f76e:	e1b8      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f770:	2310      	movs	r3, #16
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f776:	e1b4      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f778:	2320      	movs	r3, #32
 800f77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f77e:	e1b0      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f780:	2340      	movs	r3, #64	; 0x40
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f786:	e1ac      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f788:	2380      	movs	r3, #128	; 0x80
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f78e:	e1a8      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a75      	ldr	r2, [pc, #468]	; (800f96c <UART_SetConfig+0x638>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d130      	bne.n	800f7fc <UART_SetConfig+0x4c8>
 800f79a:	4b73      	ldr	r3, [pc, #460]	; (800f968 <UART_SetConfig+0x634>)
 800f79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f79e:	f003 0307 	and.w	r3, r3, #7
 800f7a2:	2b05      	cmp	r3, #5
 800f7a4:	d826      	bhi.n	800f7f4 <UART_SetConfig+0x4c0>
 800f7a6:	a201      	add	r2, pc, #4	; (adr r2, 800f7ac <UART_SetConfig+0x478>)
 800f7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ac:	0800f7c5 	.word	0x0800f7c5
 800f7b0:	0800f7cd 	.word	0x0800f7cd
 800f7b4:	0800f7d5 	.word	0x0800f7d5
 800f7b8:	0800f7dd 	.word	0x0800f7dd
 800f7bc:	0800f7e5 	.word	0x0800f7e5
 800f7c0:	0800f7ed 	.word	0x0800f7ed
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ca:	e18a      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f7cc:	2304      	movs	r3, #4
 800f7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7d2:	e186      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f7d4:	2308      	movs	r3, #8
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7da:	e182      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f7dc:	2310      	movs	r3, #16
 800f7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e2:	e17e      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f7e4:	2320      	movs	r3, #32
 800f7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ea:	e17a      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f7ec:	2340      	movs	r3, #64	; 0x40
 800f7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f2:	e176      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f7f4:	2380      	movs	r3, #128	; 0x80
 800f7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fa:	e172      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4a5b      	ldr	r2, [pc, #364]	; (800f970 <UART_SetConfig+0x63c>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d130      	bne.n	800f868 <UART_SetConfig+0x534>
 800f806:	4b58      	ldr	r3, [pc, #352]	; (800f968 <UART_SetConfig+0x634>)
 800f808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f80a:	f003 0307 	and.w	r3, r3, #7
 800f80e:	2b05      	cmp	r3, #5
 800f810:	d826      	bhi.n	800f860 <UART_SetConfig+0x52c>
 800f812:	a201      	add	r2, pc, #4	; (adr r2, 800f818 <UART_SetConfig+0x4e4>)
 800f814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f818:	0800f831 	.word	0x0800f831
 800f81c:	0800f839 	.word	0x0800f839
 800f820:	0800f841 	.word	0x0800f841
 800f824:	0800f849 	.word	0x0800f849
 800f828:	0800f851 	.word	0x0800f851
 800f82c:	0800f859 	.word	0x0800f859
 800f830:	2300      	movs	r3, #0
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f836:	e154      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f838:	2304      	movs	r3, #4
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f83e:	e150      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f840:	2308      	movs	r3, #8
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f846:	e14c      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f848:	2310      	movs	r3, #16
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f84e:	e148      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f850:	2320      	movs	r3, #32
 800f852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f856:	e144      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f858:	2340      	movs	r3, #64	; 0x40
 800f85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f85e:	e140      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f860:	2380      	movs	r3, #128	; 0x80
 800f862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f866:	e13c      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a41      	ldr	r2, [pc, #260]	; (800f974 <UART_SetConfig+0x640>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	f040 8082 	bne.w	800f978 <UART_SetConfig+0x644>
 800f874:	4b3c      	ldr	r3, [pc, #240]	; (800f968 <UART_SetConfig+0x634>)
 800f876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f87c:	2b28      	cmp	r3, #40	; 0x28
 800f87e:	d86d      	bhi.n	800f95c <UART_SetConfig+0x628>
 800f880:	a201      	add	r2, pc, #4	; (adr r2, 800f888 <UART_SetConfig+0x554>)
 800f882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f886:	bf00      	nop
 800f888:	0800f92d 	.word	0x0800f92d
 800f88c:	0800f95d 	.word	0x0800f95d
 800f890:	0800f95d 	.word	0x0800f95d
 800f894:	0800f95d 	.word	0x0800f95d
 800f898:	0800f95d 	.word	0x0800f95d
 800f89c:	0800f95d 	.word	0x0800f95d
 800f8a0:	0800f95d 	.word	0x0800f95d
 800f8a4:	0800f95d 	.word	0x0800f95d
 800f8a8:	0800f935 	.word	0x0800f935
 800f8ac:	0800f95d 	.word	0x0800f95d
 800f8b0:	0800f95d 	.word	0x0800f95d
 800f8b4:	0800f95d 	.word	0x0800f95d
 800f8b8:	0800f95d 	.word	0x0800f95d
 800f8bc:	0800f95d 	.word	0x0800f95d
 800f8c0:	0800f95d 	.word	0x0800f95d
 800f8c4:	0800f95d 	.word	0x0800f95d
 800f8c8:	0800f93d 	.word	0x0800f93d
 800f8cc:	0800f95d 	.word	0x0800f95d
 800f8d0:	0800f95d 	.word	0x0800f95d
 800f8d4:	0800f95d 	.word	0x0800f95d
 800f8d8:	0800f95d 	.word	0x0800f95d
 800f8dc:	0800f95d 	.word	0x0800f95d
 800f8e0:	0800f95d 	.word	0x0800f95d
 800f8e4:	0800f95d 	.word	0x0800f95d
 800f8e8:	0800f945 	.word	0x0800f945
 800f8ec:	0800f95d 	.word	0x0800f95d
 800f8f0:	0800f95d 	.word	0x0800f95d
 800f8f4:	0800f95d 	.word	0x0800f95d
 800f8f8:	0800f95d 	.word	0x0800f95d
 800f8fc:	0800f95d 	.word	0x0800f95d
 800f900:	0800f95d 	.word	0x0800f95d
 800f904:	0800f95d 	.word	0x0800f95d
 800f908:	0800f94d 	.word	0x0800f94d
 800f90c:	0800f95d 	.word	0x0800f95d
 800f910:	0800f95d 	.word	0x0800f95d
 800f914:	0800f95d 	.word	0x0800f95d
 800f918:	0800f95d 	.word	0x0800f95d
 800f91c:	0800f95d 	.word	0x0800f95d
 800f920:	0800f95d 	.word	0x0800f95d
 800f924:	0800f95d 	.word	0x0800f95d
 800f928:	0800f955 	.word	0x0800f955
 800f92c:	2301      	movs	r3, #1
 800f92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f932:	e0d6      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f934:	2304      	movs	r3, #4
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f93a:	e0d2      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f93c:	2308      	movs	r3, #8
 800f93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f942:	e0ce      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f944:	2310      	movs	r3, #16
 800f946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f94a:	e0ca      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f94c:	2320      	movs	r3, #32
 800f94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f952:	e0c6      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f954:	2340      	movs	r3, #64	; 0x40
 800f956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f95a:	e0c2      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f95c:	2380      	movs	r3, #128	; 0x80
 800f95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f962:	e0be      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800f964:	40011400 	.word	0x40011400
 800f968:	58024400 	.word	0x58024400
 800f96c:	40007800 	.word	0x40007800
 800f970:	40007c00 	.word	0x40007c00
 800f974:	40011800 	.word	0x40011800
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4aad      	ldr	r2, [pc, #692]	; (800fc34 <UART_SetConfig+0x900>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d176      	bne.n	800fa70 <UART_SetConfig+0x73c>
 800f982:	4bad      	ldr	r3, [pc, #692]	; (800fc38 <UART_SetConfig+0x904>)
 800f984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f98a:	2b28      	cmp	r3, #40	; 0x28
 800f98c:	d86c      	bhi.n	800fa68 <UART_SetConfig+0x734>
 800f98e:	a201      	add	r2, pc, #4	; (adr r2, 800f994 <UART_SetConfig+0x660>)
 800f990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f994:	0800fa39 	.word	0x0800fa39
 800f998:	0800fa69 	.word	0x0800fa69
 800f99c:	0800fa69 	.word	0x0800fa69
 800f9a0:	0800fa69 	.word	0x0800fa69
 800f9a4:	0800fa69 	.word	0x0800fa69
 800f9a8:	0800fa69 	.word	0x0800fa69
 800f9ac:	0800fa69 	.word	0x0800fa69
 800f9b0:	0800fa69 	.word	0x0800fa69
 800f9b4:	0800fa41 	.word	0x0800fa41
 800f9b8:	0800fa69 	.word	0x0800fa69
 800f9bc:	0800fa69 	.word	0x0800fa69
 800f9c0:	0800fa69 	.word	0x0800fa69
 800f9c4:	0800fa69 	.word	0x0800fa69
 800f9c8:	0800fa69 	.word	0x0800fa69
 800f9cc:	0800fa69 	.word	0x0800fa69
 800f9d0:	0800fa69 	.word	0x0800fa69
 800f9d4:	0800fa49 	.word	0x0800fa49
 800f9d8:	0800fa69 	.word	0x0800fa69
 800f9dc:	0800fa69 	.word	0x0800fa69
 800f9e0:	0800fa69 	.word	0x0800fa69
 800f9e4:	0800fa69 	.word	0x0800fa69
 800f9e8:	0800fa69 	.word	0x0800fa69
 800f9ec:	0800fa69 	.word	0x0800fa69
 800f9f0:	0800fa69 	.word	0x0800fa69
 800f9f4:	0800fa51 	.word	0x0800fa51
 800f9f8:	0800fa69 	.word	0x0800fa69
 800f9fc:	0800fa69 	.word	0x0800fa69
 800fa00:	0800fa69 	.word	0x0800fa69
 800fa04:	0800fa69 	.word	0x0800fa69
 800fa08:	0800fa69 	.word	0x0800fa69
 800fa0c:	0800fa69 	.word	0x0800fa69
 800fa10:	0800fa69 	.word	0x0800fa69
 800fa14:	0800fa59 	.word	0x0800fa59
 800fa18:	0800fa69 	.word	0x0800fa69
 800fa1c:	0800fa69 	.word	0x0800fa69
 800fa20:	0800fa69 	.word	0x0800fa69
 800fa24:	0800fa69 	.word	0x0800fa69
 800fa28:	0800fa69 	.word	0x0800fa69
 800fa2c:	0800fa69 	.word	0x0800fa69
 800fa30:	0800fa69 	.word	0x0800fa69
 800fa34:	0800fa61 	.word	0x0800fa61
 800fa38:	2301      	movs	r3, #1
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa3e:	e050      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fa40:	2304      	movs	r3, #4
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa46:	e04c      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fa48:	2308      	movs	r3, #8
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa4e:	e048      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fa50:	2310      	movs	r3, #16
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa56:	e044      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fa58:	2320      	movs	r3, #32
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa5e:	e040      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fa60:	2340      	movs	r3, #64	; 0x40
 800fa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa66:	e03c      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fa68:	2380      	movs	r3, #128	; 0x80
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6e:	e038      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a71      	ldr	r2, [pc, #452]	; (800fc3c <UART_SetConfig+0x908>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d130      	bne.n	800fadc <UART_SetConfig+0x7a8>
 800fa7a:	4b6f      	ldr	r3, [pc, #444]	; (800fc38 <UART_SetConfig+0x904>)
 800fa7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa7e:	f003 0307 	and.w	r3, r3, #7
 800fa82:	2b05      	cmp	r3, #5
 800fa84:	d826      	bhi.n	800fad4 <UART_SetConfig+0x7a0>
 800fa86:	a201      	add	r2, pc, #4	; (adr r2, 800fa8c <UART_SetConfig+0x758>)
 800fa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa8c:	0800faa5 	.word	0x0800faa5
 800fa90:	0800faad 	.word	0x0800faad
 800fa94:	0800fab5 	.word	0x0800fab5
 800fa98:	0800fabd 	.word	0x0800fabd
 800fa9c:	0800fac5 	.word	0x0800fac5
 800faa0:	0800facd 	.word	0x0800facd
 800faa4:	2302      	movs	r3, #2
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faaa:	e01a      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800faac:	2304      	movs	r3, #4
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fab2:	e016      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fab4:	2308      	movs	r3, #8
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faba:	e012      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fabc:	2310      	movs	r3, #16
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fac2:	e00e      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fac4:	2320      	movs	r3, #32
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faca:	e00a      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800facc:	2340      	movs	r3, #64	; 0x40
 800face:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fad2:	e006      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fad4:	2380      	movs	r3, #128	; 0x80
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fada:	e002      	b.n	800fae2 <UART_SetConfig+0x7ae>
 800fadc:	2380      	movs	r3, #128	; 0x80
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	4a55      	ldr	r2, [pc, #340]	; (800fc3c <UART_SetConfig+0x908>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	f040 80f8 	bne.w	800fcde <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800faee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800faf2:	2b20      	cmp	r3, #32
 800faf4:	dc46      	bgt.n	800fb84 <UART_SetConfig+0x850>
 800faf6:	2b02      	cmp	r3, #2
 800faf8:	db75      	blt.n	800fbe6 <UART_SetConfig+0x8b2>
 800fafa:	3b02      	subs	r3, #2
 800fafc:	2b1e      	cmp	r3, #30
 800fafe:	d872      	bhi.n	800fbe6 <UART_SetConfig+0x8b2>
 800fb00:	a201      	add	r2, pc, #4	; (adr r2, 800fb08 <UART_SetConfig+0x7d4>)
 800fb02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb06:	bf00      	nop
 800fb08:	0800fb8b 	.word	0x0800fb8b
 800fb0c:	0800fbe7 	.word	0x0800fbe7
 800fb10:	0800fb93 	.word	0x0800fb93
 800fb14:	0800fbe7 	.word	0x0800fbe7
 800fb18:	0800fbe7 	.word	0x0800fbe7
 800fb1c:	0800fbe7 	.word	0x0800fbe7
 800fb20:	0800fba3 	.word	0x0800fba3
 800fb24:	0800fbe7 	.word	0x0800fbe7
 800fb28:	0800fbe7 	.word	0x0800fbe7
 800fb2c:	0800fbe7 	.word	0x0800fbe7
 800fb30:	0800fbe7 	.word	0x0800fbe7
 800fb34:	0800fbe7 	.word	0x0800fbe7
 800fb38:	0800fbe7 	.word	0x0800fbe7
 800fb3c:	0800fbe7 	.word	0x0800fbe7
 800fb40:	0800fbb3 	.word	0x0800fbb3
 800fb44:	0800fbe7 	.word	0x0800fbe7
 800fb48:	0800fbe7 	.word	0x0800fbe7
 800fb4c:	0800fbe7 	.word	0x0800fbe7
 800fb50:	0800fbe7 	.word	0x0800fbe7
 800fb54:	0800fbe7 	.word	0x0800fbe7
 800fb58:	0800fbe7 	.word	0x0800fbe7
 800fb5c:	0800fbe7 	.word	0x0800fbe7
 800fb60:	0800fbe7 	.word	0x0800fbe7
 800fb64:	0800fbe7 	.word	0x0800fbe7
 800fb68:	0800fbe7 	.word	0x0800fbe7
 800fb6c:	0800fbe7 	.word	0x0800fbe7
 800fb70:	0800fbe7 	.word	0x0800fbe7
 800fb74:	0800fbe7 	.word	0x0800fbe7
 800fb78:	0800fbe7 	.word	0x0800fbe7
 800fb7c:	0800fbe7 	.word	0x0800fbe7
 800fb80:	0800fbd9 	.word	0x0800fbd9
 800fb84:	2b40      	cmp	r3, #64	; 0x40
 800fb86:	d02a      	beq.n	800fbde <UART_SetConfig+0x8aa>
 800fb88:	e02d      	b.n	800fbe6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fb8a:	f7fd fad5 	bl	800d138 <HAL_RCCEx_GetD3PCLK1Freq>
 800fb8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb90:	e02f      	b.n	800fbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fd fae4 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fba0:	e027      	b.n	800fbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fba2:	f107 0318 	add.w	r3, r7, #24
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fd fc30 	bl	800d40c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbb0:	e01f      	b.n	800fbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbb2:	4b21      	ldr	r3, [pc, #132]	; (800fc38 <UART_SetConfig+0x904>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f003 0320 	and.w	r3, r3, #32
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d009      	beq.n	800fbd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fbbe:	4b1e      	ldr	r3, [pc, #120]	; (800fc38 <UART_SetConfig+0x904>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	08db      	lsrs	r3, r3, #3
 800fbc4:	f003 0303 	and.w	r3, r3, #3
 800fbc8:	4a1d      	ldr	r2, [pc, #116]	; (800fc40 <UART_SetConfig+0x90c>)
 800fbca:	fa22 f303 	lsr.w	r3, r2, r3
 800fbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fbd0:	e00f      	b.n	800fbf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fbd2:	4b1b      	ldr	r3, [pc, #108]	; (800fc40 <UART_SetConfig+0x90c>)
 800fbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbd6:	e00c      	b.n	800fbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fbd8:	4b1a      	ldr	r3, [pc, #104]	; (800fc44 <UART_SetConfig+0x910>)
 800fbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbdc:	e009      	b.n	800fbf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbe4:	e005      	b.n	800fbf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fbea:	2301      	movs	r3, #1
 800fbec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fbf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	f000 81ee 	beq.w	800ffd6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbfe:	4a12      	ldr	r2, [pc, #72]	; (800fc48 <UART_SetConfig+0x914>)
 800fc00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc04:	461a      	mov	r2, r3
 800fc06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc08:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc0c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	685a      	ldr	r2, [r3, #4]
 800fc12:	4613      	mov	r3, r2
 800fc14:	005b      	lsls	r3, r3, #1
 800fc16:	4413      	add	r3, r2
 800fc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d305      	bcc.n	800fc2a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d910      	bls.n	800fc4c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fc30:	e1d1      	b.n	800ffd6 <UART_SetConfig+0xca2>
 800fc32:	bf00      	nop
 800fc34:	40011c00 	.word	0x40011c00
 800fc38:	58024400 	.word	0x58024400
 800fc3c:	58000c00 	.word	0x58000c00
 800fc40:	03d09000 	.word	0x03d09000
 800fc44:	003d0900 	.word	0x003d0900
 800fc48:	08011800 	.word	0x08011800
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc4e:	2200      	movs	r2, #0
 800fc50:	60bb      	str	r3, [r7, #8]
 800fc52:	60fa      	str	r2, [r7, #12]
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc58:	4ac0      	ldr	r2, [pc, #768]	; (800ff5c <UART_SetConfig+0xc28>)
 800fc5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	2200      	movs	r2, #0
 800fc62:	603b      	str	r3, [r7, #0]
 800fc64:	607a      	str	r2, [r7, #4]
 800fc66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc6e:	f7f0 fb3d 	bl	80002ec <__aeabi_uldivmod>
 800fc72:	4602      	mov	r2, r0
 800fc74:	460b      	mov	r3, r1
 800fc76:	4610      	mov	r0, r2
 800fc78:	4619      	mov	r1, r3
 800fc7a:	f04f 0200 	mov.w	r2, #0
 800fc7e:	f04f 0300 	mov.w	r3, #0
 800fc82:	020b      	lsls	r3, r1, #8
 800fc84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc88:	0202      	lsls	r2, r0, #8
 800fc8a:	6979      	ldr	r1, [r7, #20]
 800fc8c:	6849      	ldr	r1, [r1, #4]
 800fc8e:	0849      	lsrs	r1, r1, #1
 800fc90:	2000      	movs	r0, #0
 800fc92:	460c      	mov	r4, r1
 800fc94:	4605      	mov	r5, r0
 800fc96:	eb12 0804 	adds.w	r8, r2, r4
 800fc9a:	eb43 0905 	adc.w	r9, r3, r5
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	469a      	mov	sl, r3
 800fca6:	4693      	mov	fp, r2
 800fca8:	4652      	mov	r2, sl
 800fcaa:	465b      	mov	r3, fp
 800fcac:	4640      	mov	r0, r8
 800fcae:	4649      	mov	r1, r9
 800fcb0:	f7f0 fb1c 	bl	80002ec <__aeabi_uldivmod>
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	4613      	mov	r3, r2
 800fcba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fcc2:	d308      	bcc.n	800fcd6 <UART_SetConfig+0x9a2>
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fcca:	d204      	bcs.n	800fcd6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcd2:	60da      	str	r2, [r3, #12]
 800fcd4:	e17f      	b.n	800ffd6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fcdc:	e17b      	b.n	800ffd6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	69db      	ldr	r3, [r3, #28]
 800fce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fce6:	f040 80bd 	bne.w	800fe64 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fcea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fcee:	2b20      	cmp	r3, #32
 800fcf0:	dc48      	bgt.n	800fd84 <UART_SetConfig+0xa50>
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	db7b      	blt.n	800fdee <UART_SetConfig+0xaba>
 800fcf6:	2b20      	cmp	r3, #32
 800fcf8:	d879      	bhi.n	800fdee <UART_SetConfig+0xaba>
 800fcfa:	a201      	add	r2, pc, #4	; (adr r2, 800fd00 <UART_SetConfig+0x9cc>)
 800fcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd00:	0800fd8b 	.word	0x0800fd8b
 800fd04:	0800fd93 	.word	0x0800fd93
 800fd08:	0800fdef 	.word	0x0800fdef
 800fd0c:	0800fdef 	.word	0x0800fdef
 800fd10:	0800fd9b 	.word	0x0800fd9b
 800fd14:	0800fdef 	.word	0x0800fdef
 800fd18:	0800fdef 	.word	0x0800fdef
 800fd1c:	0800fdef 	.word	0x0800fdef
 800fd20:	0800fdab 	.word	0x0800fdab
 800fd24:	0800fdef 	.word	0x0800fdef
 800fd28:	0800fdef 	.word	0x0800fdef
 800fd2c:	0800fdef 	.word	0x0800fdef
 800fd30:	0800fdef 	.word	0x0800fdef
 800fd34:	0800fdef 	.word	0x0800fdef
 800fd38:	0800fdef 	.word	0x0800fdef
 800fd3c:	0800fdef 	.word	0x0800fdef
 800fd40:	0800fdbb 	.word	0x0800fdbb
 800fd44:	0800fdef 	.word	0x0800fdef
 800fd48:	0800fdef 	.word	0x0800fdef
 800fd4c:	0800fdef 	.word	0x0800fdef
 800fd50:	0800fdef 	.word	0x0800fdef
 800fd54:	0800fdef 	.word	0x0800fdef
 800fd58:	0800fdef 	.word	0x0800fdef
 800fd5c:	0800fdef 	.word	0x0800fdef
 800fd60:	0800fdef 	.word	0x0800fdef
 800fd64:	0800fdef 	.word	0x0800fdef
 800fd68:	0800fdef 	.word	0x0800fdef
 800fd6c:	0800fdef 	.word	0x0800fdef
 800fd70:	0800fdef 	.word	0x0800fdef
 800fd74:	0800fdef 	.word	0x0800fdef
 800fd78:	0800fdef 	.word	0x0800fdef
 800fd7c:	0800fdef 	.word	0x0800fdef
 800fd80:	0800fde1 	.word	0x0800fde1
 800fd84:	2b40      	cmp	r3, #64	; 0x40
 800fd86:	d02e      	beq.n	800fde6 <UART_SetConfig+0xab2>
 800fd88:	e031      	b.n	800fdee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd8a:	f7fb fb13 	bl	800b3b4 <HAL_RCC_GetPCLK1Freq>
 800fd8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd90:	e033      	b.n	800fdfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd92:	f7fb fb25 	bl	800b3e0 <HAL_RCC_GetPCLK2Freq>
 800fd96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd98:	e02f      	b.n	800fdfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fd f9e0 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fda8:	e027      	b.n	800fdfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdaa:	f107 0318 	add.w	r3, r7, #24
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fd fb2c 	bl	800d40c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdb8:	e01f      	b.n	800fdfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdba:	4b69      	ldr	r3, [pc, #420]	; (800ff60 <UART_SetConfig+0xc2c>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f003 0320 	and.w	r3, r3, #32
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d009      	beq.n	800fdda <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fdc6:	4b66      	ldr	r3, [pc, #408]	; (800ff60 <UART_SetConfig+0xc2c>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	08db      	lsrs	r3, r3, #3
 800fdcc:	f003 0303 	and.w	r3, r3, #3
 800fdd0:	4a64      	ldr	r2, [pc, #400]	; (800ff64 <UART_SetConfig+0xc30>)
 800fdd2:	fa22 f303 	lsr.w	r3, r2, r3
 800fdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fdd8:	e00f      	b.n	800fdfa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fdda:	4b62      	ldr	r3, [pc, #392]	; (800ff64 <UART_SetConfig+0xc30>)
 800fddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdde:	e00c      	b.n	800fdfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fde0:	4b61      	ldr	r3, [pc, #388]	; (800ff68 <UART_SetConfig+0xc34>)
 800fde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fde4:	e009      	b.n	800fdfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fde6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdec:	e005      	b.n	800fdfa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fdf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fdfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 80ea 	beq.w	800ffd6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe06:	4a55      	ldr	r2, [pc, #340]	; (800ff5c <UART_SetConfig+0xc28>)
 800fe08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe10:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe14:	005a      	lsls	r2, r3, #1
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	085b      	lsrs	r3, r3, #1
 800fe1c:	441a      	add	r2, r3
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2a:	2b0f      	cmp	r3, #15
 800fe2c:	d916      	bls.n	800fe5c <UART_SetConfig+0xb28>
 800fe2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe34:	d212      	bcs.n	800fe5c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fe36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe38:	b29b      	uxth	r3, r3
 800fe3a:	f023 030f 	bic.w	r3, r3, #15
 800fe3e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fe40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe42:	085b      	lsrs	r3, r3, #1
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	f003 0307 	and.w	r3, r3, #7
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fe58:	60da      	str	r2, [r3, #12]
 800fe5a:	e0bc      	b.n	800ffd6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fe62:	e0b8      	b.n	800ffd6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe68:	2b20      	cmp	r3, #32
 800fe6a:	dc4b      	bgt.n	800ff04 <UART_SetConfig+0xbd0>
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	f2c0 8087 	blt.w	800ff80 <UART_SetConfig+0xc4c>
 800fe72:	2b20      	cmp	r3, #32
 800fe74:	f200 8084 	bhi.w	800ff80 <UART_SetConfig+0xc4c>
 800fe78:	a201      	add	r2, pc, #4	; (adr r2, 800fe80 <UART_SetConfig+0xb4c>)
 800fe7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe7e:	bf00      	nop
 800fe80:	0800ff0b 	.word	0x0800ff0b
 800fe84:	0800ff13 	.word	0x0800ff13
 800fe88:	0800ff81 	.word	0x0800ff81
 800fe8c:	0800ff81 	.word	0x0800ff81
 800fe90:	0800ff1b 	.word	0x0800ff1b
 800fe94:	0800ff81 	.word	0x0800ff81
 800fe98:	0800ff81 	.word	0x0800ff81
 800fe9c:	0800ff81 	.word	0x0800ff81
 800fea0:	0800ff2b 	.word	0x0800ff2b
 800fea4:	0800ff81 	.word	0x0800ff81
 800fea8:	0800ff81 	.word	0x0800ff81
 800feac:	0800ff81 	.word	0x0800ff81
 800feb0:	0800ff81 	.word	0x0800ff81
 800feb4:	0800ff81 	.word	0x0800ff81
 800feb8:	0800ff81 	.word	0x0800ff81
 800febc:	0800ff81 	.word	0x0800ff81
 800fec0:	0800ff3b 	.word	0x0800ff3b
 800fec4:	0800ff81 	.word	0x0800ff81
 800fec8:	0800ff81 	.word	0x0800ff81
 800fecc:	0800ff81 	.word	0x0800ff81
 800fed0:	0800ff81 	.word	0x0800ff81
 800fed4:	0800ff81 	.word	0x0800ff81
 800fed8:	0800ff81 	.word	0x0800ff81
 800fedc:	0800ff81 	.word	0x0800ff81
 800fee0:	0800ff81 	.word	0x0800ff81
 800fee4:	0800ff81 	.word	0x0800ff81
 800fee8:	0800ff81 	.word	0x0800ff81
 800feec:	0800ff81 	.word	0x0800ff81
 800fef0:	0800ff81 	.word	0x0800ff81
 800fef4:	0800ff81 	.word	0x0800ff81
 800fef8:	0800ff81 	.word	0x0800ff81
 800fefc:	0800ff81 	.word	0x0800ff81
 800ff00:	0800ff73 	.word	0x0800ff73
 800ff04:	2b40      	cmp	r3, #64	; 0x40
 800ff06:	d037      	beq.n	800ff78 <UART_SetConfig+0xc44>
 800ff08:	e03a      	b.n	800ff80 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff0a:	f7fb fa53 	bl	800b3b4 <HAL_RCC_GetPCLK1Freq>
 800ff0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ff10:	e03c      	b.n	800ff8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff12:	f7fb fa65 	bl	800b3e0 <HAL_RCC_GetPCLK2Freq>
 800ff16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ff18:	e038      	b.n	800ff8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7fd f920 	bl	800d164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff28:	e030      	b.n	800ff8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff2a:	f107 0318 	add.w	r3, r7, #24
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fd fa6c 	bl	800d40c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff38:	e028      	b.n	800ff8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff3a:	4b09      	ldr	r3, [pc, #36]	; (800ff60 <UART_SetConfig+0xc2c>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	f003 0320 	and.w	r3, r3, #32
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d012      	beq.n	800ff6c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff46:	4b06      	ldr	r3, [pc, #24]	; (800ff60 <UART_SetConfig+0xc2c>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	08db      	lsrs	r3, r3, #3
 800ff4c:	f003 0303 	and.w	r3, r3, #3
 800ff50:	4a04      	ldr	r2, [pc, #16]	; (800ff64 <UART_SetConfig+0xc30>)
 800ff52:	fa22 f303 	lsr.w	r3, r2, r3
 800ff56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff58:	e018      	b.n	800ff8c <UART_SetConfig+0xc58>
 800ff5a:	bf00      	nop
 800ff5c:	08011800 	.word	0x08011800
 800ff60:	58024400 	.word	0x58024400
 800ff64:	03d09000 	.word	0x03d09000
 800ff68:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ff6c:	4b24      	ldr	r3, [pc, #144]	; (8010000 <UART_SetConfig+0xccc>)
 800ff6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff70:	e00c      	b.n	800ff8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff72:	4b24      	ldr	r3, [pc, #144]	; (8010004 <UART_SetConfig+0xcd0>)
 800ff74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff76:	e009      	b.n	800ff8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff7e:	e005      	b.n	800ff8c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ff80:	2300      	movs	r3, #0
 800ff82:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ff84:	2301      	movs	r3, #1
 800ff86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff8a:	bf00      	nop
    }

    if (pclk != 0U)
 800ff8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d021      	beq.n	800ffd6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff96:	4a1c      	ldr	r2, [pc, #112]	; (8010008 <UART_SetConfig+0xcd4>)
 800ff98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa0:	fbb3 f2f2 	udiv	r2, r3, r2
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	085b      	lsrs	r3, r3, #1
 800ffaa:	441a      	add	r2, r3
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffb4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb8:	2b0f      	cmp	r3, #15
 800ffba:	d909      	bls.n	800ffd0 <UART_SetConfig+0xc9c>
 800ffbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffc2:	d205      	bcs.n	800ffd0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ffc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	60da      	str	r2, [r3, #12]
 800ffce:	e002      	b.n	800ffd6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	2201      	movs	r2, #1
 800ffda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	2200      	movs	r2, #0
 800fff0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fff2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3748      	adds	r7, #72	; 0x48
 800fffa:	46bd      	mov	sp, r7
 800fffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010000:	03d09000 	.word	0x03d09000
 8010004:	003d0900 	.word	0x003d0900
 8010008:	08011800 	.word	0x08011800

0801000c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010018:	f003 0301 	and.w	r3, r3, #1
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00a      	beq.n	8010036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	430a      	orrs	r2, r1
 8010034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801003a:	f003 0302 	and.w	r3, r3, #2
 801003e:	2b00      	cmp	r3, #0
 8010040:	d00a      	beq.n	8010058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	430a      	orrs	r2, r1
 8010056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005c:	f003 0304 	and.w	r3, r3, #4
 8010060:	2b00      	cmp	r3, #0
 8010062:	d00a      	beq.n	801007a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	430a      	orrs	r2, r1
 8010078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801007e:	f003 0308 	and.w	r3, r3, #8
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00a      	beq.n	801009c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	430a      	orrs	r2, r1
 801009a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100a0:	f003 0310 	and.w	r3, r3, #16
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d00a      	beq.n	80100be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	430a      	orrs	r2, r1
 80100bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100c2:	f003 0320 	and.w	r3, r3, #32
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d00a      	beq.n	80100e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	689b      	ldr	r3, [r3, #8]
 80100d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	430a      	orrs	r2, r1
 80100de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d01a      	beq.n	8010122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	430a      	orrs	r2, r1
 8010100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801010a:	d10a      	bne.n	8010122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	430a      	orrs	r2, r1
 8010120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801012a:	2b00      	cmp	r3, #0
 801012c:	d00a      	beq.n	8010144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	430a      	orrs	r2, r1
 8010142:	605a      	str	r2, [r3, #4]
  }
}
 8010144:	bf00      	nop
 8010146:	370c      	adds	r7, #12
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr

08010150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b098      	sub	sp, #96	; 0x60
 8010154:	af02      	add	r7, sp, #8
 8010156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2200      	movs	r2, #0
 801015c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010160:	f7f4 fe18 	bl	8004d94 <HAL_GetTick>
 8010164:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f003 0308 	and.w	r3, r3, #8
 8010170:	2b08      	cmp	r3, #8
 8010172:	d12f      	bne.n	80101d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010178:	9300      	str	r3, [sp, #0]
 801017a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801017c:	2200      	movs	r2, #0
 801017e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 f88e 	bl	80102a4 <UART_WaitOnFlagUntilTimeout>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d022      	beq.n	80101d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010196:	e853 3f00 	ldrex	r3, [r3]
 801019a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801019c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801019e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101a2:	653b      	str	r3, [r7, #80]	; 0x50
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	461a      	mov	r2, r3
 80101aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ac:	647b      	str	r3, [r7, #68]	; 0x44
 80101ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80101b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101b4:	e841 2300 	strex	r3, r2, [r1]
 80101b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80101ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d1e6      	bne.n	801018e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2220      	movs	r2, #32
 80101c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2200      	movs	r2, #0
 80101cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80101d0:	2303      	movs	r3, #3
 80101d2:	e063      	b.n	801029c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f003 0304 	and.w	r3, r3, #4
 80101de:	2b04      	cmp	r3, #4
 80101e0:	d149      	bne.n	8010276 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101ea:	2200      	movs	r2, #0
 80101ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 f857 	bl	80102a4 <UART_WaitOnFlagUntilTimeout>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d03c      	beq.n	8010276 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010204:	e853 3f00 	ldrex	r3, [r3]
 8010208:	623b      	str	r3, [r7, #32]
   return(result);
 801020a:	6a3b      	ldr	r3, [r7, #32]
 801020c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	461a      	mov	r2, r3
 8010218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801021a:	633b      	str	r3, [r7, #48]	; 0x30
 801021c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801021e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010222:	e841 2300 	strex	r3, r2, [r1]
 8010226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1e6      	bne.n	80101fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	3308      	adds	r3, #8
 8010234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	e853 3f00 	ldrex	r3, [r3]
 801023c:	60fb      	str	r3, [r7, #12]
   return(result);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f023 0301 	bic.w	r3, r3, #1
 8010244:	64bb      	str	r3, [r7, #72]	; 0x48
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	3308      	adds	r3, #8
 801024c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801024e:	61fa      	str	r2, [r7, #28]
 8010250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010252:	69b9      	ldr	r1, [r7, #24]
 8010254:	69fa      	ldr	r2, [r7, #28]
 8010256:	e841 2300 	strex	r3, r2, [r1]
 801025a:	617b      	str	r3, [r7, #20]
   return(result);
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1e5      	bne.n	801022e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2220      	movs	r2, #32
 8010266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010272:	2303      	movs	r3, #3
 8010274:	e012      	b.n	801029c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2220      	movs	r2, #32
 801027a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2220      	movs	r2, #32
 8010282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2200      	movs	r2, #0
 8010290:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2200      	movs	r2, #0
 8010296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3758      	adds	r7, #88	; 0x58
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	60b9      	str	r1, [r7, #8]
 80102ae:	603b      	str	r3, [r7, #0]
 80102b0:	4613      	mov	r3, r2
 80102b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102b4:	e049      	b.n	801034a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102bc:	d045      	beq.n	801034a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102be:	f7f4 fd69 	bl	8004d94 <HAL_GetTick>
 80102c2:	4602      	mov	r2, r0
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	69ba      	ldr	r2, [r7, #24]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d302      	bcc.n	80102d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d101      	bne.n	80102d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80102d4:	2303      	movs	r3, #3
 80102d6:	e048      	b.n	801036a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f003 0304 	and.w	r3, r3, #4
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d031      	beq.n	801034a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	69db      	ldr	r3, [r3, #28]
 80102ec:	f003 0308 	and.w	r3, r3, #8
 80102f0:	2b08      	cmp	r3, #8
 80102f2:	d110      	bne.n	8010316 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2208      	movs	r2, #8
 80102fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80102fc:	68f8      	ldr	r0, [r7, #12]
 80102fe:	f000 f839 	bl	8010374 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2208      	movs	r2, #8
 8010306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2200      	movs	r2, #0
 801030e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8010312:	2301      	movs	r3, #1
 8010314:	e029      	b.n	801036a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	69db      	ldr	r3, [r3, #28]
 801031c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010324:	d111      	bne.n	801034a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801032e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010330:	68f8      	ldr	r0, [r7, #12]
 8010332:	f000 f81f 	bl	8010374 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2220      	movs	r2, #32
 801033a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2200      	movs	r2, #0
 8010342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8010346:	2303      	movs	r3, #3
 8010348:	e00f      	b.n	801036a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	69da      	ldr	r2, [r3, #28]
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	4013      	ands	r3, r2
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	429a      	cmp	r2, r3
 8010358:	bf0c      	ite	eq
 801035a:	2301      	moveq	r3, #1
 801035c:	2300      	movne	r3, #0
 801035e:	b2db      	uxtb	r3, r3
 8010360:	461a      	mov	r2, r3
 8010362:	79fb      	ldrb	r3, [r7, #7]
 8010364:	429a      	cmp	r2, r3
 8010366:	d0a6      	beq.n	80102b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010368:	2300      	movs	r3, #0
}
 801036a:	4618      	mov	r0, r3
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
	...

08010374 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010374:	b480      	push	{r7}
 8010376:	b095      	sub	sp, #84	; 0x54
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010384:	e853 3f00 	ldrex	r3, [r3]
 8010388:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801038a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801038c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010390:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	461a      	mov	r2, r3
 8010398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801039a:	643b      	str	r3, [r7, #64]	; 0x40
 801039c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80103a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80103a2:	e841 2300 	strex	r3, r2, [r1]
 80103a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80103a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1e6      	bne.n	801037c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3308      	adds	r3, #8
 80103b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b6:	6a3b      	ldr	r3, [r7, #32]
 80103b8:	e853 3f00 	ldrex	r3, [r3]
 80103bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80103be:	69fa      	ldr	r2, [r7, #28]
 80103c0:	4b1e      	ldr	r3, [pc, #120]	; (801043c <UART_EndRxTransfer+0xc8>)
 80103c2:	4013      	ands	r3, r2
 80103c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	3308      	adds	r3, #8
 80103cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80103d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103d6:	e841 2300 	strex	r3, r2, [r1]
 80103da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d1e5      	bne.n	80103ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d118      	bne.n	801041c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	e853 3f00 	ldrex	r3, [r3]
 80103f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	f023 0310 	bic.w	r3, r3, #16
 80103fe:	647b      	str	r3, [r7, #68]	; 0x44
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	461a      	mov	r2, r3
 8010406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010408:	61bb      	str	r3, [r7, #24]
 801040a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040c:	6979      	ldr	r1, [r7, #20]
 801040e:	69ba      	ldr	r2, [r7, #24]
 8010410:	e841 2300 	strex	r3, r2, [r1]
 8010414:	613b      	str	r3, [r7, #16]
   return(result);
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d1e6      	bne.n	80103ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2220      	movs	r2, #32
 8010420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2200      	movs	r2, #0
 801042e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010430:	bf00      	nop
 8010432:	3754      	adds	r7, #84	; 0x54
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr
 801043c:	effffffe 	.word	0xeffffffe

08010440 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801044e:	2b01      	cmp	r3, #1
 8010450:	d101      	bne.n	8010456 <HAL_UARTEx_DisableFifoMode+0x16>
 8010452:	2302      	movs	r3, #2
 8010454:	e027      	b.n	80104a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2201      	movs	r2, #1
 801045a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2224      	movs	r2, #36	; 0x24
 8010462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	681a      	ldr	r2, [r3, #0]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f022 0201 	bic.w	r2, r2, #1
 801047c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010484:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2200      	movs	r2, #0
 801048a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	68fa      	ldr	r2, [r7, #12]
 8010492:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2220      	movs	r2, #32
 8010498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80104a4:	2300      	movs	r3, #0
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3714      	adds	r7, #20
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr

080104b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b084      	sub	sp, #16
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d101      	bne.n	80104ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80104c6:	2302      	movs	r3, #2
 80104c8:	e02d      	b.n	8010526 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2201      	movs	r2, #1
 80104ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2224      	movs	r2, #36	; 0x24
 80104d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	681a      	ldr	r2, [r3, #0]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f022 0201 	bic.w	r2, r2, #1
 80104f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	689b      	ldr	r3, [r3, #8]
 80104f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	683a      	ldr	r2, [r7, #0]
 8010502:	430a      	orrs	r2, r1
 8010504:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 f850 	bl	80105ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	68fa      	ldr	r2, [r7, #12]
 8010512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2220      	movs	r2, #32
 8010518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	3710      	adds	r7, #16
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b084      	sub	sp, #16
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
 8010536:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801053e:	2b01      	cmp	r3, #1
 8010540:	d101      	bne.n	8010546 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010542:	2302      	movs	r3, #2
 8010544:	e02d      	b.n	80105a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2201      	movs	r2, #1
 801054a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2224      	movs	r2, #36	; 0x24
 8010552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f022 0201 	bic.w	r2, r2, #1
 801056c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	683a      	ldr	r2, [r7, #0]
 801057e:	430a      	orrs	r2, r1
 8010580:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 f812 	bl	80105ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2220      	movs	r2, #32
 8010594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2200      	movs	r2, #0
 801059c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80105a0:	2300      	movs	r3, #0
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
	...

080105ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d108      	bne.n	80105ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2201      	movs	r2, #1
 80105c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2201      	movs	r2, #1
 80105c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80105cc:	e031      	b.n	8010632 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80105ce:	2310      	movs	r3, #16
 80105d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80105d2:	2310      	movs	r3, #16
 80105d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	689b      	ldr	r3, [r3, #8]
 80105dc:	0e5b      	lsrs	r3, r3, #25
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	f003 0307 	and.w	r3, r3, #7
 80105e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	689b      	ldr	r3, [r3, #8]
 80105ec:	0f5b      	lsrs	r3, r3, #29
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	f003 0307 	and.w	r3, r3, #7
 80105f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80105f6:	7bbb      	ldrb	r3, [r7, #14]
 80105f8:	7b3a      	ldrb	r2, [r7, #12]
 80105fa:	4911      	ldr	r1, [pc, #68]	; (8010640 <UARTEx_SetNbDataToProcess+0x94>)
 80105fc:	5c8a      	ldrb	r2, [r1, r2]
 80105fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010602:	7b3a      	ldrb	r2, [r7, #12]
 8010604:	490f      	ldr	r1, [pc, #60]	; (8010644 <UARTEx_SetNbDataToProcess+0x98>)
 8010606:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010608:	fb93 f3f2 	sdiv	r3, r3, r2
 801060c:	b29a      	uxth	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010614:	7bfb      	ldrb	r3, [r7, #15]
 8010616:	7b7a      	ldrb	r2, [r7, #13]
 8010618:	4909      	ldr	r1, [pc, #36]	; (8010640 <UARTEx_SetNbDataToProcess+0x94>)
 801061a:	5c8a      	ldrb	r2, [r1, r2]
 801061c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010620:	7b7a      	ldrb	r2, [r7, #13]
 8010622:	4908      	ldr	r1, [pc, #32]	; (8010644 <UARTEx_SetNbDataToProcess+0x98>)
 8010624:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010626:	fb93 f3f2 	sdiv	r3, r3, r2
 801062a:	b29a      	uxth	r2, r3
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010632:	bf00      	nop
 8010634:	3714      	adds	r7, #20
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	08011818 	.word	0x08011818
 8010644:	08011820 	.word	0x08011820

08010648 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d121      	bne.n	801069e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	4b27      	ldr	r3, [pc, #156]	; (80106fc <FMC_SDRAM_Init+0xb4>)
 8010660:	4013      	ands	r3, r2
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	6851      	ldr	r1, [r2, #4]
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	6892      	ldr	r2, [r2, #8]
 801066a:	4311      	orrs	r1, r2
 801066c:	683a      	ldr	r2, [r7, #0]
 801066e:	68d2      	ldr	r2, [r2, #12]
 8010670:	4311      	orrs	r1, r2
 8010672:	683a      	ldr	r2, [r7, #0]
 8010674:	6912      	ldr	r2, [r2, #16]
 8010676:	4311      	orrs	r1, r2
 8010678:	683a      	ldr	r2, [r7, #0]
 801067a:	6952      	ldr	r2, [r2, #20]
 801067c:	4311      	orrs	r1, r2
 801067e:	683a      	ldr	r2, [r7, #0]
 8010680:	6992      	ldr	r2, [r2, #24]
 8010682:	4311      	orrs	r1, r2
 8010684:	683a      	ldr	r2, [r7, #0]
 8010686:	69d2      	ldr	r2, [r2, #28]
 8010688:	4311      	orrs	r1, r2
 801068a:	683a      	ldr	r2, [r7, #0]
 801068c:	6a12      	ldr	r2, [r2, #32]
 801068e:	4311      	orrs	r1, r2
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010694:	430a      	orrs	r2, r1
 8010696:	431a      	orrs	r2, r3
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	e026      	b.n	80106ec <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	69d9      	ldr	r1, [r3, #28]
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	6a1b      	ldr	r3, [r3, #32]
 80106ae:	4319      	orrs	r1, r3
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b4:	430b      	orrs	r3, r1
 80106b6:	431a      	orrs	r2, r3
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	685a      	ldr	r2, [r3, #4]
 80106c0:	4b0e      	ldr	r3, [pc, #56]	; (80106fc <FMC_SDRAM_Init+0xb4>)
 80106c2:	4013      	ands	r3, r2
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	6851      	ldr	r1, [r2, #4]
 80106c8:	683a      	ldr	r2, [r7, #0]
 80106ca:	6892      	ldr	r2, [r2, #8]
 80106cc:	4311      	orrs	r1, r2
 80106ce:	683a      	ldr	r2, [r7, #0]
 80106d0:	68d2      	ldr	r2, [r2, #12]
 80106d2:	4311      	orrs	r1, r2
 80106d4:	683a      	ldr	r2, [r7, #0]
 80106d6:	6912      	ldr	r2, [r2, #16]
 80106d8:	4311      	orrs	r1, r2
 80106da:	683a      	ldr	r2, [r7, #0]
 80106dc:	6952      	ldr	r2, [r2, #20]
 80106de:	4311      	orrs	r1, r2
 80106e0:	683a      	ldr	r2, [r7, #0]
 80106e2:	6992      	ldr	r2, [r2, #24]
 80106e4:	430a      	orrs	r2, r1
 80106e6:	431a      	orrs	r2, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	370c      	adds	r7, #12
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr
 80106fa:	bf00      	nop
 80106fc:	ffff8000 	.word	0xffff8000

08010700 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010700:	b480      	push	{r7}
 8010702:	b085      	sub	sp, #20
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d128      	bne.n	8010764 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	689b      	ldr	r3, [r3, #8]
 8010716:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	1e59      	subs	r1, r3, #1
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	3b01      	subs	r3, #1
 8010726:	011b      	lsls	r3, r3, #4
 8010728:	4319      	orrs	r1, r3
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	689b      	ldr	r3, [r3, #8]
 801072e:	3b01      	subs	r3, #1
 8010730:	021b      	lsls	r3, r3, #8
 8010732:	4319      	orrs	r1, r3
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	3b01      	subs	r3, #1
 801073a:	031b      	lsls	r3, r3, #12
 801073c:	4319      	orrs	r1, r3
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	691b      	ldr	r3, [r3, #16]
 8010742:	3b01      	subs	r3, #1
 8010744:	041b      	lsls	r3, r3, #16
 8010746:	4319      	orrs	r1, r3
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	695b      	ldr	r3, [r3, #20]
 801074c:	3b01      	subs	r3, #1
 801074e:	051b      	lsls	r3, r3, #20
 8010750:	4319      	orrs	r1, r3
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	699b      	ldr	r3, [r3, #24]
 8010756:	3b01      	subs	r3, #1
 8010758:	061b      	lsls	r3, r3, #24
 801075a:	430b      	orrs	r3, r1
 801075c:	431a      	orrs	r2, r3
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	609a      	str	r2, [r3, #8]
 8010762:	e02d      	b.n	80107c0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	689a      	ldr	r2, [r3, #8]
 8010768:	4b19      	ldr	r3, [pc, #100]	; (80107d0 <FMC_SDRAM_Timing_Init+0xd0>)
 801076a:	4013      	ands	r3, r2
 801076c:	68ba      	ldr	r2, [r7, #8]
 801076e:	68d2      	ldr	r2, [r2, #12]
 8010770:	3a01      	subs	r2, #1
 8010772:	0311      	lsls	r1, r2, #12
 8010774:	68ba      	ldr	r2, [r7, #8]
 8010776:	6952      	ldr	r2, [r2, #20]
 8010778:	3a01      	subs	r2, #1
 801077a:	0512      	lsls	r2, r2, #20
 801077c:	430a      	orrs	r2, r1
 801077e:	431a      	orrs	r2, r3
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	1e59      	subs	r1, r3, #1
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	3b01      	subs	r3, #1
 8010798:	011b      	lsls	r3, r3, #4
 801079a:	4319      	orrs	r1, r3
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	689b      	ldr	r3, [r3, #8]
 80107a0:	3b01      	subs	r3, #1
 80107a2:	021b      	lsls	r3, r3, #8
 80107a4:	4319      	orrs	r1, r3
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	691b      	ldr	r3, [r3, #16]
 80107aa:	3b01      	subs	r3, #1
 80107ac:	041b      	lsls	r3, r3, #16
 80107ae:	4319      	orrs	r1, r3
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	699b      	ldr	r3, [r3, #24]
 80107b4:	3b01      	subs	r3, #1
 80107b6:	061b      	lsls	r3, r3, #24
 80107b8:	430b      	orrs	r3, r1
 80107ba:	431a      	orrs	r2, r3
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80107c0:	2300      	movs	r3, #0
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3714      	adds	r7, #20
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
 80107ce:	bf00      	nop
 80107d0:	ff0f0fff 	.word	0xff0f0fff

080107d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80107d4:	b084      	sub	sp, #16
 80107d6:	b480      	push	{r7}
 80107d8:	b085      	sub	sp, #20
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
 80107de:	f107 001c 	add.w	r0, r7, #28
 80107e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80107e6:	2300      	movs	r3, #0
 80107e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80107ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80107ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80107ee:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80107f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80107f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80107f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80107fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80107fc:	68fa      	ldr	r2, [r7, #12]
 80107fe:	4313      	orrs	r3, r2
 8010800:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	685a      	ldr	r2, [r3, #4]
 8010806:	4b07      	ldr	r3, [pc, #28]	; (8010824 <SDMMC_Init+0x50>)
 8010808:	4013      	ands	r3, r2
 801080a:	68fa      	ldr	r2, [r7, #12]
 801080c:	431a      	orrs	r2, r3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010812:	2300      	movs	r3, #0
}
 8010814:	4618      	mov	r0, r3
 8010816:	3714      	adds	r7, #20
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	b004      	add	sp, #16
 8010820:	4770      	bx	lr
 8010822:	bf00      	nop
 8010824:	ffc02c00 	.word	0xffc02c00

08010828 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010836:	4618      	mov	r0, r3
 8010838:	370c      	adds	r7, #12
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr

08010842 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010842:	b480      	push	{r7}
 8010844:	b083      	sub	sp, #12
 8010846:	af00      	add	r7, sp, #0
 8010848:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	f043 0203 	orr.w	r2, r3, #3
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010856:	2300      	movs	r3, #0
}
 8010858:	4618      	mov	r0, r3
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f003 0303 	and.w	r3, r3, #3
}
 8010874:	4618      	mov	r0, r3
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010880:	b480      	push	{r7}
 8010882:	b085      	sub	sp, #20
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801088a:	2300      	movs	r3, #0
 801088c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801089e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80108a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80108aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	4313      	orrs	r3, r2
 80108b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	68da      	ldr	r2, [r3, #12]
 80108b6:	4b06      	ldr	r3, [pc, #24]	; (80108d0 <SDMMC_SendCommand+0x50>)
 80108b8:	4013      	ands	r3, r2
 80108ba:	68fa      	ldr	r2, [r7, #12]
 80108bc:	431a      	orrs	r2, r3
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80108c2:	2300      	movs	r3, #0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr
 80108d0:	fffee0c0 	.word	0xfffee0c0

080108d4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	691b      	ldr	r3, [r3, #16]
 80108e0:	b2db      	uxtb	r3, r3
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	370c      	adds	r7, #12
 80108e6:	46bd      	mov	sp, r7
 80108e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ec:	4770      	bx	lr

080108ee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80108ee:	b480      	push	{r7}
 80108f0:	b085      	sub	sp, #20
 80108f2:	af00      	add	r7, sp, #0
 80108f4:	6078      	str	r0, [r7, #4]
 80108f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	3314      	adds	r3, #20
 80108fc:	461a      	mov	r2, r3
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	4413      	add	r3, r2
 8010902:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
}
 8010908:	4618      	mov	r0, r3
 801090a:	3714      	adds	r7, #20
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr

08010914 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010914:	b480      	push	{r7}
 8010916:	b085      	sub	sp, #20
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801091e:	2300      	movs	r3, #0
 8010920:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	685a      	ldr	r2, [r3, #4]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801093a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010940:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8010946:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	4313      	orrs	r3, r2
 801094c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010952:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	431a      	orrs	r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801095e:	2300      	movs	r3, #0

}
 8010960:	4618      	mov	r0, r3
 8010962:	3714      	adds	r7, #20
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b088      	sub	sp, #32
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801097a:	2310      	movs	r3, #16
 801097c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801097e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010984:	2300      	movs	r3, #0
 8010986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801098c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801098e:	f107 0308 	add.w	r3, r7, #8
 8010992:	4619      	mov	r1, r3
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f7ff ff73 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801099a:	f241 3288 	movw	r2, #5000	; 0x1388
 801099e:	2110      	movs	r1, #16
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f000 f995 	bl	8010cd0 <SDMMC_GetCmdResp1>
 80109a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109a8:	69fb      	ldr	r3, [r7, #28]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3720      	adds	r7, #32
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b088      	sub	sp, #32
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
 80109ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80109c0:	2307      	movs	r3, #7
 80109c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109ca:	2300      	movs	r3, #0
 80109cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109d4:	f107 0308 	add.w	r3, r7, #8
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff ff50 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80109e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80109e4:	2107      	movs	r1, #7
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f000 f972 	bl	8010cd0 <SDMMC_GetCmdResp1>
 80109ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ee:	69fb      	ldr	r3, [r7, #28]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3720      	adds	r7, #32
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b088      	sub	sp, #32
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010a00:	2300      	movs	r3, #0
 8010a02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010a04:	2300      	movs	r3, #0
 8010a06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a16:	f107 0308 	add.w	r3, r7, #8
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f7ff ff2f 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f000 fb96 	bl	8011154 <SDMMC_GetCmdError>
 8010a28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a2a:	69fb      	ldr	r3, [r7, #28]
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3720      	adds	r7, #32
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b088      	sub	sp, #32
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010a3c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010a40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010a42:	2308      	movs	r3, #8
 8010a44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a56:	f107 0308 	add.w	r3, r7, #8
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f7ff ff0f 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fb28 	bl	80110b8 <SDMMC_GetCmdResp7>
 8010a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a6a:	69fb      	ldr	r3, [r7, #28]
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3720      	adds	r7, #32
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b088      	sub	sp, #32
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010a82:	2337      	movs	r3, #55	; 0x37
 8010a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a96:	f107 0308 	add.w	r3, r7, #8
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f7ff feef 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010aa6:	2137      	movs	r1, #55	; 0x37
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f000 f911 	bl	8010cd0 <SDMMC_GetCmdResp1>
 8010aae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ab0:	69fb      	ldr	r3, [r7, #28]
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3720      	adds	r7, #32
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b088      	sub	sp, #32
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010ac8:	2329      	movs	r3, #41	; 0x29
 8010aca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ada:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010adc:	f107 0308 	add.w	r3, r7, #8
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7ff fecc 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 fa2d 	bl	8010f48 <SDMMC_GetCmdResp3>
 8010aee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010af0:	69fb      	ldr	r3, [r7, #28]
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3720      	adds	r7, #32
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010afa:	b580      	push	{r7, lr}
 8010afc:	b088      	sub	sp, #32
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
 8010b02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010b08:	2306      	movs	r3, #6
 8010b0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b12:	2300      	movs	r3, #0
 8010b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b1c:	f107 0308 	add.w	r3, r7, #8
 8010b20:	4619      	mov	r1, r3
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7ff feac 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b2c:	2106      	movs	r1, #6
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 f8ce 	bl	8010cd0 <SDMMC_GetCmdResp1>
 8010b34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b36:	69fb      	ldr	r3, [r7, #28]
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3720      	adds	r7, #32
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b088      	sub	sp, #32
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010b4c:	2333      	movs	r3, #51	; 0x33
 8010b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b56:	2300      	movs	r3, #0
 8010b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b60:	f107 0308 	add.w	r3, r7, #8
 8010b64:	4619      	mov	r1, r3
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7ff fe8a 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b70:	2133      	movs	r1, #51	; 0x33
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f000 f8ac 	bl	8010cd0 <SDMMC_GetCmdResp1>
 8010b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b7a:	69fb      	ldr	r3, [r7, #28]
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3720      	adds	r7, #32
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b088      	sub	sp, #32
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010b90:	2302      	movs	r3, #2
 8010b92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010b94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ba2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ba4:	f107 0308 	add.w	r3, r7, #8
 8010ba8:	4619      	mov	r1, r3
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f7ff fe68 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f000 f97f 	bl	8010eb4 <SDMMC_GetCmdResp2>
 8010bb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bb8:	69fb      	ldr	r3, [r7, #28]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3720      	adds	r7, #32
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b088      	sub	sp, #32
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010bd0:	2309      	movs	r3, #9
 8010bd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010bd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010bd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010be2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010be4:	f107 0308 	add.w	r3, r7, #8
 8010be8:	4619      	mov	r1, r3
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f7ff fe48 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f000 f95f 	bl	8010eb4 <SDMMC_GetCmdResp2>
 8010bf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bf8:	69fb      	ldr	r3, [r7, #28]
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3720      	adds	r7, #32
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b088      	sub	sp, #32
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
 8010c0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010c10:	2303      	movs	r3, #3
 8010c12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c24:	f107 0308 	add.w	r3, r7, #8
 8010c28:	4619      	mov	r1, r3
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f7ff fe28 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010c30:	683a      	ldr	r2, [r7, #0]
 8010c32:	2103      	movs	r1, #3
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f000 f9c7 	bl	8010fc8 <SDMMC_GetCmdResp6>
 8010c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c3c:	69fb      	ldr	r3, [r7, #28]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3720      	adds	r7, #32
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b088      	sub	sp, #32
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
 8010c4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010c54:	230d      	movs	r3, #13
 8010c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c68:	f107 0308 	add.w	r3, r7, #8
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f7ff fe06 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c78:	210d      	movs	r1, #13
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 f828 	bl	8010cd0 <SDMMC_GetCmdResp1>
 8010c80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c82:	69fb      	ldr	r3, [r7, #28]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3720      	adds	r7, #32
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b088      	sub	sp, #32
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010c94:	2300      	movs	r3, #0
 8010c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010c98:	230d      	movs	r3, #13
 8010c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010caa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cac:	f107 0308 	add.w	r3, r7, #8
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f7ff fde4 	bl	8010880 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cbc:	210d      	movs	r1, #13
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 f806 	bl	8010cd0 <SDMMC_GetCmdResp1>
 8010cc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cc6:	69fb      	ldr	r3, [r7, #28]
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3720      	adds	r7, #32
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b088      	sub	sp, #32
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	607a      	str	r2, [r7, #4]
 8010cdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010cde:	4b70      	ldr	r3, [pc, #448]	; (8010ea0 <SDMMC_GetCmdResp1+0x1d0>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	4a70      	ldr	r2, [pc, #448]	; (8010ea4 <SDMMC_GetCmdResp1+0x1d4>)
 8010ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8010ce8:	0a5a      	lsrs	r2, r3, #9
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	fb02 f303 	mul.w	r3, r2, r3
 8010cf0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010cf2:	69fb      	ldr	r3, [r7, #28]
 8010cf4:	1e5a      	subs	r2, r3, #1
 8010cf6:	61fa      	str	r2, [r7, #28]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d102      	bne.n	8010d02 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d00:	e0c9      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d06:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010d08:	69ba      	ldr	r2, [r7, #24]
 8010d0a:	4b67      	ldr	r3, [pc, #412]	; (8010ea8 <SDMMC_GetCmdResp1+0x1d8>)
 8010d0c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d0ef      	beq.n	8010cf2 <SDMMC_GetCmdResp1+0x22>
 8010d12:	69bb      	ldr	r3, [r7, #24]
 8010d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d1ea      	bne.n	8010cf2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d20:	f003 0304 	and.w	r3, r3, #4
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d004      	beq.n	8010d32 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	2204      	movs	r2, #4
 8010d2c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d2e:	2304      	movs	r3, #4
 8010d30:	e0b1      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d36:	f003 0301 	and.w	r3, r3, #1
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d004      	beq.n	8010d48 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2201      	movs	r2, #1
 8010d42:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d44:	2301      	movs	r3, #1
 8010d46:	e0a6      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	4a58      	ldr	r2, [pc, #352]	; (8010eac <SDMMC_GetCmdResp1+0x1dc>)
 8010d4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f7ff fdc0 	bl	80108d4 <SDMMC_GetCommandResponse>
 8010d54:	4603      	mov	r3, r0
 8010d56:	461a      	mov	r2, r3
 8010d58:	7afb      	ldrb	r3, [r7, #11]
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d001      	beq.n	8010d62 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	e099      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010d62:	2100      	movs	r1, #0
 8010d64:	68f8      	ldr	r0, [r7, #12]
 8010d66:	f7ff fdc2 	bl	80108ee <SDMMC_GetResponse>
 8010d6a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010d6c:	697a      	ldr	r2, [r7, #20]
 8010d6e:	4b50      	ldr	r3, [pc, #320]	; (8010eb0 <SDMMC_GetCmdResp1+0x1e0>)
 8010d70:	4013      	ands	r3, r2
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d101      	bne.n	8010d7a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010d76:	2300      	movs	r3, #0
 8010d78:	e08d      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	da02      	bge.n	8010d86 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010d84:	e087      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d001      	beq.n	8010d94 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010d90:	2340      	movs	r3, #64	; 0x40
 8010d92:	e080      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d001      	beq.n	8010da2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010d9e:	2380      	movs	r3, #128	; 0x80
 8010da0:	e079      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d002      	beq.n	8010db2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010db0:	e071      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d002      	beq.n	8010dc2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dc0:	e069      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d002      	beq.n	8010dd2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dd0:	e061      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d002      	beq.n	8010de2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010de0:	e059      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010df0:	e051      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d002      	beq.n	8010e02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e00:	e049      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d002      	beq.n	8010e12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010e10:	e041      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d002      	beq.n	8010e22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e20:	e039      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d002      	beq.n	8010e32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e30:	e031      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010e40:	e029      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d002      	beq.n	8010e52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010e50:	e021      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d002      	beq.n	8010e62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010e5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010e60:	e019      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d002      	beq.n	8010e72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010e6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010e70:	e011      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d002      	beq.n	8010e82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010e7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010e80:	e009      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	f003 0308 	and.w	r3, r3, #8
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010e8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010e90:	e001      	b.n	8010e96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010e92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3720      	adds	r7, #32
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	24000008 	.word	0x24000008
 8010ea4:	10624dd3 	.word	0x10624dd3
 8010ea8:	00200045 	.word	0x00200045
 8010eac:	002000c5 	.word	0x002000c5
 8010eb0:	fdffe008 	.word	0xfdffe008

08010eb4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ebc:	4b1f      	ldr	r3, [pc, #124]	; (8010f3c <SDMMC_GetCmdResp2+0x88>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	4a1f      	ldr	r2, [pc, #124]	; (8010f40 <SDMMC_GetCmdResp2+0x8c>)
 8010ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ec6:	0a5b      	lsrs	r3, r3, #9
 8010ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ecc:	fb02 f303 	mul.w	r3, r2, r3
 8010ed0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	1e5a      	subs	r2, r3, #1
 8010ed6:	60fa      	str	r2, [r7, #12]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d102      	bne.n	8010ee2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010edc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ee0:	e026      	b.n	8010f30 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ee6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d0ef      	beq.n	8010ed2 <SDMMC_GetCmdResp2+0x1e>
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d1ea      	bne.n	8010ed2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f00:	f003 0304 	and.w	r3, r3, #4
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d004      	beq.n	8010f12 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2204      	movs	r2, #4
 8010f0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f0e:	2304      	movs	r3, #4
 8010f10:	e00e      	b.n	8010f30 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f16:	f003 0301 	and.w	r3, r3, #1
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d004      	beq.n	8010f28 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2201      	movs	r2, #1
 8010f22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f24:	2301      	movs	r3, #1
 8010f26:	e003      	b.n	8010f30 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	4a06      	ldr	r2, [pc, #24]	; (8010f44 <SDMMC_GetCmdResp2+0x90>)
 8010f2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f2e:	2300      	movs	r3, #0
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3714      	adds	r7, #20
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr
 8010f3c:	24000008 	.word	0x24000008
 8010f40:	10624dd3 	.word	0x10624dd3
 8010f44:	002000c5 	.word	0x002000c5

08010f48 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f50:	4b1a      	ldr	r3, [pc, #104]	; (8010fbc <SDMMC_GetCmdResp3+0x74>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4a1a      	ldr	r2, [pc, #104]	; (8010fc0 <SDMMC_GetCmdResp3+0x78>)
 8010f56:	fba2 2303 	umull	r2, r3, r2, r3
 8010f5a:	0a5b      	lsrs	r3, r3, #9
 8010f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f60:	fb02 f303 	mul.w	r3, r2, r3
 8010f64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	1e5a      	subs	r2, r3, #1
 8010f6a:	60fa      	str	r2, [r7, #12]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d102      	bne.n	8010f76 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f74:	e01b      	b.n	8010fae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f7a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d0ef      	beq.n	8010f66 <SDMMC_GetCmdResp3+0x1e>
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d1ea      	bne.n	8010f66 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f94:	f003 0304 	and.w	r3, r3, #4
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d004      	beq.n	8010fa6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2204      	movs	r2, #4
 8010fa0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010fa2:	2304      	movs	r3, #4
 8010fa4:	e003      	b.n	8010fae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	4a06      	ldr	r2, [pc, #24]	; (8010fc4 <SDMMC_GetCmdResp3+0x7c>)
 8010faa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010fac:	2300      	movs	r3, #0
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3714      	adds	r7, #20
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb8:	4770      	bx	lr
 8010fba:	bf00      	nop
 8010fbc:	24000008 	.word	0x24000008
 8010fc0:	10624dd3 	.word	0x10624dd3
 8010fc4:	002000c5 	.word	0x002000c5

08010fc8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b088      	sub	sp, #32
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	607a      	str	r2, [r7, #4]
 8010fd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fd6:	4b35      	ldr	r3, [pc, #212]	; (80110ac <SDMMC_GetCmdResp6+0xe4>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4a35      	ldr	r2, [pc, #212]	; (80110b0 <SDMMC_GetCmdResp6+0xe8>)
 8010fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8010fe0:	0a5b      	lsrs	r3, r3, #9
 8010fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fe6:	fb02 f303 	mul.w	r3, r2, r3
 8010fea:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	1e5a      	subs	r2, r3, #1
 8010ff0:	61fa      	str	r2, [r7, #28]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d102      	bne.n	8010ffc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ff6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ffa:	e052      	b.n	80110a2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011000:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011002:	69bb      	ldr	r3, [r7, #24]
 8011004:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011008:	2b00      	cmp	r3, #0
 801100a:	d0ef      	beq.n	8010fec <SDMMC_GetCmdResp6+0x24>
 801100c:	69bb      	ldr	r3, [r7, #24]
 801100e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011012:	2b00      	cmp	r3, #0
 8011014:	d1ea      	bne.n	8010fec <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801101a:	f003 0304 	and.w	r3, r3, #4
 801101e:	2b00      	cmp	r3, #0
 8011020:	d004      	beq.n	801102c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2204      	movs	r2, #4
 8011026:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011028:	2304      	movs	r3, #4
 801102a:	e03a      	b.n	80110a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011030:	f003 0301 	and.w	r3, r3, #1
 8011034:	2b00      	cmp	r3, #0
 8011036:	d004      	beq.n	8011042 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	2201      	movs	r2, #1
 801103c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801103e:	2301      	movs	r3, #1
 8011040:	e02f      	b.n	80110a2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011042:	68f8      	ldr	r0, [r7, #12]
 8011044:	f7ff fc46 	bl	80108d4 <SDMMC_GetCommandResponse>
 8011048:	4603      	mov	r3, r0
 801104a:	461a      	mov	r2, r3
 801104c:	7afb      	ldrb	r3, [r7, #11]
 801104e:	4293      	cmp	r3, r2
 8011050:	d001      	beq.n	8011056 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011052:	2301      	movs	r3, #1
 8011054:	e025      	b.n	80110a2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	4a16      	ldr	r2, [pc, #88]	; (80110b4 <SDMMC_GetCmdResp6+0xec>)
 801105a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801105c:	2100      	movs	r1, #0
 801105e:	68f8      	ldr	r0, [r7, #12]
 8011060:	f7ff fc45 	bl	80108ee <SDMMC_GetResponse>
 8011064:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801106c:	2b00      	cmp	r3, #0
 801106e:	d106      	bne.n	801107e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	0c1b      	lsrs	r3, r3, #16
 8011074:	b29a      	uxth	r2, r3
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801107a:	2300      	movs	r3, #0
 801107c:	e011      	b.n	80110a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011084:	2b00      	cmp	r3, #0
 8011086:	d002      	beq.n	801108e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801108c:	e009      	b.n	80110a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011094:	2b00      	cmp	r3, #0
 8011096:	d002      	beq.n	801109e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801109c:	e001      	b.n	80110a2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801109e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3720      	adds	r7, #32
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	24000008 	.word	0x24000008
 80110b0:	10624dd3 	.word	0x10624dd3
 80110b4:	002000c5 	.word	0x002000c5

080110b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b085      	sub	sp, #20
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80110c0:	4b22      	ldr	r3, [pc, #136]	; (801114c <SDMMC_GetCmdResp7+0x94>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4a22      	ldr	r2, [pc, #136]	; (8011150 <SDMMC_GetCmdResp7+0x98>)
 80110c6:	fba2 2303 	umull	r2, r3, r2, r3
 80110ca:	0a5b      	lsrs	r3, r3, #9
 80110cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80110d0:	fb02 f303 	mul.w	r3, r2, r3
 80110d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	1e5a      	subs	r2, r3, #1
 80110da:	60fa      	str	r2, [r7, #12]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d102      	bne.n	80110e6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110e4:	e02c      	b.n	8011140 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110ea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d0ef      	beq.n	80110d6 <SDMMC_GetCmdResp7+0x1e>
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d1ea      	bne.n	80110d6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011104:	f003 0304 	and.w	r3, r3, #4
 8011108:	2b00      	cmp	r3, #0
 801110a:	d004      	beq.n	8011116 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2204      	movs	r2, #4
 8011110:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011112:	2304      	movs	r3, #4
 8011114:	e014      	b.n	8011140 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801111a:	f003 0301 	and.w	r3, r3, #1
 801111e:	2b00      	cmp	r3, #0
 8011120:	d004      	beq.n	801112c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2201      	movs	r2, #1
 8011126:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011128:	2301      	movs	r3, #1
 801112a:	e009      	b.n	8011140 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011134:	2b00      	cmp	r3, #0
 8011136:	d002      	beq.n	801113e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2240      	movs	r2, #64	; 0x40
 801113c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801113e:	2300      	movs	r3, #0

}
 8011140:	4618      	mov	r0, r3
 8011142:	3714      	adds	r7, #20
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr
 801114c:	24000008 	.word	0x24000008
 8011150:	10624dd3 	.word	0x10624dd3

08011154 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011154:	b480      	push	{r7}
 8011156:	b085      	sub	sp, #20
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801115c:	4b11      	ldr	r3, [pc, #68]	; (80111a4 <SDMMC_GetCmdError+0x50>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4a11      	ldr	r2, [pc, #68]	; (80111a8 <SDMMC_GetCmdError+0x54>)
 8011162:	fba2 2303 	umull	r2, r3, r2, r3
 8011166:	0a5b      	lsrs	r3, r3, #9
 8011168:	f241 3288 	movw	r2, #5000	; 0x1388
 801116c:	fb02 f303 	mul.w	r3, r2, r3
 8011170:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	1e5a      	subs	r2, r3, #1
 8011176:	60fa      	str	r2, [r7, #12]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d102      	bne.n	8011182 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801117c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011180:	e009      	b.n	8011196 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801118a:	2b00      	cmp	r3, #0
 801118c:	d0f1      	beq.n	8011172 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	4a06      	ldr	r2, [pc, #24]	; (80111ac <SDMMC_GetCmdError+0x58>)
 8011192:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011194:	2300      	movs	r3, #0
}
 8011196:	4618      	mov	r0, r3
 8011198:	3714      	adds	r7, #20
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	24000008 	.word	0x24000008
 80111a8:	10624dd3 	.word	0x10624dd3
 80111ac:	002000c5 	.word	0x002000c5

080111b0 <__libc_init_array>:
 80111b0:	b570      	push	{r4, r5, r6, lr}
 80111b2:	4d0d      	ldr	r5, [pc, #52]	; (80111e8 <__libc_init_array+0x38>)
 80111b4:	4c0d      	ldr	r4, [pc, #52]	; (80111ec <__libc_init_array+0x3c>)
 80111b6:	1b64      	subs	r4, r4, r5
 80111b8:	10a4      	asrs	r4, r4, #2
 80111ba:	2600      	movs	r6, #0
 80111bc:	42a6      	cmp	r6, r4
 80111be:	d109      	bne.n	80111d4 <__libc_init_array+0x24>
 80111c0:	4d0b      	ldr	r5, [pc, #44]	; (80111f0 <__libc_init_array+0x40>)
 80111c2:	4c0c      	ldr	r4, [pc, #48]	; (80111f4 <__libc_init_array+0x44>)
 80111c4:	f000 f820 	bl	8011208 <_init>
 80111c8:	1b64      	subs	r4, r4, r5
 80111ca:	10a4      	asrs	r4, r4, #2
 80111cc:	2600      	movs	r6, #0
 80111ce:	42a6      	cmp	r6, r4
 80111d0:	d105      	bne.n	80111de <__libc_init_array+0x2e>
 80111d2:	bd70      	pop	{r4, r5, r6, pc}
 80111d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80111d8:	4798      	blx	r3
 80111da:	3601      	adds	r6, #1
 80111dc:	e7ee      	b.n	80111bc <__libc_init_array+0xc>
 80111de:	f855 3b04 	ldr.w	r3, [r5], #4
 80111e2:	4798      	blx	r3
 80111e4:	3601      	adds	r6, #1
 80111e6:	e7f2      	b.n	80111ce <__libc_init_array+0x1e>
 80111e8:	08011830 	.word	0x08011830
 80111ec:	08011830 	.word	0x08011830
 80111f0:	08011830 	.word	0x08011830
 80111f4:	08011834 	.word	0x08011834

080111f8 <memset>:
 80111f8:	4402      	add	r2, r0
 80111fa:	4603      	mov	r3, r0
 80111fc:	4293      	cmp	r3, r2
 80111fe:	d100      	bne.n	8011202 <memset+0xa>
 8011200:	4770      	bx	lr
 8011202:	f803 1b01 	strb.w	r1, [r3], #1
 8011206:	e7f9      	b.n	80111fc <memset+0x4>

08011208 <_init>:
 8011208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801120a:	bf00      	nop
 801120c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801120e:	bc08      	pop	{r3}
 8011210:	469e      	mov	lr, r3
 8011212:	4770      	bx	lr

08011214 <_fini>:
 8011214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011216:	bf00      	nop
 8011218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801121a:	bc08      	pop	{r3}
 801121c:	469e      	mov	lr, r3
 801121e:	4770      	bx	lr
