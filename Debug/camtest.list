
camtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001268c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0801293c  0801293c  0002293c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012fec  08012fec  00022fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012ff4  08012ff4  00022ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012ff8  08012ff8  00022ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ec  24000000  08012ffc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001104  240000ec  080130e8  000300ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240011f0  080130e8  000311f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002cd6d  00000000  00000000  0003011a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005148  00000000  00000000  0005ce87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002288  00000000  00000000  00061fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002090  00000000  00000000  00064258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a9a2  00000000  00000000  000662e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ee0b  00000000  00000000  000a0c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165510  00000000  00000000  000cfa95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00234fa5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009c68  00000000  00000000  00234ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000ec 	.word	0x240000ec
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08012924 	.word	0x08012924

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000f0 	.word	0x240000f0
 80002ec:	08012924 	.word	0x08012924

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f004 fc60 	bl	8004f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f89a 	bl	80007d8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006a4:	f000 f92a 	bl	80008fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 fcde 	bl	8001068 <MX_GPIO_Init>
  MX_FMC_Init();
 80006ac:	f000 fc8e 	bl	8000fcc <MX_FMC_Init>
  MX_I2C4_Init();
 80006b0:	f000 fa14 	bl	8000adc <MX_I2C4_Init>
  MX_I2S6_Init();
 80006b4:	f000 fa52 	bl	8000b5c <MX_I2S6_Init>
  MX_LTDC_Init();
 80006b8:	f000 fa84 	bl	8000bc4 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 80006bc:	f000 fb34 	bl	8000d28 <MX_OCTOSPI1_Init>
  MX_RTC_Init();
 80006c0:	f000 fb94 	bl	8000dec <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 80006c4:	f000 fbbc 	bl	8000e40 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 80006c8:	f000 fbde 	bl	8000e88 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80006cc:	f000 fc32 	bl	8000f34 <MX_USART1_UART_Init>
  MX_DCMI_Init(&hdcmi);
 80006d0:	483a      	ldr	r0, [pc, #232]	; (80007bc <main+0x128>)
 80006d2:	f003 ff7b 	bl	80045cc <MX_DCMI_Init>
  MX_DMA2D_Init();
 80006d6:	f000 f947 	bl	8000968 <MX_DMA2D_Init>
  MX_I2C1_Init();
 80006da:	f000 f97f 	bl	80009dc <MX_I2C1_Init>
  MX_I2C2_Init();
 80006de:	f000 f9bd 	bl	8000a5c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80006e2:	4837      	ldr	r0, [pc, #220]	; (80007c0 <main+0x12c>)
 80006e4:	f000 fe14 	bl	8001310 <RetargetInit>
  CameraResX = 320;
 80006e8:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <main+0x130>)
 80006ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80006ee:	601a      	str	r2, [r3, #0]
  CameraResY = 240;
 80006f0:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <main+0x134>)
 80006f2:	22f0      	movs	r2, #240	; 0xf0
 80006f4:	601a      	str	r2, [r3, #0]
  uint8_t frame_buffer[CameraResX * CameraResY * 2];
 80006f6:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <main+0x130>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a33      	ldr	r2, [pc, #204]	; (80007c8 <main+0x134>)
 80006fc:	6812      	ldr	r2, [r2, #0]
 80006fe:	fb02 f303 	mul.w	r3, r2, r3
 8000702:	0059      	lsls	r1, r3, #1
 8000704:	460b      	mov	r3, r1
 8000706:	3b01      	subs	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	2300      	movs	r3, #0
 800070c:	4688      	mov	r8, r1
 800070e:	4699      	mov	r9, r3
 8000710:	f04f 0200 	mov.w	r2, #0
 8000714:	f04f 0300 	mov.w	r3, #0
 8000718:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800071c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000720:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000724:	2300      	movs	r3, #0
 8000726:	460c      	mov	r4, r1
 8000728:	461d      	mov	r5, r3
 800072a:	f04f 0200 	mov.w	r2, #0
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	00eb      	lsls	r3, r5, #3
 8000734:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000738:	00e2      	lsls	r2, r4, #3
 800073a:	1dcb      	adds	r3, r1, #7
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	ebad 0d03 	sub.w	sp, sp, r3
 8000744:	466b      	mov	r3, sp
 8000746:	3300      	adds	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
  memset(frame_buffer, 0, CameraResX * CameraResY * 2);
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <main+0x130>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a1e      	ldr	r2, [pc, #120]	; (80007c8 <main+0x134>)
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	fb02 f303 	mul.w	r3, r2, r3
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	461a      	mov	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	6838      	ldr	r0, [r7, #0]
 800075e:	f011 f807 	bl	8011770 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* Reset and power down camera to be sure camera is Off prior start testing BSP */
	printf("STARTING\n");
 8000762:	481a      	ldr	r0, [pc, #104]	; (80007cc <main+0x138>)
 8000764:	f011 f892 	bl	801188c <puts>
	  BSP_CAMERA_PwrDown(0);
 8000768:	2000      	movs	r0, #0
 800076a:	f004 f80d 	bl	8004788 <BSP_CAMERA_PwrDown>

	if(BSP_CAMERA_Init(0,CAMERA_R320x240,CAMERA_PF_RGB565) != BSP_ERROR_NONE)
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	2000      	movs	r0, #0
 8000774:	f003 febc 	bl	80044f0 <BSP_CAMERA_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <main+0xee>
	  {
		Error_Handler();
 800077e:	f000 fdc1 	bl	8001304 <Error_Handler>
	  }

	  /* Wait 1s to let auto-loops in the camera module converge and lead to correct exposure */
	  HAL_Delay(1000);
 8000782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000786:	f004 fc71 	bl	800506c <HAL_Delay>

	  /* Start the Camera Snapshot Capture */
	  BSP_CAMERA_Start(0,(uint8_t *)frame_buffer,CAMERA_MODE_SNAPSHOT);
 800078a:	2202      	movs	r2, #2
 800078c:	6839      	ldr	r1, [r7, #0]
 800078e:	2000      	movs	r0, #0
 8000790:	f003 ff44 	bl	800461c <BSP_CAMERA_Start>

	  /* Wait until camera frame is ready : DCMI Frame event */
	  while(camera_frame_ready == 0)
 8000794:	bf00      	nop
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <main+0x13c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0fb      	beq.n	8000796 <main+0x102>
	  {
	  }

	  /* Stop the camera to avoid having the DMA2D work in parallel of Display */
	  /* which cause perturbation of LTDC                                      */
	  BSP_CAMERA_Stop(0);
 800079e:	2000      	movs	r0, #0
 80007a0:	f003 ff76 	bl	8004690 <BSP_CAMERA_Stop>
	  printf("%x", frame_buffer[2137]);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	f893 3859 	ldrb.w	r3, [r3, #2137]	; 0x859
 80007aa:	4619      	mov	r1, r3
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <main+0x140>)
 80007ae:	f010 ffe7 	bl	8011780 <iprintf>
	  HAL_Delay(1000);
 80007b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b6:	f004 fc59 	bl	800506c <HAL_Delay>
	printf("STARTING\n");
 80007ba:	e7d2      	b.n	8000762 <main+0xce>
 80007bc:	24000108 	.word	0x24000108
 80007c0:	24000540 	.word	0x24000540
 80007c4:	24000000 	.word	0x24000000
 80007c8:	24000004 	.word	0x24000004
 80007cc:	0801293c 	.word	0x0801293c
 80007d0:	24000608 	.word	0x24000608
 80007d4:	08012948 	.word	0x08012948

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	224c      	movs	r2, #76	; 0x4c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f010 ffc2 	bl	8011770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f010 ffbc 	bl	8011770 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007f8:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <SystemClock_Config+0x11c>)
 80007fa:	f04f 32ff 	mov.w	r2, #4294967295
 80007fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000802:	2004      	movs	r0, #4
 8000804:	f009 fee0 	bl	800a5c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <SystemClock_Config+0x120>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a39      	ldr	r2, [pc, #228]	; (80008f8 <SystemClock_Config+0x120>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <SystemClock_Config+0x120>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000824:	bf00      	nop
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <SystemClock_Config+0x120>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800082e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000832:	d1f8      	bne.n	8000826 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000834:	f009 feb8 	bl	800a5a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <SystemClock_Config+0x11c>)
 800083a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800083c:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <SystemClock_Config+0x11c>)
 800083e:	f023 0318 	bic.w	r3, r3, #24
 8000842:	6713      	str	r3, [r2, #112]	; 0x70

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <SystemClock_Config+0x11c>)
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	f023 0303 	bic.w	r3, r3, #3
 800084c:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <SystemClock_Config+0x11c>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000854:	2307      	movs	r3, #7
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800085e:	2301      	movs	r3, #1
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000862:	2301      	movs	r3, #1
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086e:	2302      	movs	r3, #2
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000872:	230c      	movs	r3, #12
 8000874:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000876:	f44f 738c 	mov.w	r3, #280	; 0x118
 800087a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800087c:	2302      	movs	r3, #2
 800087e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000880:	2303      	movs	r3, #3
 8000882:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000888:	2304      	movs	r3, #4
 800088a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800088c:	2300      	movs	r3, #0
 800088e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4618      	mov	r0, r3
 800089a:	f009 feef 	bl	800a67c <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008a4:	f000 fd2e 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	233f      	movs	r3, #63	; 0x3f
 80008aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2303      	movs	r3, #3
 80008ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008b4:	2308      	movs	r3, #8
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008b8:	2340      	movs	r3, #64	; 0x40
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2103      	movs	r1, #3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f00a fb06 	bl	800aee0 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x106>
  {
    Error_Handler();
 80008da:	f000 fd13 	bl	8001304 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80008de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008e2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80008e6:	2000      	movs	r0, #0
 80008e8:	f00a fcb0 	bl	800b24c <HAL_RCC_MCOConfig>
}
 80008ec:	bf00      	nop
 80008ee:	3770      	adds	r7, #112	; 0x70
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	58024400 	.word	0x58024400
 80008f8:	58024800 	.word	0x58024800

080008fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0b0      	sub	sp, #192	; 0xc0
 8000900:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	22c0      	movs	r2, #192	; 0xc0
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f010 ff31 	bl	8011770 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_OSPI
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <PeriphCommonClock_Config+0x68>)
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 12;
 8000918:	230c      	movs	r3, #12
 800091a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 200;
 800091c:	23c8      	movs	r3, #200	; 0xc8
 800091e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000920:	2302      	movs	r3, #2
 8000922:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000924:	2302      	movs	r3, #2
 8000926:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 8000928:	2304      	movs	r3, #4
 800092a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000938:	2302      	movs	r3, #2
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800093c:	2320      	movs	r3, #32
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000944:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000946:	2300      	movs	r3, #0
 8000948:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4618      	mov	r0, r3
 800094e:	f00a febd 	bl	800b6cc <HAL_RCCEx_PeriphCLKConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8000958:	f000 fcd4 	bl	8001304 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	37c0      	adds	r7, #192	; 0xc0
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	83010000 	.word	0x83010000

08000968 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 800096e:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <MX_DMA2D_Init+0x70>)
 8000970:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 8000986:	2200      	movs	r2, #0
 8000988:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 800098c:	2200      	movs	r2, #0
 800098e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 8000992:	2200      	movs	r2, #0
 8000994:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 8000998:	2200      	movs	r2, #0
 800099a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009ae:	4809      	ldr	r0, [pc, #36]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 80009b0:	f006 fc1e 	bl	80071f0 <HAL_DMA2D_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009ba:	f000 fca3 	bl	8001304 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009be:	2101      	movs	r1, #1
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_DMA2D_Init+0x6c>)
 80009c2:	f006 fc83 	bl	80072cc <HAL_DMA2D_ConfigLayer>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80009cc:	f000 fc9a 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	24000158 	.word	0x24000158
 80009d8:	52001000 	.word	0x52001000

080009dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <MX_I2C1_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC010151E;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009e8:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <MX_I2C1_Init+0x7c>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a18:	f007 fcbe 	bl	8008398 <HAL_I2C_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a22:	f000 fc6f 	bl	8001304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a2a:	f008 fa89 	bl	8008f40 <HAL_I2CEx_ConfigAnalogFilter>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a34:	f000 fc66 	bl	8001304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a3c:	f008 facb 	bl	8008fd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 fc5d 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	240001c0 	.word	0x240001c0
 8000a54:	40005400 	.word	0x40005400
 8000a58:	c010151e 	.word	0xc010151e

08000a5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_I2C2_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC010151E;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <MX_I2C2_Init+0x7c>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000a98:	f007 fc7e 	bl	8008398 <HAL_I2C_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aa2:	f000 fc2f 	bl	8001304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000aaa:	f008 fa49 	bl	8008f40 <HAL_I2CEx_ConfigAnalogFilter>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ab4:	f000 fc26 	bl	8001304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_I2C2_Init+0x74>)
 8000abc:	f008 fa8b 	bl	8008fd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 fc1d 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24000214 	.word	0x24000214
 8000ad4:	40005800 	.word	0x40005800
 8000ad8:	c010151e 	.word	0xc010151e

08000adc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <MX_I2C4_Init+0x78>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0xC010151E;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <MX_I2C4_Init+0x7c>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b16:	480e      	ldr	r0, [pc, #56]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000b18:	f007 fc3e 	bl	8008398 <HAL_I2C_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b22:	f000 fbef 	bl	8001304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4809      	ldr	r0, [pc, #36]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000b2a:	f008 fa09 	bl	8008f40 <HAL_I2CEx_ConfigAnalogFilter>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b34:	f000 fbe6 	bl	8001304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_I2C4_Init+0x74>)
 8000b3c:	f008 fa4b 	bl	8008fd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b46:	f000 fbdd 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	24000268 	.word	0x24000268
 8000b54:	58001c00 	.word	0x58001c00
 8000b58:	c010151e 	.word	0xc010151e

08000b5c <MX_I2S6_Init>:
  * @brief I2S6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S6_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S6_Init 0 */

  /* USER CODE BEGIN I2S6_Init 1 */

  /* USER CODE END I2S6_Init 1 */
  hi2s6.Instance = SPI6;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <MX_I2S6_Init+0x64>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2s6.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000b68:	220a      	movs	r2, #10
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2s6.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2s6.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hi2s6.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b7e:	611a      	str	r2, [r3, #16]
  hi2s6.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000b82:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b86:	615a      	str	r2, [r3, #20]
  hi2s6.Init.CPOL = I2S_CPOL_LOW;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hi2s6.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hi2s6.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  hi2s6.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s6.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s6) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_I2S6_Init+0x60>)
 8000ba8:	f008 fa62 	bl	8009070 <HAL_I2S_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2S6_Init+0x5a>
  {
    Error_Handler();
 8000bb2:	f000 fba7 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2S6_Init 2 */

  /* USER CODE END I2S6_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	240002bc 	.word	0x240002bc
 8000bc0:	58001400 	.word	0x58001400

08000bc4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09a      	sub	sp, #104	; 0x68
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bce:	2234      	movs	r2, #52	; 0x34
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f010 fdcc 	bl	8011770 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2234      	movs	r2, #52	; 0x34
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f010 fdc6 	bl	8011770 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000be4:	4b4e      	ldr	r3, [pc, #312]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000be6:	4a4f      	ldr	r2, [pc, #316]	; (8000d24 <MX_LTDC_Init+0x160>)
 8000be8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bea:	4b4d      	ldr	r3, [pc, #308]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bf0:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bf6:	4b4a      	ldr	r3, [pc, #296]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bfc:	4b48      	ldr	r3, [pc, #288]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000c02:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000c08:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c0a:	2209      	movs	r2, #9
 8000c0c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8000c0e:	4b44      	ldr	r3, [pc, #272]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c10:	222b      	movs	r2, #43	; 0x2b
 8000c12:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8000c14:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c16:	2215      	movs	r2, #21
 8000c18:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8000c1a:	4b41      	ldr	r3, [pc, #260]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c1c:	f240 220b 	movw	r2, #523	; 0x20b
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c24:	f240 1225 	movw	r2, #293	; 0x125
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c2c:	f240 2213 	movw	r2, #531	; 0x213
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 8000c32:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c34:	f240 1229 	movw	r2, #297	; 0x129
 8000c38:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c3a:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c42:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c4a:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c52:	4833      	ldr	r0, [pc, #204]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000c54:	f008 fb46 	bl	80092e4 <HAL_LTDC_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000c5e:	f000 fb51 	bl	8001304 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000c72:	2300      	movs	r3, #0
 8000c74:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c82:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c84:	2305      	movs	r3, #5
 8000c86:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ca6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000caa:	2200      	movs	r2, #0
 8000cac:	4619      	mov	r1, r3
 8000cae:	481c      	ldr	r0, [pc, #112]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000cb0:	f008 fbf2 	bl	8009498 <HAL_LTDC_ConfigLayer>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000cba:	f000 fb23 	bl	8001304 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cde:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ce0:	2305      	movs	r3, #5
 8000ce2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	2201      	movs	r2, #1
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_LTDC_Init+0x15c>)
 8000d0a:	f008 fbc5 	bl	8009498 <HAL_LTDC_ConfigLayer>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000d14:	f000 faf6 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	3768      	adds	r7, #104	; 0x68
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000310 	.word	0x24000310
 8000d24:	50001000 	.word	0x50001000

08000d28 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d40:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <MX_OCTOSPI1_Init+0xbc>)
 8000d42:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d56:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d5a:	2220      	movs	r2, #32
 8000d5c:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d90:	2208      	movs	r2, #8
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000da0:	480f      	ldr	r0, [pc, #60]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000da2:	f008 fd51 	bl	8009848 <HAL_OSPI_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000dac:	f000 faaa 	bl	8001304 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <MX_OCTOSPI1_Init+0xc0>)
 8000dbe:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_OCTOSPI1_Init+0xb8>)
 8000dca:	f008 fe13 	bl	80099f4 <HAL_OSPIM_Config>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_OCTOSPI1_Init+0xb0>
  {
    Error_Handler();
 8000dd4:	f000 fa96 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	240003b8 	.word	0x240003b8
 8000de4:	52005000 	.word	0x52005000
 8000de8:	01000001 	.word	0x01000001

08000dec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_RTC_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_RTC_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_RTC_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_RTC_Init+0x4c>)
 8000dfe:	227f      	movs	r2, #127	; 0x7f
 8000e00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MX_RTC_Init+0x4c>)
 8000e04:	22ff      	movs	r2, #255	; 0xff
 8000e06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_RTC_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_RTC_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_RTC_Init+0x4c>)
 8000e16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_RTC_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_RTC_Init+0x4c>)
 8000e24:	f00d f85c 	bl	800dee0 <HAL_RTC_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f000 fa69 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	24000414 	.word	0x24000414
 8000e3c:	58004000 	.word	0x58004000

08000e40 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <MX_SDMMC1_SD_Init+0x44>)
 8000e48:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_SDMMC1_SD_Init+0x40>)
 8000e6c:	f00d f960 	bl	800e130 <HAL_SD_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000e76:	f000 fa45 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2400043c 	.word	0x2400043c
 8000e84:	52007000 	.word	0x52007000

08000e88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e8c:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000e8e:	4a28      	ldr	r2, [pc, #160]	; (8000f30 <MX_SPI2_Init+0xa8>)
 8000e90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000e94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000eb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000eb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000eda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_SPI2_Init+0xa4>)
 8000f18:	f00e f9c8 	bl	800f2ac <HAL_SPI_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000f22:	f000 f9ef 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	240004b8 	.word	0x240004b8
 8000f30:	40003800 	.word	0x40003800

08000f34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <MX_USART1_UART_Init+0x94>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f7c:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f7e:	f00e fade 	bl	800f53e <HAL_UART_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f88:	f000 f9bc 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000f90:	f00f fd45 	bl	8010a1e <HAL_UARTEx_SetTxFifoThreshold>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f9a:	f000 f9b3 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000fa2:	f00f fd7a 	bl	8010a9a <HAL_UARTEx_SetRxFifoThreshold>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fac:	f000 f9aa 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_USART1_UART_Init+0x90>)
 8000fb2:	f00f fcfb 	bl	80109ac <HAL_UARTEx_DisableFifoMode>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fbc:	f000 f9a2 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	24000540 	.word	0x24000540
 8000fc8:	40011000 	.word	0x40011000

08000fcc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_FMC_Init+0x94>)
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <MX_FMC_Init+0x98>)
 8000fe8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_FMC_Init+0x94>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_FMC_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_FMC_Init+0x94>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_FMC_Init+0x94>)
 8000ffe:	2210      	movs	r2, #16
 8001000:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_FMC_Init+0x94>)
 8001004:	2240      	movs	r2, #64	; 0x40
 8001006:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_FMC_Init+0x94>)
 800100a:	2280      	movs	r2, #128	; 0x80
 800100c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_FMC_Init+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_FMC_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_FMC_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_FMC_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001026:	2310      	movs	r3, #16
 8001028:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800102a:	2310      	movs	r3, #16
 800102c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800102e:	2310      	movs	r3, #16
 8001030:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001032:	2310      	movs	r3, #16
 8001034:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001036:	2310      	movs	r3, #16
 8001038:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800103a:	2310      	movs	r3, #16
 800103c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800103e:	2310      	movs	r3, #16
 8001040:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_FMC_Init+0x94>)
 8001048:	f00e f8ea 	bl	800f220 <HAL_SDRAM_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001052:	f000 f957 	bl	8001304 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001056:	bf00      	nop
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	240005d4 	.word	0x240005d4
 8001064:	52004140 	.word	0x52004140

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b090      	sub	sp, #64	; 0x40
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800107e:	4b9b      	ldr	r3, [pc, #620]	; (80012ec <MX_GPIO_Init+0x284>)
 8001080:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001084:	4a99      	ldr	r2, [pc, #612]	; (80012ec <MX_GPIO_Init+0x284>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800108e:	4b97      	ldr	r3, [pc, #604]	; (80012ec <MX_GPIO_Init+0x284>)
 8001090:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b93      	ldr	r3, [pc, #588]	; (80012ec <MX_GPIO_Init+0x284>)
 800109e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010a2:	4a92      	ldr	r2, [pc, #584]	; (80012ec <MX_GPIO_Init+0x284>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ac:	4b8f      	ldr	r3, [pc, #572]	; (80012ec <MX_GPIO_Init+0x284>)
 80010ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ba:	4b8c      	ldr	r3, [pc, #560]	; (80012ec <MX_GPIO_Init+0x284>)
 80010bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c0:	4a8a      	ldr	r2, [pc, #552]	; (80012ec <MX_GPIO_Init+0x284>)
 80010c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ca:	4b88      	ldr	r3, [pc, #544]	; (80012ec <MX_GPIO_Init+0x284>)
 80010cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d4:	623b      	str	r3, [r7, #32]
 80010d6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80010d8:	4b84      	ldr	r3, [pc, #528]	; (80012ec <MX_GPIO_Init+0x284>)
 80010da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010de:	4a83      	ldr	r2, [pc, #524]	; (80012ec <MX_GPIO_Init+0x284>)
 80010e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010e8:	4b80      	ldr	r3, [pc, #512]	; (80012ec <MX_GPIO_Init+0x284>)
 80010ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b7d      	ldr	r3, [pc, #500]	; (80012ec <MX_GPIO_Init+0x284>)
 80010f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010fc:	4a7b      	ldr	r2, [pc, #492]	; (80012ec <MX_GPIO_Init+0x284>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001106:	4b79      	ldr	r3, [pc, #484]	; (80012ec <MX_GPIO_Init+0x284>)
 8001108:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	4b75      	ldr	r3, [pc, #468]	; (80012ec <MX_GPIO_Init+0x284>)
 8001116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800111a:	4a74      	ldr	r2, [pc, #464]	; (80012ec <MX_GPIO_Init+0x284>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001124:	4b71      	ldr	r3, [pc, #452]	; (80012ec <MX_GPIO_Init+0x284>)
 8001126:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001132:	4b6e      	ldr	r3, [pc, #440]	; (80012ec <MX_GPIO_Init+0x284>)
 8001134:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001138:	4a6c      	ldr	r2, [pc, #432]	; (80012ec <MX_GPIO_Init+0x284>)
 800113a:	f043 0310 	orr.w	r3, r3, #16
 800113e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001142:	4b6a      	ldr	r3, [pc, #424]	; (80012ec <MX_GPIO_Init+0x284>)
 8001144:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001150:	4b66      	ldr	r3, [pc, #408]	; (80012ec <MX_GPIO_Init+0x284>)
 8001152:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001156:	4a65      	ldr	r2, [pc, #404]	; (80012ec <MX_GPIO_Init+0x284>)
 8001158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001160:	4b62      	ldr	r3, [pc, #392]	; (80012ec <MX_GPIO_Init+0x284>)
 8001162:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b5f      	ldr	r3, [pc, #380]	; (80012ec <MX_GPIO_Init+0x284>)
 8001170:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001174:	4a5d      	ldr	r2, [pc, #372]	; (80012ec <MX_GPIO_Init+0x284>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800117e:	4b5b      	ldr	r3, [pc, #364]	; (80012ec <MX_GPIO_Init+0x284>)
 8001180:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118c:	4b57      	ldr	r3, [pc, #348]	; (80012ec <MX_GPIO_Init+0x284>)
 800118e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001192:	4a56      	ldr	r2, [pc, #344]	; (80012ec <MX_GPIO_Init+0x284>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001198:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800119c:	4b53      	ldr	r3, [pc, #332]	; (80012ec <MX_GPIO_Init+0x284>)
 800119e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011aa:	4b50      	ldr	r3, [pc, #320]	; (80012ec <MX_GPIO_Init+0x284>)
 80011ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011b0:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <MX_GPIO_Init+0x284>)
 80011b2:	f043 0320 	orr.w	r3, r3, #32
 80011b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <MX_GPIO_Init+0x284>)
 80011bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	210e      	movs	r1, #14
 80011cc:	4848      	ldr	r0, [pc, #288]	; (80012f0 <MX_GPIO_Init+0x288>)
 80011ce:	f007 f8c9 	bl	8008364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f640 0104 	movw	r1, #2052	; 0x804
 80011d8:	4846      	ldr	r0, [pc, #280]	; (80012f4 <MX_GPIO_Init+0x28c>)
 80011da:	f007 f8c3 	bl	8008364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e4:	4844      	ldr	r0, [pc, #272]	; (80012f8 <MX_GPIO_Init+0x290>)
 80011e6:	f007 f8bd 	bl	8008364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2108      	movs	r1, #8
 80011ee:	4841      	ldr	r0, [pc, #260]	; (80012f4 <MX_GPIO_Init+0x28c>)
 80011f0:	f007 f8b8 	bl	8008364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2106      	movs	r1, #6
 80011f8:	483f      	ldr	r0, [pc, #252]	; (80012f8 <MX_GPIO_Init+0x290>)
 80011fa:	f007 f8b3 	bl	8008364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80011fe:	2330      	movs	r3, #48	; 0x30
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001202:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800120c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001210:	4619      	mov	r1, r3
 8001212:	4837      	ldr	r0, [pc, #220]	; (80012f0 <MX_GPIO_Init+0x288>)
 8001214:	f006 fdec 	bl	8007df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8001218:	230e      	movs	r3, #14
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122c:	4619      	mov	r1, r3
 800122e:	4830      	ldr	r0, [pc, #192]	; (80012f0 <MX_GPIO_Init+0x288>)
 8001230:	f006 fdde 	bl	8007df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8001234:	f640 030c 	movw	r3, #2060	; 0x80c
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124a:	4619      	mov	r1, r3
 800124c:	4829      	ldr	r0, [pc, #164]	; (80012f4 <MX_GPIO_Init+0x28c>)
 800124e:	f006 fdcf 	bl	8007df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001258:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125e:	2301      	movs	r3, #1
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001266:	4619      	mov	r1, r3
 8001268:	4821      	ldr	r0, [pc, #132]	; (80012f0 <MX_GPIO_Init+0x288>)
 800126a:	f006 fdc1 	bl	8007df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 800126e:	f640 0306 	movw	r3, #2054	; 0x806
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	481c      	ldr	r0, [pc, #112]	; (80012f8 <MX_GPIO_Init+0x290>)
 8001288:	f006 fdb2 	bl	8007df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 800128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001292:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a0:	4619      	mov	r1, r3
 80012a2:	4816      	ldr	r0, [pc, #88]	; (80012fc <MX_GPIO_Init+0x294>)
 80012a4:	f006 fda4 	bl	8007df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 80012a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80012ba:	2300      	movs	r3, #0
 80012bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <MX_GPIO_Init+0x290>)
 80012c6:	f006 fd93 	bl	8007df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80012ca:	2304      	movs	r3, #4
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012dc:	4619      	mov	r1, r3
 80012de:	4808      	ldr	r0, [pc, #32]	; (8001300 <MX_GPIO_Init+0x298>)
 80012e0:	f006 fd86 	bl	8007df0 <HAL_GPIO_Init>

}
 80012e4:	bf00      	nop
 80012e6:	3740      	adds	r7, #64	; 0x40
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58022000 	.word	0x58022000
 80012f4:	58021800 	.word	0x58021800
 80012f8:	58020000 	.word	0x58020000
 80012fc:	58020800 	.word	0x58020800
 8001300:	58021c00 	.word	0x58021c00

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <RetargetInit+0x28>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <RetargetInit+0x2c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6898      	ldr	r0, [r3, #8]
 8001324:	2300      	movs	r3, #0
 8001326:	2202      	movs	r2, #2
 8001328:	2100      	movs	r1, #0
 800132a:	f010 fab7 	bl	801189c <setvbuf>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2400060c 	.word	0x2400060c
 800133c:	24000088 	.word	0x24000088

08001340 <_isatty>:

int _isatty(int fd) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db04      	blt.n	8001358 <_isatty+0x18>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b02      	cmp	r3, #2
 8001352:	dc01      	bgt.n	8001358 <_isatty+0x18>
    return 1;
 8001354:	2301      	movs	r3, #1
 8001356:	e005      	b.n	8001364 <_isatty+0x24>

  errno = EBADF;
 8001358:	f010 f9e0 	bl	801171c <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	2209      	movs	r2, #9
 8001360:	601a      	str	r2, [r3, #0]
  return 0;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_write>:

int _write(int fd, char* ptr, int len) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d002      	beq.n	8001384 <_write+0x18>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d111      	bne.n	80013a8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <_write+0x54>)
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	b29a      	uxth	r2, r3
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	f00e f92e 	bl	800f5f2 <HAL_UART_Transmit>
 8001396:	4603      	mov	r3, r0
 8001398:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_write+0x38>
      return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	e008      	b.n	80013b6 <_write+0x4a>
    else
      return EIO;
 80013a4:	2305      	movs	r3, #5
 80013a6:	e006      	b.n	80013b6 <_write+0x4a>
  }
  errno = EBADF;
 80013a8:	f010 f9b8 	bl	801171c <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2209      	movs	r2, #9
 80013b0:	601a      	str	r2, [r3, #0]
  return -1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2400060c 	.word	0x2400060c

080013c4 <_close>:

int _close(int fd) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db04      	blt.n	80013dc <_close+0x18>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	dc01      	bgt.n	80013dc <_close+0x18>
    return 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	e006      	b.n	80013ea <_close+0x26>

  errno = EBADF;
 80013dc:	f010 f99e 	bl	801171c <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2209      	movs	r2, #9
 80013e4:	601a      	str	r2, [r3, #0]
  return -1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <_read>:

int _read(int fd, char* ptr, int len) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d110      	bne.n	8001428 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <_read+0x4c>)
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	2201      	movs	r2, #1
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	f00e f97c 	bl	800f70e <HAL_UART_Receive>
 8001416:	4603      	mov	r3, r0
 8001418:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <_read+0x30>
      return 1;
 8001420:	2301      	movs	r3, #1
 8001422:	e008      	b.n	8001436 <_read+0x42>
    else
      return EIO;
 8001424:	2305      	movs	r3, #5
 8001426:	e006      	b.n	8001436 <_read+0x42>
  }
  errno = EBADF;
 8001428:	f010 f978 	bl	801171c <__errno>
 800142c:	4603      	mov	r3, r0
 800142e:	2209      	movs	r2, #9
 8001430:	601a      	str	r2, [r3, #0]
  return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2400060c 	.word	0x2400060c

08001444 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db08      	blt.n	8001466 <_fstat+0x22>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	dc05      	bgt.n	8001466 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001460:	605a      	str	r2, [r3, #4]
    return 0;
 8001462:	2300      	movs	r3, #0
 8001464:	e005      	b.n	8001472 <_fstat+0x2e>
  }

  errno = EBADF;
 8001466:	f010 f959 	bl	801171c <__errno>
 800146a:	4603      	mov	r3, r0
 800146c:	2209      	movs	r2, #9
 800146e:	601a      	str	r2, [r3, #0]
  return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_lseek>:
  }
  return len;
}

int _lseek(int file, int ptr, int dir)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f010 f92a 	bl	801171c <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	220c      	movs	r2, #12
 80014cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <_sbrk+0x64>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	24100000 	.word	0x24100000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	24000610 	.word	0x24000610
 80014fc:	240011f0 	.word	0x240011f0

08001500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <SystemInit+0xd0>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150a:	4a31      	ldr	r2, [pc, #196]	; (80015d0 <SystemInit+0xd0>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <SystemInit+0xd4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	2b02      	cmp	r3, #2
 800151e:	d807      	bhi.n	8001530 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001520:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <SystemInit+0xd4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 030f 	bic.w	r3, r3, #15
 8001528:	4a2a      	ldr	r2, [pc, #168]	; (80015d4 <SystemInit+0xd4>)
 800152a:	f043 0303 	orr.w	r3, r3, #3
 800152e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <SystemInit+0xd8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <SystemInit+0xd8>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <SystemInit+0xd8>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <SystemInit+0xd8>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4924      	ldr	r1, [pc, #144]	; (80015d8 <SystemInit+0xd8>)
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <SystemInit+0xdc>)
 800154a:	4013      	ands	r3, r2
 800154c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <SystemInit+0xd4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <SystemInit+0xd4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 030f 	bic.w	r3, r3, #15
 8001562:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <SystemInit+0xd4>)
 8001564:	f043 0303 	orr.w	r3, r3, #3
 8001568:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <SystemInit+0xd8>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <SystemInit+0xd8>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <SystemInit+0xd8>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <SystemInit+0xd8>)
 800157e:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <SystemInit+0xe0>)
 8001580:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <SystemInit+0xd8>)
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <SystemInit+0xe4>)
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <SystemInit+0xd8>)
 800158a:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <SystemInit+0xe8>)
 800158c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <SystemInit+0xd8>)
 8001590:	2200      	movs	r2, #0
 8001592:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <SystemInit+0xd8>)
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <SystemInit+0xe8>)
 8001598:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <SystemInit+0xd8>)
 800159c:	2200      	movs	r2, #0
 800159e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <SystemInit+0xd8>)
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <SystemInit+0xe8>)
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <SystemInit+0xd8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <SystemInit+0xd8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <SystemInit+0xd8>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <SystemInit+0xd8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <SystemInit+0xec>)
 80015c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	52002000 	.word	0x52002000
 80015d8:	58024400 	.word	0x58024400
 80015dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80015e0:	02020200 	.word	0x02020200
 80015e4:	01ff0000 	.word	0x01ff0000
 80015e8:	01010280 	.word	0x01010280
 80015ec:	52004000 	.word	0x52004000

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001628 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f4:	f7ff ff84 	bl	8001500 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	; (8001630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	; (800163c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800161e:	f010 f883 	bl	8011728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff f837 	bl	8000694 <main>
  bx  lr
 8001626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800162c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001630:	240000ec 	.word	0x240000ec
  ldr r2, =_sidata
 8001634:	08012ffc 	.word	0x08012ffc
  ldr r2, =_sbss
 8001638:	240000ec 	.word	0x240000ec
  ldr r4, =_ebss
 800163c:	240011f0 	.word	0x240011f0

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>

08001642 <MFXSTM32L152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Init(MFXSTM32L152_Object_t *pObj)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001654:	2b00      	cmp	r3, #0
 8001656:	d11c      	bne.n	8001692 <MFXSTM32L152_Init+0x50>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4798      	blx	r3

    if(MFXSTM32L152_SetIrqOutPinPolarity(pObj, MFXSTM32L152_OUT_PIN_POLARITY_HIGH) != MFXSTM32L152_OK)
 800165e:	2102      	movs	r1, #2
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f8d5 	bl	8001810 <MFXSTM32L152_SetIrqOutPinPolarity>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <MFXSTM32L152_Init+0x32>
    {
      ret = MFXSTM32L152_ERROR;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	e00e      	b.n	8001692 <MFXSTM32L152_Init+0x50>
    }
    else if(MFXSTM32L152_SetIrqOutPinType(pObj, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL) != MFXSTM32L152_OK)
 8001674:	2101      	movs	r1, #1
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f900 	bl	800187c <MFXSTM32L152_SetIrqOutPinType>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <MFXSTM32L152_Init+0x48>
    {
      ret = MFXSTM32L152_ERROR;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e003      	b.n	8001692 <MFXSTM32L152_Init+0x50>
    }
    else
    {
      pObj->IsInitialized = 1U;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }

  return ret;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <MFXSTM32L152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_DeInit(MFXSTM32L152_Object_t *pObj)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if(pObj->IsInitialized == 1U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d103      	bne.n	80016b6 <MFXSTM32L152_DeInit+0x1a>
  {
    pObj->IsInitialized = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  return MFXSTM32L152_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <MFXSTM32L152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Reset(MFXSTM32L152_Object_t *pObj)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = MFXSTM32L152_SWRST;
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	72fb      	strb	r3, [r7, #11]

  /* Soft Reset */
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f103 0018 	add.w	r0, r3, #24
 80016da:	f107 020b 	add.w	r2, r7, #11
 80016de:	2301      	movs	r3, #1
 80016e0:	2140      	movs	r1, #64	; 0x40
 80016e2:	f000 fd9d 	bl	8002220 <mfxstm32l152_write_reg>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <MFXSTM32L152_Reset+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <MFXSTM32L152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  pObj   Pointer to component object.
  * @retval The Device ID (two bytes).
  */
int32_t MFXSTM32L152_ReadID(MFXSTM32L152_Object_t *pObj, uint32_t *Id)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  uint8_t id;

  /* Initialize IO BUS layer */
  pObj->IO.Init();
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4798      	blx	r3

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ID, &id, 1) != MFXSTM32L152_OK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f103 0018 	add.w	r0, r3, #24
 8001716:	f107 020b 	add.w	r2, r7, #11
 800171a:	2301      	movs	r3, #1
 800171c:	2100      	movs	r1, #0
 800171e:	f000 fd68 	bl	80021f2 <mfxstm32l152_read_reg>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <MFXSTM32L152_ReadID+0x34>
  {
    ret = MFXSTM32L152_ERROR;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e003      	b.n	8001738 <MFXSTM32L152_ReadID+0x3c>
  }
  else
  {
  /* Store the device ID value */
  *Id = id;
 8001730:	7afb      	ldrb	r3, [r7, #11]
 8001732:	461a      	mov	r2, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8001738:	68fb      	ldr	r3, [r7, #12]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <MFXSTM32L152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_EnableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f103 0018 	add.w	r0, r3, #24
 8001758:	f107 020b 	add.w	r2, r7, #11
 800175c:	2301      	movs	r3, #1
 800175e:	2142      	movs	r1, #66	; 0x42
 8001760:	f000 fd47 	bl	80021f2 <mfxstm32l152_read_reg>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <MFXSTM32L152_EnableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e013      	b.n	800179a <MFXSTM32L152_EnableITSource+0x58>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp |= Source;
 8001772:	7afa      	ldrb	r2, [r7, #11]
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	4313      	orrs	r3, r2
 8001778:	b2db      	uxtb	r3, r3
 800177a:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f103 0018 	add.w	r0, r3, #24
 8001782:	f107 020b 	add.w	r2, r7, #11
 8001786:	2301      	movs	r3, #1
 8001788:	2142      	movs	r1, #66	; 0x42
 800178a:	f000 fd49 	bl	8002220 <mfxstm32l152_write_reg>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <MFXSTM32L152_EnableITSource+0x58>
    {
      ret = MFXSTM32L152_ERROR;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
 8001798:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <MFXSTM32L152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_DisableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f103 0018 	add.w	r0, r3, #24
 80017ba:	f107 020b 	add.w	r2, r7, #11
 80017be:	2301      	movs	r3, #1
 80017c0:	2142      	movs	r1, #66	; 0x42
 80017c2:	f000 fd16 	bl	80021f2 <mfxstm32l152_read_reg>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <MFXSTM32L152_DisableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	e018      	b.n	8001806 <MFXSTM32L152_DisableITSource+0x62>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp &= ~Source;
 80017d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d8:	43db      	mvns	r3, r3
 80017da:	b25a      	sxtb	r2, r3
 80017dc:	7afb      	ldrb	r3, [r7, #11]
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f103 0018 	add.w	r0, r3, #24
 80017ee:	f107 020b 	add.w	r2, r7, #11
 80017f2:	2301      	movs	r3, #1
 80017f4:	2142      	movs	r1, #66	; 0x42
 80017f6:	f000 fd13 	bl	8002220 <mfxstm32l152_write_reg>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <MFXSTM32L152_DisableITSource+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <MFXSTM32L152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinPolarity(MFXSTM32L152_Object_t *pObj, uint8_t Polarity)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f103 0018 	add.w	r0, r3, #24
 8001826:	f107 020b 	add.w	r2, r7, #11
 800182a:	2301      	movs	r3, #1
 800182c:	2141      	movs	r1, #65	; 0x41
 800182e:	f000 fce0 	bl	80021f2 <mfxstm32l152_read_reg>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <MFXSTM32L152_SetIrqOutPinPolarity+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e018      	b.n	8001872 <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
  }
  else
  {
  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	f023 0302 	bic.w	r3, r3, #2
 8001846:	b2db      	uxtb	r3, r3
 8001848:	72fb      	strb	r3, [r7, #11]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 800184a:	7afa      	ldrb	r2, [r7, #11]
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	4313      	orrs	r3, r2
 8001850:	b2db      	uxtb	r3, r3
 8001852:	72fb      	strb	r3, [r7, #11]

  /* Set the new register value */
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f103 0018 	add.w	r0, r3, #24
 800185a:	f107 020b 	add.w	r2, r7, #11
 800185e:	2301      	movs	r3, #1
 8001860:	2141      	movs	r1, #65	; 0x41
 8001862:	f000 fcdd 	bl	8002220 <mfxstm32l152_write_reg>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
  {
    ret = MFXSTM32L152_ERROR;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
 8001870:	60fb      	str	r3, [r7, #12]
  }
  }

  return ret;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <MFXSTM32L152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinType(MFXSTM32L152_Object_t *pObj, uint8_t Type)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f103 0018 	add.w	r0, r3, #24
 8001892:	f107 020b 	add.w	r2, r7, #11
 8001896:	2301      	movs	r3, #1
 8001898:	2141      	movs	r1, #65	; 0x41
 800189a:	f000 fcaa 	bl	80021f2 <mfxstm32l152_read_reg>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <MFXSTM32L152_SetIrqOutPinType+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e018      	b.n	80018de <MFXSTM32L152_SetIrqOutPinType+0x62>
  }
  else
  {
    /* Mask the type bits */
    tmp &= ~(uint8_t)0x01;
 80018ac:	7afb      	ldrb	r3, [r7, #11]
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	72fb      	strb	r3, [r7, #11]

    /* Modify the Interrupt Output line configuration */
    tmp |= Type;
 80018b6:	7afa      	ldrb	r2, [r7, #11]
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	72fb      	strb	r3, [r7, #11]

    /* Set the new register value */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f103 0018 	add.w	r0, r3, #24
 80018c6:	f107 020b 	add.w	r2, r7, #11
 80018ca:	2301      	movs	r3, #1
 80018cc:	2141      	movs	r1, #65	; 0x41
 80018ce:	f000 fca7 	bl	8002220 <mfxstm32l152_write_reg>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <MFXSTM32L152_SetIrqOutPinType+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <MFXSTM32L152_IO_Start>:
  * @param  pObj   Pointer to component object.
  * @param  IO_Pin IO pin
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Start(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  uint8_t mode;

  /* Get the current register value */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f103 0018 	add.w	r0, r3, #24
 80018fc:	f107 020b 	add.w	r2, r7, #11
 8001900:	2301      	movs	r3, #1
 8001902:	2140      	movs	r1, #64	; 0x40
 8001904:	f000 fc75 	bl	80021f2 <mfxstm32l152_read_reg>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <MFXSTM32L152_IO_Start+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e022      	b.n	800195c <MFXSTM32L152_IO_Start+0x74>
  }
  else
  {
    /* Set the IO Functionalities to be Enabled */
    mode |= MFXSTM32L152_GPIO_EN;
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	72fb      	strb	r3, [r7, #11]
    /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
    /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
    /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
    /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
    /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
    if (IO_Pin > 0xFFFFU)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d305      	bcc.n	8001934 <MFXSTM32L152_IO_Start+0x4c>
    {
      mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8001928:	7afb      	ldrb	r3, [r7, #11]
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	b2db      	uxtb	r3, r3
 8001930:	72fb      	strb	r3, [r7, #11]
 8001932:	e004      	b.n	800193e <MFXSTM32L152_IO_Start+0x56>
    }
    else
    {
      mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8001934:	7afb      	ldrb	r3, [r7, #11]
 8001936:	f023 0308 	bic.w	r3, r3, #8
 800193a:	b2db      	uxtb	r3, r3
 800193c:	72fb      	strb	r3, [r7, #11]
    }

    /* Write the new register value */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f103 0018 	add.w	r0, r3, #24
 8001944:	f107 020b 	add.w	r2, r7, #11
 8001948:	2301      	movs	r3, #1
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	f000 fc68 	bl	8002220 <mfxstm32l152_write_reg>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <MFXSTM32L152_IO_Start+0x74>
    {
      ret = MFXSTM32L152_ERROR;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800195c:	68fb      	ldr	r3, [r7, #12]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <MFXSTM32L152_IO_Init>:
  * @param  IoInit Pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Init(MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_Init_t *IoInit)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]

  /* IT enable/disable */
  switch(IoInit->Mode)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d903      	bls.n	8001986 <MFXSTM32L152_IO_Init+0x1e>
 800197e:	3b05      	subs	r3, #5
 8001980:	2b03      	cmp	r3, #3
 8001982:	d813      	bhi.n	80019ac <MFXSTM32L152_IO_Init+0x44>
 8001984:	e00a      	b.n	800199c <MFXSTM32L152_IO_Init+0x34>
  case MFXSTM32L152_GPIO_MODE_OFF:
  case MFXSTM32L152_GPIO_MODE_ANALOG:
  case MFXSTM32L152_GPIO_MODE_INPUT:
  case MFXSTM32L152_GPIO_MODE_OUTPUT_OD:
  case MFXSTM32L152_GPIO_MODE_OUTPUT_PP:
    ret += MFXSTM32L152_IO_DisablePinIT(pObj, IoInit->Pin); /* first disable IT */
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fa53 	bl	8001e38 <MFXSTM32L152_IO_DisablePinIT>
 8001992:	4602      	mov	r2, r0
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
    break;
 800199a:	e008      	b.n	80019ae <MFXSTM32L152_IO_Init+0x46>

  case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
  case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
  case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
  case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
    ret += MFXSTM32L152_IO_EnableIT(pObj); /* first enable IT */
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fa09 	bl	8001db4 <MFXSTM32L152_IO_EnableIT>
 80019a2:	4602      	mov	r2, r0
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
    break;
 80019aa:	e000      	b.n	80019ae <MFXSTM32L152_IO_Init+0x46>
  default:
    break;
 80019ac:	bf00      	nop
  }

  /* Set direction IN/OUT */
  if((IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD))
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d003      	beq.n	80019be <MFXSTM32L152_IO_Init+0x56>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d10b      	bne.n	80019d6 <MFXSTM32L152_IO_Init+0x6e>
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f936 	bl	8001c38 <MFXSTM32L152_IO_InitPin>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4413      	add	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e00a      	b.n	80019ec <MFXSTM32L152_IO_Init+0x84>
  }
  else
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f92a 	bl	8001c38 <MFXSTM32L152_IO_InitPin>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set Push-Pull type */
  switch(IoInit->Pull)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <MFXSTM32L152_IO_Init+0x94>
 80019f4:	3b01      	subs	r3, #1
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d818      	bhi.n	8001a2c <MFXSTM32L152_IO_Init+0xc4>
 80019fa:	e00b      	b.n	8001a14 <MFXSTM32L152_IO_Init+0xac>
  {
  case MFXSTM32L152_GPIO_NOPULL:
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2300      	movs	r3, #0
 8001a02:	2164      	movs	r1, #100	; 0x64
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fb05 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
    break;
 8001a12:	e00c      	b.n	8001a2e <MFXSTM32L152_IO_Init+0xc6>
  case MFXSTM32L152_GPIO_PULLUP:
  case MFXSTM32L152_GPIO_PULLDOWN:
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	2164      	movs	r1, #100	; 0x64
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 faf9 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
    break;
 8001a2a:	e000      	b.n	8001a2e <MFXSTM32L152_IO_Init+0xc6>
  default:
    break;
 8001a2c:	bf00      	nop
  }

  if(IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d10a      	bne.n	8001a4c <MFXSTM32L152_IO_Init+0xe4>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2164      	movs	r1, #100	; 0x64
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fae8 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
  }

  if(IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d10a      	bne.n	8001a6a <MFXSTM32L152_IO_Init+0x102>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2164      	movs	r1, #100	; 0x64
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fad9 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001a62:	4602      	mov	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  /* Set Pullup-Pulldown */
  switch(IoInit->Pull)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d033      	beq.n	8001ada <MFXSTM32L152_IO_Init+0x172>
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d83d      	bhi.n	8001af2 <MFXSTM32L152_IO_Init+0x18a>
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <MFXSTM32L152_IO_Init+0x118>
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d021      	beq.n	8001ac2 <MFXSTM32L152_IO_Init+0x15a>
    break;
  case MFXSTM32L152_GPIO_PULLDOWN:
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
    break;
  default:
    break;
 8001a7e:	e038      	b.n	8001af2 <MFXSTM32L152_IO_Init+0x18a>
    if((IoInit->Mode == MFXSTM32L152_GPIO_MODE_INPUT) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_ANALOG))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d003      	beq.n	8001a90 <MFXSTM32L152_IO_Init+0x128>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d10c      	bne.n	8001aaa <MFXSTM32L152_IO_Init+0x142>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2300      	movs	r3, #0
 8001a96:	2168      	movs	r1, #104	; 0x68
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 fabb 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	bf00      	nop
    break;
 8001aa8:	e024      	b.n	8001af4 <MFXSTM32L152_IO_Init+0x18c>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	2168      	movs	r1, #104	; 0x68
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 faae 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
    break;
 8001ac0:	e018      	b.n	8001af4 <MFXSTM32L152_IO_Init+0x18c>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	2168      	movs	r1, #104	; 0x68
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 faa2 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
    break;
 8001ad8:	e00c      	b.n	8001af4 <MFXSTM32L152_IO_Init+0x18c>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2168      	movs	r1, #104	; 0x68
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fa96 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
    break;
 8001af0:	e000      	b.n	8001af4 <MFXSTM32L152_IO_Init+0x18c>
    break;
 8001af2:	bf00      	nop
  }

  /* Set Irq event and type mode */
  switch(IoInit->Mode)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	3b05      	subs	r3, #5
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	f200 8090 	bhi.w	8001c20 <MFXSTM32L152_IO_Init+0x2b8>
 8001b00:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <MFXSTM32L152_IO_Init+0x1a0>)
 8001b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b06:	bf00      	nop
 8001b08:	08001b19 	.word	0x08001b19
 8001b0c:	08001b5b 	.word	0x08001b5b
 8001b10:	08001bdf 	.word	0x08001bdf
 8001b14:	08001b9d 	.word	0x08001b9d
  {
  case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8a3 	bl	8001c6c <MFXSTM32L152_IO_SetIrqEvtMode>
 8001b26:	4602      	mov	r2, r0
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2201      	movs	r2, #1
 8001b34:	4619      	mov	r1, r3
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f8b2 	bl	8001ca0 <MFXSTM32L152_IO_SetIrqTypeMode>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f95c 	bl	8001e08 <MFXSTM32L152_IO_EnablePinIT>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
    break;
 8001b58:	e063      	b.n	8001c22 <MFXSTM32L152_IO_Init+0x2ba>
  case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f882 	bl	8001c6c <MFXSTM32L152_IO_SetIrqEvtMode>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	4619      	mov	r1, r3
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f891 	bl	8001ca0 <MFXSTM32L152_IO_SetIrqTypeMode>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f93b 	bl	8001e08 <MFXSTM32L152_IO_EnablePinIT>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
    break;
 8001b9a:	e042      	b.n	8001c22 <MFXSTM32L152_IO_Init+0x2ba>
  case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f861 	bl	8001c6c <MFXSTM32L152_IO_SetIrqEvtMode>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4619      	mov	r1, r3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f870 	bl	8001ca0 <MFXSTM32L152_IO_SetIrqTypeMode>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f91a 	bl	8001e08 <MFXSTM32L152_IO_EnablePinIT>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
    break;
 8001bdc:	e021      	b.n	8001c22 <MFXSTM32L152_IO_Init+0x2ba>
  case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f840 	bl	8001c6c <MFXSTM32L152_IO_SetIrqEvtMode>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f84f 	bl	8001ca0 <MFXSTM32L152_IO_SetIrqTypeMode>
 8001c02:	4602      	mov	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8f9 	bl	8001e08 <MFXSTM32L152_IO_EnablePinIT>
 8001c16:	4602      	mov	r2, r0
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
    break;
 8001c1e:	e000      	b.n	8001c22 <MFXSTM32L152_IO_Init+0x2ba>
  default:
    break;
 8001c20:	bf00      	nop
  }

  if(ret != MFXSTM32L152_OK)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <MFXSTM32L152_IO_Init+0x2c6>
  {
    ret = MFXSTM32L152_ERROR;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <MFXSTM32L152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_InitPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Direction)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction) != MFXSTM32L152_OK)
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	2160      	movs	r1, #96	; 0x60
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f9df 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <MFXSTM32L152_IO_InitPin+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001c62:	697b      	ldr	r3, [r7, #20]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <MFXSTM32L152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqEvtMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Evt)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	4613      	mov	r3, r2
 8001c78:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt) != MFXSTM32L152_OK)
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	214c      	movs	r1, #76	; 0x4c
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f9c5 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <MFXSTM32L152_IO_SetIrqEvtMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001c96:	697b      	ldr	r3, [r7, #20]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <MFXSTM32L152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqTypeMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Type)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	4613      	mov	r3, r2
 8001cac:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type) != MFXSTM32L152_OK)
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	2150      	movs	r1, #80	; 0x50
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f9ab 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <MFXSTM32L152_IO_SetIrqTypeMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001cca:	697b      	ldr	r3, [r7, #20]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <MFXSTM32L152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_WritePin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t PinState)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]

  /* Apply the bit value to the selected pin */
  if (PinState != 0U)
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00c      	beq.n	8001d06 <MFXSTM32L152_IO_WritePin+0x32>
  {
    /* Set the SET register */
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1) != MFXSTM32L152_OK)
 8001cec:	2301      	movs	r3, #1
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	216c      	movs	r1, #108	; 0x6c
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f98e 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00f      	beq.n	8001d1e <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e00b      	b.n	8001d1e <MFXSTM32L152_IO_WritePin+0x4a>
    }
  }
  else
  {
    /* Set the CLEAR register */
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1) != MFXSTM32L152_OK)
 8001d06:	2301      	movs	r3, #1
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	2170      	movs	r1, #112	; 0x70
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f981 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001d1e:	697b      	ldr	r3, [r7, #20]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <MFXSTM32L152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
int32_t MFXSTM32L152_IO_ReadPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint8_t tmpreg[3];
  uint32_t tmp;

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f103 0018 	add.w	r0, r3, #24
 8001d38:	f107 0208 	add.w	r2, r7, #8
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	2110      	movs	r1, #16
 8001d40:	f000 fa57 	bl	80021f2 <mfxstm32l152_read_reg>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <MFXSTM32L152_IO_ReadPin+0x28>
  {
    return MFXSTM32L152_ERROR;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e02d      	b.n	8001dac <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f103 0018 	add.w	r0, r3, #24
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	2111      	movs	r1, #17
 8001d60:	f000 fa47 	bl	80021f2 <mfxstm32l152_read_reg>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <MFXSTM32L152_IO_ReadPin+0x48>
  {
    return MFXSTM32L152_ERROR;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	e01d      	b.n	8001dac <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f103 0018 	add.w	r0, r3, #24
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	1c9a      	adds	r2, r3, #2
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	2112      	movs	r1, #18
 8001d80:	f000 fa37 	bl	80021f2 <mfxstm32l152_read_reg>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <MFXSTM32L152_IO_ReadPin+0x68>
  {
    return MFXSTM32L152_ERROR;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e00d      	b.n	8001dac <MFXSTM32L152_IO_ReadPin+0x84>
  }
  tmp = ((uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16));
 8001d90:	7a3b      	ldrb	r3, [r7, #8]
 8001d92:	461a      	mov	r2, r3
 8001d94:	7a7b      	ldrb	r3, [r7, #9]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	441a      	add	r2, r3
 8001d9a:	7abb      	ldrb	r3, [r7, #10]
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  return(int32_t)(tmp);
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <MFXSTM32L152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnableIT(MFXSTM32L152_Object_t *pObj)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Enable global IO IT source */
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fcbd 	bl	8001742 <MFXSTM32L152_EnableITSource>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <MFXSTM32L152_IO_EnableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <MFXSTM32L152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisableIT(MFXSTM32L152_Object_t *pObj)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Disable global IO IT source */
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8001dea:	2101      	movs	r1, #1
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fcd9 	bl	80017a4 <MFXSTM32L152_DisableITSource>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <MFXSTM32L152_IO_DisableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <MFXSTM32L152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1) != MFXSTM32L152_OK)
 8001e16:	2301      	movs	r3, #1
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	2148      	movs	r1, #72	; 0x48
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f8f9 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <MFXSTM32L152_IO_EnablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <MFXSTM32L152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0) != MFXSTM32L152_OK)
 8001e46:	2300      	movs	r3, #0
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	2148      	movs	r1, #72	; 0x48
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f8e1 	bl	8002014 <MFXSTM32L152_reg24_setPinValue>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <MFXSTM32L152_IO_DisablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <MFXSTM32L152_IO_ITStatus>:
  * @param  IO_Pin The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
int32_t MFXSTM32L152_IO_ITStatus(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  /* Get the Interrupt status */
  uint8_t tmpreg[3];
  uint32_t tmp;

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f103 0018 	add.w	r0, r3, #24
 8001e78:	f107 0208 	add.w	r2, r7, #8
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	210c      	movs	r1, #12
 8001e80:	f000 f9b7 	bl	80021f2 <mfxstm32l152_read_reg>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <MFXSTM32L152_IO_ITStatus+0x28>
  {
    return MFXSTM32L152_ERROR;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e02d      	b.n	8001eec <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f103 0018 	add.w	r0, r3, #24
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	210d      	movs	r1, #13
 8001ea0:	f000 f9a7 	bl	80021f2 <mfxstm32l152_read_reg>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <MFXSTM32L152_IO_ITStatus+0x48>
  {
    return MFXSTM32L152_ERROR;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e01d      	b.n	8001eec <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f103 0018 	add.w	r0, r3, #24
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	1c9a      	adds	r2, r3, #2
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	210e      	movs	r1, #14
 8001ec0:	f000 f997 	bl	80021f2 <mfxstm32l152_read_reg>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <MFXSTM32L152_IO_ITStatus+0x68>
  {
    return MFXSTM32L152_ERROR;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e00d      	b.n	8001eec <MFXSTM32L152_IO_ITStatus+0x84>
  }

  tmp = (uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16);
 8001ed0:	7a3b      	ldrb	r3, [r7, #8]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	7a7b      	ldrb	r3, [r7, #9]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	441a      	add	r2, r3
 8001eda:	7abb      	ldrb	r3, [r7, #10]
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  return(int32_t)tmp;
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <MFXSTM32L152_IO_ClearIT>:
  * @param  IO_Pin the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_ClearIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = (uint8_t)(IO_Pin & 0x0000ffU);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = (uint8_t)(IO_Pin >> 8);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	73bb      	strb	r3, [r7, #14]
  pin_16_23 = (uint8_t)(IO_Pin >> 16);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	737b      	strb	r3, [r7, #13]

  if (pin_0_7 != 0U)
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00e      	beq.n	8001f3c <MFXSTM32L152_IO_ClearIT+0x48>
  {
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, &pin_0_7, 1) != MFXSTM32L152_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f103 0018 	add.w	r0, r3, #24
 8001f24:	f107 020f 	add.w	r2, r7, #15
 8001f28:	2301      	movs	r3, #1
 8001f2a:	2154      	movs	r1, #84	; 0x54
 8001f2c:	f000 f978 	bl	8002220 <mfxstm32l152_write_reg>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <MFXSTM32L152_IO_ClearIT+0x48>
    {
      return MFXSTM32L152_ERROR;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e024      	b.n	8001f86 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_8_15 != 0U)
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00e      	beq.n	8001f60 <MFXSTM32L152_IO_ClearIT+0x6c>
  {
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, &pin_8_15, 1) != MFXSTM32L152_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f103 0018 	add.w	r0, r3, #24
 8001f48:	f107 020e 	add.w	r2, r7, #14
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	2155      	movs	r1, #85	; 0x55
 8001f50:	f000 f966 	bl	8002220 <mfxstm32l152_write_reg>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <MFXSTM32L152_IO_ClearIT+0x6c>
    {
      return MFXSTM32L152_ERROR;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5e:	e012      	b.n	8001f86 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_16_23 != 0U)
 8001f60:	7b7b      	ldrb	r3, [r7, #13]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00e      	beq.n	8001f84 <MFXSTM32L152_IO_ClearIT+0x90>
  {
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, &pin_16_23, 1) != MFXSTM32L152_OK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f103 0018 	add.w	r0, r3, #24
 8001f6c:	f107 020d 	add.w	r2, r7, #13
 8001f70:	2301      	movs	r3, #1
 8001f72:	2156      	movs	r1, #86	; 0x56
 8001f74:	f000 f954 	bl	8002220 <mfxstm32l152_write_reg>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <MFXSTM32L152_IO_ClearIT+0x90>
    {
      return MFXSTM32L152_ERROR;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e000      	b.n	8001f86 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }

  return MFXSTM32L152_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <MFXSTM32L152_RegisterBusIO>:
  * @brief  Register Bus Io to component
  * @param  Component object pointer
  * @retval Component status
  */
int32_t MFXSTM32L152_RegisterBusIO (MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_t *pIO)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d103      	bne.n	8001fa8 <MFXSTM32L152_RegisterBusIO+0x18>
  {
    ret = MFXSTM32L152_ERROR;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	e02c      	b.n	8002002 <MFXSTM32L152_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	891a      	ldrh	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = MFXSTM32L152_ReadRegWrap;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0c      	ldr	r2, [pc, #48]	; (800200c <MFXSTM32L152_RegisterBusIO+0x7c>)
 8001fdc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = MFXSTM32L152_WriteRegWrap;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <MFXSTM32L152_RegisterBusIO+0x80>)
 8001fe2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <MFXSTM32L152_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4798      	blx	r3
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	e002      	b.n	8002002 <MFXSTM32L152_RegisterBusIO+0x72>
    }
    else
    {
      ret = MFXSTM32L152_ERROR;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	0800218f 	.word	0x0800218f
 8002010:	080021c1 	.word	0x080021c1

08002014 <MFXSTM32L152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval Component status
  */
static int32_t MFXSTM32L152_reg24_setPinValue(MFXSTM32L152_Object_t *pObj, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	461a      	mov	r2, r3
 8002020:	460b      	mov	r3, r1
 8002022:	72fb      	strb	r3, [r7, #11]
 8002024:	4613      	mov	r3, r2
 8002026:	72bb      	strb	r3, [r7, #10]
  int32_t ret = MFXSTM32L152_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  uint8_t tmp;
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = (uint8_t)(PinPosition & 0x0000ffU);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	74fb      	strb	r3, [r7, #19]
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	74bb      	strb	r3, [r7, #18]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
  pin_16_23 = (uint8_t)(PinPosition >> 16);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	747b      	strb	r3, [r7, #17]

  if (pin_0_7 != 0U)
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d02e      	beq.n	80020a0 <MFXSTM32L152_reg24_setPinValue+0x8c>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f103 0018 	add.w	r0, r3, #24
 8002048:	7afb      	ldrb	r3, [r7, #11]
 800204a:	b299      	uxth	r1, r3
 800204c:	f107 0210 	add.w	r2, r7, #16
 8002050:	2301      	movs	r3, #1
 8002052:	f000 f8ce 	bl	80021f2 <mfxstm32l152_read_reg>
 8002056:	4602      	mov	r2, r0
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4413      	add	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 800205e:	7abb      	ldrb	r3, [r7, #10]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <MFXSTM32L152_reg24_setPinValue+0x5c>
    {
      tmp |= (uint8_t)pin_0_7;
 8002064:	7c3a      	ldrb	r2, [r7, #16]
 8002066:	7cfb      	ldrb	r3, [r7, #19]
 8002068:	4313      	orrs	r3, r2
 800206a:	b2db      	uxtb	r3, r3
 800206c:	743b      	strb	r3, [r7, #16]
 800206e:	e009      	b.n	8002084 <MFXSTM32L152_reg24_setPinValue+0x70>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8002070:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002074:	43db      	mvns	r3, r3
 8002076:	b25a      	sxtb	r2, r3
 8002078:	7c3b      	ldrb	r3, [r7, #16]
 800207a:	b25b      	sxtb	r3, r3
 800207c:	4013      	ands	r3, r2
 800207e:	b25b      	sxtb	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f103 0018 	add.w	r0, r3, #24
 800208a:	7afb      	ldrb	r3, [r7, #11]
 800208c:	b299      	uxth	r1, r3
 800208e:	f107 0210 	add.w	r2, r7, #16
 8002092:	2301      	movs	r3, #1
 8002094:	f000 f8c4 	bl	8002220 <mfxstm32l152_write_reg>
 8002098:	4602      	mov	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4413      	add	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
  }

  if (pin_8_15 != 0U)
 80020a0:	7cbb      	ldrb	r3, [r7, #18]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d032      	beq.n	800210c <MFXSTM32L152_reg24_setPinValue+0xf8>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+1U), &tmp, 1);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f103 0018 	add.w	r0, r3, #24
 80020ac:	7afb      	ldrb	r3, [r7, #11]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	b299      	uxth	r1, r3
 80020b4:	f107 0210 	add.w	r2, r7, #16
 80020b8:	2301      	movs	r3, #1
 80020ba:	f000 f89a 	bl	80021f2 <mfxstm32l152_read_reg>
 80020be:	4602      	mov	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4413      	add	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 80020c6:	7abb      	ldrb	r3, [r7, #10]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <MFXSTM32L152_reg24_setPinValue+0xc4>
    {
      tmp |= (uint8_t)pin_8_15;
 80020cc:	7c3a      	ldrb	r2, [r7, #16]
 80020ce:	7cbb      	ldrb	r3, [r7, #18]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	743b      	strb	r3, [r7, #16]
 80020d6:	e009      	b.n	80020ec <MFXSTM32L152_reg24_setPinValue+0xd8>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 80020d8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80020dc:	43db      	mvns	r3, r3
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	7c3b      	ldrb	r3, [r7, #16]
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	4013      	ands	r3, r2
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+1U), &tmp, 1);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f103 0018 	add.w	r0, r3, #24
 80020f2:	7afb      	ldrb	r3, [r7, #11]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	b299      	uxth	r1, r3
 80020fa:	f107 0210 	add.w	r2, r7, #16
 80020fe:	2301      	movs	r3, #1
 8002100:	f000 f88e 	bl	8002220 <mfxstm32l152_write_reg>
 8002104:	4602      	mov	r2, r0
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	4413      	add	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
  }

  if (pin_16_23 != 0U)
 800210c:	7c7b      	ldrb	r3, [r7, #17]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d032      	beq.n	8002178 <MFXSTM32L152_reg24_setPinValue+0x164>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+2U), &tmp, 1);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f103 0018 	add.w	r0, r3, #24
 8002118:	7afb      	ldrb	r3, [r7, #11]
 800211a:	b29b      	uxth	r3, r3
 800211c:	3302      	adds	r3, #2
 800211e:	b299      	uxth	r1, r3
 8002120:	f107 0210 	add.w	r2, r7, #16
 8002124:	2301      	movs	r3, #1
 8002126:	f000 f864 	bl	80021f2 <mfxstm32l152_read_reg>
 800212a:	4602      	mov	r2, r0
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4413      	add	r3, r2
 8002130:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8002132:	7abb      	ldrb	r3, [r7, #10]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <MFXSTM32L152_reg24_setPinValue+0x130>
    {
      tmp |= (uint8_t)pin_16_23;
 8002138:	7c3a      	ldrb	r2, [r7, #16]
 800213a:	7c7b      	ldrb	r3, [r7, #17]
 800213c:	4313      	orrs	r3, r2
 800213e:	b2db      	uxtb	r3, r3
 8002140:	743b      	strb	r3, [r7, #16]
 8002142:	e009      	b.n	8002158 <MFXSTM32L152_reg24_setPinValue+0x144>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8002144:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002148:	43db      	mvns	r3, r3
 800214a:	b25a      	sxtb	r2, r3
 800214c:	7c3b      	ldrb	r3, [r7, #16]
 800214e:	b25b      	sxtb	r3, r3
 8002150:	4013      	ands	r3, r2
 8002152:	b25b      	sxtb	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+2U), &tmp, 1);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f103 0018 	add.w	r0, r3, #24
 800215e:	7afb      	ldrb	r3, [r7, #11]
 8002160:	b29b      	uxth	r3, r3
 8002162:	3302      	adds	r3, #2
 8002164:	b299      	uxth	r1, r3
 8002166:	f107 0210 	add.w	r2, r7, #16
 800216a:	2301      	movs	r3, #1
 800216c:	f000 f858 	bl	8002220 <mfxstm32l152_write_reg>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	4413      	add	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  }

  if(ret != MFXSTM32L152_OK)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <MFXSTM32L152_reg24_setPinValue+0x170>
  {
    ret = MFXSTM32L152_ERROR;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002184:	697b      	ldr	r3, [r7, #20]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <MFXSTM32L152_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800218e:	b590      	push	{r4, r7, lr}
 8002190:	b087      	sub	sp, #28
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	461a      	mov	r2, r3
 800219a:	460b      	mov	r3, r1
 800219c:	817b      	strh	r3, [r7, #10]
 800219e:	4613      	mov	r3, r2
 80021a0:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	691c      	ldr	r4, [r3, #16]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	8918      	ldrh	r0, [r3, #8]
 80021ae:	893b      	ldrh	r3, [r7, #8]
 80021b0:	8979      	ldrh	r1, [r7, #10]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	47a0      	blx	r4
 80021b6:	4603      	mov	r3, r0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd90      	pop	{r4, r7, pc}

080021c0 <MFXSTM32L152_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	461a      	mov	r2, r3
 80021cc:	460b      	mov	r3, r1
 80021ce:	817b      	strh	r3, [r7, #10]
 80021d0:	4613      	mov	r3, r2
 80021d2:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	68dc      	ldr	r4, [r3, #12]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	8918      	ldrh	r0, [r3, #8]
 80021e0:	893b      	ldrh	r3, [r7, #8]
 80021e2:	8979      	ldrh	r1, [r7, #10]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	47a0      	blx	r4
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd90      	pop	{r4, r7, pc}

080021f2 <mfxstm32l152_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t mfxstm32l152_read_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t* data, uint16_t length)
{
 80021f2:	b590      	push	{r4, r7, lr}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	461a      	mov	r2, r3
 80021fe:	460b      	mov	r3, r1
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	4613      	mov	r3, r2
 8002204:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685c      	ldr	r4, [r3, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6898      	ldr	r0, [r3, #8]
 800220e:	893b      	ldrh	r3, [r7, #8]
 8002210:	8979      	ldrh	r1, [r7, #10]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	47a0      	blx	r4
 8002216:	4603      	mov	r3, r0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bd90      	pop	{r4, r7, pc}

08002220 <mfxstm32l152_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t mfxstm32l152_write_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t* data, uint16_t length)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	461a      	mov	r2, r3
 800222c:	460b      	mov	r3, r1
 800222e:	817b      	strh	r3, [r7, #10]
 8002230:	4613      	mov	r3, r2
 8002232:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681c      	ldr	r4, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6898      	ldr	r0, [r3, #8]
 800223c:	893b      	ldrh	r3, [r7, #8]
 800223e:	8979      	ldrh	r1, [r7, #10]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	47a0      	blx	r4
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}
	...

08002250 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e02c      	b.n	80022c2 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	891a      	ldrh	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <OV5640_RegisterBusIO+0x7c>)
 800229c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <OV5640_RegisterBusIO+0x80>)
 80022a2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4798      	blx	r3
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	e002      	b.n	80022c2 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	08003ad3 	.word	0x08003ad3
 80022d0:	08003b05 	.word	0x08003b05

080022d4 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d165      	bne.n	80023ba <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d80e      	bhi.n	8002312 <OV5640_Init+0x3e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00f      	beq.n	800231a <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d00c      	beq.n	800231a <OV5640_Init+0x46>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d009      	beq.n	800231a <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b07      	cmp	r3, #7
 800230a:	d006      	beq.n	800231a <OV5640_Init+0x46>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b08      	cmp	r3, #8
 8002310:	d003      	beq.n	800231a <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	e04f      	b.n	80023ba <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e01f      	b.n	8002360 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002326:	d018      	beq.n	800235a <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8002328:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <OV5640_Init+0xf0>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	885b      	ldrh	r3, [r3, #2]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f103 0018 	add.w	r0, r3, #24
 800233c:	4a21      	ldr	r2, [pc, #132]	; (80023c4 <OV5640_Init+0xf0>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002344:	f107 0217 	add.w	r2, r7, #23
 8002348:	2301      	movs	r3, #1
 800234a:	f001 fc0b 	bl	8003b64 <ov5640_write_reg>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
 8002358:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3301      	adds	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2bfd      	cmp	r3, #253	; 0xfd
 8002364:	d9dc      	bls.n	8002320 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d126      	bne.n	80023ba <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f9e0 	bl	8002734 <OV5640_SetResolution>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e01b      	b.n	80023ba <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f833 	bl	80023f0 <OV5640_SetPixelFormat>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e010      	b.n	80023ba <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8002398:	2300      	movs	r3, #0
 800239a:	2201      	movs	r2, #1
 800239c:	2101      	movs	r1, #1
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fb64 	bl	8002a6c <OV5640_SetPolarities>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	e003      	b.n	80023ba <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 80023ba:	69bb      	ldr	r3, [r7, #24]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	080129a4 	.word	0x080129a4

080023c8 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d103      	bne.n	80023e2 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00f      	beq.n	8002424 <OV5640_SetPixelFormat+0x34>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d00c      	beq.n	8002424 <OV5640_SetPixelFormat+0x34>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d009      	beq.n	8002424 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b07      	cmp	r3, #7
 8002414:	d006      	beq.n	8002424 <OV5640_SetPixelFormat+0x34>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d003      	beq.n	8002424 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e16a      	b.n	80026fa <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	3b01      	subs	r3, #1
 8002428:	2b07      	cmp	r3, #7
 800242a:	f200 80c3 	bhi.w	80025b4 <OV5640_SetPixelFormat+0x1c4>
 800242e:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <OV5640_SetPixelFormat+0x44>)
 8002430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002434:	080024ad 	.word	0x080024ad
 8002438:	08002455 	.word	0x08002455
 800243c:	080025b5 	.word	0x080025b5
 8002440:	080025b5 	.word	0x080025b5
 8002444:	080025b5 	.word	0x080025b5
 8002448:	080025b5 	.word	0x080025b5
 800244c:	08002505 	.word	0x08002505
 8002450:	0800255d 	.word	0x0800255d
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e024      	b.n	80024a4 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d01d      	beq.n	800249e <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8002462:	4aa8      	ldr	r2, [pc, #672]	; (8002704 <OV5640_SetPixelFormat+0x314>)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	885b      	ldrh	r3, [r3, #2]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f103 0018 	add.w	r0, r3, #24
 8002476:	4aa3      	ldr	r2, [pc, #652]	; (8002704 <OV5640_SetPixelFormat+0x314>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800247e:	f107 020f 	add.w	r2, r7, #15
 8002482:	2301      	movs	r3, #1
 8002484:	f001 fb6e 	bl	8003b64 <ov5640_write_reg>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	e003      	b.n	800249e <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002496:	2101      	movs	r1, #1
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f001 fb00 	bl	8003a9e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	3301      	adds	r3, #1
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d9d7      	bls.n	800245a <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 80024aa:	e0af      	b.n	800260c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	e024      	b.n	80024fc <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d01d      	beq.n	80024f6 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80024ba:	4a93      	ldr	r2, [pc, #588]	; (8002708 <OV5640_SetPixelFormat+0x318>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	885b      	ldrh	r3, [r3, #2]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f103 0018 	add.w	r0, r3, #24
 80024ce:	4a8e      	ldr	r2, [pc, #568]	; (8002708 <OV5640_SetPixelFormat+0x318>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80024d6:	f107 020f 	add.w	r2, r7, #15
 80024da:	2301      	movs	r3, #1
 80024dc:	f001 fb42 	bl	8003b64 <ov5640_write_reg>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e003      	b.n	80024f6 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80024ee:	2101      	movs	r1, #1
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f001 fad4 	bl	8003a9e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	3301      	adds	r3, #1
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d9d7      	bls.n	80024b2 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8002502:	e083      	b.n	800260c <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	e024      	b.n	8002554 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d01d      	beq.n	800254e <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8002512:	4a7e      	ldr	r2, [pc, #504]	; (800270c <OV5640_SetPixelFormat+0x31c>)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	885b      	ldrh	r3, [r3, #2]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f103 0018 	add.w	r0, r3, #24
 8002526:	4a79      	ldr	r2, [pc, #484]	; (800270c <OV5640_SetPixelFormat+0x31c>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800252e:	f107 020f 	add.w	r2, r7, #15
 8002532:	2301      	movs	r3, #1
 8002534:	f001 fb16 	bl	8003b64 <ov5640_write_reg>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	e003      	b.n	800254e <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002546:	2101      	movs	r1, #1
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f001 faa8 	bl	8003a9e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	3301      	adds	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d9d7      	bls.n	800250a <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 800255a:	e057      	b.n	800260c <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e024      	b.n	80025ac <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d01d      	beq.n	80025a6 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800256a:	4a69      	ldr	r2, [pc, #420]	; (8002710 <OV5640_SetPixelFormat+0x320>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	885b      	ldrh	r3, [r3, #2]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f103 0018 	add.w	r0, r3, #24
 800257e:	4a64      	ldr	r2, [pc, #400]	; (8002710 <OV5640_SetPixelFormat+0x320>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002586:	f107 020f 	add.w	r2, r7, #15
 800258a:	2301      	movs	r3, #1
 800258c:	f001 faea 	bl	8003b64 <ov5640_write_reg>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e003      	b.n	80025a6 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800259e:	2101      	movs	r1, #1
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f001 fa7c 	bl	8003a9e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	3301      	adds	r3, #1
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d9d7      	bls.n	8002562 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 80025b2:	e02b      	b.n	800260c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	e024      	b.n	8002604 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d01d      	beq.n	80025fe <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80025c2:	4a54      	ldr	r2, [pc, #336]	; (8002714 <OV5640_SetPixelFormat+0x324>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	885b      	ldrh	r3, [r3, #2]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 0018 	add.w	r0, r3, #24
 80025d6:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <OV5640_SetPixelFormat+0x324>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80025de:	f107 020f 	add.w	r2, r7, #15
 80025e2:	2301      	movs	r3, #1
 80025e4:	f001 fabe 	bl	8003b64 <ov5640_write_reg>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e003      	b.n	80025fe <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80025f6:	2101      	movs	r1, #1
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f001 fa50 	bl	8003a9e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	3301      	adds	r3, #1
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d9d7      	bls.n	80025ba <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 800260a:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b08      	cmp	r3, #8
 8002610:	d173      	bne.n	80026fa <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f103 0018 	add.w	r0, r3, #24
 8002618:	f107 020f 	add.w	r2, r7, #15
 800261c:	2301      	movs	r3, #1
 800261e:	f643 0121 	movw	r1, #14369	; 0x3821
 8002622:	f001 fa88 	bl	8003b36 <ov5640_read_reg>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	e062      	b.n	80026fa <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	f043 0320 	orr.w	r3, r3, #32
 800263a:	b2db      	uxtb	r3, r3
 800263c:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f103 0018 	add.w	r0, r3, #24
 8002644:	f107 020f 	add.w	r2, r7, #15
 8002648:	2301      	movs	r3, #1
 800264a:	f643 0121 	movw	r1, #14369	; 0x3821
 800264e:	f001 fa89 	bl	8003b64 <ov5640_write_reg>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e04c      	b.n	80026fa <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 0018 	add.w	r0, r3, #24
 8002666:	f107 020f 	add.w	r2, r7, #15
 800266a:	2301      	movs	r3, #1
 800266c:	f243 0102 	movw	r1, #12290	; 0x3002
 8002670:	f001 fa61 	bl	8003b36 <ov5640_read_reg>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e03b      	b.n	80026fa <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	f023 031c 	bic.w	r3, r3, #28
 8002688:	b2db      	uxtb	r3, r3
 800268a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0018 	add.w	r0, r3, #24
 8002692:	f107 020f 	add.w	r2, r7, #15
 8002696:	2301      	movs	r3, #1
 8002698:	f243 0102 	movw	r1, #12290	; 0x3002
 800269c:	f001 fa62 	bl	8003b64 <ov5640_write_reg>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e025      	b.n	80026fa <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f103 0018 	add.w	r0, r3, #24
 80026b4:	f107 020f 	add.w	r2, r7, #15
 80026b8:	2301      	movs	r3, #1
 80026ba:	f243 0106 	movw	r1, #12294	; 0x3006
 80026be:	f001 fa3a 	bl	8003b36 <ov5640_read_reg>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e014      	b.n	80026fa <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f103 0018 	add.w	r0, r3, #24
 80026e0:	f107 020f 	add.w	r2, r7, #15
 80026e4:	2301      	movs	r3, #1
 80026e6:	f243 0106 	movw	r1, #12294	; 0x3006
 80026ea:	f001 fa3b 	bl	8003b64 <ov5640_write_reg>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
 80026f8:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 80026fa:	697b      	ldr	r3, [r7, #20]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	08012d9c 	.word	0x08012d9c
 8002708:	08012da4 	.word	0x08012da4
 800270c:	08012dac 	.word	0x08012dac
 8002710:	08012db4 	.word	0x08012db4
 8002714:	08012dbc 	.word	0x08012dbc

08002718 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d903      	bls.n	8002750 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e0d8      	b.n	8002902 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b04      	cmp	r3, #4
 8002754:	f200 80d1 	bhi.w	80028fa <OV5640_SetResolution+0x1c6>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <OV5640_SetResolution+0x2c>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002775 	.word	0x08002775
 8002764:	080027c3 	.word	0x080027c3
 8002768:	08002811 	.word	0x08002811
 800276c:	0800285f 	.word	0x0800285f
 8002770:	080028ad 	.word	0x080028ad
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e01f      	b.n	80027ba <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d018      	beq.n	80027b4 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8002782:	4a62      	ldr	r2, [pc, #392]	; (800290c <OV5640_SetResolution+0x1d8>)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	885b      	ldrh	r3, [r3, #2]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f103 0018 	add.w	r0, r3, #24
 8002796:	4a5d      	ldr	r2, [pc, #372]	; (800290c <OV5640_SetResolution+0x1d8>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800279e:	f107 020f 	add.w	r2, r7, #15
 80027a2:	2301      	movs	r3, #1
 80027a4:	f001 f9de 	bl	8003b64 <ov5640_write_reg>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	3301      	adds	r3, #1
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d9dc      	bls.n	800277a <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 80027c0:	e09f      	b.n	8002902 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	e01f      	b.n	8002808 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	d018      	beq.n	8002802 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80027d0:	4a4f      	ldr	r2, [pc, #316]	; (8002910 <OV5640_SetResolution+0x1dc>)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	885b      	ldrh	r3, [r3, #2]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f103 0018 	add.w	r0, r3, #24
 80027e4:	4a4a      	ldr	r2, [pc, #296]	; (8002910 <OV5640_SetResolution+0x1dc>)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80027ec:	f107 020f 	add.w	r2, r7, #15
 80027f0:	2301      	movs	r3, #1
 80027f2:	f001 f9b7 	bl	8003b64 <ov5640_write_reg>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002800:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	3301      	adds	r3, #1
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d9dc      	bls.n	80027c8 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 800280e:	e078      	b.n	8002902 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	e01f      	b.n	8002856 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d018      	beq.n	8002850 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 800281e:	4a3d      	ldr	r2, [pc, #244]	; (8002914 <OV5640_SetResolution+0x1e0>)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	885b      	ldrh	r3, [r3, #2]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f103 0018 	add.w	r0, r3, #24
 8002832:	4a38      	ldr	r2, [pc, #224]	; (8002914 <OV5640_SetResolution+0x1e0>)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800283a:	f107 020f 	add.w	r2, r7, #15
 800283e:	2301      	movs	r3, #1
 8002840:	f001 f990 	bl	8003b64 <ov5640_write_reg>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	3301      	adds	r3, #1
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d9dc      	bls.n	8002816 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 800285c:	e051      	b.n	8002902 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	e01f      	b.n	80028a4 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d018      	beq.n	800289e <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 800286c:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <OV5640_SetResolution+0x1e4>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	885b      	ldrh	r3, [r3, #2]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f103 0018 	add.w	r0, r3, #24
 8002880:	4a25      	ldr	r2, [pc, #148]	; (8002918 <OV5640_SetResolution+0x1e4>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002888:	f107 020f 	add.w	r2, r7, #15
 800288c:	2301      	movs	r3, #1
 800288e:	f001 f969 	bl	8003b64 <ov5640_write_reg>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
 800289c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	3301      	adds	r3, #1
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d9dc      	bls.n	8002864 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 80028aa:	e02a      	b.n	8002902 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	e01f      	b.n	80028f2 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d018      	beq.n	80028ec <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80028ba:	4a18      	ldr	r2, [pc, #96]	; (800291c <OV5640_SetResolution+0x1e8>)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	885b      	ldrh	r3, [r3, #2]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f103 0018 	add.w	r0, r3, #24
 80028ce:	4a13      	ldr	r2, [pc, #76]	; (800291c <OV5640_SetResolution+0x1e8>)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80028d6:	f107 020f 	add.w	r2, r7, #15
 80028da:	2301      	movs	r3, #1
 80028dc:	f001 f942 	bl	8003b64 <ov5640_write_reg>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	3301      	adds	r3, #1
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d9dc      	bls.n	80028b2 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 80028f8:	e003      	b.n	8002902 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	617b      	str	r3, [r7, #20]
        break;
 8002900:	bf00      	nop
    }
  }

  return ret;
 8002902:	697b      	ldr	r3, [r7, #20]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	08012dc4 	.word	0x08012dc4
 8002910:	08012dd4 	.word	0x08012dd4
 8002914:	08012de4 	.word	0x08012de4
 8002918:	08012df4 	.word	0x08012df4
 800291c:	08012e04 	.word	0x08012e04

08002920 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f103 0018 	add.w	r0, r3, #24
 8002930:	f107 020f 	add.w	r2, r7, #15
 8002934:	2301      	movs	r3, #1
 8002936:	f643 0108 	movw	r1, #14344	; 0x3808
 800293a:	f001 f8fc 	bl	8003b36 <ov5640_read_reg>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8002944:	f04f 33ff 	mov.w	r3, #4294967295
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e08a      	b.n	8002a62 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	b29b      	uxth	r3, r3
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f103 0018 	add.w	r0, r3, #24
 800295a:	f107 020f 	add.w	r2, r7, #15
 800295e:	2301      	movs	r3, #1
 8002960:	f643 0109 	movw	r1, #14345	; 0x3809
 8002964:	f001 f8e7 	bl	8003b36 <ov5640_read_reg>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e075      	b.n	8002a62 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	b29a      	uxth	r2, r3
 800297a:	8a7b      	ldrh	r3, [r7, #18]
 800297c:	4313      	orrs	r3, r2
 800297e:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f103 0018 	add.w	r0, r3, #24
 8002986:	f107 020f 	add.w	r2, r7, #15
 800298a:	2301      	movs	r3, #1
 800298c:	f643 010a 	movw	r1, #14346	; 0x380a
 8002990:	f001 f8d1 	bl	8003b36 <ov5640_read_reg>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	e05f      	b.n	8002a62 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f103 0018 	add.w	r0, r3, #24
 80029b0:	f107 020f 	add.w	r2, r7, #15
 80029b4:	2301      	movs	r3, #1
 80029b6:	f643 010b 	movw	r1, #14347	; 0x380b
 80029ba:	f001 f8bc 	bl	8003b36 <ov5640_read_reg>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e04a      	b.n	8002a62 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	8a3b      	ldrh	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 80029d6:	8a7b      	ldrh	r3, [r7, #18]
 80029d8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80029dc:	d109      	bne.n	80029f2 <OV5640_GetResolution+0xd2>
 80029de:	8a3b      	ldrh	r3, [r7, #16]
 80029e0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80029e4:	d105      	bne.n	80029f2 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2204      	movs	r2, #4
 80029ea:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	e037      	b.n	8002a62 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 80029f2:	8a7b      	ldrh	r3, [r7, #18]
 80029f4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80029f8:	d109      	bne.n	8002a0e <OV5640_GetResolution+0xee>
 80029fa:	8a3b      	ldrh	r3, [r7, #16]
 80029fc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002a00:	d105      	bne.n	8002a0e <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2203      	movs	r2, #3
 8002a06:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e029      	b.n	8002a62 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8002a0e:	8a7b      	ldrh	r3, [r7, #18]
 8002a10:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002a14:	d109      	bne.n	8002a2a <OV5640_GetResolution+0x10a>
 8002a16:	8a3b      	ldrh	r3, [r7, #16]
 8002a18:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002a1c:	d105      	bne.n	8002a2a <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2202      	movs	r2, #2
 8002a22:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e01b      	b.n	8002a62 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8002a2a:	8a7b      	ldrh	r3, [r7, #18]
 8002a2c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a30:	d108      	bne.n	8002a44 <OV5640_GetResolution+0x124>
 8002a32:	8a3b      	ldrh	r3, [r7, #16]
 8002a34:	2bf0      	cmp	r3, #240	; 0xf0
 8002a36:	d105      	bne.n	8002a44 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e00e      	b.n	8002a62 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8002a44:	8a7b      	ldrh	r3, [r7, #18]
 8002a46:	2ba0      	cmp	r3, #160	; 0xa0
 8002a48:	d108      	bne.n	8002a5c <OV5640_GetResolution+0x13c>
 8002a4a:	8a3b      	ldrh	r3, [r7, #16]
 8002a4c:	2b78      	cmp	r3, #120	; 0x78
 8002a4e:	d105      	bne.n	8002a5c <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	e002      	b.n	8002a62 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a60:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002a62:	697b      	ldr	r3, [r7, #20]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d011      	beq.n	8002aa8 <OV5640_SetPolarities+0x3c>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <OV5640_SetPolarities+0x24>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10b      	bne.n	8002aa8 <OV5640_SetPolarities+0x3c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <OV5640_SetPolarities+0x3c>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d006      	beq.n	8002ab0 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e01e      	b.n	8002aee <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	015b      	lsls	r3, r3, #5
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f103 0018 	add.w	r0, r3, #24
 8002ad4:	f107 0213 	add.w	r2, r7, #19
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f244 7140 	movw	r1, #18240	; 0x4740
 8002ade:	f001 f841 	bl	8003b64 <ov5640_write_reg>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002aee:	697b      	ldr	r3, [r7, #20]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f103 0018 	add.w	r0, r3, #24
 8002b12:	f107 020b 	add.w	r2, r7, #11
 8002b16:	2301      	movs	r3, #1
 8002b18:	f243 0108 	movw	r1, #12296	; 0x3008
 8002b1c:	f001 f822 	bl	8003b64 <ov5640_write_reg>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e032      	b.n	8002b94 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8002b2e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 ffb3 	bl	8003a9e <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f103 0018 	add.w	r0, r3, #24
 8002b3e:	f107 020b 	add.w	r2, r7, #11
 8002b42:	2301      	movs	r3, #1
 8002b44:	f243 010a 	movw	r1, #12298	; 0x300a
 8002b48:	f000 fff5 	bl	8003b36 <ov5640_read_reg>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e01c      	b.n	8002b94 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	021a      	lsls	r2, r3, #8
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f103 0018 	add.w	r0, r3, #24
 8002b68:	f107 020b 	add.w	r2, r7, #11
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f243 010b 	movw	r1, #12299	; 0x300b
 8002b72:	f000 ffe0 	bl	8003b36 <ov5640_read_reg>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	e007      	b.n	8002b94 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	7afa      	ldrb	r2, [r7, #11]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8002b94:	68fb      	ldr	r3, [r7, #12]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e01f      	b.n	8002bf6 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f103 0018 	add.w	r0, r3, #24
 8002c18:	f107 020f 	add.w	r2, r7, #15
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f243 4106 	movw	r1, #13318	; 0x3406
 8002c22:	f000 ff9f 	bl	8003b64 <ov5640_write_reg>
 8002c26:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10c      	bne.n	8002c48 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8002c2e:	2346      	movs	r3, #70	; 0x46
 8002c30:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f103 0018 	add.w	r0, r3, #24
 8002c38:	f107 020f 	add.w	r2, r7, #15
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f245 1190 	movw	r1, #20880	; 0x5190
 8002c42:	f000 ff8f 	bl	8003b64 <ov5640_write_reg>
 8002c46:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8002c4e:	23f8      	movs	r3, #248	; 0xf8
 8002c50:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f103 0018 	add.w	r0, r3, #24
 8002c58:	f107 020f 	add.w	r2, r7, #15
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f245 1191 	movw	r1, #20881	; 0x5191
 8002c62:	f000 ff7f 	bl	8003b64 <ov5640_write_reg>
 8002c66:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10c      	bne.n	8002c88 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8002c6e:	2304      	movs	r3, #4
 8002c70:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f103 0018 	add.w	r0, r3, #24
 8002c78:	f107 020f 	add.w	r2, r7, #15
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f245 1192 	movw	r1, #20882	; 0x5192
 8002c82:	f000 ff6f 	bl	8003b64 <ov5640_write_reg>
 8002c86:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 80db 	bne.w	8002e46 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	2b07      	cmp	r3, #7
 8002c96:	f200 80af 	bhi.w	8002df8 <OV5640_SetLightMode+0x1f4>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <OV5640_SetLightMode+0x9c>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cc1 	.word	0x08002cc1
 8002ca4:	08002d0f 	.word	0x08002d0f
 8002ca8:	08002df9 	.word	0x08002df9
 8002cac:	08002dab 	.word	0x08002dab
 8002cb0:	08002df9 	.word	0x08002df9
 8002cb4:	08002df9 	.word	0x08002df9
 8002cb8:	08002df9 	.word	0x08002df9
 8002cbc:	08002d5d 	.word	0x08002d5d
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	e01f      	b.n	8002d06 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d018      	beq.n	8002d00 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8002cce:	4a61      	ldr	r2, [pc, #388]	; (8002e54 <OV5640_SetLightMode+0x250>)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	885b      	ldrh	r3, [r3, #2]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f103 0018 	add.w	r0, r3, #24
 8002ce2:	4a5c      	ldr	r2, [pc, #368]	; (8002e54 <OV5640_SetLightMode+0x250>)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002cea:	f107 020f 	add.w	r2, r7, #15
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f000 ff38 	bl	8003b64 <ov5640_write_reg>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	3301      	adds	r3, #1
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b06      	cmp	r3, #6
 8002d0a:	d9dc      	bls.n	8002cc6 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8002d0c:	e09c      	b.n	8002e48 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	e01f      	b.n	8002d54 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d018      	beq.n	8002d4e <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8002d1c:	4a4e      	ldr	r2, [pc, #312]	; (8002e58 <OV5640_SetLightMode+0x254>)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	885b      	ldrh	r3, [r3, #2]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f103 0018 	add.w	r0, r3, #24
 8002d30:	4a49      	ldr	r2, [pc, #292]	; (8002e58 <OV5640_SetLightMode+0x254>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002d38:	f107 020f 	add.w	r2, r7, #15
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f000 ff11 	bl	8003b64 <ov5640_write_reg>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	3301      	adds	r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d9dc      	bls.n	8002d14 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8002d5a:	e075      	b.n	8002e48 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	e01f      	b.n	8002da2 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d018      	beq.n	8002d9c <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8002d6a:	4a3c      	ldr	r2, [pc, #240]	; (8002e5c <OV5640_SetLightMode+0x258>)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	885b      	ldrh	r3, [r3, #2]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f103 0018 	add.w	r0, r3, #24
 8002d7e:	4a37      	ldr	r2, [pc, #220]	; (8002e5c <OV5640_SetLightMode+0x258>)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002d86:	f107 020f 	add.w	r2, r7, #15
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f000 feea 	bl	8003b64 <ov5640_write_reg>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d9dc      	bls.n	8002d62 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8002da8:	e04e      	b.n	8002e48 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	e01f      	b.n	8002df0 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d018      	beq.n	8002dea <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8002db8:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <OV5640_SetLightMode+0x25c>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	885b      	ldrh	r3, [r3, #2]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f103 0018 	add.w	r0, r3, #24
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <OV5640_SetLightMode+0x25c>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002dd4:	f107 020f 	add.w	r2, r7, #15
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f000 fec3 	bl	8003b64 <ov5640_write_reg>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8002de4:	f04f 33ff 	mov.w	r3, #4294967295
 8002de8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	3301      	adds	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d9dc      	bls.n	8002db0 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8002df6:	e027      	b.n	8002e48 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e01f      	b.n	8002e3e <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d018      	beq.n	8002e38 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8002e06:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <OV5640_SetLightMode+0x260>)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	885b      	ldrh	r3, [r3, #2]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f103 0018 	add.w	r0, r3, #24
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <OV5640_SetLightMode+0x260>)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002e22:	f107 020f 	add.w	r2, r7, #15
 8002e26:	2301      	movs	r3, #1
 8002e28:	f000 fe9c 	bl	8003b64 <ov5640_write_reg>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b06      	cmp	r3, #6
 8002e42:	d9dc      	bls.n	8002dfe <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8002e44:	e000      	b.n	8002e48 <OV5640_SetLightMode+0x244>
    }
  }
 8002e46:	bf00      	nop
  return ret;
 8002e48:	697b      	ldr	r3, [r7, #20]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	08012e14 	.word	0x08012e14
 8002e58:	08012e30 	.word	0x08012e30
 8002e5c:	08012e4c 	.word	0x08012e4c
 8002e60:	08012e68 	.word	0x08012e68
 8002e64:	08012e84 	.word	0x08012e84

08002e68 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	2b1f      	cmp	r3, #31
 8002e78:	f200 81c0 	bhi.w	80031fc <OV5640_SetColorEffect+0x394>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <OV5640_SetColorEffect+0x1c>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002f05 	.word	0x08002f05
 8002e88:	08002f8f 	.word	0x08002f8f
 8002e8c:	080031fd 	.word	0x080031fd
 8002e90:	08003019 	.word	0x08003019
 8002e94:	080031fd 	.word	0x080031fd
 8002e98:	080031fd 	.word	0x080031fd
 8002e9c:	080031fd 	.word	0x080031fd
 8002ea0:	080030a3 	.word	0x080030a3
 8002ea4:	080031fd 	.word	0x080031fd
 8002ea8:	080031fd 	.word	0x080031fd
 8002eac:	080031fd 	.word	0x080031fd
 8002eb0:	080031fd 	.word	0x080031fd
 8002eb4:	080031fd 	.word	0x080031fd
 8002eb8:	080031fd 	.word	0x080031fd
 8002ebc:	080031fd 	.word	0x080031fd
 8002ec0:	0800312d 	.word	0x0800312d
 8002ec4:	080031fd 	.word	0x080031fd
 8002ec8:	080031fd 	.word	0x080031fd
 8002ecc:	080031fd 	.word	0x080031fd
 8002ed0:	080031fd 	.word	0x080031fd
 8002ed4:	080031fd 	.word	0x080031fd
 8002ed8:	080031fd 	.word	0x080031fd
 8002edc:	080031fd 	.word	0x080031fd
 8002ee0:	080031fd 	.word	0x080031fd
 8002ee4:	080031fd 	.word	0x080031fd
 8002ee8:	080031fd 	.word	0x080031fd
 8002eec:	080031fd 	.word	0x080031fd
 8002ef0:	080031fd 	.word	0x080031fd
 8002ef4:	080031fd 	.word	0x080031fd
 8002ef8:	080031fd 	.word	0x080031fd
 8002efc:	080031fd 	.word	0x080031fd
 8002f00:	080031b5 	.word	0x080031b5
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8002f04:	23ff      	movs	r3, #255	; 0xff
 8002f06:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f103 0018 	add.w	r0, r3, #24
 8002f0e:	f107 020b 	add.w	r2, r7, #11
 8002f12:	2301      	movs	r3, #1
 8002f14:	f245 0101 	movw	r1, #20481	; 0x5001
 8002f18:	f000 fe24 	bl	8003b64 <ov5640_write_reg>
 8002f1c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10c      	bne.n	8002f3e <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002f24:	2318      	movs	r3, #24
 8002f26:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f103 0018 	add.w	r0, r3, #24
 8002f2e:	f107 020b 	add.w	r2, r7, #11
 8002f32:	2301      	movs	r3, #1
 8002f34:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002f38:	f000 fe14 	bl	8003b64 <ov5640_write_reg>
 8002f3c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10c      	bne.n	8002f5e <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8002f44:	23a0      	movs	r3, #160	; 0xa0
 8002f46:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f103 0018 	add.w	r0, r3, #24
 8002f4e:	f107 020b 	add.w	r2, r7, #11
 8002f52:	2301      	movs	r3, #1
 8002f54:	f245 5183 	movw	r1, #21891	; 0x5583
 8002f58:	f000 fe04 	bl	8003b64 <ov5640_write_reg>
 8002f5c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10c      	bne.n	8002f7e <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8002f64:	2340      	movs	r3, #64	; 0x40
 8002f66:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f103 0018 	add.w	r0, r3, #24
 8002f6e:	f107 020b 	add.w	r2, r7, #11
 8002f72:	2301      	movs	r3, #1
 8002f74:	f245 5184 	movw	r1, #21892	; 0x5584
 8002f78:	f000 fdf4 	bl	8003b64 <ov5640_write_reg>
 8002f7c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 815f 	beq.w	8003244 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002f8c:	e15a      	b.n	8003244 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8002f8e:	23ff      	movs	r3, #255	; 0xff
 8002f90:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f103 0018 	add.w	r0, r3, #24
 8002f98:	f107 020b 	add.w	r2, r7, #11
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002fa2:	f000 fddf 	bl	8003b64 <ov5640_write_reg>
 8002fa6:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10c      	bne.n	8002fc8 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8002fae:	2318      	movs	r3, #24
 8002fb0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f103 0018 	add.w	r0, r3, #24
 8002fb8:	f107 020b 	add.w	r2, r7, #11
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002fc2:	f000 fdcf 	bl	8003b64 <ov5640_write_reg>
 8002fc6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f103 0018 	add.w	r0, r3, #24
 8002fd8:	f107 020b 	add.w	r2, r7, #11
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f245 5183 	movw	r1, #21891	; 0x5583
 8002fe2:	f000 fdbf 	bl	8003b64 <ov5640_write_reg>
 8002fe6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8002fee:	23c0      	movs	r3, #192	; 0xc0
 8002ff0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f103 0018 	add.w	r0, r3, #24
 8002ff8:	f107 020b 	add.w	r2, r7, #11
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f245 5184 	movw	r1, #21892	; 0x5584
 8003002:	f000 fdaf 	bl	8003b64 <ov5640_write_reg>
 8003006:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 811c 	beq.w	8003248 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8003010:	f04f 33ff 	mov.w	r3, #4294967295
 8003014:	60fb      	str	r3, [r7, #12]
      }
      break;
 8003016:	e117      	b.n	8003248 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8003018:	23ff      	movs	r3, #255	; 0xff
 800301a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f103 0018 	add.w	r0, r3, #24
 8003022:	f107 020b 	add.w	r2, r7, #11
 8003026:	2301      	movs	r3, #1
 8003028:	f245 0101 	movw	r1, #20481	; 0x5001
 800302c:	f000 fd9a 	bl	8003b64 <ov5640_write_reg>
 8003030:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10c      	bne.n	8003052 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8003038:	2318      	movs	r3, #24
 800303a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f103 0018 	add.w	r0, r3, #24
 8003042:	f107 020b 	add.w	r2, r7, #11
 8003046:	2301      	movs	r3, #1
 8003048:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800304c:	f000 fd8a 	bl	8003b64 <ov5640_write_reg>
 8003050:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10c      	bne.n	8003072 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8003058:	2360      	movs	r3, #96	; 0x60
 800305a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f103 0018 	add.w	r0, r3, #24
 8003062:	f107 020b 	add.w	r2, r7, #11
 8003066:	2301      	movs	r3, #1
 8003068:	f245 5183 	movw	r1, #21891	; 0x5583
 800306c:	f000 fd7a 	bl	8003b64 <ov5640_write_reg>
 8003070:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10c      	bne.n	8003092 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8003078:	2360      	movs	r3, #96	; 0x60
 800307a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f103 0018 	add.w	r0, r3, #24
 8003082:	f107 020b 	add.w	r2, r7, #11
 8003086:	2301      	movs	r3, #1
 8003088:	f245 5184 	movw	r1, #21892	; 0x5584
 800308c:	f000 fd6a 	bl	8003b64 <ov5640_write_reg>
 8003090:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80d9 	beq.w	800324c <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 800309a:	f04f 33ff 	mov.w	r3, #4294967295
 800309e:	60fb      	str	r3, [r7, #12]
      }
      break;
 80030a0:	e0d4      	b.n	800324c <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 80030a2:	23ff      	movs	r3, #255	; 0xff
 80030a4:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f103 0018 	add.w	r0, r3, #24
 80030ac:	f107 020b 	add.w	r2, r7, #11
 80030b0:	2301      	movs	r3, #1
 80030b2:	f245 0101 	movw	r1, #20481	; 0x5001
 80030b6:	f000 fd55 	bl	8003b64 <ov5640_write_reg>
 80030ba:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10c      	bne.n	80030dc <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 80030c2:	2318      	movs	r3, #24
 80030c4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f103 0018 	add.w	r0, r3, #24
 80030cc:	f107 020b 	add.w	r2, r7, #11
 80030d0:	2301      	movs	r3, #1
 80030d2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80030d6:	f000 fd45 	bl	8003b64 <ov5640_write_reg>
 80030da:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f103 0018 	add.w	r0, r3, #24
 80030ec:	f107 020b 	add.w	r2, r7, #11
 80030f0:	2301      	movs	r3, #1
 80030f2:	f245 5183 	movw	r1, #21891	; 0x5583
 80030f6:	f000 fd35 	bl	8003b64 <ov5640_write_reg>
 80030fa:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f103 0018 	add.w	r0, r3, #24
 800310c:	f107 020b 	add.w	r2, r7, #11
 8003110:	2301      	movs	r3, #1
 8003112:	f245 5184 	movw	r1, #21892	; 0x5584
 8003116:	f000 fd25 	bl	8003b64 <ov5640_write_reg>
 800311a:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8096 	beq.w	8003250 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295
 8003128:	60fb      	str	r3, [r7, #12]
      }
      break;
 800312a:	e091      	b.n	8003250 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 800312c:	23ff      	movs	r3, #255	; 0xff
 800312e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f103 0018 	add.w	r0, r3, #24
 8003136:	f107 020b 	add.w	r2, r7, #11
 800313a:	2301      	movs	r3, #1
 800313c:	f245 0101 	movw	r1, #20481	; 0x5001
 8003140:	f000 fd10 	bl	8003b64 <ov5640_write_reg>
 8003144:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10c      	bne.n	8003166 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 800314c:	2318      	movs	r3, #24
 800314e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f103 0018 	add.w	r0, r3, #24
 8003156:	f107 020b 	add.w	r2, r7, #11
 800315a:	2301      	movs	r3, #1
 800315c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8003160:	f000 fd00 	bl	8003b64 <ov5640_write_reg>
 8003164:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 800316c:	2340      	movs	r3, #64	; 0x40
 800316e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f103 0018 	add.w	r0, r3, #24
 8003176:	f107 020b 	add.w	r2, r7, #11
 800317a:	2301      	movs	r3, #1
 800317c:	f245 5183 	movw	r1, #21891	; 0x5583
 8003180:	f000 fcf0 	bl	8003b64 <ov5640_write_reg>
 8003184:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10c      	bne.n	80031a6 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 800318c:	23a0      	movs	r3, #160	; 0xa0
 800318e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f103 0018 	add.w	r0, r3, #24
 8003196:	f107 020b 	add.w	r2, r7, #11
 800319a:	2301      	movs	r3, #1
 800319c:	f245 5184 	movw	r1, #21892	; 0x5584
 80031a0:	f000 fce0 	bl	8003b64 <ov5640_write_reg>
 80031a4:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d053      	beq.n	8003254 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 80031ac:	f04f 33ff 	mov.w	r3, #4294967295
 80031b0:	60fb      	str	r3, [r7, #12]
      }
      break;
 80031b2:	e04f      	b.n	8003254 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 80031b4:	23ff      	movs	r3, #255	; 0xff
 80031b6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f103 0018 	add.w	r0, r3, #24
 80031be:	f107 020b 	add.w	r2, r7, #11
 80031c2:	2301      	movs	r3, #1
 80031c4:	f245 0101 	movw	r1, #20481	; 0x5001
 80031c8:	f000 fccc 	bl	8003b64 <ov5640_write_reg>
 80031cc:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10c      	bne.n	80031ee <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 80031d4:	2340      	movs	r3, #64	; 0x40
 80031d6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f103 0018 	add.w	r0, r3, #24
 80031de:	f107 020b 	add.w	r2, r7, #11
 80031e2:	2301      	movs	r3, #1
 80031e4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80031e8:	f000 fcbc 	bl	8003b64 <ov5640_write_reg>
 80031ec:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d031      	beq.n	8003258 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	60fb      	str	r3, [r7, #12]
      }
      break;
 80031fa:	e02d      	b.n	8003258 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 80031fc:	237f      	movs	r3, #127	; 0x7f
 80031fe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f103 0018 	add.w	r0, r3, #24
 8003206:	f107 020b 	add.w	r2, r7, #11
 800320a:	2301      	movs	r3, #1
 800320c:	f245 0101 	movw	r1, #20481	; 0x5001
 8003210:	f000 fca8 	bl	8003b64 <ov5640_write_reg>
 8003214:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10c      	bne.n	8003236 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 800321c:	2300      	movs	r3, #0
 800321e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f103 0018 	add.w	r0, r3, #24
 8003226:	f107 020b 	add.w	r2, r7, #11
 800322a:	2301      	movs	r3, #1
 800322c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8003230:	f000 fc98 	bl	8003b64 <ov5640_write_reg>
 8003234:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00f      	beq.n	800325c <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 800323c:	f04f 33ff 	mov.w	r3, #4294967295
 8003240:	60fb      	str	r3, [r7, #12]
      }

      break;
 8003242:	e00b      	b.n	800325c <OV5640_SetColorEffect+0x3f4>
      break;
 8003244:	bf00      	nop
 8003246:	e00a      	b.n	800325e <OV5640_SetColorEffect+0x3f6>
      break;
 8003248:	bf00      	nop
 800324a:	e008      	b.n	800325e <OV5640_SetColorEffect+0x3f6>
      break;
 800324c:	bf00      	nop
 800324e:	e006      	b.n	800325e <OV5640_SetColorEffect+0x3f6>
      break;
 8003250:	bf00      	nop
 8003252:	e004      	b.n	800325e <OV5640_SetColorEffect+0x3f6>
      break;
 8003254:	bf00      	nop
 8003256:	e002      	b.n	800325e <OV5640_SetColorEffect+0x3f6>
      break;
 8003258:	bf00      	nop
 800325a:	e000      	b.n	800325e <OV5640_SetColorEffect+0x3f6>
      break;
 800325c:	bf00      	nop
  }

  return ret;
 800325e:	68fb      	ldr	r3, [r7, #12]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8003272:	4a34      	ldr	r2, [pc, #208]	; (8003344 <OV5640_SetBrightness+0xdc>)
 8003274:	f107 0310 	add.w	r3, r7, #16
 8003278:	ca07      	ldmia	r2, {r0, r1, r2}
 800327a:	c303      	stmia	r3!, {r0, r1}
 800327c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800327e:	23ff      	movs	r3, #255	; 0xff
 8003280:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f103 0018 	add.w	r0, r3, #24
 8003288:	f107 020f 	add.w	r2, r7, #15
 800328c:	2301      	movs	r3, #1
 800328e:	f245 0101 	movw	r1, #20481	; 0x5001
 8003292:	f000 fc67 	bl	8003b64 <ov5640_write_reg>
 8003296:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d111      	bne.n	80032c2 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	3304      	adds	r3, #4
 80032a2:	3320      	adds	r3, #32
 80032a4:	443b      	add	r3, r7
 80032a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80032aa:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f103 0018 	add.w	r0, r3, #24
 80032b2:	f107 020f 	add.w	r2, r7, #15
 80032b6:	2301      	movs	r3, #1
 80032b8:	f245 5187 	movw	r1, #21895	; 0x5587
 80032bc:	f000 fc52 	bl	8003b64 <ov5640_write_reg>
 80032c0:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10c      	bne.n	80032e2 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 80032c8:	2304      	movs	r3, #4
 80032ca:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f103 0018 	add.w	r0, r3, #24
 80032d2:	f107 020f 	add.w	r2, r7, #15
 80032d6:	2301      	movs	r3, #1
 80032d8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80032dc:	f000 fc42 	bl	8003b64 <ov5640_write_reg>
 80032e0:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d127      	bne.n	8003338 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	da12      	bge.n	8003314 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f103 0018 	add.w	r0, r3, #24
 80032f8:	f107 020f 	add.w	r2, r7, #15
 80032fc:	2301      	movs	r3, #1
 80032fe:	f245 5188 	movw	r1, #21896	; 0x5588
 8003302:	f000 fc2f 	bl	8003b64 <ov5640_write_reg>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800330c:	f04f 33ff 	mov.w	r3, #4294967295
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	e011      	b.n	8003338 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8003314:	2309      	movs	r3, #9
 8003316:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f103 0018 	add.w	r0, r3, #24
 800331e:	f107 020f 	add.w	r2, r7, #15
 8003322:	2301      	movs	r3, #1
 8003324:	f245 5188 	movw	r1, #21896	; 0x5588
 8003328:	f000 fc1c 	bl	8003b64 <ov5640_write_reg>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8003338:	69fb      	ldr	r3, [r7, #28]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	0801294c 	.word	0x0801294c

08003348 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8003352:	4a30      	ldr	r2, [pc, #192]	; (8003414 <OV5640_SetSaturation+0xcc>)
 8003354:	f107 0310 	add.w	r3, r7, #16
 8003358:	ca07      	ldmia	r2, {r0, r1, r2}
 800335a:	c303      	stmia	r3!, {r0, r1}
 800335c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800335e:	23ff      	movs	r3, #255	; 0xff
 8003360:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f103 0018 	add.w	r0, r3, #24
 8003368:	f107 020f 	add.w	r2, r7, #15
 800336c:	2301      	movs	r3, #1
 800336e:	f245 0101 	movw	r1, #20481	; 0x5001
 8003372:	f000 fbf7 	bl	8003b64 <ov5640_write_reg>
 8003376:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d111      	bne.n	80033a2 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	3304      	adds	r3, #4
 8003382:	3320      	adds	r3, #32
 8003384:	443b      	add	r3, r7
 8003386:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800338a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0018 	add.w	r0, r3, #24
 8003392:	f107 020f 	add.w	r2, r7, #15
 8003396:	2301      	movs	r3, #1
 8003398:	f245 5183 	movw	r1, #21891	; 0x5583
 800339c:	f000 fbe2 	bl	8003b64 <ov5640_write_reg>
 80033a0:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0018 	add.w	r0, r3, #24
 80033ae:	f107 020f 	add.w	r2, r7, #15
 80033b2:	2301      	movs	r3, #1
 80033b4:	f245 5184 	movw	r1, #21892	; 0x5584
 80033b8:	f000 fbd4 	bl	8003b64 <ov5640_write_reg>
 80033bc:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10c      	bne.n	80033de <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 80033c4:	2302      	movs	r3, #2
 80033c6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f103 0018 	add.w	r0, r3, #24
 80033ce:	f107 020f 	add.w	r2, r7, #15
 80033d2:	2301      	movs	r3, #1
 80033d4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80033d8:	f000 fbc4 	bl	8003b64 <ov5640_write_reg>
 80033dc:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10c      	bne.n	80033fe <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 80033e4:	2341      	movs	r3, #65	; 0x41
 80033e6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f103 0018 	add.w	r0, r3, #24
 80033ee:	f107 020f 	add.w	r2, r7, #15
 80033f2:	2301      	movs	r3, #1
 80033f4:	f245 5188 	movw	r1, #21896	; 0x5588
 80033f8:	f000 fbb4 	bl	8003b64 <ov5640_write_reg>
 80033fc:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8003404:	f04f 33ff 	mov.w	r3, #4294967295
 8003408:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800340a:	69fb      	ldr	r3, [r7, #28]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	08012958 	.word	0x08012958

08003418 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8003422:	4a30      	ldr	r2, [pc, #192]	; (80034e4 <OV5640_SetContrast+0xcc>)
 8003424:	f107 0310 	add.w	r3, r7, #16
 8003428:	ca07      	ldmia	r2, {r0, r1, r2}
 800342a:	c303      	stmia	r3!, {r0, r1}
 800342c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800342e:	23ff      	movs	r3, #255	; 0xff
 8003430:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f103 0018 	add.w	r0, r3, #24
 8003438:	f107 020f 	add.w	r2, r7, #15
 800343c:	2301      	movs	r3, #1
 800343e:	f245 0101 	movw	r1, #20481	; 0x5001
 8003442:	f000 fb8f 	bl	8003b64 <ov5640_write_reg>
 8003446:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 800344e:	2304      	movs	r3, #4
 8003450:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f103 0018 	add.w	r0, r3, #24
 8003458:	f107 020f 	add.w	r2, r7, #15
 800345c:	2301      	movs	r3, #1
 800345e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8003462:	f000 fb7f 	bl	8003b64 <ov5640_write_reg>
 8003466:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d111      	bne.n	8003492 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	3304      	adds	r3, #4
 8003472:	3320      	adds	r3, #32
 8003474:	443b      	add	r3, r7
 8003476:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800347a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f103 0018 	add.w	r0, r3, #24
 8003482:	f107 020f 	add.w	r2, r7, #15
 8003486:	2301      	movs	r3, #1
 8003488:	f245 5186 	movw	r1, #21894	; 0x5586
 800348c:	f000 fb6a 	bl	8003b64 <ov5640_write_reg>
 8003490:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f103 0018 	add.w	r0, r3, #24
 800349e:	f107 020f 	add.w	r2, r7, #15
 80034a2:	2301      	movs	r3, #1
 80034a4:	f245 5185 	movw	r1, #21893	; 0x5585
 80034a8:	f000 fb5c 	bl	8003b64 <ov5640_write_reg>
 80034ac:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10c      	bne.n	80034ce <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 80034b4:	2341      	movs	r3, #65	; 0x41
 80034b6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f103 0018 	add.w	r0, r3, #24
 80034be:	f107 020f 	add.w	r2, r7, #15
 80034c2:	2301      	movs	r3, #1
 80034c4:	f245 5188 	movw	r1, #21896	; 0x5588
 80034c8:	f000 fb4c 	bl	8003b64 <ov5640_write_reg>
 80034cc:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 80034d4:	f04f 33ff 	mov.w	r3, #4294967295
 80034d8:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80034da:	69fb      	ldr	r3, [r7, #28]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	08012964 	.word	0x08012964

080034e8 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08e      	sub	sp, #56	; 0x38
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80034f2:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <OV5640_SetHueDegree+0xfc>)
 80034f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80034fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80034fe:	4a3a      	ldr	r2, [pc, #232]	; (80035e8 <OV5640_SetHueDegree+0x100>)
 8003500:	f107 031c 	add.w	r3, r7, #28
 8003504:	ca07      	ldmia	r2, {r0, r1, r2}
 8003506:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800350a:	4a38      	ldr	r2, [pc, #224]	; (80035ec <OV5640_SetHueDegree+0x104>)
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	ca07      	ldmia	r2, {r0, r1, r2}
 8003512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8003516:	23ff      	movs	r3, #255	; 0xff
 8003518:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f103 0018 	add.w	r0, r3, #24
 8003520:	f107 020f 	add.w	r2, r7, #15
 8003524:	2301      	movs	r3, #1
 8003526:	f245 0101 	movw	r1, #20481	; 0x5001
 800352a:	f000 fb1b 	bl	8003b64 <ov5640_write_reg>
 800352e:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8003530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10c      	bne.n	8003550 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f103 0018 	add.w	r0, r3, #24
 8003540:	f107 020f 	add.w	r2, r7, #15
 8003544:	2301      	movs	r3, #1
 8003546:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800354a:	f000 fb0b 	bl	8003b64 <ov5640_write_reg>
 800354e:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8003550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003552:	2b00      	cmp	r3, #0
 8003554:	d111      	bne.n	800357a <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	3306      	adds	r3, #6
 800355a:	3338      	adds	r3, #56	; 0x38
 800355c:	443b      	add	r3, r7
 800355e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003562:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f103 0018 	add.w	r0, r3, #24
 800356a:	f107 020f 	add.w	r2, r7, #15
 800356e:	2301      	movs	r3, #1
 8003570:	f245 5181 	movw	r1, #21889	; 0x5581
 8003574:	f000 faf6 	bl	8003b64 <ov5640_write_reg>
 8003578:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d111      	bne.n	80035a4 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	3306      	adds	r3, #6
 8003584:	3338      	adds	r3, #56	; 0x38
 8003586:	443b      	add	r3, r7
 8003588:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800358c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f103 0018 	add.w	r0, r3, #24
 8003594:	f107 020f 	add.w	r2, r7, #15
 8003598:	2301      	movs	r3, #1
 800359a:	f245 5182 	movw	r1, #21890	; 0x5582
 800359e:	f000 fae1 	bl	8003b64 <ov5640_write_reg>
 80035a2:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80035a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d111      	bne.n	80035ce <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	3306      	adds	r3, #6
 80035ae:	3338      	adds	r3, #56	; 0x38
 80035b0:	443b      	add	r3, r7
 80035b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035b6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f103 0018 	add.w	r0, r3, #24
 80035be:	f107 020f 	add.w	r2, r7, #15
 80035c2:	2301      	movs	r3, #1
 80035c4:	f245 5188 	movw	r1, #21896	; 0x5588
 80035c8:	f000 facc 	bl	8003b64 <ov5640_write_reg>
 80035cc:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 80035da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3738      	adds	r7, #56	; 0x38
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	08012970 	.word	0x08012970
 80035e8:	0801297c 	.word	0x0801297c
 80035ec:	08012988 	.word	0x08012988

080035f0 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f103 0018 	add.w	r0, r3, #24
 8003604:	f107 020b 	add.w	r2, r7, #11
 8003608:	2301      	movs	r3, #1
 800360a:	f643 0120 	movw	r1, #14368	; 0x3820
 800360e:	f000 fa92 	bl	8003b36 <ov5640_read_reg>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8003618:	f04f 33ff 	mov.w	r3, #4294967295
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e0cb      	b.n	80037b8 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8003620:	7afb      	ldrb	r3, [r7, #11]
 8003622:	f023 0306 	bic.w	r3, r3, #6
 8003626:	b2db      	uxtb	r3, r3
 8003628:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f103 0018 	add.w	r0, r3, #24
 8003630:	f107 020a 	add.w	r2, r7, #10
 8003634:	2301      	movs	r3, #1
 8003636:	f643 0121 	movw	r1, #14369	; 0x3821
 800363a:	f000 fa7c 	bl	8003b36 <ov5640_read_reg>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e0b5      	b.n	80037b8 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8003650:	7abb      	ldrb	r3, [r7, #10]
 8003652:	f023 0306 	bic.w	r3, r3, #6
 8003656:	b2db      	uxtb	r3, r3
 8003658:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d056      	beq.n	800370e <OV5640_MirrorFlipConfig+0x11e>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d87f      	bhi.n	8003766 <OV5640_MirrorFlipConfig+0x176>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d029      	beq.n	80036c0 <OV5640_MirrorFlipConfig+0xd0>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d179      	bne.n	8003766 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f103 0018 	add.w	r0, r3, #24
 8003678:	f107 020b 	add.w	r2, r7, #11
 800367c:	2301      	movs	r3, #1
 800367e:	f643 0120 	movw	r1, #14368	; 0x3820
 8003682:	f000 fa6f 	bl	8003b64 <ov5640_write_reg>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
 8003690:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8003692:	e08a      	b.n	80037aa <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8003694:	7abb      	ldrb	r3, [r7, #10]
 8003696:	f043 0306 	orr.w	r3, r3, #6
 800369a:	b2db      	uxtb	r3, r3
 800369c:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f103 0018 	add.w	r0, r3, #24
 80036a4:	f107 020a 	add.w	r2, r7, #10
 80036a8:	2301      	movs	r3, #1
 80036aa:	f643 0121 	movw	r1, #14369	; 0x3821
 80036ae:	f000 fa59 	bl	8003b64 <ov5640_write_reg>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d078      	beq.n	80037aa <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	60fb      	str	r3, [r7, #12]
          break;
 80036be:	e074      	b.n	80037aa <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 80036c0:	7afb      	ldrb	r3, [r7, #11]
 80036c2:	f043 0306 	orr.w	r3, r3, #6
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f103 0018 	add.w	r0, r3, #24
 80036d0:	f107 020b 	add.w	r2, r7, #11
 80036d4:	2301      	movs	r3, #1
 80036d6:	f643 0120 	movw	r1, #14368	; 0x3820
 80036da:	f000 fa43 	bl	8003b64 <ov5640_write_reg>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 80036e4:	f04f 33ff 	mov.w	r3, #4294967295
 80036e8:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80036ea:	e060      	b.n	80037ae <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f103 0018 	add.w	r0, r3, #24
 80036f2:	f107 020a 	add.w	r2, r7, #10
 80036f6:	2301      	movs	r3, #1
 80036f8:	f643 0121 	movw	r1, #14369	; 0x3821
 80036fc:	f000 fa32 	bl	8003b64 <ov5640_write_reg>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d053      	beq.n	80037ae <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
 800370a:	60fb      	str	r3, [r7, #12]
          break;
 800370c:	e04f      	b.n	80037ae <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 800370e:	7afb      	ldrb	r3, [r7, #11]
 8003710:	f043 0306 	orr.w	r3, r3, #6
 8003714:	b2db      	uxtb	r3, r3
 8003716:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f103 0018 	add.w	r0, r3, #24
 800371e:	f107 020b 	add.w	r2, r7, #11
 8003722:	2301      	movs	r3, #1
 8003724:	f643 0120 	movw	r1, #14368	; 0x3820
 8003728:	f000 fa1c 	bl	8003b64 <ov5640_write_reg>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8003738:	e03b      	b.n	80037b2 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 800373a:	7abb      	ldrb	r3, [r7, #10]
 800373c:	f043 0306 	orr.w	r3, r3, #6
 8003740:	b2db      	uxtb	r3, r3
 8003742:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f103 0018 	add.w	r0, r3, #24
 800374a:	f107 020a 	add.w	r2, r7, #10
 800374e:	2301      	movs	r3, #1
 8003750:	f643 0121 	movw	r1, #14369	; 0x3821
 8003754:	f000 fa06 	bl	8003b64 <ov5640_write_reg>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d029      	beq.n	80037b2 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 800375e:	f04f 33ff 	mov.w	r3, #4294967295
 8003762:	60fb      	str	r3, [r7, #12]
          break;
 8003764:	e025      	b.n	80037b2 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f103 0018 	add.w	r0, r3, #24
 800376c:	f107 020b 	add.w	r2, r7, #11
 8003770:	2301      	movs	r3, #1
 8003772:	f643 0120 	movw	r1, #14368	; 0x3820
 8003776:	f000 f9f5 	bl	8003b64 <ov5640_write_reg>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8003780:	f04f 33ff 	mov.w	r3, #4294967295
 8003784:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8003786:	e016      	b.n	80037b6 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f103 0018 	add.w	r0, r3, #24
 800378e:	f107 020a 	add.w	r2, r7, #10
 8003792:	2301      	movs	r3, #1
 8003794:	f643 0121 	movw	r1, #14369	; 0x3821
 8003798:	f000 f9e4 	bl	8003b64 <ov5640_write_reg>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295
 80037a6:	60fb      	str	r3, [r7, #12]
          break;
 80037a8:	e005      	b.n	80037b6 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 80037aa:	bf00      	nop
 80037ac:	e004      	b.n	80037b8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80037ae:	bf00      	nop
 80037b0:	e002      	b.n	80037b8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80037b6:	bf00      	nop
      }
    }
  }

  return ret;
 80037b8:	68fb      	ldr	r3, [r7, #12]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff f8a2 	bl	8002920 <OV5640_GetResolution>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e04e      	b.n	8003888 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b44      	cmp	r3, #68	; 0x44
 80037f2:	d112      	bne.n	800381a <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 80037f4:	2310      	movs	r3, #16
 80037f6:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f103 0018 	add.w	r0, r3, #24
 80037fe:	f107 020b 	add.w	r2, r7, #11
 8003802:	2301      	movs	r3, #1
 8003804:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8003808:	f000 f9ac 	bl	8003b64 <ov5640_write_reg>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03a      	beq.n	8003888 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8003812:	f04f 33ff 	mov.w	r3, #4294967295
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e036      	b.n	8003888 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d802      	bhi.n	8003826 <OV5640_ZoomConfig+0x64>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d103      	bne.n	800382c <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8003824:	e00a      	b.n	800383c <OV5640_ZoomConfig+0x7a>
      switch (res)
 8003826:	2b03      	cmp	r3, #3
 8003828:	d004      	beq.n	8003834 <OV5640_ZoomConfig+0x72>
          break;
 800382a:	e007      	b.n	800383c <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	613b      	str	r3, [r7, #16]
          break;
 8003832:	e003      	b.n	800383c <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	613b      	str	r3, [r7, #16]
          break;
 800383a:	bf00      	nop
      }

      tmp = 0x00;
 800383c:	2300      	movs	r3, #0
 800383e:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f103 0018 	add.w	r0, r3, #24
 8003846:	f107 020b 	add.w	r2, r7, #11
 800384a:	2301      	movs	r3, #1
 800384c:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8003850:	f000 f988 	bl	8003b64 <ov5640_write_reg>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e012      	b.n	8003888 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f103 0018 	add.w	r0, r3, #24
 800386e:	f107 020b 	add.w	r2, r7, #11
 8003872:	2301      	movs	r3, #1
 8003874:	f245 6101 	movw	r1, #22017	; 0x5601
 8003878:	f000 f974 	bl	8003b64 <ov5640_write_reg>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8003888:	697b      	ldr	r3, [r7, #20]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	f040 80ce 	bne.w	8003a44 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f103 0018 	add.w	r0, r3, #24
 80038ae:	f107 020b 	add.w	r2, r7, #11
 80038b2:	2301      	movs	r3, #1
 80038b4:	f243 0138 	movw	r1, #12344	; 0x3038
 80038b8:	f000 f954 	bl	8003b64 <ov5640_write_reg>
 80038bc:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f103 0018 	add.w	r0, r3, #24
 80038ca:	f107 020b 	add.w	r2, r7, #11
 80038ce:	2301      	movs	r3, #1
 80038d0:	f243 0139 	movw	r1, #12345	; 0x3039
 80038d4:	f000 f946 	bl	8003b64 <ov5640_write_reg>
 80038d8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10c      	bne.n	80038fa <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 80038e0:	237c      	movs	r3, #124	; 0x7c
 80038e2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f103 0018 	add.w	r0, r3, #24
 80038ea:	f107 020b 	add.w	r2, r7, #11
 80038ee:	2301      	movs	r3, #1
 80038f0:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80038f4:	f000 f936 	bl	8003b64 <ov5640_write_reg>
 80038f8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10c      	bne.n	800391a <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8003900:	2301      	movs	r3, #1
 8003902:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f103 0018 	add.w	r0, r3, #24
 800390a:	f107 020b 	add.w	r2, r7, #11
 800390e:	2301      	movs	r3, #1
 8003910:	f643 2108 	movw	r1, #14856	; 0x3a08
 8003914:	f000 f926 	bl	8003b64 <ov5640_write_reg>
 8003918:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10c      	bne.n	800393a <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8003920:	2327      	movs	r3, #39	; 0x27
 8003922:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f103 0018 	add.w	r0, r3, #24
 800392a:	f107 020b 	add.w	r2, r7, #11
 800392e:	2301      	movs	r3, #1
 8003930:	f643 2109 	movw	r1, #14857	; 0x3a09
 8003934:	f000 f916 	bl	8003b64 <ov5640_write_reg>
 8003938:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10c      	bne.n	800395a <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8003940:	2300      	movs	r3, #0
 8003942:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f103 0018 	add.w	r0, r3, #24
 800394a:	f107 020b 	add.w	r2, r7, #11
 800394e:	2301      	movs	r3, #1
 8003950:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8003954:	f000 f906 	bl	8003b64 <ov5640_write_reg>
 8003958:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10c      	bne.n	800397a <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8003960:	23f6      	movs	r3, #246	; 0xf6
 8003962:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f103 0018 	add.w	r0, r3, #24
 800396a:	f107 020b 	add.w	r2, r7, #11
 800396e:	2301      	movs	r3, #1
 8003970:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8003974:	f000 f8f6 	bl	8003b64 <ov5640_write_reg>
 8003978:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10c      	bne.n	800399a <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8003980:	2304      	movs	r3, #4
 8003982:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f103 0018 	add.w	r0, r3, #24
 800398a:	f107 020b 	add.w	r2, r7, #11
 800398e:	2301      	movs	r3, #1
 8003990:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8003994:	f000 f8e6 	bl	8003b64 <ov5640_write_reg>
 8003998:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f103 0018 	add.w	r0, r3, #24
 80039a6:	f107 020b 	add.w	r2, r7, #11
 80039aa:	2301      	movs	r3, #1
 80039ac:	f643 210e 	movw	r1, #14862	; 0x3a0e
 80039b0:	f000 f8d8 	bl	8003b64 <ov5640_write_reg>
 80039b4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10c      	bne.n	80039d6 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 80039bc:	230b      	movs	r3, #11
 80039be:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f103 0018 	add.w	r0, r3, #24
 80039c6:	f107 020b 	add.w	r2, r7, #11
 80039ca:	2301      	movs	r3, #1
 80039cc:	f643 2102 	movw	r1, #14850	; 0x3a02
 80039d0:	f000 f8c8 	bl	8003b64 <ov5640_write_reg>
 80039d4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10c      	bne.n	80039f6 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 80039dc:	2388      	movs	r3, #136	; 0x88
 80039de:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f103 0018 	add.w	r0, r3, #24
 80039e6:	f107 020b 	add.w	r2, r7, #11
 80039ea:	2301      	movs	r3, #1
 80039ec:	f643 2103 	movw	r1, #14851	; 0x3a03
 80039f0:	f000 f8b8 	bl	8003b64 <ov5640_write_reg>
 80039f4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10c      	bne.n	8003a16 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 80039fc:	230b      	movs	r3, #11
 80039fe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f103 0018 	add.w	r0, r3, #24
 8003a06:	f107 020b 	add.w	r2, r7, #11
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f643 2114 	movw	r1, #14868	; 0x3a14
 8003a10:	f000 f8a8 	bl	8003b64 <ov5640_write_reg>
 8003a14:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10c      	bne.n	8003a36 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8003a1c:	2388      	movs	r3, #136	; 0x88
 8003a1e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f103 0018 	add.w	r0, r3, #24
 8003a26:	f107 020b 	add.w	r2, r7, #11
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f643 2115 	movw	r1, #14869	; 0x3a15
 8003a30:	f000 f898 	bl	8003b64 <ov5640_write_reg>
 8003a34:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02b      	beq.n	8003a94 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e027      	b.n	8003a94 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f103 0018 	add.w	r0, r3, #24
 8003a4a:	f107 020b 	add.w	r2, r7, #11
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8003a54:	f000 f86f 	bl	8003b36 <ov5640_read_reg>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e016      	b.n	8003a94 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	f023 0304 	bic.w	r3, r3, #4
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f103 0018 	add.w	r0, r3, #24
 8003a7a:	f107 020b 	add.w	r2, r7, #11
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8003a84:	f000 f86e 	bl	8003b64 <ov5640_write_reg>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a92:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8003a94:	68fb      	ldr	r3, [r7, #12]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	4798      	blx	r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8003ab2:	bf00      	nop
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	4798      	blx	r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d8f5      	bhi.n	8003ab4 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ad2:	b590      	push	{r4, r7, lr}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	461a      	mov	r2, r3
 8003ade:	460b      	mov	r3, r1
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	691c      	ldr	r4, [r3, #16]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	8918      	ldrh	r0, [r3, #8]
 8003af2:	893b      	ldrh	r3, [r7, #8]
 8003af4:	8979      	ldrh	r1, [r7, #10]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	47a0      	blx	r4
 8003afa:	4603      	mov	r3, r0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd90      	pop	{r4, r7, pc}

08003b04 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	460b      	mov	r3, r1
 8003b12:	817b      	strh	r3, [r7, #10]
 8003b14:	4613      	mov	r3, r2
 8003b16:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	68dc      	ldr	r4, [r3, #12]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	8918      	ldrh	r0, [r3, #8]
 8003b24:	893b      	ldrh	r3, [r7, #8]
 8003b26:	8979      	ldrh	r1, [r7, #10]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	47a0      	blx	r4
 8003b2c:	4603      	mov	r3, r0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd90      	pop	{r4, r7, pc}

08003b36 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003b36:	b590      	push	{r4, r7, lr}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	461a      	mov	r2, r3
 8003b42:	460b      	mov	r3, r1
 8003b44:	817b      	strh	r3, [r7, #10]
 8003b46:	4613      	mov	r3, r2
 8003b48:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685c      	ldr	r4, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6898      	ldr	r0, [r3, #8]
 8003b52:	893b      	ldrh	r3, [r7, #8]
 8003b54:	8979      	ldrh	r1, [r7, #10]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	47a0      	blx	r4
 8003b5a:	4603      	mov	r3, r0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd90      	pop	{r4, r7, pc}

08003b64 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	460b      	mov	r3, r1
 8003b72:	817b      	strh	r3, [r7, #10]
 8003b74:	4613      	mov	r3, r2
 8003b76:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681c      	ldr	r4, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6898      	ldr	r0, [r3, #8]
 8003b80:	893b      	ldrh	r3, [r7, #8]
 8003b82:	8979      	ldrh	r1, [r7, #10]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	47a0      	blx	r4
 8003b88:	4603      	mov	r3, r0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd90      	pop	{r4, r7, pc}
	...

08003b94 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C2;
 8003b9e:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <BSP_I2C2_Init+0x64>)
 8003ba0:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <BSP_I2C2_Init+0x68>)
 8003ba2:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8003ba4:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <BSP_I2C2_Init+0x6c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d11f      	bne.n	8003bec <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <BSP_I2C2_Init+0x6c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	4a13      	ldr	r2, [pc, #76]	; (8003c00 <BSP_I2C2_Init+0x6c>)
 8003bb4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8003bb6:	4810      	ldr	r0, [pc, #64]	; (8003bf8 <BSP_I2C2_Init+0x64>)
 8003bb8:	f004 fef0 	bl	800899c <HAL_I2C_GetState>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d114      	bne.n	8003bec <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c4);
 8003bc2:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <BSP_I2C2_Init+0x64>)
 8003bc4:	f000 fbbc 	bl	8004340 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C2_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8003bc8:	f007 fd54 	bl	800b674 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	490d      	ldr	r1, [pc, #52]	; (8003c04 <BSP_I2C2_Init+0x70>)
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f93f 	bl	8003e54 <I2C_GetTiming>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4807      	ldr	r0, [pc, #28]	; (8003bf8 <BSP_I2C2_Init+0x64>)
 8003bdc:	f000 f838 	bl	8003c50 <MX_I2C2_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <BSP_I2C2_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003be6:	f06f 0307 	mvn.w	r3, #7
 8003bea:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8003bec:	687b      	ldr	r3, [r7, #4]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	2400101c 	.word	0x2400101c
 8003bfc:	58001c00 	.word	0x58001c00
 8003c00:	24000614 	.word	0x24000614
 8003c04:	000186a0 	.word	0x000186a0

08003c08 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <BSP_I2C2_DeInit+0x40>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <BSP_I2C2_DeInit+0x40>)
 8003c1a:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <BSP_I2C2_DeInit+0x40>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10b      	bne.n	8003c3c <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c4);
 8003c24:	4809      	ldr	r0, [pc, #36]	; (8003c4c <BSP_I2C2_DeInit+0x44>)
 8003c26:	f000 fbf5 	bl	8004414 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003c2a:	4808      	ldr	r0, [pc, #32]	; (8003c4c <BSP_I2C2_DeInit+0x44>)
 8003c2c:	f004 fc44 	bl	80084b8 <HAL_I2C_DeInit>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003c36:	f06f 0307 	mvn.w	r3, #7
 8003c3a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8003c3c:	687b      	ldr	r3, [r7, #4]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	24000614 	.word	0x24000614
 8003c4c:	2400101c 	.word	0x2400101c

08003c50 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f004 fb82 	bl	8008398 <HAL_I2C_Init>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	e014      	b.n	8003cca <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f005 f94a 	bl	8008f40 <HAL_I2CEx_ConfigAnalogFilter>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	e008      	b.n	8003cca <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003cb8:	2100      	movs	r1, #0
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f005 f98b 	bl	8008fd6 <HAL_I2CEx_ConfigDigitalFilter>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60ba      	str	r2, [r7, #8]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	81fb      	strh	r3, [r7, #14]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	81bb      	strh	r3, [r7, #12]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003cea:	89b9      	ldrh	r1, [r7, #12]
 8003cec:	89f8      	ldrh	r0, [r7, #14]
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f000 fbaf 	bl	8004458 <I2C2_WriteReg>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e00c      	b.n	8003d20 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003d06:	4809      	ldr	r0, [pc, #36]	; (8003d2c <BSP_I2C2_WriteReg+0x58>)
 8003d08:	f004 fe56 	bl	80089b8 <HAL_I2C_GetError>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d103      	bne.n	8003d1a <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003d12:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e002      	b.n	8003d20 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003d1a:	f06f 0303 	mvn.w	r3, #3
 8003d1e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003d20:	697b      	ldr	r3, [r7, #20]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	2400101c 	.word	0x2400101c

08003d30 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60ba      	str	r2, [r7, #8]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	81fb      	strh	r3, [r7, #14]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	81bb      	strh	r3, [r7, #12]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003d46:	89b9      	ldrh	r1, [r7, #12]
 8003d48:	89f8      	ldrh	r0, [r7, #14]
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f000 fba7 	bl	80044a4 <I2C2_ReadReg>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e00c      	b.n	8003d7c <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003d62:	4809      	ldr	r0, [pc, #36]	; (8003d88 <BSP_I2C2_ReadReg+0x58>)
 8003d64:	f004 fe28 	bl	80089b8 <HAL_I2C_GetError>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d103      	bne.n	8003d76 <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003d6e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e002      	b.n	8003d7c <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003d76:	f06f 0303 	mvn.w	r3, #3
 8003d7a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003d7c:	697b      	ldr	r3, [r7, #20]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2400101c 	.word	0x2400101c

08003d8c <BSP_I2C2_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60ba      	str	r2, [r7, #8]
 8003d94:	461a      	mov	r2, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	81fb      	strh	r3, [r7, #14]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	81bb      	strh	r3, [r7, #12]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]

 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003da2:	89b9      	ldrh	r1, [r7, #12]
 8003da4:	89f8      	ldrh	r0, [r7, #14]
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2202      	movs	r2, #2
 8003dae:	f000 fb53 	bl	8004458 <I2C2_WriteReg>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <BSP_I2C2_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e00c      	b.n	8003dd8 <BSP_I2C2_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003dbe:	4809      	ldr	r0, [pc, #36]	; (8003de4 <BSP_I2C2_WriteReg16+0x58>)
 8003dc0:	f004 fdfa 	bl	80089b8 <HAL_I2C_GetError>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d103      	bne.n	8003dd2 <BSP_I2C2_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003dca:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e002      	b.n	8003dd8 <BSP_I2C2_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003dd2:	f06f 0303 	mvn.w	r3, #3
 8003dd6:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003dd8:	697b      	ldr	r3, [r7, #20]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2400101c 	.word	0x2400101c

08003de8 <BSP_I2C2_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60ba      	str	r2, [r7, #8]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	81fb      	strh	r3, [r7, #14]
 8003df6:	460b      	mov	r3, r1
 8003df8:	81bb      	strh	r3, [r7, #12]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003dfe:	89b9      	ldrh	r1, [r7, #12]
 8003e00:	89f8      	ldrh	r0, [r7, #14]
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f000 fb4b 	bl	80044a4 <I2C2_ReadReg>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <BSP_I2C2_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e00c      	b.n	8003e34 <BSP_I2C2_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003e1a:	4809      	ldr	r0, [pc, #36]	; (8003e40 <BSP_I2C2_ReadReg16+0x58>)
 8003e1c:	f004 fdcc 	bl	80089b8 <HAL_I2C_GetError>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d103      	bne.n	8003e2e <BSP_I2C2_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003e26:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e002      	b.n	8003e34 <BSP_I2C2_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003e2e:	f06f 0303 	mvn.w	r3, #3
 8003e32:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003e34:	697b      	ldr	r3, [r7, #20]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	2400101c 	.word	0x2400101c

08003e44 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003e48:	f001 f904 	bl	8005054 <HAL_GetTick>
 8003e4c:	4603      	mov	r3, r0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d06b      	beq.n	8003f40 <I2C_GetTiming+0xec>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d068      	beq.n	8003f40 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e060      	b.n	8003f36 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003e74:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <I2C_GetTiming+0xf8>)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3304      	adds	r3, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d352      	bcc.n	8003f30 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003e8a:	4a30      	ldr	r2, [pc, #192]	; (8003f4c <I2C_GetTiming+0xf8>)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	3308      	adds	r3, #8
 8003e98:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d847      	bhi.n	8003f30 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003ea0:	6939      	ldr	r1, [r7, #16]
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f856 	bl	8003f54 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f940 	bl	8004130 <I2C_Compute_SCLL_SCLH>
 8003eb0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb6:	d842      	bhi.n	8003f3e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003eb8:	4925      	ldr	r1, [pc, #148]	; (8003f50 <I2C_GetTiming+0xfc>)
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003eca:	4821      	ldr	r0, [pc, #132]	; (8003f50 <I2C_GetTiming+0xfc>)
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4403      	add	r3, r0
 8003ed8:	3304      	adds	r3, #4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	051b      	lsls	r3, r3, #20
 8003ede:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003ee2:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003ee4:	481a      	ldr	r0, [pc, #104]	; (8003f50 <I2C_GetTiming+0xfc>)
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4403      	add	r3, r0
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003efc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003efe:	4814      	ldr	r0, [pc, #80]	; (8003f50 <I2C_GetTiming+0xfc>)
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4403      	add	r3, r0
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003f14:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003f16:	480e      	ldr	r0, [pc, #56]	; (8003f50 <I2C_GetTiming+0xfc>)
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4403      	add	r3, r0
 8003f24:	3310      	adds	r3, #16
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	617b      	str	r3, [r7, #20]
        }
        break;
 8003f2e:	e006      	b.n	8003f3e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	3301      	adds	r3, #1
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d99b      	bls.n	8003e74 <I2C_GetTiming+0x20>
 8003f3c:	e000      	b.n	8003f40 <I2C_GetTiming+0xec>
        break;
 8003f3e:	bf00      	nop
      }
    }
  }

  return ret;
 8003f40:	697b      	ldr	r3, [r7, #20]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	08012ea0 	.word	0x08012ea0
 8003f50:	24000618 	.word	0x24000618

08003f54 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b08f      	sub	sp, #60	; 0x3c
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003f5e:	2310      	movs	r3, #16
 8003f60:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	085a      	lsrs	r2, r3, #1
 8003f66:	4b6e      	ldr	r3, [pc, #440]	; (8004120 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f70:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003f72:	2332      	movs	r3, #50	; 0x32
 8003f74:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003f76:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003f7a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003f7c:	4a69      	ldr	r2, [pc, #420]	; (8004124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	212c      	movs	r1, #44	; 0x2c
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	4413      	add	r3, r2
 8003f88:	3324      	adds	r3, #36	; 0x24
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	4a65      	ldr	r2, [pc, #404]	; (8004124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	212c      	movs	r1, #44	; 0x2c
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003fa2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003fa4:	495f      	ldr	r1, [pc, #380]	; (8004124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	202c      	movs	r0, #44	; 0x2c
 8003faa:	fb00 f303 	mul.w	r3, r0, r3
 8003fae:	440b      	add	r3, r1
 8003fb0:	3328      	adds	r3, #40	; 0x28
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3303      	adds	r3, #3
 8003fb6:	69f9      	ldr	r1, [r7, #28]
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003fc0:	4a58      	ldr	r2, [pc, #352]	; (8004124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3310      	adds	r3, #16
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	4a54      	ldr	r2, [pc, #336]	; (8004124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3320      	adds	r3, #32
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003fe4:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003fe6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003fe8:	494e      	ldr	r1, [pc, #312]	; (8004124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	202c      	movs	r0, #44	; 0x2c
 8003fee:	fb00 f303 	mul.w	r3, r0, r3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3328      	adds	r3, #40	; 0x28
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	69f9      	ldr	r1, [r7, #28]
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8004004:	4a47      	ldr	r2, [pc, #284]	; (8004124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	212c      	movs	r1, #44	; 0x2c
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	3320      	adds	r3, #32
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	4a43      	ldr	r2, [pc, #268]	; (8004124 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	3314      	adds	r3, #20
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4403      	add	r3, r0
 8004028:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	2b00      	cmp	r3, #0
 800402e:	dc01      	bgt.n	8004034 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8004034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004036:	2b00      	cmp	r3, #0
 8004038:	dc01      	bgt.n	800403e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800403e:	2300      	movs	r3, #0
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
 8004042:	e062      	b.n	800410a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004044:	2300      	movs	r3, #0
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
 8004048:	e059      	b.n	80040fe <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	3301      	adds	r3, #1
 800404e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004050:	3201      	adds	r2, #1
 8004052:	fb03 f202 	mul.w	r2, r3, r2
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	429a      	cmp	r2, r3
 8004064:	d348      	bcc.n	80040f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004066:	2300      	movs	r3, #0
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	e042      	b.n	80040f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	3301      	adds	r3, #1
 8004070:	6a3a      	ldr	r2, [r7, #32]
 8004072:	fb03 f202 	mul.w	r2, r3, r2
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fb02 f303 	mul.w	r3, r2, r3
 800407c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	d332      	bcc.n	80040ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	d82e      	bhi.n	80040ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800408e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004092:	429a      	cmp	r2, r3
 8004094:	d02a      	beq.n	80040ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004096:	4b24      	ldr	r3, [pc, #144]	; (8004128 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4924      	ldr	r1, [pc, #144]	; (800412c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80040aa:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	491f      	ldr	r1, [pc, #124]	; (800412c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	3304      	adds	r3, #4
 80040bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040be:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4919      	ldr	r1, [pc, #100]	; (800412c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	3308      	adds	r3, #8
 80040d2:	6a3a      	ldr	r2, [r7, #32]
 80040d4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80040da:	4b13      	ldr	r3, [pc, #76]	; (8004128 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	4a11      	ldr	r2, [pc, #68]	; (8004128 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80040e2:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b7f      	cmp	r3, #127	; 0x7f
 80040ea:	d812      	bhi.n	8004112 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	3301      	adds	r3, #1
 80040f0:	623b      	str	r3, [r7, #32]
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	2b0f      	cmp	r3, #15
 80040f6:	d9b9      	bls.n	800406c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	3301      	adds	r3, #1
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	2b0f      	cmp	r3, #15
 8004102:	d9a2      	bls.n	800404a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	3301      	adds	r3, #1
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	2b0f      	cmp	r3, #15
 800410e:	d999      	bls.n	8004044 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8004110:	e000      	b.n	8004114 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8004112:	bf00      	nop
          }
        }
      }
    }
  }
}
 8004114:	373c      	adds	r7, #60	; 0x3c
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	3b9aca00 	.word	0x3b9aca00
 8004124:	08012ea0 	.word	0x08012ea0
 8004128:	24001018 	.word	0x24001018
 800412c:	24000618 	.word	0x24000618

08004130 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004130:	b480      	push	{r7}
 8004132:	b093      	sub	sp, #76	; 0x4c
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
 800413e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	085a      	lsrs	r2, r3, #1
 8004144:	4b7a      	ldr	r3, [pc, #488]	; (8004330 <I2C_Compute_SCLL_SCLH+0x200>)
 8004146:	4413      	add	r3, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	fbb3 f3f2 	udiv	r3, r3, r2
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8004150:	4a78      	ldr	r2, [pc, #480]	; (8004334 <I2C_Compute_SCLL_SCLH+0x204>)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	212c      	movs	r1, #44	; 0x2c
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	4413      	add	r3, r2
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	085a      	lsrs	r2, r3, #1
 8004160:	4b73      	ldr	r3, [pc, #460]	; (8004330 <I2C_Compute_SCLL_SCLH+0x200>)
 8004162:	4413      	add	r3, r2
 8004164:	4973      	ldr	r1, [pc, #460]	; (8004334 <I2C_Compute_SCLL_SCLH+0x204>)
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	202c      	movs	r0, #44	; 0x2c
 800416a:	fb00 f202 	mul.w	r2, r0, r2
 800416e:	440a      	add	r2, r1
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	fbb3 f3f2 	udiv	r3, r3, r2
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004178:	2332      	movs	r3, #50	; 0x32
 800417a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800417c:	4a6d      	ldr	r2, [pc, #436]	; (8004334 <I2C_Compute_SCLL_SCLH+0x204>)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	212c      	movs	r1, #44	; 0x2c
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4413      	add	r3, r2
 8004188:	3328      	adds	r3, #40	; 0x28
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8004194:	4a67      	ldr	r2, [pc, #412]	; (8004334 <I2C_Compute_SCLL_SCLH+0x204>)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	212c      	movs	r1, #44	; 0x2c
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	3304      	adds	r3, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a62      	ldr	r2, [pc, #392]	; (8004330 <I2C_Compute_SCLL_SCLH+0x200>)
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80041ac:	4a61      	ldr	r2, [pc, #388]	; (8004334 <I2C_Compute_SCLL_SCLH+0x204>)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3308      	adds	r3, #8
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a5c      	ldr	r2, [pc, #368]	; (8004330 <I2C_Compute_SCLL_SCLH+0x200>)
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
 80041cc:	e0a3      	b.n	8004316 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80041ce:	495a      	ldr	r1, [pc, #360]	; (8004338 <I2C_Compute_SCLL_SCLH+0x208>)
 80041d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ec:	e08c      	b.n	8004308 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80041ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	441a      	add	r2, r3
 80041f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f6:	3301      	adds	r3, #1
 80041f8:	6979      	ldr	r1, [r7, #20]
 80041fa:	fb03 f101 	mul.w	r1, r3, r1
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	440b      	add	r3, r1
 8004204:	4413      	add	r3, r2
 8004206:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004208:	4a4a      	ldr	r2, [pc, #296]	; (8004334 <I2C_Compute_SCLL_SCLH+0x204>)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	212c      	movs	r1, #44	; 0x2c
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	4413      	add	r3, r2
 8004214:	3318      	adds	r3, #24
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	429a      	cmp	r2, r3
 800421c:	d971      	bls.n	8004302 <I2C_Compute_SCLL_SCLH+0x1d2>
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	089b      	lsrs	r3, r3, #2
 800422a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422c:	429a      	cmp	r2, r3
 800422e:	d268      	bcs.n	8004302 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004230:	2300      	movs	r3, #0
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38
 8004234:	e062      	b.n	80042fc <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	441a      	add	r2, r3
 800423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423e:	3301      	adds	r3, #1
 8004240:	6979      	ldr	r1, [r7, #20]
 8004242:	fb03 f101 	mul.w	r1, r3, r1
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	440b      	add	r3, r1
 800424c:	4413      	add	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	441a      	add	r2, r3
 8004256:	4937      	ldr	r1, [pc, #220]	; (8004334 <I2C_Compute_SCLL_SCLH+0x204>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	202c      	movs	r0, #44	; 0x2c
 800425c:	fb00 f303 	mul.w	r3, r0, r3
 8004260:	440b      	add	r3, r1
 8004262:	3320      	adds	r3, #32
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	441a      	add	r2, r3
 8004268:	4932      	ldr	r1, [pc, #200]	; (8004334 <I2C_Compute_SCLL_SCLH+0x204>)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	202c      	movs	r0, #44	; 0x2c
 800426e:	fb00 f303 	mul.w	r3, r0, r3
 8004272:	440b      	add	r3, r1
 8004274:	3324      	adds	r3, #36	; 0x24
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4413      	add	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	429a      	cmp	r2, r3
 8004282:	d338      	bcc.n	80042f6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	429a      	cmp	r2, r3
 800428a:	d834      	bhi.n	80042f6 <I2C_Compute_SCLL_SCLH+0x1c6>
 800428c:	4a29      	ldr	r2, [pc, #164]	; (8004334 <I2C_Compute_SCLL_SCLH+0x204>)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	331c      	adds	r3, #28
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d329      	bcc.n	80042f6 <I2C_Compute_SCLL_SCLH+0x1c6>
 80042a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d225      	bcs.n	80042f6 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da02      	bge.n	80042be <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	425b      	negs	r3, r3
 80042bc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d917      	bls.n	80042f6 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80042ca:	491b      	ldr	r1, [pc, #108]	; (8004338 <I2C_Compute_SCLL_SCLH+0x208>)
 80042cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	3310      	adds	r3, #16
 80042da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042dc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80042de:	4916      	ldr	r1, [pc, #88]	; (8004338 <I2C_Compute_SCLL_SCLH+0x208>)
 80042e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	330c      	adds	r3, #12
 80042ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042f0:	601a      	str	r2, [r3, #0]
              ret = count;
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	3301      	adds	r3, #1
 80042fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	2bff      	cmp	r3, #255	; 0xff
 8004300:	d999      	bls.n	8004236 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004304:	3301      	adds	r3, #1
 8004306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430a:	2bff      	cmp	r3, #255	; 0xff
 800430c:	f67f af6f 	bls.w	80041ee <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004312:	3301      	adds	r3, #1
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <I2C_Compute_SCLL_SCLH+0x20c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431c:	429a      	cmp	r2, r3
 800431e:	f4ff af56 	bcc.w	80041ce <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8004322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004324:	4618      	mov	r0, r3
 8004326:	374c      	adds	r7, #76	; 0x4c
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	3b9aca00 	.word	0x3b9aca00
 8004334:	08012ea0 	.word	0x08012ea0
 8004338:	24000618 	.word	0x24000618
 800433c:	24001018 	.word	0x24001018

08004340 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8004348:	4b30      	ldr	r3, [pc, #192]	; (800440c <I2C2_MspInit+0xcc>)
 800434a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800434e:	4a2f      	ldr	r2, [pc, #188]	; (800440c <I2C2_MspInit+0xcc>)
 8004350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004354:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004358:	4b2c      	ldr	r3, [pc, #176]	; (800440c <I2C2_MspInit+0xcc>)
 800435a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8004366:	4b29      	ldr	r3, [pc, #164]	; (800440c <I2C2_MspInit+0xcc>)
 8004368:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800436c:	4a27      	ldr	r2, [pc, #156]	; (800440c <I2C2_MspInit+0xcc>)
 800436e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004372:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004376:	4b25      	ldr	r3, [pc, #148]	; (800440c <I2C2_MspInit+0xcc>)
 8004378:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin 		= BUS_I2C2_SCL_PIN;
 8004384:	2310      	movs	r3, #16
 8004386:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 8004388:	2312      	movs	r3, #18
 800438a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull 		= GPIO_NOPULL;
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004390:	2302      	movs	r3, #2
 8004392:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SCL_AF;
 8004394:	2304      	movs	r3, #4
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8004398:	f107 0314 	add.w	r3, r7, #20
 800439c:	4619      	mov	r1, r3
 800439e:	481c      	ldr	r0, [pc, #112]	; (8004410 <I2C2_MspInit+0xd0>)
 80043a0:	f003 fd26 	bl	8007df0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin 		= BUS_I2C2_SDA_PIN;
 80043a4:	2320      	movs	r3, #32
 80043a6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 80043a8:	2312      	movs	r3, #18
 80043aa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull 		= GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80043b0:	2302      	movs	r3, #2
 80043b2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SDA_AF;
 80043b4:	2304      	movs	r3, #4
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	4619      	mov	r1, r3
 80043be:	4814      	ldr	r0, [pc, #80]	; (8004410 <I2C2_MspInit+0xd0>)
 80043c0:	f003 fd16 	bl	8007df0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <I2C2_MspInit+0xcc>)
 80043c6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80043ca:	4a10      	ldr	r2, [pc, #64]	; (800440c <I2C2_MspInit+0xcc>)
 80043cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043d0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <I2C2_MspInit+0xcc>)
 80043d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80043da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <I2C2_MspInit+0xcc>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e8:	4a08      	ldr	r2, [pc, #32]	; (800440c <I2C2_MspInit+0xcc>)
 80043ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <I2C2_MspInit+0xcc>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <I2C2_MspInit+0xcc>)
 80043fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80043fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004402:	bf00      	nop
 8004404:	3728      	adds	r7, #40	; 0x28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	58024400 	.word	0x58024400
 8004410:	58021c00 	.word	0x58021c00

08004414 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 800441c:	2310      	movs	r3, #16
 800441e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4619      	mov	r1, r3
 8004424:	480a      	ldr	r0, [pc, #40]	; (8004450 <I2C2_MspDeInit+0x3c>)
 8004426:	f003 fe93 	bl	8008150 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800442a:	2320      	movs	r3, #32
 800442c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4619      	mov	r1, r3
 8004432:	4807      	ldr	r0, [pc, #28]	; (8004450 <I2C2_MspDeInit+0x3c>)
 8004434:	f003 fe8c 	bl	8008150 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <I2C2_MspDeInit+0x40>)
 800443a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <I2C2_MspDeInit+0x40>)
 8004440:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004444:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
 8004448:	bf00      	nop
 800444a:	3720      	adds	r7, #32
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	58021c00 	.word	0x58021c00
 8004454:	58024400 	.word	0x58024400

08004458 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af04      	add	r7, sp, #16
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	4603      	mov	r3, r0
 8004462:	81fb      	strh	r3, [r7, #14]
 8004464:	460b      	mov	r3, r1
 8004466:	81bb      	strh	r3, [r7, #12]
 8004468:	4613      	mov	r3, r2
 800446a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 800446c:	8978      	ldrh	r0, [r7, #10]
 800446e:	89ba      	ldrh	r2, [r7, #12]
 8004470:	89f9      	ldrh	r1, [r7, #14]
 8004472:	f242 7310 	movw	r3, #10000	; 0x2710
 8004476:	9302      	str	r3, [sp, #8]
 8004478:	8b3b      	ldrh	r3, [r7, #24]
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	4603      	mov	r3, r0
 8004482:	4807      	ldr	r0, [pc, #28]	; (80044a0 <I2C2_WriteReg+0x48>)
 8004484:	f004 f85c 	bl	8008540 <HAL_I2C_Mem_Write>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800448e:	2300      	movs	r3, #0
 8004490:	e001      	b.n	8004496 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8004492:	f06f 0307 	mvn.w	r3, #7
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	2400101c 	.word	0x2400101c

080044a4 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af04      	add	r7, sp, #16
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	4603      	mov	r3, r0
 80044ae:	81fb      	strh	r3, [r7, #14]
 80044b0:	460b      	mov	r3, r1
 80044b2:	81bb      	strh	r3, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80044b8:	8978      	ldrh	r0, [r7, #10]
 80044ba:	89ba      	ldrh	r2, [r7, #12]
 80044bc:	89f9      	ldrh	r1, [r7, #14]
 80044be:	f242 7310 	movw	r3, #10000	; 0x2710
 80044c2:	9302      	str	r3, [sp, #8]
 80044c4:	8b3b      	ldrh	r3, [r7, #24]
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	4603      	mov	r3, r0
 80044ce:	4807      	ldr	r0, [pc, #28]	; (80044ec <I2C2_ReadReg+0x48>)
 80044d0:	f004 f94a 	bl	8008768 <HAL_I2C_Mem_Read>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80044da:	2300      	movs	r3, #0
 80044dc:	e001      	b.n	80044e2 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80044de:	f06f 0307 	mvn.w	r3, #7
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	2400101c 	.word	0x2400101c

080044f0 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004506:	f06f 0301 	mvn.w	r3, #1
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	e055      	b.n	80045ba <BSP_CAMERA_Init+0xca>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    DCMI_MspInit(&hcamera_dcmi);
 800450e:	482d      	ldr	r0, [pc, #180]	; (80045c4 <BSP_CAMERA_Init+0xd4>)
 8004510:	f000 f9de 	bl	80048d0 <DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8004514:	482b      	ldr	r0, [pc, #172]	; (80045c4 <BSP_CAMERA_Init+0xd4>)
 8004516:	f000 f859 	bl	80045cc <MX_DCMI_Init>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <BSP_CAMERA_Init+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004520:	f06f 0303 	mvn.w	r3, #3
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	e048      	b.n	80045ba <BSP_CAMERA_Init+0xca>
    }
    else if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8004528:	2000      	movs	r0, #0
 800452a:	f000 f8cf 	bl	80046cc <BSP_CAMERA_HwReset>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <BSP_CAMERA_Init+0x4c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004534:	f06f 0307 	mvn.w	r3, #7
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	e03e      	b.n	80045ba <BSP_CAMERA_Init+0xca>
    }
    else
    {
#if (USE_BSP_IO_CLASS > 0)
      io_init_structure.Pin  = CAM_PLUG_PIN;
 800453c:	2310      	movs	r3, #16
 800453e:	613b      	str	r3, [r7, #16]
      io_init_structure.Pull = IO_PULLUP;
 8004540:	2301      	movs	r3, #1
 8004542:	61bb      	str	r3, [r7, #24]
      io_init_structure.Mode = IO_MODE_INPUT;
 8004544:	2302      	movs	r3, #2
 8004546:	617b      	str	r3, [r7, #20]

      if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 8004548:	f107 0310 	add.w	r3, r7, #16
 800454c:	4619      	mov	r1, r3
 800454e:	2000      	movs	r0, #0
 8004550:	f000 fb80 	bl	8004c54 <BSP_IO_Init>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <BSP_CAMERA_Init+0x72>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800455a:	f06f 0307 	mvn.w	r3, #7
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	e02b      	b.n	80045ba <BSP_CAMERA_Init+0xca>
      }/* Check if the CAMERA Module is plugged on board */
      else if(((uint32_t)BSP_IO_ReadPin(0, CAM_PLUG_PIN) & CAM_PLUG_PIN) == CAM_PLUG_PIN)
 8004562:	2110      	movs	r1, #16
 8004564:	2000      	movs	r0, #0
 8004566:	f000 fc07 	bl	8004d78 <BSP_IO_ReadPin>
 800456a:	4603      	mov	r3, r0
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b10      	cmp	r3, #16
 8004572:	d103      	bne.n	800457c <BSP_CAMERA_Init+0x8c>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004574:	f06f 0306 	mvn.w	r3, #6
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	e01e      	b.n	80045ba <BSP_CAMERA_Init+0xca>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	68b8      	ldr	r0, [r7, #8]
 8004580:	f000 faba 	bl	8004af8 <OV5640_Probe>
 8004584:	61f8      	str	r0, [r7, #28]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <BSP_CAMERA_Init+0xa4>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800458c:	f06f 0306 	mvn.w	r3, #6
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	e012      	b.n	80045ba <BSP_CAMERA_Init+0xca>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8004594:	490c      	ldr	r1, [pc, #48]	; (80045c8 <BSP_CAMERA_Init+0xd8>)
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4613      	mov	r3, r2
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	4413      	add	r3, r2
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	440b      	add	r3, r1
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 80045a6:	4908      	ldr	r1, [pc, #32]	; (80045c8 <BSP_CAMERA_Init+0xd8>)
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	440b      	add	r3, r1
 80045b4:	3304      	adds	r3, #4
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 80045ba:	69fb      	ldr	r3, [r7, #28]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	24001074 	.word	0x24001074
 80045c8:	240010c4 	.word	0x240010c4

080045cc <MX_DCMI_Init>:
  * @param  hdcmi  DCMI handle
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DCMI_Init(DCMI_HandleTypeDef* hdcmi)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  hdcmi->Instance              = DCMI;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a10      	ldr	r2, [pc, #64]	; (8004618 <MX_DCMI_Init+0x4c>)
 80045d8:	601a      	str	r2, [r3, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	615a      	str	r2, [r3, #20]
  hdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2240      	movs	r2, #64	; 0x40
 80045e4:	611a      	str	r2, [r3, #16]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	605a      	str	r2, [r3, #4]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2280      	movs	r2, #128	; 0x80
 80045f0:	60da      	str	r2, [r3, #12]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	619a      	str	r2, [r3, #24]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	609a      	str	r2, [r3, #8]

  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fe68 	bl	80052d4 <HAL_DCMI_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_DCMI_Init+0x42>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <MX_DCMI_Init+0x44>
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	48020000 	.word	0x48020000

0800461c <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800462e:	f06f 0301 	mvn.w	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e022      	b.n	800467c <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hcamera_dcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8004636:	68bc      	ldr	r4, [r7, #8]
 8004638:	4913      	ldr	r1, [pc, #76]	; (8004688 <BSP_CAMERA_Start+0x6c>)
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4613      	mov	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4413      	add	r3, r2
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	440b      	add	r3, r1
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	490f      	ldr	r1, [pc, #60]	; (8004688 <BSP_CAMERA_Start+0x6c>)
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	440b      	add	r3, r1
 8004656:	3304      	adds	r3, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	f000 f8e6 	bl	800482c <GetSize>
 8004660:	4603      	mov	r3, r0
 8004662:	4622      	mov	r2, r4
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4809      	ldr	r0, [pc, #36]	; (800468c <BSP_CAMERA_Start+0x70>)
 8004668:	f000 feb8 	bl	80053dc <HAL_DCMI_Start_DMA>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8004672:	f06f 0303 	mvn.w	r3, #3
 8004676:	e002      	b.n	800467e <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 800467c:	697b      	ldr	r3, [r7, #20]
}
 800467e:	4618      	mov	r0, r3
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd90      	pop	{r4, r7, pc}
 8004686:	bf00      	nop
 8004688:	240010c4 	.word	0x240010c4
 800468c:	24001074 	.word	0x24001074

08004690 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800469e:	f06f 0301 	mvn.w	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e00b      	b.n	80046be <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 80046a6:	4808      	ldr	r0, [pc, #32]	; (80046c8 <BSP_CAMERA_Stop+0x38>)
 80046a8:	f000 ff5a 	bl	8005560 <HAL_DCMI_Stop>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80046b2:	f06f 0303 	mvn.w	r3, #3
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	e001      	b.n	80046be <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 80046be:	68fb      	ldr	r3, [r7, #12]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	24001074 	.word	0x24001074

080046cc <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <BSP_CAMERA_HwReset+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80046de:	f06f 0301 	mvn.w	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e04b      	b.n	800477e <BSP_CAMERA_HwReset+0xb2>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    io_init_structure.Pin  = RSTI_PIN | XSDN_PIN;
 80046e6:	2360      	movs	r3, #96	; 0x60
 80046e8:	60bb      	str	r3, [r7, #8]
    io_init_structure.Pull = IO_NOPULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 80046ee:	2304      	movs	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]

    if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 80046f2:	f107 0308 	add.w	r3, r7, #8
 80046f6:	4619      	mov	r1, r3
 80046f8:	2000      	movs	r0, #0
 80046fa:	f000 faab 	bl	8004c54 <BSP_IO_Init>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <BSP_CAMERA_HwReset+0x40>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004704:	f06f 0307 	mvn.w	r3, #7
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e038      	b.n	800477e <BSP_CAMERA_HwReset+0xb2>
    }
    else
    {
      /* Camera sensor RESET sequence */
      /* Assert the camera STANDBY pin (active high)  */
      if(BSP_IO_WritePin(0, XSDN_PIN, IO_PIN_SET)!= BSP_ERROR_NONE)
 800470c:	2201      	movs	r2, #1
 800470e:	2140      	movs	r1, #64	; 0x40
 8004710:	2000      	movs	r0, #0
 8004712:	f000 faff 	bl	8004d14 <BSP_IO_WritePin>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <BSP_CAMERA_HwReset+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800471c:	f06f 0307 	mvn.w	r3, #7
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e02c      	b.n	800477e <BSP_CAMERA_HwReset+0xb2>
      }/* Assert the camera RSTI pin (active low) */
      else if(BSP_IO_WritePin(0, RSTI_PIN, IO_PIN_RESET)!= BSP_ERROR_NONE)
 8004724:	2200      	movs	r2, #0
 8004726:	2120      	movs	r1, #32
 8004728:	2000      	movs	r0, #0
 800472a:	f000 faf3 	bl	8004d14 <BSP_IO_WritePin>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <BSP_CAMERA_HwReset+0x70>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004734:	f06f 0307 	mvn.w	r3, #7
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e020      	b.n	800477e <BSP_CAMERA_HwReset+0xb2>
      }
      else
      {
        HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 800473c:	2064      	movs	r0, #100	; 0x64
 800473e:	f000 fc95 	bl	800506c <HAL_Delay>

        /* De-assert the camera STANDBY pin (active high) */
        if(BSP_IO_WritePin(0, XSDN_PIN, IO_PIN_RESET)!= BSP_ERROR_NONE)
 8004742:	2200      	movs	r2, #0
 8004744:	2140      	movs	r1, #64	; 0x40
 8004746:	2000      	movs	r0, #0
 8004748:	f000 fae4 	bl	8004d14 <BSP_IO_WritePin>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <BSP_CAMERA_HwReset+0x8e>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004752:	f06f 0307 	mvn.w	r3, #7
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e011      	b.n	800477e <BSP_CAMERA_HwReset+0xb2>
        }
        else
        {
          HAL_Delay(3);     /* RST de-asserted and XSDN asserted during 3ms */
 800475a:	2003      	movs	r0, #3
 800475c:	f000 fc86 	bl	800506c <HAL_Delay>

          /* De-assert the camera RSTI pin (active low) */
          if(BSP_IO_WritePin(0, RSTI_PIN, IO_PIN_SET)!= BSP_ERROR_NONE)
 8004760:	2201      	movs	r2, #1
 8004762:	2120      	movs	r1, #32
 8004764:	2000      	movs	r0, #0
 8004766:	f000 fad5 	bl	8004d14 <BSP_IO_WritePin>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <BSP_CAMERA_HwReset+0xac>
          {
            ret = BSP_ERROR_BUS_FAILURE;
 8004770:	f06f 0307 	mvn.w	r3, #7
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	e002      	b.n	800477e <BSP_CAMERA_HwReset+0xb2>
          }
          else
          {
            HAL_Delay(20);     /* RST de-asserted during 20ms */
 8004778:	2014      	movs	r0, #20
 800477a:	f000 fc77 	bl	800506c <HAL_Delay>
      }
    }
#endif
  }

  return ret;
 800477e:	697b      	ldr	r3, [r7, #20]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <BSP_CAMERA_PwrDown+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800479a:	f06f 0301 	mvn.w	r3, #1
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	e029      	b.n	80047f6 <BSP_CAMERA_PwrDown+0x6e>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    io_init_structure.Pin  = RSTI_PIN | XSDN_PIN;
 80047a2:	2360      	movs	r3, #96	; 0x60
 80047a4:	60bb      	str	r3, [r7, #8]
    io_init_structure.Pull = IO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 80047aa:	2304      	movs	r3, #4
 80047ac:	60fb      	str	r3, [r7, #12]

    if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	4619      	mov	r1, r3
 80047b4:	2000      	movs	r0, #0
 80047b6:	f000 fa4d 	bl	8004c54 <BSP_IO_Init>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <BSP_CAMERA_PwrDown+0x40>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80047c0:	f06f 0307 	mvn.w	r3, #7
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e016      	b.n	80047f6 <BSP_CAMERA_PwrDown+0x6e>
    }
    else
    {
      /* Camera power down sequence */
      /* De-assert the camera STANDBY pin (active high) */
      if(BSP_IO_WritePin(0, XSDN_PIN, IO_PIN_RESET)!= BSP_ERROR_NONE)
 80047c8:	2200      	movs	r2, #0
 80047ca:	2140      	movs	r1, #64	; 0x40
 80047cc:	2000      	movs	r0, #0
 80047ce:	f000 faa1 	bl	8004d14 <BSP_IO_WritePin>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <BSP_CAMERA_PwrDown+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80047d8:	f06f 0307 	mvn.w	r3, #7
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e00a      	b.n	80047f6 <BSP_CAMERA_PwrDown+0x6e>
      }
      else
      {
       /* Assert the camera RSTI pin (active low) */
       if(BSP_IO_WritePin(0, RSTI_PIN, IO_PIN_RESET)!= BSP_ERROR_NONE)
 80047e0:	2200      	movs	r2, #0
 80047e2:	2120      	movs	r1, #32
 80047e4:	2000      	movs	r0, #0
 80047e6:	f000 fa95 	bl	8004d14 <BSP_IO_WritePin>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <BSP_CAMERA_PwrDown+0x6e>
       {
         ret = BSP_ERROR_BUS_FAILURE;
 80047f0:	f06f 0307 	mvn.w	r3, #7
 80047f4:	617b      	str	r3, [r7, #20]
      }
    }
#endif
  }

  return ret;
 80047f6:	697b      	ldr	r3, [r7, #20]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 800481c:	2000      	movs	r0, #0
 800481e:	f7ff ffef 	bl	8004800 <BSP_CAMERA_ErrorCallback>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d102      	bne.n	8004846 <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8004840:	2303      	movs	r3, #3
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	e001      	b.n	800484a <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8004846:	2302      	movs	r3, #2
 8004848:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d834      	bhi.n	80048ba <GetSize+0x8e>
 8004850:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <GetSize+0x2c>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	0800486d 	.word	0x0800486d
 800485c:	0800487d 	.word	0x0800487d
 8004860:	0800488d 	.word	0x0800488d
 8004864:	0800489d 	.word	0x0800489d
 8004868:	080048ad 	.word	0x080048ad
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	60fb      	str	r3, [r7, #12]
    break;
 800487a:	e01f      	b.n	80048bc <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	089b      	lsrs	r3, r3, #2
 8004888:	60fb      	str	r3, [r7, #12]
    break;
 800488a:	e017      	b.n	80048bc <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	025b      	lsls	r3, r3, #9
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	60fb      	str	r3, [r7, #12]
    break;
 800489a:	e00f      	b.n	80048bc <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	60fb      	str	r3, [r7, #12]
    break;
 80048aa:	e007      	b.n	80048bc <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4a07      	ldr	r2, [pc, #28]	; (80048cc <GetSize+0xa0>)
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	089b      	lsrs	r3, r3, #2
 80048b6:	60fb      	str	r3, [r7, #12]
    break;
 80048b8:	e000      	b.n	80048bc <GetSize+0x90>
  default:
    break;
 80048ba:	bf00      	nop
  }

  return (int32_t)size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	0005dc00 	.word	0x0005dc00

080048d0 <DCMI_MspInit>:
  * @brief  Initializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b090      	sub	sp, #64	; 0x40
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 80048d8:	4b7e      	ldr	r3, [pc, #504]	; (8004ad4 <DCMI_MspInit+0x204>)
 80048da:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80048de:	4a7d      	ldr	r2, [pc, #500]	; (8004ad4 <DCMI_MspInit+0x204>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 80048e8:	4b7a      	ldr	r3, [pc, #488]	; (8004ad4 <DCMI_MspInit+0x204>)
 80048ea:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80048f6:	4b77      	ldr	r3, [pc, #476]	; (8004ad4 <DCMI_MspInit+0x204>)
 80048f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80048fc:	4a75      	ldr	r2, [pc, #468]	; (8004ad4 <DCMI_MspInit+0x204>)
 80048fe:	f043 0302 	orr.w	r3, r3, #2
 8004902:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8004906:	4b73      	ldr	r3, [pc, #460]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004908:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004914:	4b6f      	ldr	r3, [pc, #444]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800491a:	4a6e      	ldr	r2, [pc, #440]	; (8004ad4 <DCMI_MspInit+0x204>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004924:	4b6b      	ldr	r3, [pc, #428]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004926:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004932:	4b68      	ldr	r3, [pc, #416]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004934:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004938:	4a66      	ldr	r2, [pc, #408]	; (8004ad4 <DCMI_MspInit+0x204>)
 800493a:	f043 0302 	orr.w	r3, r3, #2
 800493e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004942:	4b64      	ldr	r3, [pc, #400]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004944:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	61fb      	str	r3, [r7, #28]
 800494e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004950:	4b60      	ldr	r3, [pc, #384]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004952:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004956:	4a5f      	ldr	r2, [pc, #380]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004960:	4b5c      	ldr	r3, [pc, #368]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004962:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800496e:	4b59      	ldr	r3, [pc, #356]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004970:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004974:	4a57      	ldr	r2, [pc, #348]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004976:	f043 0308 	orr.w	r3, r3, #8
 800497a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800497e:	4b55      	ldr	r3, [pc, #340]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004980:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800498c:	4b51      	ldr	r3, [pc, #324]	; (8004ad4 <DCMI_MspInit+0x204>)
 800498e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004992:	4a50      	ldr	r2, [pc, #320]	; (8004ad4 <DCMI_MspInit+0x204>)
 8004994:	f043 0310 	orr.w	r3, r3, #16
 8004998:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800499c:	4b4d      	ldr	r3, [pc, #308]	; (8004ad4 <DCMI_MspInit+0x204>)
 800499e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049aa:	4b4a      	ldr	r3, [pc, #296]	; (8004ad4 <DCMI_MspInit+0x204>)
 80049ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049b0:	4a48      	ldr	r2, [pc, #288]	; (8004ad4 <DCMI_MspInit+0x204>)
 80049b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80049ba:	4b46      	ldr	r3, [pc, #280]	; (8004ad4 <DCMI_MspInit+0x204>)
 80049bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]

  /* Configure DCMI GPIO as alternate function */
  /* DCMI PIXCLK and HSYNC pins */
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_4;
 80049c8:	2350      	movs	r3, #80	; 0x50
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80049cc:	2302      	movs	r3, #2
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80049d0:	2301      	movs	r3, #1
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d4:	2303      	movs	r3, #3
 80049d6:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80049d8:	230d      	movs	r3, #13
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80049dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049e0:	4619      	mov	r1, r3
 80049e2:	483d      	ldr	r0, [pc, #244]	; (8004ad8 <DCMI_MspInit+0x208>)
 80049e4:	f003 fa04 	bl	8007df0 <HAL_GPIO_Init>

  /* DCMI D0, D1 pins */
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7;
 80049e8:	23c0      	movs	r3, #192	; 0xc0
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80049ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049f0:	4619      	mov	r1, r3
 80049f2:	483a      	ldr	r0, [pc, #232]	; (8004adc <DCMI_MspInit+0x20c>)
 80049f4:	f003 f9fc 	bl	8007df0 <HAL_GPIO_Init>

  /* DCMI VSYNC, D2, D3 pins */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 80049f8:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80049fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a02:	4619      	mov	r1, r3
 8004a04:	4836      	ldr	r0, [pc, #216]	; (8004ae0 <DCMI_MspInit+0x210>)
 8004a06:	f003 f9f3 	bl	8007df0 <HAL_GPIO_Init>

  /* DCMI D4 pins */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004a0a:	2310      	movs	r3, #16
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a12:	4619      	mov	r1, r3
 8004a14:	4833      	ldr	r0, [pc, #204]	; (8004ae4 <DCMI_MspInit+0x214>)
 8004a16:	f003 f9eb 	bl	8007df0 <HAL_GPIO_Init>

  /* DCMI D5 pins */
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a22:	4619      	mov	r1, r3
 8004a24:	4830      	ldr	r0, [pc, #192]	; (8004ae8 <DCMI_MspInit+0x218>)
 8004a26:	f003 f9e3 	bl	8007df0 <HAL_GPIO_Init>

  /* DCMI D6, D7 pins */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9;
 8004a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8004a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a34:	4619      	mov	r1, r3
 8004a36:	482d      	ldr	r0, [pc, #180]	; (8004aec <DCMI_MspInit+0x21c>)
 8004a38:	f003 f9da 	bl	8007df0 <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI_PSSI;
 8004a3c:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a3e:	224b      	movs	r2, #75	; 0x4b
 8004a40:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004a42:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004a48:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 8004a4e:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a54:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a56:	4b26      	ldr	r3, [pc, #152]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a5c:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004a5e:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a64:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8004a66:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a6c:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8004a6e:	4b20      	ldr	r3, [pc, #128]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a74:	621a      	str	r2, [r3, #32]
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004a76:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004a7c:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a7e:	2203      	movs	r2, #3
 8004a80:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8004a88:	4b19      	ldr	r3, [pc, #100]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30

  hdma_handler.Instance = DMA2_Stream1;
 8004a8e:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <DCMI_MspInit+0x224>)
 8004a92:	601a      	str	r2, [r3, #0]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a98:	649a      	str	r2, [r3, #72]	; 0x48
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <DCMI_MspInit+0x220>)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6393      	str	r3, [r2, #56]	; 0x38

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	210f      	movs	r1, #15
 8004aa4:	204e      	movs	r0, #78	; 0x4e
 8004aa6:	f000 fbe0 	bl	800526a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8004aaa:	204e      	movs	r0, #78	; 0x4e
 8004aac:	f000 fbf7 	bl	800529e <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	210f      	movs	r1, #15
 8004ab4:	2039      	movs	r0, #57	; 0x39
 8004ab6:	f000 fbd8 	bl	800526a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004aba:	2039      	movs	r0, #57	; 0x39
 8004abc:	f000 fbef 	bl	800529e <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fe5b 	bl	8005780 <HAL_DMA_Init>
}
 8004aca:	bf00      	nop
 8004acc:	3740      	adds	r7, #64	; 0x40
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	58024400 	.word	0x58024400
 8004ad8:	58020000 	.word	0x58020000
 8004adc:	58020800 	.word	0x58020800
 8004ae0:	58021800 	.word	0x58021800
 8004ae4:	58021000 	.word	0x58021000
 8004ae8:	58020c00 	.word	0x58020c00
 8004aec:	58020400 	.word	0x58020400
 8004af0:	240010fc 	.word	0x240010fc
 8004af4:	40020428 	.word	0x40020428

08004af8 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8004b02:	2378      	movs	r3, #120	; 0x78
 8004b04:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C2_Init;
 8004b06:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <OV5640_Probe+0xc0>)
 8004b08:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8004b0a:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <OV5640_Probe+0xc4>)
 8004b0c:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg16;
 8004b0e:	4b2c      	ldr	r3, [pc, #176]	; (8004bc0 <OV5640_Probe+0xc8>)
 8004b10:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg16;
 8004b12:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <OV5640_Probe+0xcc>)
 8004b14:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8004b16:	4b2c      	ldr	r3, [pc, #176]	; (8004bc8 <OV5640_Probe+0xd0>)
 8004b18:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8004b1a:	f107 030c 	add.w	r3, r7, #12
 8004b1e:	4619      	mov	r1, r3
 8004b20:	482a      	ldr	r0, [pc, #168]	; (8004bcc <OV5640_Probe+0xd4>)
 8004b22:	f7fd fb95 	bl	8002250 <OV5640_RegisterBusIO>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b2c:	f06f 0304 	mvn.w	r3, #4
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
 8004b32:	e03c      	b.n	8004bae <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8004b34:	f107 0308 	add.w	r3, r7, #8
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4824      	ldr	r0, [pc, #144]	; (8004bcc <OV5640_Probe+0xd4>)
 8004b3c:	f7fd ffdc 	bl	8002af8 <OV5640_ReadID>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b46:	f06f 0304 	mvn.w	r3, #4
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4c:	e02f      	b.n	8004bae <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f245 6240 	movw	r2, #22080	; 0x5640
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004b58:	f06f 0306 	mvn.w	r3, #6
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5e:	e026      	b.n	8004bae <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8004b60:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <OV5640_Probe+0xd8>)
 8004b62:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <OV5640_Probe+0xdc>)
 8004b64:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8004b66:	4b1c      	ldr	r3, [pc, #112]	; (8004bd8 <OV5640_Probe+0xe0>)
 8004b68:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <OV5640_Probe+0xd4>)
 8004b6a:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8004b6c:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <OV5640_Probe+0xd8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <OV5640_Probe+0xe0>)
 8004b74:	6810      	ldr	r0, [r2, #0]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4798      	blx	r3
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b82:	f06f 0304 	mvn.w	r3, #4
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
 8004b88:	e011      	b.n	8004bae <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <OV5640_Probe+0xd8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <OV5640_Probe+0xe0>)
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	4911      	ldr	r1, [pc, #68]	; (8004bdc <OV5640_Probe+0xe4>)
 8004b96:	6809      	ldr	r1, [r1, #0]
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4798      	blx	r3
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ba2:	f06f 0304 	mvn.w	r3, #4
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba8:	e001      	b.n	8004bae <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3728      	adds	r7, #40	; 0x28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	08003b95 	.word	0x08003b95
 8004bbc:	08003c09 	.word	0x08003c09
 8004bc0:	08003de9 	.word	0x08003de9
 8004bc4:	08003d8d 	.word	0x08003d8d
 8004bc8:	08003e45 	.word	0x08003e45
 8004bcc:	24001174 	.word	0x24001174
 8004bd0:	240010f4 	.word	0x240010f4
 8004bd4:	2400003c 	.word	0x2400003c
 8004bd8:	24001070 	.word	0x24001070
 8004bdc:	240010f8 	.word	0x240010f8

08004be0 <BSP_IOEXPANDER_Init>:
  * @param  Function to be initialized. Could be IOEXPANDER_IO_MODE
  * @note   IOEXPANDER_IDD_MODE and IOEXPANDER_TS_MODE are not used on STM32H7B3I_EVAL board
  * @retval BSP status
  */
int32_t BSP_IOEXPANDER_Init(uint32_t Instance, uint32_t Function)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Function != IOEXPANDER_IO_MODE))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d102      	bne.n	8004bfa <BSP_IOEXPANDER_Init+0x1a>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d003      	beq.n	8004c02 <BSP_IOEXPANDER_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004bfa:	f06f 0301 	mvn.w	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e01d      	b.n	8004c3e <BSP_IOEXPANDER_Init+0x5e>
  }
  else
  {
    if (IO_Ctx[Instance].IsInitialized == 0U)
 8004c02:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <BSP_IOEXPANDER_Init+0x68>)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10e      	bne.n	8004c2c <BSP_IOEXPANDER_Init+0x4c>
    {
      if (MFXSTM32L152_Probe(Instance) != BSP_ERROR_NONE)
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f93a 	bl	8004e88 <MFXSTM32L152_Probe>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <BSP_IOEXPANDER_Init+0x42>
      {
        ret = BSP_ERROR_NO_INIT;
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e004      	b.n	8004c2c <BSP_IOEXPANDER_Init+0x4c>
      }
      else
      {
        IO_Ctx[Instance].IsInitialized = 1;
 8004c22:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <BSP_IOEXPANDER_Init+0x68>)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2101      	movs	r1, #1
 8004c28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      }
    }

    if (IO_Ctx[Instance].IsInitialized == 1U)
 8004c2c:	4a06      	ldr	r2, [pc, #24]	; (8004c48 <BSP_IOEXPANDER_Init+0x68>)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d102      	bne.n	8004c3e <BSP_IOEXPANDER_Init+0x5e>
    {
      Io_Drv = (IO_Drv_t *) &MFXSTM32L152_IO_Driver;
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <BSP_IOEXPANDER_Init+0x6c>)
 8004c3a:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <BSP_IOEXPANDER_Init+0x70>)
 8004c3c:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	2400119c 	.word	0x2400119c
 8004c4c:	240011d4 	.word	0x240011d4
 8004c50:	24000010 	.word	0x24000010

08004c54 <BSP_IO_Init>:
  * @param  Init     pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval BSP status
  */
int32_t BSP_IO_Init(uint32_t Instance, BSP_IO_Init_t *Init)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]

  if((Instance >= IOEXPANDER_INSTANCES_NBR) || (Init == NULL))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <BSP_IO_Init+0x1a>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <BSP_IO_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004c6e:	f06f 0301 	mvn.w	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e042      	b.n	8004cfc <BSP_IO_Init+0xa8>
  }
  else
  {
    if((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE)
 8004c76:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <BSP_IO_Init+0xb4>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d124      	bne.n	8004cd2 <BSP_IO_Init+0x7e>
    {
      if(BSP_IOEXPANDER_Init(Instance, IOEXPANDER_IO_MODE) != BSP_ERROR_NONE)
 8004c88:	2101      	movs	r1, #1
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff ffa8 	bl	8004be0 <BSP_IOEXPANDER_Init>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <BSP_IO_Init+0x4a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c96:	f06f 0304 	mvn.w	r3, #4
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	e019      	b.n	8004cd2 <BSP_IO_Init+0x7e>
      }
      else if (Io_Drv->Start(&Io_CompObj, IO_PIN_ALL) < 0)
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <BSP_IO_Init+0xb8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004ca8:	4819      	ldr	r0, [pc, #100]	; (8004d10 <BSP_IO_Init+0xbc>)
 8004caa:	4798      	blx	r3
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da03      	bge.n	8004cba <BSP_IO_Init+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004cb2:	f06f 0304 	mvn.w	r3, #4
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e00b      	b.n	8004cd2 <BSP_IO_Init+0x7e>
      }
      else
      {
        IO_Ctx[Instance].Functions |= IOEXPANDER_IO_MODE;
 8004cba:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <BSP_IO_Init+0xb4>)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f043 0201 	orr.w	r2, r3, #1
 8004cc8:	490f      	ldr	r1, [pc, #60]	; (8004d08 <BSP_IO_Init+0xb4>)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	440b      	add	r3, r1
 8004cd0:	605a      	str	r2, [r3, #4]
      }
    }

    if(ret == BSP_ERROR_NONE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d111      	bne.n	8004cfc <BSP_IO_Init+0xa8>
    {
      /* If IT mode is selected, configures MFX low level interrupt */
      if(Init->Mode >= IO_MODE_IT_RISING_EDGE)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d901      	bls.n	8004ce4 <BSP_IO_Init+0x90>
      {
        BSP_IOEXPANDER_ITConfig();
 8004ce0:	f000 f870 	bl	8004dc4 <BSP_IOEXPANDER_ITConfig>
      }

      /* Initializes IO pin */
      if(Io_Drv->Init(&Io_CompObj, Init) < 0)
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <BSP_IO_Init+0xb8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6839      	ldr	r1, [r7, #0]
 8004cec:	4808      	ldr	r0, [pc, #32]	; (8004d10 <BSP_IO_Init+0xbc>)
 8004cee:	4798      	blx	r3
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da02      	bge.n	8004cfc <BSP_IO_Init+0xa8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004cf6:	f06f 0304 	mvn.w	r3, #4
 8004cfa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	2400119c 	.word	0x2400119c
 8004d0c:	240011d4 	.word	0x240011d4
 8004d10:	240011a4 	.word	0x240011a4

08004d14 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState  New pins state to write
  * @retval BSP status
  */
int32_t BSP_IO_WritePin(uint32_t Instance, uint32_t IoPin, uint32_t PinState)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]

  if((Instance >= IOEXPANDER_INSTANCES_NBR) || ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d108      	bne.n	8004d3c <BSP_IO_WritePin+0x28>
 8004d2a:	4a10      	ldr	r2, [pc, #64]	; (8004d6c <BSP_IO_WritePin+0x58>)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4413      	add	r3, r2
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <BSP_IO_WritePin+0x30>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004d3c:	f06f 0301 	mvn.w	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e00d      	b.n	8004d60 <BSP_IO_WritePin+0x4c>
  }
  else
  {
    /* Set the Pin state */
    if(Io_Drv->WritePin(&Io_CompObj, IoPin, PinState) < 0)
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <BSP_IO_WritePin+0x5c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	4808      	ldr	r0, [pc, #32]	; (8004d74 <BSP_IO_WritePin+0x60>)
 8004d52:	4798      	blx	r3
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da02      	bge.n	8004d60 <BSP_IO_WritePin+0x4c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d5a:	f06f 0304 	mvn.w	r3, #4
 8004d5e:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004d60:	697b      	ldr	r3, [r7, #20]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	2400119c 	.word	0x2400119c
 8004d70:	240011d4 	.word	0x240011d4
 8004d74:	240011a4 	.word	0x240011a4

08004d78 <BSP_IO_ReadPin>:
  * @param  Instance IOE instance
  * @param  IoPin  Selected pin to read.
  * @retval The current pins state or BSP_ERROR_WRONG_PARAM
  */
int32_t BSP_IO_ReadPin(uint32_t Instance, uint32_t IoPin)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  if((Instance >= IOEXPANDER_INSTANCES_NBR) || ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d108      	bne.n	8004d9a <BSP_IO_ReadPin+0x22>
 8004d88:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <BSP_IO_ReadPin+0x40>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d102      	bne.n	8004da0 <BSP_IO_ReadPin+0x28>
  {
    return BSP_ERROR_WRONG_PARAM;
 8004d9a:	f06f 0301 	mvn.w	r3, #1
 8004d9e:	e006      	b.n	8004dae <BSP_IO_ReadPin+0x36>
  }

  return Io_Drv->ReadPin(&Io_CompObj, IoPin);
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <BSP_IO_ReadPin+0x44>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	4805      	ldr	r0, [pc, #20]	; (8004dc0 <BSP_IO_ReadPin+0x48>)
 8004daa:	4798      	blx	r3
 8004dac:	4603      	mov	r3, r0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	2400119c 	.word	0x2400119c
 8004dbc:	240011d4 	.word	0x240011d4
 8004dc0:	240011a4 	.word	0x240011a4

08004dc4 <BSP_IOEXPANDER_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void BSP_IOEXPANDER_ITConfig(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
  static uint32_t mfx_io_it_enabled = 0U;
  GPIO_InitTypeDef  gpio_init_structure;

  if(mfx_io_it_enabled == 0U)
 8004dca:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <BSP_IOEXPANDER_ITConfig+0x9c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d141      	bne.n	8004e56 <BSP_IOEXPANDER_ITConfig+0x92>
  {
    mfx_io_it_enabled = 1U;
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <BSP_IOEXPANDER_ITConfig+0x9c>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
    /* Enable the GPIO EXTI clock */
    MFX_IRQOUT_GPIO_CLK_ENABLE();
 8004dd8:	4b22      	ldr	r3, [pc, #136]	; (8004e64 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004dda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004dde:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004de8:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004dea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df6:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004df8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004dfc:	4a19      	ldr	r2, [pc, #100]	; (8004e64 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004dfe:	f043 0302 	orr.w	r3, r3, #2
 8004e02:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004e06:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8004e08:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	607b      	str	r3, [r7, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]

    gpio_init_structure.Pin   = MFX_IRQOUT_PIN;
 8004e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e18:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 8004e22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004e26:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(MFX_IRQOUT_GPIO_PORT, &gpio_init_structure);
 8004e28:	f107 030c 	add.w	r3, r7, #12
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	480e      	ldr	r0, [pc, #56]	; (8004e68 <BSP_IOEXPANDER_ITConfig+0xa4>)
 8004e30:	f002 ffde 	bl	8007df0 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hio_exti, IO_EXTI_LINE);
 8004e34:	2108      	movs	r1, #8
 8004e36:	480d      	ldr	r0, [pc, #52]	; (8004e6c <BSP_IOEXPANDER_ITConfig+0xa8>)
 8004e38:	f002 ffc5 	bl	8007dc6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hio_exti,  HAL_EXTI_COMMON_CB_ID, IO_EXTI_Callback);
 8004e3c:	4a0c      	ldr	r2, [pc, #48]	; (8004e70 <BSP_IOEXPANDER_ITConfig+0xac>)
 8004e3e:	2100      	movs	r1, #0
 8004e40:	480a      	ldr	r0, [pc, #40]	; (8004e6c <BSP_IOEXPANDER_ITConfig+0xa8>)
 8004e42:	f002 ffa1 	bl	8007d88 <HAL_EXTI_RegisterCallback>

    /* Enable and set GPIO EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn), BSP_IOEXPANDER_IT_PRIORITY, 0x0F);
 8004e46:	220f      	movs	r2, #15
 8004e48:	210f      	movs	r1, #15
 8004e4a:	2017      	movs	r0, #23
 8004e4c:	f000 fa0d 	bl	800526a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn));
 8004e50:	2017      	movs	r0, #23
 8004e52:	f000 fa24 	bl	800529e <HAL_NVIC_EnableIRQ>
  }
}
 8004e56:	bf00      	nop
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	240011d8 	.word	0x240011d8
 8004e64:	58024400 	.word	0x58024400
 8004e68:	58022000 	.word	0x58022000
 8004e6c:	240011cc 	.word	0x240011cc
 8004e70:	08004f51 	.word	0x08004f51

08004e74 <BSP_IO_Callback>:
  * @brief  BSP TS Callback.
  * @param  Instance IO instance
  * @retval None.
  */
__weak void BSP_IO_Callback(uint32_t Instance)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on TS touch detection */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <MFXSTM32L152_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t MFXSTM32L152_Probe(uint32_t Instance)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08c      	sub	sp, #48	; 0x30
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  int32_t              ret = BSP_ERROR_NONE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MFXSTM32L152_IO_t    IOCtx;
  uint32_t             mfxstm32l152_id, i;
  uint8_t i2c_address[] = {IO_I2C_ADDRESS, IO_I2C_ADDRESS_2};
 8004e94:	f248 6384 	movw	r3, #34436	; 0x8684
 8004e98:	813b      	strh	r3, [r7, #8]

  /* Configure the audio driver */
  IOCtx.Init        = BSP_I2C2_Init;
 8004e9a:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <MFXSTM32L152_Probe+0xb0>)
 8004e9c:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8004e9e:	4b27      	ldr	r3, [pc, #156]	; (8004f3c <MFXSTM32L152_Probe+0xb4>)
 8004ea0:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8004ea2:	4b27      	ldr	r3, [pc, #156]	; (8004f40 <MFXSTM32L152_Probe+0xb8>)
 8004ea4:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8004ea6:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <MFXSTM32L152_Probe+0xbc>)
 8004ea8:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8004eaa:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <MFXSTM32L152_Probe+0xc0>)
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0U; i < 2U; i++)
 8004eae:	2300      	movs	r3, #0
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb2:	e036      	b.n	8004f22 <MFXSTM32L152_Probe+0x9a>
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8004eb4:	f107 0208 	add.w	r2, r7, #8
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	4413      	add	r3, r2
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	833b      	strh	r3, [r7, #24]
    if(MFXSTM32L152_RegisterBusIO (&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8004ec2:	f107 0310 	add.w	r3, r7, #16
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4820      	ldr	r0, [pc, #128]	; (8004f4c <MFXSTM32L152_Probe+0xc4>)
 8004eca:	f7fd f861 	bl	8001f90 <MFXSTM32L152_RegisterBusIO>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <MFXSTM32L152_Probe+0x54>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004ed4:	f06f 0307 	mvn.w	r3, #7
 8004ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eda:	e01f      	b.n	8004f1c <MFXSTM32L152_Probe+0x94>
    }
    else if(MFXSTM32L152_ReadID(&Io_CompObj, &mfxstm32l152_id) != MFXSTM32L152_OK)
 8004edc:	f107 030c 	add.w	r3, r7, #12
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	481a      	ldr	r0, [pc, #104]	; (8004f4c <MFXSTM32L152_Probe+0xc4>)
 8004ee4:	f7fc fc0a 	bl	80016fc <MFXSTM32L152_ReadID>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <MFXSTM32L152_Probe+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004eee:	f06f 0303 	mvn.w	r3, #3
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef4:	e012      	b.n	8004f1c <MFXSTM32L152_Probe+0x94>
    }
    else
    {
      if((mfxstm32l152_id == MFXSTM32L152_ID) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b7b      	cmp	r3, #123	; 0x7b
 8004efa:	d002      	beq.n	8004f02 <MFXSTM32L152_Probe+0x7a>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b79      	cmp	r3, #121	; 0x79
 8004f00:	d109      	bne.n	8004f16 <MFXSTM32L152_Probe+0x8e>
      {
        if(MFXSTM32L152_Init(&Io_CompObj) != MFXSTM32L152_OK)
 8004f02:	4812      	ldr	r0, [pc, #72]	; (8004f4c <MFXSTM32L152_Probe+0xc4>)
 8004f04:	f7fc fb9d 	bl	8001642 <MFXSTM32L152_Init>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00d      	beq.n	8004f2a <MFXSTM32L152_Probe+0xa2>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f0e:	f06f 0304 	mvn.w	r3, #4
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8004f14:	e009      	b.n	8004f2a <MFXSTM32L152_Probe+0xa2>
      }
      else
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004f16:	f06f 0306 	mvn.w	r3, #6
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(i = 0U; i < 2U; i++)
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	3301      	adds	r3, #1
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d9c5      	bls.n	8004eb4 <MFXSTM32L152_Probe+0x2c>
 8004f28:	e000      	b.n	8004f2c <MFXSTM32L152_Probe+0xa4>
        break;
 8004f2a:	bf00      	nop
      }
    }
  }

  return ret;
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3730      	adds	r7, #48	; 0x30
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	08003b95 	.word	0x08003b95
 8004f3c:	08003c09 	.word	0x08003c09
 8004f40:	08003d31 	.word	0x08003d31
 8004f44:	08003cd5 	.word	0x08003cd5
 8004f48:	08003e45 	.word	0x08003e45
 8004f4c:	240011a4 	.word	0x240011a4

08004f50 <IO_EXTI_Callback>:
/**
  * @brief  IO EXTI touch detection callbacks.
  * @retval None
  */
static void IO_EXTI_Callback(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  BSP_IO_Callback(0);
 8004f54:	2000      	movs	r0, #0
 8004f56:	f7ff ff8d 	bl	8004e74 <BSP_IO_Callback>
}
 8004f5a:	bf00      	nop
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f66:	2003      	movs	r0, #3
 8004f68:	f000 f974 	bl	8005254 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004f6c:	f006 f9d8 	bl	800b320 <HAL_RCC_GetSysClockFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <HAL_Init+0x68>)
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	4913      	ldr	r1, [pc, #76]	; (8004fcc <HAL_Init+0x6c>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
 8004f88:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004f8a:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <HAL_Init+0x68>)
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	4a0e      	ldr	r2, [pc, #56]	; (8004fcc <HAL_Init+0x6c>)
 8004f94:	5cd3      	ldrb	r3, [r2, r3]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	4a0b      	ldr	r2, [pc, #44]	; (8004fd0 <HAL_Init+0x70>)
 8004fa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fa4:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <HAL_Init+0x74>)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004faa:	2000      	movs	r0, #0
 8004fac:	f000 f81c 	bl	8004fe8 <HAL_InitTick>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e002      	b.n	8004fc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004fba:	f000 f80d 	bl	8004fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	58024400 	.word	0x58024400
 8004fcc:	08012994 	.word	0x08012994
 8004fd0:	2400000c 	.word	0x2400000c
 8004fd4:	24000008 	.word	0x24000008

08004fd8 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ff0:	4b15      	ldr	r3, [pc, #84]	; (8005048 <HAL_InitTick+0x60>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e021      	b.n	8005040 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ffc:	4b13      	ldr	r3, [pc, #76]	; (800504c <HAL_InitTick+0x64>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4b11      	ldr	r3, [pc, #68]	; (8005048 <HAL_InitTick+0x60>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	4619      	mov	r1, r3
 8005006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800500a:	fbb3 f3f1 	udiv	r3, r3, r1
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f951 	bl	80052ba <HAL_SYSTICK_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e00e      	b.n	8005040 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b0f      	cmp	r3, #15
 8005026:	d80a      	bhi.n	800503e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005028:	2200      	movs	r2, #0
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	f000 f91b 	bl	800526a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005034:	4a06      	ldr	r2, [pc, #24]	; (8005050 <HAL_InitTick+0x68>)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	24000084 	.word	0x24000084
 800504c:	24000008 	.word	0x24000008
 8005050:	24000080 	.word	0x24000080

08005054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return uwTick;
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <HAL_GetTick+0x14>)
 800505a:	681b      	ldr	r3, [r3, #0]
}
 800505c:	4618      	mov	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	240011dc 	.word	0x240011dc

0800506c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005074:	f7ff ffee 	bl	8005054 <HAL_GetTick>
 8005078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d005      	beq.n	8005092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005086:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <HAL_Delay+0x44>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005092:	bf00      	nop
 8005094:	f7ff ffde 	bl	8005054 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d8f7      	bhi.n	8005094 <HAL_Delay+0x28>
  {
  }
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	24000084 	.word	0x24000084

080050b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <__NVIC_SetPriorityGrouping+0x40>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050d0:	4013      	ands	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <__NVIC_SetPriorityGrouping+0x44>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050e2:	4a04      	ldr	r2, [pc, #16]	; (80050f4 <__NVIC_SetPriorityGrouping+0x40>)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	60d3      	str	r3, [r2, #12]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	e000ed00 	.word	0xe000ed00
 80050f8:	05fa0000 	.word	0x05fa0000

080050fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <__NVIC_GetPriorityGrouping+0x18>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	0a1b      	lsrs	r3, r3, #8
 8005106:	f003 0307 	and.w	r3, r3, #7
}
 800510a:	4618      	mov	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005126:	2b00      	cmp	r3, #0
 8005128:	db0b      	blt.n	8005142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	f003 021f 	and.w	r2, r3, #31
 8005130:	4907      	ldr	r1, [pc, #28]	; (8005150 <__NVIC_EnableIRQ+0x38>)
 8005132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	2001      	movs	r0, #1
 800513a:	fa00 f202 	lsl.w	r2, r0, r2
 800513e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	e000e100 	.word	0xe000e100

08005154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	6039      	str	r1, [r7, #0]
 800515e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005164:	2b00      	cmp	r3, #0
 8005166:	db0a      	blt.n	800517e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	b2da      	uxtb	r2, r3
 800516c:	490c      	ldr	r1, [pc, #48]	; (80051a0 <__NVIC_SetPriority+0x4c>)
 800516e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005172:	0112      	lsls	r2, r2, #4
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	440b      	add	r3, r1
 8005178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800517c:	e00a      	b.n	8005194 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	4908      	ldr	r1, [pc, #32]	; (80051a4 <__NVIC_SetPriority+0x50>)
 8005184:	88fb      	ldrh	r3, [r7, #6]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	3b04      	subs	r3, #4
 800518c:	0112      	lsls	r2, r2, #4
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	440b      	add	r3, r1
 8005192:	761a      	strb	r2, [r3, #24]
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	e000e100 	.word	0xe000e100
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b089      	sub	sp, #36	; 0x24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f1c3 0307 	rsb	r3, r3, #7
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	bf28      	it	cs
 80051c6:	2304      	movcs	r3, #4
 80051c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	d902      	bls.n	80051d8 <NVIC_EncodePriority+0x30>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3b03      	subs	r3, #3
 80051d6:	e000      	b.n	80051da <NVIC_EncodePriority+0x32>
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051dc:	f04f 32ff 	mov.w	r2, #4294967295
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43da      	mvns	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	401a      	ands	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f0:	f04f 31ff 	mov.w	r1, #4294967295
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	43d9      	mvns	r1, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005200:	4313      	orrs	r3, r2
         );
}
 8005202:	4618      	mov	r0, r3
 8005204:	3724      	adds	r7, #36	; 0x24
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3b01      	subs	r3, #1
 800521c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005220:	d301      	bcc.n	8005226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005222:	2301      	movs	r3, #1
 8005224:	e00f      	b.n	8005246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005226:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <SysTick_Config+0x40>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3b01      	subs	r3, #1
 800522c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800522e:	210f      	movs	r1, #15
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	f7ff ff8e 	bl	8005154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <SysTick_Config+0x40>)
 800523a:	2200      	movs	r2, #0
 800523c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800523e:	4b04      	ldr	r3, [pc, #16]	; (8005250 <SysTick_Config+0x40>)
 8005240:	2207      	movs	r2, #7
 8005242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	e000e010 	.word	0xe000e010

08005254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff29 	bl	80050b4 <__NVIC_SetPriorityGrouping>
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b086      	sub	sp, #24
 800526e:	af00      	add	r7, sp, #0
 8005270:	4603      	mov	r3, r0
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005278:	f7ff ff40 	bl	80050fc <__NVIC_GetPriorityGrouping>
 800527c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	6978      	ldr	r0, [r7, #20]
 8005284:	f7ff ff90 	bl	80051a8 <NVIC_EncodePriority>
 8005288:	4602      	mov	r2, r0
 800528a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800528e:	4611      	mov	r1, r2
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff ff5f 	bl	8005154 <__NVIC_SetPriority>
}
 8005296:	bf00      	nop
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	4603      	mov	r3, r0
 80052a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff ff33 	bl	8005118 <__NVIC_EnableIRQ>
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff ffa4 	bl	8005210 <SysTick_Config>
 80052c8:	4603      	mov	r3, r0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e069      	b.n	80053ba <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f868 	bl	80053c8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	4b2a      	ldr	r3, [pc, #168]	; (80053c4 <HAL_DCMI_Init+0xf0>)
 800531a:	400b      	ands	r3, r1
 800531c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005332:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800533e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800534a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005356:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005362:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b10      	cmp	r3, #16
 8005372:	d112      	bne.n	800539a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	7f1b      	ldrb	r3, [r3, #28]
 8005378:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	7f5b      	ldrb	r3, [r3, #29]
 800537e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005380:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	7f9b      	ldrb	r3, [r3, #30]
 8005386:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005388:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7fdb      	ldrb	r3, [r3, #31]
 8005390:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005396:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005398:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 021e 	orr.w	r2, r2, #30
 80053a8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	ffe0f007 	.word	0xffe0f007

080053c8 <HAL_DCMI_MspInit>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_DCMI_Start_DMA+0x1c>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e0ab      	b.n	8005550 <HAL_DCMI_Start_DMA+0x174>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005416:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0202 	bic.w	r2, r2, #2
 8005426:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6819      	ldr	r1, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	430a      	orrs	r2, r1
 8005436:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800543c:	4a46      	ldr	r2, [pc, #280]	; (8005558 <HAL_DCMI_Start_DMA+0x17c>)
 800543e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005444:	4a45      	ldr	r2, [pc, #276]	; (800555c <HAL_DCMI_Start_DMA+0x180>)
 8005446:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544c:	2200      	movs	r2, #0
 800544e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546e:	d219      	bcs.n	80054a4 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3328      	adds	r3, #40	; 0x28
 800547a:	4619      	mov	r1, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	f000 fd0e 	bl	8005ea0 <HAL_DMA_Start_IT>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d055      	beq.n	8005536 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2240      	movs	r2, #64	; 0x40
 800548e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e055      	b.n	8005550 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a8:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <HAL_DCMI_Start_DMA+0x17c>)
 80054aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80054be:	e009      	b.n	80054d4 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	085a      	lsrs	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	005a      	lsls	r2, r3, #1
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054dc:	d2f0      	bcs.n	80054c0 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	1e9a      	subs	r2, r3, #2
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3328      	adds	r3, #40	; 0x28
 8005506:	4619      	mov	r1, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	f001 ff89 	bl	8007428 <HAL_DMAEx_MultiBufferStart_IT>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00c      	beq.n	8005536 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2240      	movs	r2, #64	; 0x40
 8005520:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e00c      	b.n	8005550 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	08005621 	.word	0x08005621
 800555c:	08005747 	.word	0x08005747

08005560 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8005568:	4b2b      	ldr	r3, [pc, #172]	; (8005618 <HAL_DCMI_Stop+0xb8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2b      	ldr	r2, [pc, #172]	; (800561c <HAL_DCMI_Stop+0xbc>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	0a5b      	lsrs	r3, r3, #9
 8005574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005578:	fb02 f303 	mul.w	r3, r2, r3
 800557c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_DCMI_Stop+0x30>
 800558c:	2302      	movs	r3, #2
 800558e:	e03f      	b.n	8005610 <HAL_DCMI_Stop+0xb0>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d108      	bne.n	80055ce <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c0:	f043 0220 	orr.w	r2, r3, #32
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	72fb      	strb	r3, [r7, #11]
      break;
 80055cc:	e006      	b.n	80055dc <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e9      	bne.n	80055b0 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055ea:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 febf 	bl	8006374 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800560e:	7afb      	ldrb	r3, [r7, #11]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	24000008 	.word	0x24000008
 800561c:	10624dd3 	.word	0x10624dd3

08005620 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	2b00      	cmp	r3, #0
 8005634:	d043      	beq.n	80056be <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005642:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d118      	bne.n	8005682 <DCMI_DMAXferCplt+0x62>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d015      	beq.n	8005682 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	00da      	lsls	r2, r3, #3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	4413      	add	r3, r2
 800566e:	2200      	movs	r2, #0
 8005670:	4619      	mov	r1, r3
 8005672:	f002 fa37 	bl	8007ae4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	1e5a      	subs	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	639a      	str	r2, [r3, #56]	; 0x38
 8005680:	e044      	b.n	800570c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d13c      	bne.n	800570c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	00da      	lsls	r2, r3, #3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	2201      	movs	r2, #1
 80056ac:	4619      	mov	r1, r3
 80056ae:	f002 fa19 	bl	8007ae4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	1e5a      	subs	r2, r3, #1
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
 80056bc:	e026      	b.n	800570c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80056d8:	60da      	str	r2, [r3, #12]
 80056da:	e017      	b.n	800570c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10f      	bne.n	800570c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f0:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f6:	0099      	lsls	r1, r3, #2
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	440a      	add	r2, r1
 8005702:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	429a      	cmp	r2, r3
 8005716:	d112      	bne.n	800573e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b02      	cmp	r3, #2
 8005734:	d103      	bne.n	800573e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	2b02      	cmp	r3, #2
 800575c:	d009      	beq.n	8005772 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f7ff f84e 	bl	8004814 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8005778:	bf00      	nop
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005788:	f7ff fc64 	bl	8005054 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e37f      	b.n	8005e98 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a66      	ldr	r2, [pc, #408]	; (8005938 <HAL_DMA_Init+0x1b8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d04a      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a65      	ldr	r2, [pc, #404]	; (800593c <HAL_DMA_Init+0x1bc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d045      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a63      	ldr	r2, [pc, #396]	; (8005940 <HAL_DMA_Init+0x1c0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d040      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a62      	ldr	r2, [pc, #392]	; (8005944 <HAL_DMA_Init+0x1c4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d03b      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a60      	ldr	r2, [pc, #384]	; (8005948 <HAL_DMA_Init+0x1c8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d036      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a5f      	ldr	r2, [pc, #380]	; (800594c <HAL_DMA_Init+0x1cc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d031      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a5d      	ldr	r2, [pc, #372]	; (8005950 <HAL_DMA_Init+0x1d0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d02c      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a5c      	ldr	r2, [pc, #368]	; (8005954 <HAL_DMA_Init+0x1d4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d027      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a5a      	ldr	r2, [pc, #360]	; (8005958 <HAL_DMA_Init+0x1d8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d022      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a59      	ldr	r2, [pc, #356]	; (800595c <HAL_DMA_Init+0x1dc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d01d      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a57      	ldr	r2, [pc, #348]	; (8005960 <HAL_DMA_Init+0x1e0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d018      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a56      	ldr	r2, [pc, #344]	; (8005964 <HAL_DMA_Init+0x1e4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d013      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a54      	ldr	r2, [pc, #336]	; (8005968 <HAL_DMA_Init+0x1e8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00e      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a53      	ldr	r2, [pc, #332]	; (800596c <HAL_DMA_Init+0x1ec>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d009      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a51      	ldr	r2, [pc, #324]	; (8005970 <HAL_DMA_Init+0x1f0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_DMA_Init+0xb8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a50      	ldr	r2, [pc, #320]	; (8005974 <HAL_DMA_Init+0x1f4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d101      	bne.n	800583c <HAL_DMA_Init+0xbc>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <HAL_DMA_Init+0xbe>
 800583c:	2300      	movs	r3, #0
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 813c 	beq.w	8005abc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a37      	ldr	r2, [pc, #220]	; (8005938 <HAL_DMA_Init+0x1b8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d04a      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a36      	ldr	r2, [pc, #216]	; (800593c <HAL_DMA_Init+0x1bc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d045      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a34      	ldr	r2, [pc, #208]	; (8005940 <HAL_DMA_Init+0x1c0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d040      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a33      	ldr	r2, [pc, #204]	; (8005944 <HAL_DMA_Init+0x1c4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d03b      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a31      	ldr	r2, [pc, #196]	; (8005948 <HAL_DMA_Init+0x1c8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d036      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a30      	ldr	r2, [pc, #192]	; (800594c <HAL_DMA_Init+0x1cc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d031      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a2e      	ldr	r2, [pc, #184]	; (8005950 <HAL_DMA_Init+0x1d0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d02c      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a2d      	ldr	r2, [pc, #180]	; (8005954 <HAL_DMA_Init+0x1d4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d027      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a2b      	ldr	r2, [pc, #172]	; (8005958 <HAL_DMA_Init+0x1d8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d022      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a2a      	ldr	r2, [pc, #168]	; (800595c <HAL_DMA_Init+0x1dc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d01d      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a28      	ldr	r2, [pc, #160]	; (8005960 <HAL_DMA_Init+0x1e0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d018      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a27      	ldr	r2, [pc, #156]	; (8005964 <HAL_DMA_Init+0x1e4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d013      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a25      	ldr	r2, [pc, #148]	; (8005968 <HAL_DMA_Init+0x1e8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00e      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a24      	ldr	r2, [pc, #144]	; (800596c <HAL_DMA_Init+0x1ec>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a22      	ldr	r2, [pc, #136]	; (8005970 <HAL_DMA_Init+0x1f0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_DMA_Init+0x174>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a21      	ldr	r2, [pc, #132]	; (8005974 <HAL_DMA_Init+0x1f4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d108      	bne.n	8005906 <HAL_DMA_Init+0x186>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e007      	b.n	8005916 <HAL_DMA_Init+0x196>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0201 	bic.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005916:	e02f      	b.n	8005978 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005918:	f7ff fb9c 	bl	8005054 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b05      	cmp	r3, #5
 8005924:	d928      	bls.n	8005978 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2203      	movs	r2, #3
 8005930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e2af      	b.n	8005e98 <HAL_DMA_Init+0x718>
 8005938:	40020010 	.word	0x40020010
 800593c:	40020028 	.word	0x40020028
 8005940:	40020040 	.word	0x40020040
 8005944:	40020058 	.word	0x40020058
 8005948:	40020070 	.word	0x40020070
 800594c:	40020088 	.word	0x40020088
 8005950:	400200a0 	.word	0x400200a0
 8005954:	400200b8 	.word	0x400200b8
 8005958:	40020410 	.word	0x40020410
 800595c:	40020428 	.word	0x40020428
 8005960:	40020440 	.word	0x40020440
 8005964:	40020458 	.word	0x40020458
 8005968:	40020470 	.word	0x40020470
 800596c:	40020488 	.word	0x40020488
 8005970:	400204a0 	.word	0x400204a0
 8005974:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1c8      	bne.n	8005918 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4b73      	ldr	r3, [pc, #460]	; (8005b60 <HAL_DMA_Init+0x3e0>)
 8005992:	4013      	ands	r3, r2
 8005994:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800599e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d107      	bne.n	80059dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	4313      	orrs	r3, r2
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b28      	cmp	r3, #40	; 0x28
 80059e2:	d903      	bls.n	80059ec <HAL_DMA_Init+0x26c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b2e      	cmp	r3, #46	; 0x2e
 80059ea:	d91f      	bls.n	8005a2c <HAL_DMA_Init+0x2ac>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b3e      	cmp	r3, #62	; 0x3e
 80059f2:	d903      	bls.n	80059fc <HAL_DMA_Init+0x27c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b42      	cmp	r3, #66	; 0x42
 80059fa:	d917      	bls.n	8005a2c <HAL_DMA_Init+0x2ac>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b46      	cmp	r3, #70	; 0x46
 8005a02:	d903      	bls.n	8005a0c <HAL_DMA_Init+0x28c>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b48      	cmp	r3, #72	; 0x48
 8005a0a:	d90f      	bls.n	8005a2c <HAL_DMA_Init+0x2ac>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2b4e      	cmp	r3, #78	; 0x4e
 8005a12:	d903      	bls.n	8005a1c <HAL_DMA_Init+0x29c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b52      	cmp	r3, #82	; 0x52
 8005a1a:	d907      	bls.n	8005a2c <HAL_DMA_Init+0x2ac>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b73      	cmp	r3, #115	; 0x73
 8005a22:	d905      	bls.n	8005a30 <HAL_DMA_Init+0x2b0>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b77      	cmp	r3, #119	; 0x77
 8005a2a:	d801      	bhi.n	8005a30 <HAL_DMA_Init+0x2b0>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <HAL_DMA_Init+0x2b2>
 8005a30:	2300      	movs	r3, #0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a3c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d117      	bne.n	8005a98 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 fa2e 	bl	8006edc <DMA_CheckFifoParam>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d008      	beq.n	8005a98 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2240      	movs	r2, #64	; 0x40
 8005a8a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e1ff      	b.n	8005e98 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f001 f969 	bl	8006d78 <DMA_CalcBaseAndBitshift>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	223f      	movs	r2, #63	; 0x3f
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	609a      	str	r2, [r3, #8]
 8005aba:	e0fe      	b.n	8005cba <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a28      	ldr	r2, [pc, #160]	; (8005b64 <HAL_DMA_Init+0x3e4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d04a      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a27      	ldr	r2, [pc, #156]	; (8005b68 <HAL_DMA_Init+0x3e8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d045      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a25      	ldr	r2, [pc, #148]	; (8005b6c <HAL_DMA_Init+0x3ec>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d040      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a24      	ldr	r2, [pc, #144]	; (8005b70 <HAL_DMA_Init+0x3f0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d03b      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a22      	ldr	r2, [pc, #136]	; (8005b74 <HAL_DMA_Init+0x3f4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d036      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a21      	ldr	r2, [pc, #132]	; (8005b78 <HAL_DMA_Init+0x3f8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d031      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <HAL_DMA_Init+0x3fc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d02c      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <HAL_DMA_Init+0x400>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d027      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1c      	ldr	r2, [pc, #112]	; (8005b84 <HAL_DMA_Init+0x404>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d022      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1b      	ldr	r2, [pc, #108]	; (8005b88 <HAL_DMA_Init+0x408>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d01d      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <HAL_DMA_Init+0x40c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d018      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <HAL_DMA_Init+0x410>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d013      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <HAL_DMA_Init+0x414>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00e      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <HAL_DMA_Init+0x418>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <HAL_DMA_Init+0x41c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d004      	beq.n	8005b5c <HAL_DMA_Init+0x3dc>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a12      	ldr	r2, [pc, #72]	; (8005ba0 <HAL_DMA_Init+0x420>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d123      	bne.n	8005ba4 <HAL_DMA_Init+0x424>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e022      	b.n	8005ba6 <HAL_DMA_Init+0x426>
 8005b60:	fe10803f 	.word	0xfe10803f
 8005b64:	48022c08 	.word	0x48022c08
 8005b68:	48022c1c 	.word	0x48022c1c
 8005b6c:	48022c30 	.word	0x48022c30
 8005b70:	48022c44 	.word	0x48022c44
 8005b74:	48022c58 	.word	0x48022c58
 8005b78:	48022c6c 	.word	0x48022c6c
 8005b7c:	48022c80 	.word	0x48022c80
 8005b80:	48022c94 	.word	0x48022c94
 8005b84:	58025408 	.word	0x58025408
 8005b88:	5802541c 	.word	0x5802541c
 8005b8c:	58025430 	.word	0x58025430
 8005b90:	58025444 	.word	0x58025444
 8005b94:	58025458 	.word	0x58025458
 8005b98:	5802546c 	.word	0x5802546c
 8005b9c:	58025480 	.word	0x58025480
 8005ba0:	58025494 	.word	0x58025494
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d07e      	beq.n	8005ca8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a80      	ldr	r2, [pc, #512]	; (8005db0 <HAL_DMA_Init+0x630>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d021      	beq.n	8005bf8 <HAL_DMA_Init+0x478>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a7e      	ldr	r2, [pc, #504]	; (8005db4 <HAL_DMA_Init+0x634>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01c      	beq.n	8005bf8 <HAL_DMA_Init+0x478>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a7d      	ldr	r2, [pc, #500]	; (8005db8 <HAL_DMA_Init+0x638>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d017      	beq.n	8005bf8 <HAL_DMA_Init+0x478>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a7b      	ldr	r2, [pc, #492]	; (8005dbc <HAL_DMA_Init+0x63c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d012      	beq.n	8005bf8 <HAL_DMA_Init+0x478>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a7a      	ldr	r2, [pc, #488]	; (8005dc0 <HAL_DMA_Init+0x640>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00d      	beq.n	8005bf8 <HAL_DMA_Init+0x478>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a78      	ldr	r2, [pc, #480]	; (8005dc4 <HAL_DMA_Init+0x644>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d008      	beq.n	8005bf8 <HAL_DMA_Init+0x478>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a77      	ldr	r2, [pc, #476]	; (8005dc8 <HAL_DMA_Init+0x648>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <HAL_DMA_Init+0x478>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a75      	ldr	r2, [pc, #468]	; (8005dcc <HAL_DMA_Init+0x64c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4b6e      	ldr	r3, [pc, #440]	; (8005dd0 <HAL_DMA_Init+0x650>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d008      	beq.n	8005c34 <HAL_DMA_Init+0x4b4>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b80      	cmp	r3, #128	; 0x80
 8005c28:	d102      	bne.n	8005c30 <HAL_DMA_Init+0x4b0>
 8005c2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c2e:	e002      	b.n	8005c36 <HAL_DMA_Init+0x4b6>
 8005c30:	2300      	movs	r3, #0
 8005c32:	e000      	b.n	8005c36 <HAL_DMA_Init+0x4b6>
 8005c34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68d2      	ldr	r2, [r2, #12]
 8005c3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4b56      	ldr	r3, [pc, #344]	; (8005dd4 <HAL_DMA_Init+0x654>)
 8005c7c:	4413      	add	r3, r2
 8005c7e:	4a56      	ldr	r2, [pc, #344]	; (8005dd8 <HAL_DMA_Init+0x658>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	091b      	lsrs	r3, r3, #4
 8005c86:	009a      	lsls	r2, r3, #2
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f001 f873 	bl	8006d78 <DMA_CalcBaseAndBitshift>
 8005c92:	4603      	mov	r3, r0
 8005c94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	409a      	lsls	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	e008      	b.n	8005cba <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2240      	movs	r2, #64	; 0x40
 8005cac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e0ee      	b.n	8005e98 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a47      	ldr	r2, [pc, #284]	; (8005ddc <HAL_DMA_Init+0x65c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d072      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a45      	ldr	r2, [pc, #276]	; (8005de0 <HAL_DMA_Init+0x660>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d06d      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a44      	ldr	r2, [pc, #272]	; (8005de4 <HAL_DMA_Init+0x664>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d068      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a42      	ldr	r2, [pc, #264]	; (8005de8 <HAL_DMA_Init+0x668>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d063      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a41      	ldr	r2, [pc, #260]	; (8005dec <HAL_DMA_Init+0x66c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d05e      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a3f      	ldr	r2, [pc, #252]	; (8005df0 <HAL_DMA_Init+0x670>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d059      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a3e      	ldr	r2, [pc, #248]	; (8005df4 <HAL_DMA_Init+0x674>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d054      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a3c      	ldr	r2, [pc, #240]	; (8005df8 <HAL_DMA_Init+0x678>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d04f      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a3b      	ldr	r2, [pc, #236]	; (8005dfc <HAL_DMA_Init+0x67c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d04a      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a39      	ldr	r2, [pc, #228]	; (8005e00 <HAL_DMA_Init+0x680>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d045      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a38      	ldr	r2, [pc, #224]	; (8005e04 <HAL_DMA_Init+0x684>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d040      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a36      	ldr	r2, [pc, #216]	; (8005e08 <HAL_DMA_Init+0x688>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d03b      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a35      	ldr	r2, [pc, #212]	; (8005e0c <HAL_DMA_Init+0x68c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d036      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a33      	ldr	r2, [pc, #204]	; (8005e10 <HAL_DMA_Init+0x690>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d031      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a32      	ldr	r2, [pc, #200]	; (8005e14 <HAL_DMA_Init+0x694>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d02c      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a30      	ldr	r2, [pc, #192]	; (8005e18 <HAL_DMA_Init+0x698>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d027      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a14      	ldr	r2, [pc, #80]	; (8005db0 <HAL_DMA_Init+0x630>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d022      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a12      	ldr	r2, [pc, #72]	; (8005db4 <HAL_DMA_Init+0x634>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d01d      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a11      	ldr	r2, [pc, #68]	; (8005db8 <HAL_DMA_Init+0x638>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d018      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a0f      	ldr	r2, [pc, #60]	; (8005dbc <HAL_DMA_Init+0x63c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a0e      	ldr	r2, [pc, #56]	; (8005dc0 <HAL_DMA_Init+0x640>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <HAL_DMA_Init+0x644>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d009      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a0b      	ldr	r2, [pc, #44]	; (8005dc8 <HAL_DMA_Init+0x648>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <HAL_DMA_Init+0x62a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a09      	ldr	r2, [pc, #36]	; (8005dcc <HAL_DMA_Init+0x64c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d138      	bne.n	8005e1c <HAL_DMA_Init+0x69c>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e037      	b.n	8005e1e <HAL_DMA_Init+0x69e>
 8005dae:	bf00      	nop
 8005db0:	58025408 	.word	0x58025408
 8005db4:	5802541c 	.word	0x5802541c
 8005db8:	58025430 	.word	0x58025430
 8005dbc:	58025444 	.word	0x58025444
 8005dc0:	58025458 	.word	0x58025458
 8005dc4:	5802546c 	.word	0x5802546c
 8005dc8:	58025480 	.word	0x58025480
 8005dcc:	58025494 	.word	0x58025494
 8005dd0:	fffe000f 	.word	0xfffe000f
 8005dd4:	a7fdabf8 	.word	0xa7fdabf8
 8005dd8:	cccccccd 	.word	0xcccccccd
 8005ddc:	40020010 	.word	0x40020010
 8005de0:	40020028 	.word	0x40020028
 8005de4:	40020040 	.word	0x40020040
 8005de8:	40020058 	.word	0x40020058
 8005dec:	40020070 	.word	0x40020070
 8005df0:	40020088 	.word	0x40020088
 8005df4:	400200a0 	.word	0x400200a0
 8005df8:	400200b8 	.word	0x400200b8
 8005dfc:	40020410 	.word	0x40020410
 8005e00:	40020428 	.word	0x40020428
 8005e04:	40020440 	.word	0x40020440
 8005e08:	40020458 	.word	0x40020458
 8005e0c:	40020470 	.word	0x40020470
 8005e10:	40020488 	.word	0x40020488
 8005e14:	400204a0 	.word	0x400204a0
 8005e18:	400204b8 	.word	0x400204b8
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d032      	beq.n	8005e88 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 f8d6 	bl	8006fd4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b80      	cmp	r3, #128	; 0x80
 8005e2e:	d102      	bne.n	8005e36 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e4a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d010      	beq.n	8005e76 <HAL_DMA_Init+0x6f6>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d80c      	bhi.n	8005e76 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f001 f953 	bl	8007108 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e72:	605a      	str	r2, [r3, #4]
 8005e74:	e008      	b.n	8005e88 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e226      	b.n	800630a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_DMA_Start_IT+0x2a>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e21f      	b.n	800630a <HAL_DMA_Start_IT+0x46a>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	f040 820a 	bne.w	80062f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a68      	ldr	r2, [pc, #416]	; (8006094 <HAL_DMA_Start_IT+0x1f4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d04a      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a66      	ldr	r2, [pc, #408]	; (8006098 <HAL_DMA_Start_IT+0x1f8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d045      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a65      	ldr	r2, [pc, #404]	; (800609c <HAL_DMA_Start_IT+0x1fc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d040      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a63      	ldr	r2, [pc, #396]	; (80060a0 <HAL_DMA_Start_IT+0x200>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d03b      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a62      	ldr	r2, [pc, #392]	; (80060a4 <HAL_DMA_Start_IT+0x204>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d036      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a60      	ldr	r2, [pc, #384]	; (80060a8 <HAL_DMA_Start_IT+0x208>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d031      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a5f      	ldr	r2, [pc, #380]	; (80060ac <HAL_DMA_Start_IT+0x20c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d02c      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a5d      	ldr	r2, [pc, #372]	; (80060b0 <HAL_DMA_Start_IT+0x210>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d027      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a5c      	ldr	r2, [pc, #368]	; (80060b4 <HAL_DMA_Start_IT+0x214>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d022      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5a      	ldr	r2, [pc, #360]	; (80060b8 <HAL_DMA_Start_IT+0x218>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01d      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a59      	ldr	r2, [pc, #356]	; (80060bc <HAL_DMA_Start_IT+0x21c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d018      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a57      	ldr	r2, [pc, #348]	; (80060c0 <HAL_DMA_Start_IT+0x220>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a56      	ldr	r2, [pc, #344]	; (80060c4 <HAL_DMA_Start_IT+0x224>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00e      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a54      	ldr	r2, [pc, #336]	; (80060c8 <HAL_DMA_Start_IT+0x228>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d009      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a53      	ldr	r2, [pc, #332]	; (80060cc <HAL_DMA_Start_IT+0x22c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d004      	beq.n	8005f8e <HAL_DMA_Start_IT+0xee>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a51      	ldr	r2, [pc, #324]	; (80060d0 <HAL_DMA_Start_IT+0x230>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d108      	bne.n	8005fa0 <HAL_DMA_Start_IT+0x100>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	e007      	b.n	8005fb0 <HAL_DMA_Start_IT+0x110>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fcfa 	bl	80069b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a34      	ldr	r2, [pc, #208]	; (8006094 <HAL_DMA_Start_IT+0x1f4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d04a      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a33      	ldr	r2, [pc, #204]	; (8006098 <HAL_DMA_Start_IT+0x1f8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d045      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a31      	ldr	r2, [pc, #196]	; (800609c <HAL_DMA_Start_IT+0x1fc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d040      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a30      	ldr	r2, [pc, #192]	; (80060a0 <HAL_DMA_Start_IT+0x200>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d03b      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <HAL_DMA_Start_IT+0x204>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d036      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a2d      	ldr	r2, [pc, #180]	; (80060a8 <HAL_DMA_Start_IT+0x208>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d031      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2b      	ldr	r2, [pc, #172]	; (80060ac <HAL_DMA_Start_IT+0x20c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d02c      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2a      	ldr	r2, [pc, #168]	; (80060b0 <HAL_DMA_Start_IT+0x210>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d027      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a28      	ldr	r2, [pc, #160]	; (80060b4 <HAL_DMA_Start_IT+0x214>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d022      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a27      	ldr	r2, [pc, #156]	; (80060b8 <HAL_DMA_Start_IT+0x218>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d01d      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a25      	ldr	r2, [pc, #148]	; (80060bc <HAL_DMA_Start_IT+0x21c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d018      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a24      	ldr	r2, [pc, #144]	; (80060c0 <HAL_DMA_Start_IT+0x220>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d013      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a22      	ldr	r2, [pc, #136]	; (80060c4 <HAL_DMA_Start_IT+0x224>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00e      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a21      	ldr	r2, [pc, #132]	; (80060c8 <HAL_DMA_Start_IT+0x228>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d009      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1f      	ldr	r2, [pc, #124]	; (80060cc <HAL_DMA_Start_IT+0x22c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_DMA_Start_IT+0x1bc>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <HAL_DMA_Start_IT+0x230>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d101      	bne.n	8006060 <HAL_DMA_Start_IT+0x1c0>
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <HAL_DMA_Start_IT+0x1c2>
 8006060:	2300      	movs	r3, #0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d036      	beq.n	80060d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f023 021e 	bic.w	r2, r3, #30
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0216 	orr.w	r2, r2, #22
 8006078:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d03e      	beq.n	8006100 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0208 	orr.w	r2, r2, #8
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	e035      	b.n	8006100 <HAL_DMA_Start_IT+0x260>
 8006094:	40020010 	.word	0x40020010
 8006098:	40020028 	.word	0x40020028
 800609c:	40020040 	.word	0x40020040
 80060a0:	40020058 	.word	0x40020058
 80060a4:	40020070 	.word	0x40020070
 80060a8:	40020088 	.word	0x40020088
 80060ac:	400200a0 	.word	0x400200a0
 80060b0:	400200b8 	.word	0x400200b8
 80060b4:	40020410 	.word	0x40020410
 80060b8:	40020428 	.word	0x40020428
 80060bc:	40020440 	.word	0x40020440
 80060c0:	40020458 	.word	0x40020458
 80060c4:	40020470 	.word	0x40020470
 80060c8:	40020488 	.word	0x40020488
 80060cc:	400204a0 	.word	0x400204a0
 80060d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f023 020e 	bic.w	r2, r3, #14
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 020a 	orr.w	r2, r2, #10
 80060e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d007      	beq.n	8006100 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0204 	orr.w	r2, r2, #4
 80060fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a83      	ldr	r2, [pc, #524]	; (8006314 <HAL_DMA_Start_IT+0x474>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d072      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a82      	ldr	r2, [pc, #520]	; (8006318 <HAL_DMA_Start_IT+0x478>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d06d      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a80      	ldr	r2, [pc, #512]	; (800631c <HAL_DMA_Start_IT+0x47c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d068      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a7f      	ldr	r2, [pc, #508]	; (8006320 <HAL_DMA_Start_IT+0x480>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d063      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a7d      	ldr	r2, [pc, #500]	; (8006324 <HAL_DMA_Start_IT+0x484>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d05e      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a7c      	ldr	r2, [pc, #496]	; (8006328 <HAL_DMA_Start_IT+0x488>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d059      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a7a      	ldr	r2, [pc, #488]	; (800632c <HAL_DMA_Start_IT+0x48c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d054      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a79      	ldr	r2, [pc, #484]	; (8006330 <HAL_DMA_Start_IT+0x490>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d04f      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a77      	ldr	r2, [pc, #476]	; (8006334 <HAL_DMA_Start_IT+0x494>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d04a      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a76      	ldr	r2, [pc, #472]	; (8006338 <HAL_DMA_Start_IT+0x498>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d045      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a74      	ldr	r2, [pc, #464]	; (800633c <HAL_DMA_Start_IT+0x49c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d040      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a73      	ldr	r2, [pc, #460]	; (8006340 <HAL_DMA_Start_IT+0x4a0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d03b      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a71      	ldr	r2, [pc, #452]	; (8006344 <HAL_DMA_Start_IT+0x4a4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d036      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a70      	ldr	r2, [pc, #448]	; (8006348 <HAL_DMA_Start_IT+0x4a8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d031      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a6e      	ldr	r2, [pc, #440]	; (800634c <HAL_DMA_Start_IT+0x4ac>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d02c      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a6d      	ldr	r2, [pc, #436]	; (8006350 <HAL_DMA_Start_IT+0x4b0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d027      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a6b      	ldr	r2, [pc, #428]	; (8006354 <HAL_DMA_Start_IT+0x4b4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d022      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a6a      	ldr	r2, [pc, #424]	; (8006358 <HAL_DMA_Start_IT+0x4b8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d01d      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a68      	ldr	r2, [pc, #416]	; (800635c <HAL_DMA_Start_IT+0x4bc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d018      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a67      	ldr	r2, [pc, #412]	; (8006360 <HAL_DMA_Start_IT+0x4c0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a65      	ldr	r2, [pc, #404]	; (8006364 <HAL_DMA_Start_IT+0x4c4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00e      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a64      	ldr	r2, [pc, #400]	; (8006368 <HAL_DMA_Start_IT+0x4c8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d009      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a62      	ldr	r2, [pc, #392]	; (800636c <HAL_DMA_Start_IT+0x4cc>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d004      	beq.n	80061f0 <HAL_DMA_Start_IT+0x350>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a61      	ldr	r2, [pc, #388]	; (8006370 <HAL_DMA_Start_IT+0x4d0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d101      	bne.n	80061f4 <HAL_DMA_Start_IT+0x354>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <HAL_DMA_Start_IT+0x356>
 80061f4:	2300      	movs	r3, #0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01a      	beq.n	8006230 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006216:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800622a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800622e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a37      	ldr	r2, [pc, #220]	; (8006314 <HAL_DMA_Start_IT+0x474>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d04a      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a36      	ldr	r2, [pc, #216]	; (8006318 <HAL_DMA_Start_IT+0x478>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d045      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a34      	ldr	r2, [pc, #208]	; (800631c <HAL_DMA_Start_IT+0x47c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d040      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a33      	ldr	r2, [pc, #204]	; (8006320 <HAL_DMA_Start_IT+0x480>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d03b      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a31      	ldr	r2, [pc, #196]	; (8006324 <HAL_DMA_Start_IT+0x484>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d036      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a30      	ldr	r2, [pc, #192]	; (8006328 <HAL_DMA_Start_IT+0x488>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d031      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2e      	ldr	r2, [pc, #184]	; (800632c <HAL_DMA_Start_IT+0x48c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d02c      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2d      	ldr	r2, [pc, #180]	; (8006330 <HAL_DMA_Start_IT+0x490>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d027      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2b      	ldr	r2, [pc, #172]	; (8006334 <HAL_DMA_Start_IT+0x494>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d022      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2a      	ldr	r2, [pc, #168]	; (8006338 <HAL_DMA_Start_IT+0x498>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d01d      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a28      	ldr	r2, [pc, #160]	; (800633c <HAL_DMA_Start_IT+0x49c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a27      	ldr	r2, [pc, #156]	; (8006340 <HAL_DMA_Start_IT+0x4a0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d013      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a25      	ldr	r2, [pc, #148]	; (8006344 <HAL_DMA_Start_IT+0x4a4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00e      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a24      	ldr	r2, [pc, #144]	; (8006348 <HAL_DMA_Start_IT+0x4a8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a22      	ldr	r2, [pc, #136]	; (800634c <HAL_DMA_Start_IT+0x4ac>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_DMA_Start_IT+0x430>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a21      	ldr	r2, [pc, #132]	; (8006350 <HAL_DMA_Start_IT+0x4b0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d108      	bne.n	80062e2 <HAL_DMA_Start_IT+0x442>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e012      	b.n	8006308 <HAL_DMA_Start_IT+0x468>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e009      	b.n	8006308 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006308:	7dfb      	ldrb	r3, [r7, #23]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40020010 	.word	0x40020010
 8006318:	40020028 	.word	0x40020028
 800631c:	40020040 	.word	0x40020040
 8006320:	40020058 	.word	0x40020058
 8006324:	40020070 	.word	0x40020070
 8006328:	40020088 	.word	0x40020088
 800632c:	400200a0 	.word	0x400200a0
 8006330:	400200b8 	.word	0x400200b8
 8006334:	40020410 	.word	0x40020410
 8006338:	40020428 	.word	0x40020428
 800633c:	40020440 	.word	0x40020440
 8006340:	40020458 	.word	0x40020458
 8006344:	40020470 	.word	0x40020470
 8006348:	40020488 	.word	0x40020488
 800634c:	400204a0 	.word	0x400204a0
 8006350:	400204b8 	.word	0x400204b8
 8006354:	58025408 	.word	0x58025408
 8006358:	5802541c 	.word	0x5802541c
 800635c:	58025430 	.word	0x58025430
 8006360:	58025444 	.word	0x58025444
 8006364:	58025458 	.word	0x58025458
 8006368:	5802546c 	.word	0x5802546c
 800636c:	58025480 	.word	0x58025480
 8006370:	58025494 	.word	0x58025494

08006374 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800637c:	f7fe fe6a 	bl	8005054 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e2dc      	b.n	8006946 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d008      	beq.n	80063aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2280      	movs	r2, #128	; 0x80
 800639c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e2cd      	b.n	8006946 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a76      	ldr	r2, [pc, #472]	; (8006588 <HAL_DMA_Abort+0x214>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d04a      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a74      	ldr	r2, [pc, #464]	; (800658c <HAL_DMA_Abort+0x218>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d045      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a73      	ldr	r2, [pc, #460]	; (8006590 <HAL_DMA_Abort+0x21c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d040      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a71      	ldr	r2, [pc, #452]	; (8006594 <HAL_DMA_Abort+0x220>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d03b      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a70      	ldr	r2, [pc, #448]	; (8006598 <HAL_DMA_Abort+0x224>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d036      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a6e      	ldr	r2, [pc, #440]	; (800659c <HAL_DMA_Abort+0x228>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d031      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a6d      	ldr	r2, [pc, #436]	; (80065a0 <HAL_DMA_Abort+0x22c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d02c      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a6b      	ldr	r2, [pc, #428]	; (80065a4 <HAL_DMA_Abort+0x230>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d027      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a6a      	ldr	r2, [pc, #424]	; (80065a8 <HAL_DMA_Abort+0x234>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d022      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a68      	ldr	r2, [pc, #416]	; (80065ac <HAL_DMA_Abort+0x238>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d01d      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a67      	ldr	r2, [pc, #412]	; (80065b0 <HAL_DMA_Abort+0x23c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d018      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a65      	ldr	r2, [pc, #404]	; (80065b4 <HAL_DMA_Abort+0x240>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a64      	ldr	r2, [pc, #400]	; (80065b8 <HAL_DMA_Abort+0x244>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00e      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a62      	ldr	r2, [pc, #392]	; (80065bc <HAL_DMA_Abort+0x248>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d009      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a61      	ldr	r2, [pc, #388]	; (80065c0 <HAL_DMA_Abort+0x24c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d004      	beq.n	800644a <HAL_DMA_Abort+0xd6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a5f      	ldr	r2, [pc, #380]	; (80065c4 <HAL_DMA_Abort+0x250>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d101      	bne.n	800644e <HAL_DMA_Abort+0xda>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <HAL_DMA_Abort+0xdc>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d013      	beq.n	800647c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 021e 	bic.w	r2, r2, #30
 8006462:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006472:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	e00a      	b.n	8006492 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 020e 	bic.w	r2, r2, #14
 800648a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a3c      	ldr	r2, [pc, #240]	; (8006588 <HAL_DMA_Abort+0x214>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d072      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a3a      	ldr	r2, [pc, #232]	; (800658c <HAL_DMA_Abort+0x218>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d06d      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a39      	ldr	r2, [pc, #228]	; (8006590 <HAL_DMA_Abort+0x21c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d068      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a37      	ldr	r2, [pc, #220]	; (8006594 <HAL_DMA_Abort+0x220>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d063      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a36      	ldr	r2, [pc, #216]	; (8006598 <HAL_DMA_Abort+0x224>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d05e      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a34      	ldr	r2, [pc, #208]	; (800659c <HAL_DMA_Abort+0x228>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d059      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a33      	ldr	r2, [pc, #204]	; (80065a0 <HAL_DMA_Abort+0x22c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d054      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a31      	ldr	r2, [pc, #196]	; (80065a4 <HAL_DMA_Abort+0x230>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d04f      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a30      	ldr	r2, [pc, #192]	; (80065a8 <HAL_DMA_Abort+0x234>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d04a      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2e      	ldr	r2, [pc, #184]	; (80065ac <HAL_DMA_Abort+0x238>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d045      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2d      	ldr	r2, [pc, #180]	; (80065b0 <HAL_DMA_Abort+0x23c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d040      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2b      	ldr	r2, [pc, #172]	; (80065b4 <HAL_DMA_Abort+0x240>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d03b      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <HAL_DMA_Abort+0x244>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d036      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a28      	ldr	r2, [pc, #160]	; (80065bc <HAL_DMA_Abort+0x248>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d031      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <HAL_DMA_Abort+0x24c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d02c      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <HAL_DMA_Abort+0x250>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d027      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a24      	ldr	r2, [pc, #144]	; (80065c8 <HAL_DMA_Abort+0x254>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d022      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a22      	ldr	r2, [pc, #136]	; (80065cc <HAL_DMA_Abort+0x258>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01d      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <HAL_DMA_Abort+0x25c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d018      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1f      	ldr	r2, [pc, #124]	; (80065d4 <HAL_DMA_Abort+0x260>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d013      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <HAL_DMA_Abort+0x264>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00e      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <HAL_DMA_Abort+0x268>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d009      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <HAL_DMA_Abort+0x26c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_DMA_Abort+0x20e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a19      	ldr	r2, [pc, #100]	; (80065e4 <HAL_DMA_Abort+0x270>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d132      	bne.n	80065e8 <HAL_DMA_Abort+0x274>
 8006582:	2301      	movs	r3, #1
 8006584:	e031      	b.n	80065ea <HAL_DMA_Abort+0x276>
 8006586:	bf00      	nop
 8006588:	40020010 	.word	0x40020010
 800658c:	40020028 	.word	0x40020028
 8006590:	40020040 	.word	0x40020040
 8006594:	40020058 	.word	0x40020058
 8006598:	40020070 	.word	0x40020070
 800659c:	40020088 	.word	0x40020088
 80065a0:	400200a0 	.word	0x400200a0
 80065a4:	400200b8 	.word	0x400200b8
 80065a8:	40020410 	.word	0x40020410
 80065ac:	40020428 	.word	0x40020428
 80065b0:	40020440 	.word	0x40020440
 80065b4:	40020458 	.word	0x40020458
 80065b8:	40020470 	.word	0x40020470
 80065bc:	40020488 	.word	0x40020488
 80065c0:	400204a0 	.word	0x400204a0
 80065c4:	400204b8 	.word	0x400204b8
 80065c8:	58025408 	.word	0x58025408
 80065cc:	5802541c 	.word	0x5802541c
 80065d0:	58025430 	.word	0x58025430
 80065d4:	58025444 	.word	0x58025444
 80065d8:	58025458 	.word	0x58025458
 80065dc:	5802546c 	.word	0x5802546c
 80065e0:	58025480 	.word	0x58025480
 80065e4:	58025494 	.word	0x58025494
 80065e8:	2300      	movs	r3, #0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a6d      	ldr	r2, [pc, #436]	; (80067b8 <HAL_DMA_Abort+0x444>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d04a      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a6b      	ldr	r2, [pc, #428]	; (80067bc <HAL_DMA_Abort+0x448>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d045      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a6a      	ldr	r2, [pc, #424]	; (80067c0 <HAL_DMA_Abort+0x44c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d040      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a68      	ldr	r2, [pc, #416]	; (80067c4 <HAL_DMA_Abort+0x450>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d03b      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a67      	ldr	r2, [pc, #412]	; (80067c8 <HAL_DMA_Abort+0x454>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d036      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a65      	ldr	r2, [pc, #404]	; (80067cc <HAL_DMA_Abort+0x458>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d031      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a64      	ldr	r2, [pc, #400]	; (80067d0 <HAL_DMA_Abort+0x45c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d02c      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a62      	ldr	r2, [pc, #392]	; (80067d4 <HAL_DMA_Abort+0x460>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d027      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a61      	ldr	r2, [pc, #388]	; (80067d8 <HAL_DMA_Abort+0x464>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d022      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5f      	ldr	r2, [pc, #380]	; (80067dc <HAL_DMA_Abort+0x468>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d01d      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a5e      	ldr	r2, [pc, #376]	; (80067e0 <HAL_DMA_Abort+0x46c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d018      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5c      	ldr	r2, [pc, #368]	; (80067e4 <HAL_DMA_Abort+0x470>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a5b      	ldr	r2, [pc, #364]	; (80067e8 <HAL_DMA_Abort+0x474>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00e      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a59      	ldr	r2, [pc, #356]	; (80067ec <HAL_DMA_Abort+0x478>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d009      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a58      	ldr	r2, [pc, #352]	; (80067f0 <HAL_DMA_Abort+0x47c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d004      	beq.n	800669e <HAL_DMA_Abort+0x32a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a56      	ldr	r2, [pc, #344]	; (80067f4 <HAL_DMA_Abort+0x480>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d108      	bne.n	80066b0 <HAL_DMA_Abort+0x33c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	e007      	b.n	80066c0 <HAL_DMA_Abort+0x34c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066c0:	e013      	b.n	80066ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066c2:	f7fe fcc7 	bl	8005054 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b05      	cmp	r3, #5
 80066ce:	d90c      	bls.n	80066ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2203      	movs	r2, #3
 80066da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e12d      	b.n	8006946 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e5      	bne.n	80066c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a2f      	ldr	r2, [pc, #188]	; (80067b8 <HAL_DMA_Abort+0x444>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d04a      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a2d      	ldr	r2, [pc, #180]	; (80067bc <HAL_DMA_Abort+0x448>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d045      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2c      	ldr	r2, [pc, #176]	; (80067c0 <HAL_DMA_Abort+0x44c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d040      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2a      	ldr	r2, [pc, #168]	; (80067c4 <HAL_DMA_Abort+0x450>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d03b      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <HAL_DMA_Abort+0x454>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d036      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a27      	ldr	r2, [pc, #156]	; (80067cc <HAL_DMA_Abort+0x458>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d031      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <HAL_DMA_Abort+0x45c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d02c      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a24      	ldr	r2, [pc, #144]	; (80067d4 <HAL_DMA_Abort+0x460>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d027      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a23      	ldr	r2, [pc, #140]	; (80067d8 <HAL_DMA_Abort+0x464>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d022      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a21      	ldr	r2, [pc, #132]	; (80067dc <HAL_DMA_Abort+0x468>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01d      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <HAL_DMA_Abort+0x46c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d018      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1e      	ldr	r2, [pc, #120]	; (80067e4 <HAL_DMA_Abort+0x470>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <HAL_DMA_Abort+0x474>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <HAL_DMA_Abort+0x478>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1a      	ldr	r2, [pc, #104]	; (80067f0 <HAL_DMA_Abort+0x47c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_DMA_Abort+0x422>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a18      	ldr	r2, [pc, #96]	; (80067f4 <HAL_DMA_Abort+0x480>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d101      	bne.n	800679a <HAL_DMA_Abort+0x426>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <HAL_DMA_Abort+0x428>
 800679a:	2300      	movs	r3, #0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02b      	beq.n	80067f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	223f      	movs	r2, #63	; 0x3f
 80067b0:	409a      	lsls	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	609a      	str	r2, [r3, #8]
 80067b6:	e02a      	b.n	800680e <HAL_DMA_Abort+0x49a>
 80067b8:	40020010 	.word	0x40020010
 80067bc:	40020028 	.word	0x40020028
 80067c0:	40020040 	.word	0x40020040
 80067c4:	40020058 	.word	0x40020058
 80067c8:	40020070 	.word	0x40020070
 80067cc:	40020088 	.word	0x40020088
 80067d0:	400200a0 	.word	0x400200a0
 80067d4:	400200b8 	.word	0x400200b8
 80067d8:	40020410 	.word	0x40020410
 80067dc:	40020428 	.word	0x40020428
 80067e0:	40020440 	.word	0x40020440
 80067e4:	40020458 	.word	0x40020458
 80067e8:	40020470 	.word	0x40020470
 80067ec:	40020488 	.word	0x40020488
 80067f0:	400204a0 	.word	0x400204a0
 80067f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2201      	movs	r2, #1
 8006808:	409a      	lsls	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a4f      	ldr	r2, [pc, #316]	; (8006950 <HAL_DMA_Abort+0x5dc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d072      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a4d      	ldr	r2, [pc, #308]	; (8006954 <HAL_DMA_Abort+0x5e0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d06d      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a4c      	ldr	r2, [pc, #304]	; (8006958 <HAL_DMA_Abort+0x5e4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d068      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a4a      	ldr	r2, [pc, #296]	; (800695c <HAL_DMA_Abort+0x5e8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d063      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a49      	ldr	r2, [pc, #292]	; (8006960 <HAL_DMA_Abort+0x5ec>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d05e      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a47      	ldr	r2, [pc, #284]	; (8006964 <HAL_DMA_Abort+0x5f0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d059      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a46      	ldr	r2, [pc, #280]	; (8006968 <HAL_DMA_Abort+0x5f4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d054      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a44      	ldr	r2, [pc, #272]	; (800696c <HAL_DMA_Abort+0x5f8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d04f      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a43      	ldr	r2, [pc, #268]	; (8006970 <HAL_DMA_Abort+0x5fc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d04a      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a41      	ldr	r2, [pc, #260]	; (8006974 <HAL_DMA_Abort+0x600>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d045      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a40      	ldr	r2, [pc, #256]	; (8006978 <HAL_DMA_Abort+0x604>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d040      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a3e      	ldr	r2, [pc, #248]	; (800697c <HAL_DMA_Abort+0x608>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d03b      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a3d      	ldr	r2, [pc, #244]	; (8006980 <HAL_DMA_Abort+0x60c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d036      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a3b      	ldr	r2, [pc, #236]	; (8006984 <HAL_DMA_Abort+0x610>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d031      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a3a      	ldr	r2, [pc, #232]	; (8006988 <HAL_DMA_Abort+0x614>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d02c      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a38      	ldr	r2, [pc, #224]	; (800698c <HAL_DMA_Abort+0x618>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d027      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a37      	ldr	r2, [pc, #220]	; (8006990 <HAL_DMA_Abort+0x61c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d022      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a35      	ldr	r2, [pc, #212]	; (8006994 <HAL_DMA_Abort+0x620>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01d      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a34      	ldr	r2, [pc, #208]	; (8006998 <HAL_DMA_Abort+0x624>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d018      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a32      	ldr	r2, [pc, #200]	; (800699c <HAL_DMA_Abort+0x628>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d013      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a31      	ldr	r2, [pc, #196]	; (80069a0 <HAL_DMA_Abort+0x62c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00e      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a2f      	ldr	r2, [pc, #188]	; (80069a4 <HAL_DMA_Abort+0x630>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d009      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a2e      	ldr	r2, [pc, #184]	; (80069a8 <HAL_DMA_Abort+0x634>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d004      	beq.n	80068fe <HAL_DMA_Abort+0x58a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a2c      	ldr	r2, [pc, #176]	; (80069ac <HAL_DMA_Abort+0x638>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d101      	bne.n	8006902 <HAL_DMA_Abort+0x58e>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <HAL_DMA_Abort+0x590>
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d015      	beq.n	8006934 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006910:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00c      	beq.n	8006934 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006928:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006932:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40020010 	.word	0x40020010
 8006954:	40020028 	.word	0x40020028
 8006958:	40020040 	.word	0x40020040
 800695c:	40020058 	.word	0x40020058
 8006960:	40020070 	.word	0x40020070
 8006964:	40020088 	.word	0x40020088
 8006968:	400200a0 	.word	0x400200a0
 800696c:	400200b8 	.word	0x400200b8
 8006970:	40020410 	.word	0x40020410
 8006974:	40020428 	.word	0x40020428
 8006978:	40020440 	.word	0x40020440
 800697c:	40020458 	.word	0x40020458
 8006980:	40020470 	.word	0x40020470
 8006984:	40020488 	.word	0x40020488
 8006988:	400204a0 	.word	0x400204a0
 800698c:	400204b8 	.word	0x400204b8
 8006990:	58025408 	.word	0x58025408
 8006994:	5802541c 	.word	0x5802541c
 8006998:	58025430 	.word	0x58025430
 800699c:	58025444 	.word	0x58025444
 80069a0:	58025458 	.word	0x58025458
 80069a4:	5802546c 	.word	0x5802546c
 80069a8:	58025480 	.word	0x58025480
 80069ac:	58025494 	.word	0x58025494

080069b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a7f      	ldr	r2, [pc, #508]	; (8006bcc <DMA_SetConfig+0x21c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d072      	beq.n	8006aba <DMA_SetConfig+0x10a>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a7d      	ldr	r2, [pc, #500]	; (8006bd0 <DMA_SetConfig+0x220>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d06d      	beq.n	8006aba <DMA_SetConfig+0x10a>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a7c      	ldr	r2, [pc, #496]	; (8006bd4 <DMA_SetConfig+0x224>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d068      	beq.n	8006aba <DMA_SetConfig+0x10a>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a7a      	ldr	r2, [pc, #488]	; (8006bd8 <DMA_SetConfig+0x228>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d063      	beq.n	8006aba <DMA_SetConfig+0x10a>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a79      	ldr	r2, [pc, #484]	; (8006bdc <DMA_SetConfig+0x22c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d05e      	beq.n	8006aba <DMA_SetConfig+0x10a>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a77      	ldr	r2, [pc, #476]	; (8006be0 <DMA_SetConfig+0x230>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d059      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a76      	ldr	r2, [pc, #472]	; (8006be4 <DMA_SetConfig+0x234>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d054      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a74      	ldr	r2, [pc, #464]	; (8006be8 <DMA_SetConfig+0x238>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d04f      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a73      	ldr	r2, [pc, #460]	; (8006bec <DMA_SetConfig+0x23c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d04a      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a71      	ldr	r2, [pc, #452]	; (8006bf0 <DMA_SetConfig+0x240>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d045      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a70      	ldr	r2, [pc, #448]	; (8006bf4 <DMA_SetConfig+0x244>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d040      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a6e      	ldr	r2, [pc, #440]	; (8006bf8 <DMA_SetConfig+0x248>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d03b      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a6d      	ldr	r2, [pc, #436]	; (8006bfc <DMA_SetConfig+0x24c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d036      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a6b      	ldr	r2, [pc, #428]	; (8006c00 <DMA_SetConfig+0x250>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d031      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6a      	ldr	r2, [pc, #424]	; (8006c04 <DMA_SetConfig+0x254>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d02c      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a68      	ldr	r2, [pc, #416]	; (8006c08 <DMA_SetConfig+0x258>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d027      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a67      	ldr	r2, [pc, #412]	; (8006c0c <DMA_SetConfig+0x25c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a65      	ldr	r2, [pc, #404]	; (8006c10 <DMA_SetConfig+0x260>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01d      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a64      	ldr	r2, [pc, #400]	; (8006c14 <DMA_SetConfig+0x264>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a62      	ldr	r2, [pc, #392]	; (8006c18 <DMA_SetConfig+0x268>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a61      	ldr	r2, [pc, #388]	; (8006c1c <DMA_SetConfig+0x26c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a5f      	ldr	r2, [pc, #380]	; (8006c20 <DMA_SetConfig+0x270>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a5e      	ldr	r2, [pc, #376]	; (8006c24 <DMA_SetConfig+0x274>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <DMA_SetConfig+0x10a>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a5c      	ldr	r2, [pc, #368]	; (8006c28 <DMA_SetConfig+0x278>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d101      	bne.n	8006abe <DMA_SetConfig+0x10e>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <DMA_SetConfig+0x110>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00d      	beq.n	8006ae0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006acc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ade:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a39      	ldr	r2, [pc, #228]	; (8006bcc <DMA_SetConfig+0x21c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d04a      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a38      	ldr	r2, [pc, #224]	; (8006bd0 <DMA_SetConfig+0x220>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d045      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a36      	ldr	r2, [pc, #216]	; (8006bd4 <DMA_SetConfig+0x224>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d040      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a35      	ldr	r2, [pc, #212]	; (8006bd8 <DMA_SetConfig+0x228>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d03b      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a33      	ldr	r2, [pc, #204]	; (8006bdc <DMA_SetConfig+0x22c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d036      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a32      	ldr	r2, [pc, #200]	; (8006be0 <DMA_SetConfig+0x230>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d031      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a30      	ldr	r2, [pc, #192]	; (8006be4 <DMA_SetConfig+0x234>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d02c      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a2f      	ldr	r2, [pc, #188]	; (8006be8 <DMA_SetConfig+0x238>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d027      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a2d      	ldr	r2, [pc, #180]	; (8006bec <DMA_SetConfig+0x23c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2c      	ldr	r2, [pc, #176]	; (8006bf0 <DMA_SetConfig+0x240>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d01d      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2a      	ldr	r2, [pc, #168]	; (8006bf4 <DMA_SetConfig+0x244>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a29      	ldr	r2, [pc, #164]	; (8006bf8 <DMA_SetConfig+0x248>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a27      	ldr	r2, [pc, #156]	; (8006bfc <DMA_SetConfig+0x24c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a26      	ldr	r2, [pc, #152]	; (8006c00 <DMA_SetConfig+0x250>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a24      	ldr	r2, [pc, #144]	; (8006c04 <DMA_SetConfig+0x254>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <DMA_SetConfig+0x1d0>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a23      	ldr	r2, [pc, #140]	; (8006c08 <DMA_SetConfig+0x258>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <DMA_SetConfig+0x1d4>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <DMA_SetConfig+0x1d6>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d059      	beq.n	8006c3e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	223f      	movs	r2, #63	; 0x3f
 8006b94:	409a      	lsls	r2, r3
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ba8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b40      	cmp	r3, #64	; 0x40
 8006bb8:	d138      	bne.n	8006c2c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bca:	e0ae      	b.n	8006d2a <DMA_SetConfig+0x37a>
 8006bcc:	40020010 	.word	0x40020010
 8006bd0:	40020028 	.word	0x40020028
 8006bd4:	40020040 	.word	0x40020040
 8006bd8:	40020058 	.word	0x40020058
 8006bdc:	40020070 	.word	0x40020070
 8006be0:	40020088 	.word	0x40020088
 8006be4:	400200a0 	.word	0x400200a0
 8006be8:	400200b8 	.word	0x400200b8
 8006bec:	40020410 	.word	0x40020410
 8006bf0:	40020428 	.word	0x40020428
 8006bf4:	40020440 	.word	0x40020440
 8006bf8:	40020458 	.word	0x40020458
 8006bfc:	40020470 	.word	0x40020470
 8006c00:	40020488 	.word	0x40020488
 8006c04:	400204a0 	.word	0x400204a0
 8006c08:	400204b8 	.word	0x400204b8
 8006c0c:	58025408 	.word	0x58025408
 8006c10:	5802541c 	.word	0x5802541c
 8006c14:	58025430 	.word	0x58025430
 8006c18:	58025444 	.word	0x58025444
 8006c1c:	58025458 	.word	0x58025458
 8006c20:	5802546c 	.word	0x5802546c
 8006c24:	58025480 	.word	0x58025480
 8006c28:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]
}
 8006c3c:	e075      	b.n	8006d2a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a3d      	ldr	r2, [pc, #244]	; (8006d38 <DMA_SetConfig+0x388>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d04a      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a3b      	ldr	r2, [pc, #236]	; (8006d3c <DMA_SetConfig+0x38c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d045      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a3a      	ldr	r2, [pc, #232]	; (8006d40 <DMA_SetConfig+0x390>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d040      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a38      	ldr	r2, [pc, #224]	; (8006d44 <DMA_SetConfig+0x394>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d03b      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a37      	ldr	r2, [pc, #220]	; (8006d48 <DMA_SetConfig+0x398>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d036      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a35      	ldr	r2, [pc, #212]	; (8006d4c <DMA_SetConfig+0x39c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d031      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a34      	ldr	r2, [pc, #208]	; (8006d50 <DMA_SetConfig+0x3a0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d02c      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a32      	ldr	r2, [pc, #200]	; (8006d54 <DMA_SetConfig+0x3a4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d027      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a31      	ldr	r2, [pc, #196]	; (8006d58 <DMA_SetConfig+0x3a8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d022      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a2f      	ldr	r2, [pc, #188]	; (8006d5c <DMA_SetConfig+0x3ac>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01d      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a2e      	ldr	r2, [pc, #184]	; (8006d60 <DMA_SetConfig+0x3b0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d018      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a2c      	ldr	r2, [pc, #176]	; (8006d64 <DMA_SetConfig+0x3b4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a2b      	ldr	r2, [pc, #172]	; (8006d68 <DMA_SetConfig+0x3b8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00e      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a29      	ldr	r2, [pc, #164]	; (8006d6c <DMA_SetConfig+0x3bc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d009      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a28      	ldr	r2, [pc, #160]	; (8006d70 <DMA_SetConfig+0x3c0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d004      	beq.n	8006cde <DMA_SetConfig+0x32e>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a26      	ldr	r2, [pc, #152]	; (8006d74 <DMA_SetConfig+0x3c4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d101      	bne.n	8006ce2 <DMA_SetConfig+0x332>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <DMA_SetConfig+0x334>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d020      	beq.n	8006d2a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cec:	f003 031f 	and.w	r3, r3, #31
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	409a      	lsls	r2, r3
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	d108      	bne.n	8006d1a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	60da      	str	r2, [r3, #12]
}
 8006d18:	e007      	b.n	8006d2a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	60da      	str	r2, [r3, #12]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	48022c08 	.word	0x48022c08
 8006d3c:	48022c1c 	.word	0x48022c1c
 8006d40:	48022c30 	.word	0x48022c30
 8006d44:	48022c44 	.word	0x48022c44
 8006d48:	48022c58 	.word	0x48022c58
 8006d4c:	48022c6c 	.word	0x48022c6c
 8006d50:	48022c80 	.word	0x48022c80
 8006d54:	48022c94 	.word	0x48022c94
 8006d58:	58025408 	.word	0x58025408
 8006d5c:	5802541c 	.word	0x5802541c
 8006d60:	58025430 	.word	0x58025430
 8006d64:	58025444 	.word	0x58025444
 8006d68:	58025458 	.word	0x58025458
 8006d6c:	5802546c 	.word	0x5802546c
 8006d70:	58025480 	.word	0x58025480
 8006d74:	58025494 	.word	0x58025494

08006d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a42      	ldr	r2, [pc, #264]	; (8006e90 <DMA_CalcBaseAndBitshift+0x118>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d04a      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a41      	ldr	r2, [pc, #260]	; (8006e94 <DMA_CalcBaseAndBitshift+0x11c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d045      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a3f      	ldr	r2, [pc, #252]	; (8006e98 <DMA_CalcBaseAndBitshift+0x120>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d040      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a3e      	ldr	r2, [pc, #248]	; (8006e9c <DMA_CalcBaseAndBitshift+0x124>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d03b      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a3c      	ldr	r2, [pc, #240]	; (8006ea0 <DMA_CalcBaseAndBitshift+0x128>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d036      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a3b      	ldr	r2, [pc, #236]	; (8006ea4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d031      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a39      	ldr	r2, [pc, #228]	; (8006ea8 <DMA_CalcBaseAndBitshift+0x130>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d02c      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a38      	ldr	r2, [pc, #224]	; (8006eac <DMA_CalcBaseAndBitshift+0x134>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d027      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a36      	ldr	r2, [pc, #216]	; (8006eb0 <DMA_CalcBaseAndBitshift+0x138>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d022      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a35      	ldr	r2, [pc, #212]	; (8006eb4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d01d      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a33      	ldr	r2, [pc, #204]	; (8006eb8 <DMA_CalcBaseAndBitshift+0x140>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d018      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a32      	ldr	r2, [pc, #200]	; (8006ebc <DMA_CalcBaseAndBitshift+0x144>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d013      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a30      	ldr	r2, [pc, #192]	; (8006ec0 <DMA_CalcBaseAndBitshift+0x148>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00e      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2f      	ldr	r2, [pc, #188]	; (8006ec4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a2d      	ldr	r2, [pc, #180]	; (8006ec8 <DMA_CalcBaseAndBitshift+0x150>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <DMA_CalcBaseAndBitshift+0xa8>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2c      	ldr	r2, [pc, #176]	; (8006ecc <DMA_CalcBaseAndBitshift+0x154>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d101      	bne.n	8006e24 <DMA_CalcBaseAndBitshift+0xac>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <DMA_CalcBaseAndBitshift+0xae>
 8006e24:	2300      	movs	r3, #0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d024      	beq.n	8006e74 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	3b10      	subs	r3, #16
 8006e32:	4a27      	ldr	r2, [pc, #156]	; (8006ed0 <DMA_CalcBaseAndBitshift+0x158>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	091b      	lsrs	r3, r3, #4
 8006e3a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	4a24      	ldr	r2, [pc, #144]	; (8006ed4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006e44:	5cd3      	ldrb	r3, [r2, r3]
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d908      	bls.n	8006e64 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	4b1f      	ldr	r3, [pc, #124]	; (8006ed8 <DMA_CalcBaseAndBitshift+0x160>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	1d1a      	adds	r2, r3, #4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	659a      	str	r2, [r3, #88]	; 0x58
 8006e62:	e00d      	b.n	8006e80 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ed8 <DMA_CalcBaseAndBitshift+0x160>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6593      	str	r3, [r2, #88]	; 0x58
 8006e72:	e005      	b.n	8006e80 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40020010 	.word	0x40020010
 8006e94:	40020028 	.word	0x40020028
 8006e98:	40020040 	.word	0x40020040
 8006e9c:	40020058 	.word	0x40020058
 8006ea0:	40020070 	.word	0x40020070
 8006ea4:	40020088 	.word	0x40020088
 8006ea8:	400200a0 	.word	0x400200a0
 8006eac:	400200b8 	.word	0x400200b8
 8006eb0:	40020410 	.word	0x40020410
 8006eb4:	40020428 	.word	0x40020428
 8006eb8:	40020440 	.word	0x40020440
 8006ebc:	40020458 	.word	0x40020458
 8006ec0:	40020470 	.word	0x40020470
 8006ec4:	40020488 	.word	0x40020488
 8006ec8:	400204a0 	.word	0x400204a0
 8006ecc:	400204b8 	.word	0x400204b8
 8006ed0:	aaaaaaab 	.word	0xaaaaaaab
 8006ed4:	08012f24 	.word	0x08012f24
 8006ed8:	fffffc00 	.word	0xfffffc00

08006edc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d120      	bne.n	8006f32 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d858      	bhi.n	8006faa <DMA_CheckFifoParam+0xce>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <DMA_CheckFifoParam+0x24>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f11 	.word	0x08006f11
 8006f04:	08006f23 	.word	0x08006f23
 8006f08:	08006f11 	.word	0x08006f11
 8006f0c:	08006fab 	.word	0x08006fab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d048      	beq.n	8006fae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f20:	e045      	b.n	8006fae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f2a:	d142      	bne.n	8006fb2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f30:	e03f      	b.n	8006fb2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3a:	d123      	bne.n	8006f84 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d838      	bhi.n	8006fb6 <DMA_CheckFifoParam+0xda>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <DMA_CheckFifoParam+0x70>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006f5d 	.word	0x08006f5d
 8006f50:	08006f63 	.word	0x08006f63
 8006f54:	08006f5d 	.word	0x08006f5d
 8006f58:	08006f75 	.word	0x08006f75
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	73fb      	strb	r3, [r7, #15]
        break;
 8006f60:	e030      	b.n	8006fc4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d025      	beq.n	8006fba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f72:	e022      	b.n	8006fba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f7c:	d11f      	bne.n	8006fbe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f82:	e01c      	b.n	8006fbe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d902      	bls.n	8006f92 <DMA_CheckFifoParam+0xb6>
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d003      	beq.n	8006f98 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006f90:	e018      	b.n	8006fc4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	73fb      	strb	r3, [r7, #15]
        break;
 8006f96:	e015      	b.n	8006fc4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00e      	beq.n	8006fc2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa8:	e00b      	b.n	8006fc2 <DMA_CheckFifoParam+0xe6>
        break;
 8006faa:	bf00      	nop
 8006fac:	e00a      	b.n	8006fc4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fae:	bf00      	nop
 8006fb0:	e008      	b.n	8006fc4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fb2:	bf00      	nop
 8006fb4:	e006      	b.n	8006fc4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fb6:	bf00      	nop
 8006fb8:	e004      	b.n	8006fc4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fba:	bf00      	nop
 8006fbc:	e002      	b.n	8006fc4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fbe:	bf00      	nop
 8006fc0:	e000      	b.n	8006fc4 <DMA_CheckFifoParam+0xe8>
    break;
 8006fc2:	bf00      	nop
    }
  }

  return status;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop

08006fd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a38      	ldr	r2, [pc, #224]	; (80070c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d022      	beq.n	8007032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a36      	ldr	r2, [pc, #216]	; (80070cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a35      	ldr	r2, [pc, #212]	; (80070d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d018      	beq.n	8007032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a33      	ldr	r2, [pc, #204]	; (80070d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a32      	ldr	r2, [pc, #200]	; (80070d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a30      	ldr	r2, [pc, #192]	; (80070dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2f      	ldr	r2, [pc, #188]	; (80070e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a2d      	ldr	r2, [pc, #180]	; (80070e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d101      	bne.n	8007036 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d01a      	beq.n	8007072 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	3b08      	subs	r3, #8
 8007044:	4a28      	ldr	r2, [pc, #160]	; (80070e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007046:	fba2 2303 	umull	r2, r3, r2, r3
 800704a:	091b      	lsrs	r3, r3, #4
 800704c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4b26      	ldr	r3, [pc, #152]	; (80070ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	461a      	mov	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007060:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f003 031f 	and.w	r3, r3, #31
 8007068:	2201      	movs	r2, #1
 800706a:	409a      	lsls	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007070:	e024      	b.n	80070bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	3b10      	subs	r3, #16
 800707a:	4a1e      	ldr	r2, [pc, #120]	; (80070f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	091b      	lsrs	r3, r3, #4
 8007082:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d806      	bhi.n	800709a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4a1b      	ldr	r2, [pc, #108]	; (80070fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d902      	bls.n	800709a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3308      	adds	r3, #8
 8007098:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4b18      	ldr	r3, [pc, #96]	; (8007100 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a16      	ldr	r2, [pc, #88]	; (8007104 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80070ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2201      	movs	r2, #1
 80070b6:	409a      	lsls	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070bc:	bf00      	nop
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	58025408 	.word	0x58025408
 80070cc:	5802541c 	.word	0x5802541c
 80070d0:	58025430 	.word	0x58025430
 80070d4:	58025444 	.word	0x58025444
 80070d8:	58025458 	.word	0x58025458
 80070dc:	5802546c 	.word	0x5802546c
 80070e0:	58025480 	.word	0x58025480
 80070e4:	58025494 	.word	0x58025494
 80070e8:	cccccccd 	.word	0xcccccccd
 80070ec:	16009600 	.word	0x16009600
 80070f0:	58025880 	.word	0x58025880
 80070f4:	aaaaaaab 	.word	0xaaaaaaab
 80070f8:	400204b8 	.word	0x400204b8
 80070fc:	4002040f 	.word	0x4002040f
 8007100:	10008200 	.word	0x10008200
 8007104:	40020880 	.word	0x40020880

08007108 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d04a      	beq.n	80071b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b08      	cmp	r3, #8
 8007122:	d847      	bhi.n	80071b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d022      	beq.n	8007174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a24      	ldr	r2, [pc, #144]	; (80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d01d      	beq.n	8007174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a22      	ldr	r2, [pc, #136]	; (80071c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d018      	beq.n	8007174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a21      	ldr	r2, [pc, #132]	; (80071cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d013      	beq.n	8007174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00e      	beq.n	8007174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a1e      	ldr	r2, [pc, #120]	; (80071d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d009      	beq.n	8007174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1c      	ldr	r2, [pc, #112]	; (80071d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d004      	beq.n	8007174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1b      	ldr	r2, [pc, #108]	; (80071dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d101      	bne.n	8007178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007178:	2300      	movs	r3, #0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4b17      	ldr	r3, [pc, #92]	; (80071e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	461a      	mov	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a15      	ldr	r2, [pc, #84]	; (80071e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007190:	671a      	str	r2, [r3, #112]	; 0x70
 8007192:	e009      	b.n	80071a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4b14      	ldr	r3, [pc, #80]	; (80071e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	461a      	mov	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a11      	ldr	r2, [pc, #68]	; (80071ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80071a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	2201      	movs	r2, #1
 80071ae:	409a      	lsls	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	58025408 	.word	0x58025408
 80071c4:	5802541c 	.word	0x5802541c
 80071c8:	58025430 	.word	0x58025430
 80071cc:	58025444 	.word	0x58025444
 80071d0:	58025458 	.word	0x58025458
 80071d4:	5802546c 	.word	0x5802546c
 80071d8:	58025480 	.word	0x58025480
 80071dc:	58025494 	.word	0x58025494
 80071e0:	1600963f 	.word	0x1600963f
 80071e4:	58025940 	.word	0x58025940
 80071e8:	1000823f 	.word	0x1000823f
 80071ec:	40020940 	.word	0x40020940

080071f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e04f      	b.n	80072a2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d106      	bne.n	800721c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f84e 	bl	80072b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b20      	ldr	r3, [pc, #128]	; (80072ac <HAL_DMA2D_Init+0xbc>)
 800722c:	4013      	ands	r3, r2
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6851      	ldr	r1, [r2, #4]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	69d2      	ldr	r2, [r2, #28]
 8007236:	4311      	orrs	r1, r2
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	430b      	orrs	r3, r1
 800723e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007246:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <HAL_DMA2D_Init+0xc0>)
 8007248:	4013      	ands	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6891      	ldr	r1, [r2, #8]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6992      	ldr	r2, [r2, #24]
 8007252:	4311      	orrs	r1, r2
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	430b      	orrs	r3, r1
 800725a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <HAL_DMA2D_Init+0xc4>)
 8007264:	4013      	ands	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	68d1      	ldr	r1, [r2, #12]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6812      	ldr	r2, [r2, #0]
 800726e:	430b      	orrs	r3, r1
 8007270:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007278:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	051a      	lsls	r2, r3, #20
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	055b      	lsls	r3, r3, #21
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	fff8ffbf 	.word	0xfff8ffbf
 80072b0:	fffffef8 	.word	0xfffffef8
 80072b4:	ffff0000 	.word	0xffff0000

080072b8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d101      	bne.n	80072f0 <HAL_DMA2D_ConfigLayer+0x24>
 80072ec:	2302      	movs	r3, #2
 80072ee:	e092      	b.n	8007416 <HAL_DMA2D_ConfigLayer+0x14a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	4613      	mov	r3, r2
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	3328      	adds	r3, #40	; 0x28
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	4413      	add	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007324:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800732c:	4313      	orrs	r3, r2
 800732e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007330:	4b3c      	ldr	r3, [pc, #240]	; (8007424 <HAL_DMA2D_ConfigLayer+0x158>)
 8007332:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b0a      	cmp	r3, #10
 800733a:	d003      	beq.n	8007344 <HAL_DMA2D_ConfigLayer+0x78>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2b09      	cmp	r3, #9
 8007342:	d107      	bne.n	8007354 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	e005      	b.n	8007360 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	061b      	lsls	r3, r3, #24
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d120      	bne.n	80073a8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	43db      	mvns	r3, r3
 8007370:	ea02 0103 	and.w	r1, r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	430a      	orrs	r2, r1
 800737c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b0a      	cmp	r3, #10
 800738e:	d003      	beq.n	8007398 <HAL_DMA2D_ConfigLayer+0xcc>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b09      	cmp	r3, #9
 8007396:	d135      	bne.n	8007404 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80073a4:	629a      	str	r2, [r3, #40]	; 0x28
 80073a6:	e02d      	b.n	8007404 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	2b0b      	cmp	r3, #11
 80073ae:	d109      	bne.n	80073c4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	049b      	lsls	r3, r3, #18
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80073c2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69da      	ldr	r2, [r3, #28]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	43db      	mvns	r3, r3
 80073ce:	ea02 0103 	and.w	r1, r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	430a      	orrs	r2, r1
 80073da:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2b0a      	cmp	r3, #10
 80073ec:	d003      	beq.n	80073f6 <HAL_DMA2D_ConfigLayer+0x12a>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b09      	cmp	r3, #9
 80073f4:	d106      	bne.n	8007404 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007402:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	ff33000f 	.word	0xff33000f

08007428 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	2b80      	cmp	r3, #128	; 0x80
 8007440:	d105      	bne.n	800744e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e315      	b.n	8007a7a <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8007458:	2302      	movs	r3, #2
 800745a:	e30e      	b.n	8007a7a <HAL_DMAEx_MultiBufferStart_IT+0x652>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	f040 82fd 	bne.w	8007a6c <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2202      	movs	r2, #2
 8007476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a82      	ldr	r2, [pc, #520]	; (8007690 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d04a      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a81      	ldr	r2, [pc, #516]	; (8007694 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d045      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a7f      	ldr	r2, [pc, #508]	; (8007698 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d040      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a7e      	ldr	r2, [pc, #504]	; (800769c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d03b      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a7c      	ldr	r2, [pc, #496]	; (80076a0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d036      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a7b      	ldr	r2, [pc, #492]	; (80076a4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d031      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a79      	ldr	r2, [pc, #484]	; (80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d02c      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a78      	ldr	r2, [pc, #480]	; (80076ac <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d027      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a76      	ldr	r2, [pc, #472]	; (80076b0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d022      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a75      	ldr	r2, [pc, #468]	; (80076b4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d01d      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a73      	ldr	r2, [pc, #460]	; (80076b8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d018      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a72      	ldr	r2, [pc, #456]	; (80076bc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d013      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a70      	ldr	r2, [pc, #448]	; (80076c0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00e      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a6f      	ldr	r2, [pc, #444]	; (80076c4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d009      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a6d      	ldr	r2, [pc, #436]	; (80076c8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a6c      	ldr	r2, [pc, #432]	; (80076cc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d101      	bne.n	8007524 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8007524:	2300      	movs	r3, #0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d018      	beq.n	800755c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007538:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007546:	3308      	adds	r3, #8
 8007548:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754e:	f003 031f 	and.w	r3, r3, #31
 8007552:	223f      	movs	r2, #63	; 0x3f
 8007554:	409a      	lsls	r2, r3
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	e018      	b.n	800758e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6819      	ldr	r1, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	f248 0320 	movw	r3, #32800	; 0x8020
 800756a:	430b      	orrs	r3, r1
 800756c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757a:	3304      	adds	r3, #4
 800757c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	2201      	movs	r2, #1
 8007588:	409a      	lsls	r2, r3
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fb41 	bl	8007c1c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a3c      	ldr	r2, [pc, #240]	; (8007690 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d072      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a3a      	ldr	r2, [pc, #232]	; (8007694 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d06d      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a39      	ldr	r2, [pc, #228]	; (8007698 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d068      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a37      	ldr	r2, [pc, #220]	; (800769c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d063      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a36      	ldr	r2, [pc, #216]	; (80076a0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d05e      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a34      	ldr	r2, [pc, #208]	; (80076a4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d059      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a33      	ldr	r2, [pc, #204]	; (80076a8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d054      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a31      	ldr	r2, [pc, #196]	; (80076ac <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d04f      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a30      	ldr	r2, [pc, #192]	; (80076b0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d04a      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a2e      	ldr	r2, [pc, #184]	; (80076b4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d045      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a2d      	ldr	r2, [pc, #180]	; (80076b8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d040      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a2b      	ldr	r2, [pc, #172]	; (80076bc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d03b      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a2a      	ldr	r2, [pc, #168]	; (80076c0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d036      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a28      	ldr	r2, [pc, #160]	; (80076c4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d031      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a27      	ldr	r2, [pc, #156]	; (80076c8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d02c      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a25      	ldr	r2, [pc, #148]	; (80076cc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d027      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a24      	ldr	r2, [pc, #144]	; (80076d0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d022      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a22      	ldr	r2, [pc, #136]	; (80076d4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d01d      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a21      	ldr	r2, [pc, #132]	; (80076d8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d018      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1f      	ldr	r2, [pc, #124]	; (80076dc <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d013      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a1e      	ldr	r2, [pc, #120]	; (80076e0 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00e      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1c      	ldr	r2, [pc, #112]	; (80076e4 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d009      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1b      	ldr	r2, [pc, #108]	; (80076e8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d004      	beq.n	800768a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a19      	ldr	r2, [pc, #100]	; (80076ec <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d132      	bne.n	80076f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800768a:	2301      	movs	r3, #1
 800768c:	e031      	b.n	80076f2 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800768e:	bf00      	nop
 8007690:	40020010 	.word	0x40020010
 8007694:	40020028 	.word	0x40020028
 8007698:	40020040 	.word	0x40020040
 800769c:	40020058 	.word	0x40020058
 80076a0:	40020070 	.word	0x40020070
 80076a4:	40020088 	.word	0x40020088
 80076a8:	400200a0 	.word	0x400200a0
 80076ac:	400200b8 	.word	0x400200b8
 80076b0:	40020410 	.word	0x40020410
 80076b4:	40020428 	.word	0x40020428
 80076b8:	40020440 	.word	0x40020440
 80076bc:	40020458 	.word	0x40020458
 80076c0:	40020470 	.word	0x40020470
 80076c4:	40020488 	.word	0x40020488
 80076c8:	400204a0 	.word	0x400204a0
 80076cc:	400204b8 	.word	0x400204b8
 80076d0:	58025408 	.word	0x58025408
 80076d4:	5802541c 	.word	0x5802541c
 80076d8:	58025430 	.word	0x58025430
 80076dc:	58025444 	.word	0x58025444
 80076e0:	58025458 	.word	0x58025458
 80076e4:	5802546c 	.word	0x5802546c
 80076e8:	58025480 	.word	0x58025480
 80076ec:	58025494 	.word	0x58025494
 80076f0:	2300      	movs	r3, #0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00d      	beq.n	8007712 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076fe:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d004      	beq.n	8007712 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007710:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a3b      	ldr	r2, [pc, #236]	; (8007804 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d04a      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a39      	ldr	r2, [pc, #228]	; (8007808 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d045      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a38      	ldr	r2, [pc, #224]	; (800780c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d040      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a36      	ldr	r2, [pc, #216]	; (8007810 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d03b      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a35      	ldr	r2, [pc, #212]	; (8007814 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d036      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a33      	ldr	r2, [pc, #204]	; (8007818 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d031      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a32      	ldr	r2, [pc, #200]	; (800781c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d02c      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a30      	ldr	r2, [pc, #192]	; (8007820 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d027      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a2f      	ldr	r2, [pc, #188]	; (8007824 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d022      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a2d      	ldr	r2, [pc, #180]	; (8007828 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01d      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a2c      	ldr	r2, [pc, #176]	; (800782c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d018      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a2a      	ldr	r2, [pc, #168]	; (8007830 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d013      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a29      	ldr	r2, [pc, #164]	; (8007834 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d00e      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a27      	ldr	r2, [pc, #156]	; (8007838 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d009      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a26      	ldr	r2, [pc, #152]	; (800783c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d004      	beq.n	80077b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a24      	ldr	r2, [pc, #144]	; (8007840 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d101      	bne.n	80077b6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d043      	beq.n	8007844 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f023 021e 	bic.w	r2, r3, #30
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0216 	orr.w	r2, r2, #22
 80077ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	695a      	ldr	r2, [r3, #20]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077de:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d103      	bne.n	80077f0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d043      	beq.n	8007878 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0208 	orr.w	r2, r2, #8
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	e03a      	b.n	8007878 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8007802:	bf00      	nop
 8007804:	40020010 	.word	0x40020010
 8007808:	40020028 	.word	0x40020028
 800780c:	40020040 	.word	0x40020040
 8007810:	40020058 	.word	0x40020058
 8007814:	40020070 	.word	0x40020070
 8007818:	40020088 	.word	0x40020088
 800781c:	400200a0 	.word	0x400200a0
 8007820:	400200b8 	.word	0x400200b8
 8007824:	40020410 	.word	0x40020410
 8007828:	40020428 	.word	0x40020428
 800782c:	40020440 	.word	0x40020440
 8007830:	40020458 	.word	0x40020458
 8007834:	40020470 	.word	0x40020470
 8007838:	40020488 	.word	0x40020488
 800783c:	400204a0 	.word	0x400204a0
 8007840:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f023 020e 	bic.w	r2, r3, #14
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 020a 	orr.w	r2, r2, #10
 8007856:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0204 	orr.w	r2, r2, #4
 8007876:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a81      	ldr	r2, [pc, #516]	; (8007a84 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d072      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a80      	ldr	r2, [pc, #512]	; (8007a88 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d06d      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a7e      	ldr	r2, [pc, #504]	; (8007a8c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d068      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a7d      	ldr	r2, [pc, #500]	; (8007a90 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d063      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a7b      	ldr	r2, [pc, #492]	; (8007a94 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d05e      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a7a      	ldr	r2, [pc, #488]	; (8007a98 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d059      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a78      	ldr	r2, [pc, #480]	; (8007a9c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d054      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a77      	ldr	r2, [pc, #476]	; (8007aa0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d04f      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a75      	ldr	r2, [pc, #468]	; (8007aa4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d04a      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a74      	ldr	r2, [pc, #464]	; (8007aa8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d045      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a72      	ldr	r2, [pc, #456]	; (8007aac <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d040      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a71      	ldr	r2, [pc, #452]	; (8007ab0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d03b      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a6f      	ldr	r2, [pc, #444]	; (8007ab4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d036      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a6e      	ldr	r2, [pc, #440]	; (8007ab8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d031      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a6c      	ldr	r2, [pc, #432]	; (8007abc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d02c      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a6b      	ldr	r2, [pc, #428]	; (8007ac0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d027      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a69      	ldr	r2, [pc, #420]	; (8007ac4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d022      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a68      	ldr	r2, [pc, #416]	; (8007ac8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d01d      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a66      	ldr	r2, [pc, #408]	; (8007acc <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d018      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a65      	ldr	r2, [pc, #404]	; (8007ad0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d013      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a63      	ldr	r2, [pc, #396]	; (8007ad4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00e      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a62      	ldr	r2, [pc, #392]	; (8007ad8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d009      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a60      	ldr	r2, [pc, #384]	; (8007adc <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d004      	beq.n	8007968 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a5f      	ldr	r2, [pc, #380]	; (8007ae0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d101      	bne.n	800796c <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <HAL_DMAEx_MultiBufferStart_IT+0x546>
 800796c:	2300      	movs	r3, #0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01a      	beq.n	80079a8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800798a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800798e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d007      	beq.n	80079a8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a35      	ldr	r2, [pc, #212]	; (8007a84 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d04a      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a34      	ldr	r2, [pc, #208]	; (8007a88 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d045      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a32      	ldr	r2, [pc, #200]	; (8007a8c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d040      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a31      	ldr	r2, [pc, #196]	; (8007a90 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d03b      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a2f      	ldr	r2, [pc, #188]	; (8007a94 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d036      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a2e      	ldr	r2, [pc, #184]	; (8007a98 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d031      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a2c      	ldr	r2, [pc, #176]	; (8007a9c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d02c      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a2b      	ldr	r2, [pc, #172]	; (8007aa0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d027      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a29      	ldr	r2, [pc, #164]	; (8007aa4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d022      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a28      	ldr	r2, [pc, #160]	; (8007aa8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d01d      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a26      	ldr	r2, [pc, #152]	; (8007aac <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d018      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a25      	ldr	r2, [pc, #148]	; (8007ab0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d013      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a23      	ldr	r2, [pc, #140]	; (8007ab4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d00e      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a22      	ldr	r2, [pc, #136]	; (8007ab8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d009      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a20      	ldr	r2, [pc, #128]	; (8007abc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d004      	beq.n	8007a48 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d108      	bne.n	8007a5a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0201 	orr.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	e00e      	b.n	8007a78 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f042 0201 	orr.w	r2, r2, #1
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	e005      	b.n	8007a78 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	40020010 	.word	0x40020010
 8007a88:	40020028 	.word	0x40020028
 8007a8c:	40020040 	.word	0x40020040
 8007a90:	40020058 	.word	0x40020058
 8007a94:	40020070 	.word	0x40020070
 8007a98:	40020088 	.word	0x40020088
 8007a9c:	400200a0 	.word	0x400200a0
 8007aa0:	400200b8 	.word	0x400200b8
 8007aa4:	40020410 	.word	0x40020410
 8007aa8:	40020428 	.word	0x40020428
 8007aac:	40020440 	.word	0x40020440
 8007ab0:	40020458 	.word	0x40020458
 8007ab4:	40020470 	.word	0x40020470
 8007ab8:	40020488 	.word	0x40020488
 8007abc:	400204a0 	.word	0x400204a0
 8007ac0:	400204b8 	.word	0x400204b8
 8007ac4:	58025408 	.word	0x58025408
 8007ac8:	5802541c 	.word	0x5802541c
 8007acc:	58025430 	.word	0x58025430
 8007ad0:	58025444 	.word	0x58025444
 8007ad4:	58025458 	.word	0x58025458
 8007ad8:	5802546c 	.word	0x5802546c
 8007adc:	58025480 	.word	0x58025480
 8007ae0:	58025494 	.word	0x58025494

08007ae4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a39      	ldr	r2, [pc, #228]	; (8007bdc <HAL_DMAEx_ChangeMemory+0xf8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d04a      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a37      	ldr	r2, [pc, #220]	; (8007be0 <HAL_DMAEx_ChangeMemory+0xfc>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d045      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a36      	ldr	r2, [pc, #216]	; (8007be4 <HAL_DMAEx_ChangeMemory+0x100>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d040      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a34      	ldr	r2, [pc, #208]	; (8007be8 <HAL_DMAEx_ChangeMemory+0x104>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d03b      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a33      	ldr	r2, [pc, #204]	; (8007bec <HAL_DMAEx_ChangeMemory+0x108>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d036      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a31      	ldr	r2, [pc, #196]	; (8007bf0 <HAL_DMAEx_ChangeMemory+0x10c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d031      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a30      	ldr	r2, [pc, #192]	; (8007bf4 <HAL_DMAEx_ChangeMemory+0x110>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d02c      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a2e      	ldr	r2, [pc, #184]	; (8007bf8 <HAL_DMAEx_ChangeMemory+0x114>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d027      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a2d      	ldr	r2, [pc, #180]	; (8007bfc <HAL_DMAEx_ChangeMemory+0x118>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d022      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a2b      	ldr	r2, [pc, #172]	; (8007c00 <HAL_DMAEx_ChangeMemory+0x11c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d01d      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a2a      	ldr	r2, [pc, #168]	; (8007c04 <HAL_DMAEx_ChangeMemory+0x120>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d018      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a28      	ldr	r2, [pc, #160]	; (8007c08 <HAL_DMAEx_ChangeMemory+0x124>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d013      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a27      	ldr	r2, [pc, #156]	; (8007c0c <HAL_DMAEx_ChangeMemory+0x128>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d00e      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a25      	ldr	r2, [pc, #148]	; (8007c10 <HAL_DMAEx_ChangeMemory+0x12c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d009      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a24      	ldr	r2, [pc, #144]	; (8007c14 <HAL_DMAEx_ChangeMemory+0x130>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d004      	beq.n	8007b92 <HAL_DMAEx_ChangeMemory+0xae>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a22      	ldr	r2, [pc, #136]	; (8007c18 <HAL_DMAEx_ChangeMemory+0x134>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d101      	bne.n	8007b96 <HAL_DMAEx_ChangeMemory+0xb2>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e000      	b.n	8007b98 <HAL_DMAEx_ChangeMemory+0xb4>
 8007b96:	2300      	movs	r3, #0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00c      	beq.n	8007bb6 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d104      	bne.n	8007bac <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	60da      	str	r2, [r3, #12]
 8007baa:	e010      	b.n	8007bce <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	611a      	str	r2, [r3, #16]
 8007bb4:	e00b      	b.n	8007bce <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d104      	bne.n	8007bc6 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	60da      	str	r2, [r3, #12]
 8007bc4:	e003      	b.n	8007bce <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	40020010 	.word	0x40020010
 8007be0:	40020028 	.word	0x40020028
 8007be4:	40020040 	.word	0x40020040
 8007be8:	40020058 	.word	0x40020058
 8007bec:	40020070 	.word	0x40020070
 8007bf0:	40020088 	.word	0x40020088
 8007bf4:	400200a0 	.word	0x400200a0
 8007bf8:	400200b8 	.word	0x400200b8
 8007bfc:	40020410 	.word	0x40020410
 8007c00:	40020428 	.word	0x40020428
 8007c04:	40020440 	.word	0x40020440
 8007c08:	40020458 	.word	0x40020458
 8007c0c:	40020470 	.word	0x40020470
 8007c10:	40020488 	.word	0x40020488
 8007c14:	400204a0 	.word	0x400204a0
 8007c18:	400204b8 	.word	0x400204b8

08007c1c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a46      	ldr	r2, [pc, #280]	; (8007d48 <DMA_MultiBufferSetConfig+0x12c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d04a      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a44      	ldr	r2, [pc, #272]	; (8007d4c <DMA_MultiBufferSetConfig+0x130>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d045      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a43      	ldr	r2, [pc, #268]	; (8007d50 <DMA_MultiBufferSetConfig+0x134>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d040      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a41      	ldr	r2, [pc, #260]	; (8007d54 <DMA_MultiBufferSetConfig+0x138>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d03b      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a40      	ldr	r2, [pc, #256]	; (8007d58 <DMA_MultiBufferSetConfig+0x13c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d036      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a3e      	ldr	r2, [pc, #248]	; (8007d5c <DMA_MultiBufferSetConfig+0x140>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d031      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a3d      	ldr	r2, [pc, #244]	; (8007d60 <DMA_MultiBufferSetConfig+0x144>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d02c      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a3b      	ldr	r2, [pc, #236]	; (8007d64 <DMA_MultiBufferSetConfig+0x148>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d027      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a3a      	ldr	r2, [pc, #232]	; (8007d68 <DMA_MultiBufferSetConfig+0x14c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d022      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a38      	ldr	r2, [pc, #224]	; (8007d6c <DMA_MultiBufferSetConfig+0x150>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d01d      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a37      	ldr	r2, [pc, #220]	; (8007d70 <DMA_MultiBufferSetConfig+0x154>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d018      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a35      	ldr	r2, [pc, #212]	; (8007d74 <DMA_MultiBufferSetConfig+0x158>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d013      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a34      	ldr	r2, [pc, #208]	; (8007d78 <DMA_MultiBufferSetConfig+0x15c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00e      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a32      	ldr	r2, [pc, #200]	; (8007d7c <DMA_MultiBufferSetConfig+0x160>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d009      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a31      	ldr	r2, [pc, #196]	; (8007d80 <DMA_MultiBufferSetConfig+0x164>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d004      	beq.n	8007cca <DMA_MultiBufferSetConfig+0xae>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a2f      	ldr	r2, [pc, #188]	; (8007d84 <DMA_MultiBufferSetConfig+0x168>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d101      	bne.n	8007cce <DMA_MultiBufferSetConfig+0xb2>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <DMA_MultiBufferSetConfig+0xb4>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d019      	beq.n	8007d08 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d108      	bne.n	8007cf6 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8007cf4:	e021      	b.n	8007d3a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	60da      	str	r2, [r3, #12]
}
 8007d06:	e018      	b.n	8007d3a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	2b40      	cmp	r3, #64	; 0x40
 8007d16:	d108      	bne.n	8007d2a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	60da      	str	r2, [r3, #12]
}
 8007d28:	e007      	b.n	8007d3a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	60da      	str	r2, [r3, #12]
}
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	40020010 	.word	0x40020010
 8007d4c:	40020028 	.word	0x40020028
 8007d50:	40020040 	.word	0x40020040
 8007d54:	40020058 	.word	0x40020058
 8007d58:	40020070 	.word	0x40020070
 8007d5c:	40020088 	.word	0x40020088
 8007d60:	400200a0 	.word	0x400200a0
 8007d64:	400200b8 	.word	0x400200b8
 8007d68:	40020410 	.word	0x40020410
 8007d6c:	40020428 	.word	0x40020428
 8007d70:	40020440 	.word	0x40020440
 8007d74:	40020458 	.word	0x40020458
 8007d78:	40020470 	.word	0x40020470
 8007d7c:	40020488 	.word	0x40020488
 8007d80:	400204a0 	.word	0x400204a0
 8007d84:	400204b8 	.word	0x400204b8

08007d88 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	460b      	mov	r3, r1
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e00a      	b.n	8007dba <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8007da4:	7afb      	ldrb	r3, [r7, #11]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	605a      	str	r2, [r3, #4]
      break;
 8007db0:	e002      	b.n	8007db8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	75fb      	strb	r3, [r7, #23]
      break;
 8007db6:	bf00      	nop
  }

  return status;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e003      	b.n	8007de2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007de0:	2300      	movs	r3, #0
  }
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b089      	sub	sp, #36	; 0x24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007dfe:	4b89      	ldr	r3, [pc, #548]	; (8008024 <HAL_GPIO_Init+0x234>)
 8007e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e02:	e194      	b.n	800812e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	2101      	movs	r1, #1
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e10:	4013      	ands	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 8186 	beq.w	8008128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f003 0303 	and.w	r3, r3, #3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d005      	beq.n	8007e34 <HAL_GPIO_Init+0x44>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f003 0303 	and.w	r3, r3, #3
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d130      	bne.n	8007e96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	2203      	movs	r2, #3
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	43db      	mvns	r3, r3
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	fa02 f303 	lsl.w	r3, r2, r3
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	43db      	mvns	r3, r3
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	4013      	ands	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	091b      	lsrs	r3, r3, #4
 8007e80:	f003 0201 	and.w	r2, r3, #1
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d017      	beq.n	8007ed2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	2203      	movs	r2, #3
 8007eae:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb2:	43db      	mvns	r3, r3
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d123      	bne.n	8007f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	08da      	lsrs	r2, r3, #3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3208      	adds	r2, #8
 8007ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	220f      	movs	r2, #15
 8007ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8007efa:	43db      	mvns	r3, r3
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	4013      	ands	r3, r2
 8007f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	08da      	lsrs	r2, r3, #3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3208      	adds	r2, #8
 8007f20:	69b9      	ldr	r1, [r7, #24]
 8007f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	2203      	movs	r2, #3
 8007f32:	fa02 f303 	lsl.w	r3, r2, r3
 8007f36:	43db      	mvns	r3, r3
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f003 0203 	and.w	r2, r3, #3
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 80e0 	beq.w	8008128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f68:	4b2f      	ldr	r3, [pc, #188]	; (8008028 <HAL_GPIO_Init+0x238>)
 8007f6a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007f6e:	4a2e      	ldr	r2, [pc, #184]	; (8008028 <HAL_GPIO_Init+0x238>)
 8007f70:	f043 0302 	orr.w	r3, r3, #2
 8007f74:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8007f78:	4b2b      	ldr	r3, [pc, #172]	; (8008028 <HAL_GPIO_Init+0x238>)
 8007f7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f86:	4a29      	ldr	r2, [pc, #164]	; (800802c <HAL_GPIO_Init+0x23c>)
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	089b      	lsrs	r3, r3, #2
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	f003 0303 	and.w	r3, r3, #3
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	220f      	movs	r2, #15
 8007f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa2:	43db      	mvns	r3, r3
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a20      	ldr	r2, [pc, #128]	; (8008030 <HAL_GPIO_Init+0x240>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d052      	beq.n	8008058 <HAL_GPIO_Init+0x268>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a1f      	ldr	r2, [pc, #124]	; (8008034 <HAL_GPIO_Init+0x244>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d031      	beq.n	800801e <HAL_GPIO_Init+0x22e>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a1e      	ldr	r2, [pc, #120]	; (8008038 <HAL_GPIO_Init+0x248>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d02b      	beq.n	800801a <HAL_GPIO_Init+0x22a>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a1d      	ldr	r2, [pc, #116]	; (800803c <HAL_GPIO_Init+0x24c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d025      	beq.n	8008016 <HAL_GPIO_Init+0x226>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a1c      	ldr	r2, [pc, #112]	; (8008040 <HAL_GPIO_Init+0x250>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d01f      	beq.n	8008012 <HAL_GPIO_Init+0x222>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a1b      	ldr	r2, [pc, #108]	; (8008044 <HAL_GPIO_Init+0x254>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d019      	beq.n	800800e <HAL_GPIO_Init+0x21e>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a1a      	ldr	r2, [pc, #104]	; (8008048 <HAL_GPIO_Init+0x258>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <HAL_GPIO_Init+0x21a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a19      	ldr	r2, [pc, #100]	; (800804c <HAL_GPIO_Init+0x25c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00d      	beq.n	8008006 <HAL_GPIO_Init+0x216>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a18      	ldr	r2, [pc, #96]	; (8008050 <HAL_GPIO_Init+0x260>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d007      	beq.n	8008002 <HAL_GPIO_Init+0x212>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a17      	ldr	r2, [pc, #92]	; (8008054 <HAL_GPIO_Init+0x264>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d101      	bne.n	8007ffe <HAL_GPIO_Init+0x20e>
 8007ffa:	2309      	movs	r3, #9
 8007ffc:	e02d      	b.n	800805a <HAL_GPIO_Init+0x26a>
 8007ffe:	230a      	movs	r3, #10
 8008000:	e02b      	b.n	800805a <HAL_GPIO_Init+0x26a>
 8008002:	2308      	movs	r3, #8
 8008004:	e029      	b.n	800805a <HAL_GPIO_Init+0x26a>
 8008006:	2307      	movs	r3, #7
 8008008:	e027      	b.n	800805a <HAL_GPIO_Init+0x26a>
 800800a:	2306      	movs	r3, #6
 800800c:	e025      	b.n	800805a <HAL_GPIO_Init+0x26a>
 800800e:	2305      	movs	r3, #5
 8008010:	e023      	b.n	800805a <HAL_GPIO_Init+0x26a>
 8008012:	2304      	movs	r3, #4
 8008014:	e021      	b.n	800805a <HAL_GPIO_Init+0x26a>
 8008016:	2303      	movs	r3, #3
 8008018:	e01f      	b.n	800805a <HAL_GPIO_Init+0x26a>
 800801a:	2302      	movs	r3, #2
 800801c:	e01d      	b.n	800805a <HAL_GPIO_Init+0x26a>
 800801e:	2301      	movs	r3, #1
 8008020:	e01b      	b.n	800805a <HAL_GPIO_Init+0x26a>
 8008022:	bf00      	nop
 8008024:	58000080 	.word	0x58000080
 8008028:	58024400 	.word	0x58024400
 800802c:	58000400 	.word	0x58000400
 8008030:	58020000 	.word	0x58020000
 8008034:	58020400 	.word	0x58020400
 8008038:	58020800 	.word	0x58020800
 800803c:	58020c00 	.word	0x58020c00
 8008040:	58021000 	.word	0x58021000
 8008044:	58021400 	.word	0x58021400
 8008048:	58021800 	.word	0x58021800
 800804c:	58021c00 	.word	0x58021c00
 8008050:	58022000 	.word	0x58022000
 8008054:	58022400 	.word	0x58022400
 8008058:	2300      	movs	r3, #0
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	f002 0203 	and.w	r2, r2, #3
 8008060:	0092      	lsls	r2, r2, #2
 8008062:	4093      	lsls	r3, r2
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	4313      	orrs	r3, r2
 8008068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800806a:	4938      	ldr	r1, [pc, #224]	; (800814c <HAL_GPIO_Init+0x35c>)
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	089b      	lsrs	r3, r3, #2
 8008070:	3302      	adds	r3, #2
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	43db      	mvns	r3, r3
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	4013      	ands	r3, r2
 8008088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800809e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80080a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	43db      	mvns	r3, r3
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	4013      	ands	r3, r2
 80080b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80080cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	43db      	mvns	r3, r3
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	4013      	ands	r3, r2
 80080e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	43db      	mvns	r3, r3
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	4013      	ands	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	3301      	adds	r3, #1
 800812c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	fa22 f303 	lsr.w	r3, r2, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	f47f ae63 	bne.w	8007e04 <HAL_GPIO_Init+0x14>
  }
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	3724      	adds	r7, #36	; 0x24
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	58000400 	.word	0x58000400

08008150 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800815e:	4b75      	ldr	r3, [pc, #468]	; (8008334 <HAL_GPIO_DeInit+0x1e4>)
 8008160:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008162:	e0d9      	b.n	8008318 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008164:	2201      	movs	r2, #1
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	4013      	ands	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 80cc 	beq.w	8008312 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800817a:	4a6f      	ldr	r2, [pc, #444]	; (8008338 <HAL_GPIO_DeInit+0x1e8>)
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	089b      	lsrs	r3, r3, #2
 8008180:	3302      	adds	r3, #2
 8008182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008186:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	220f      	movs	r2, #15
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	4013      	ands	r3, r2
 800819a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a67      	ldr	r2, [pc, #412]	; (800833c <HAL_GPIO_DeInit+0x1ec>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d037      	beq.n	8008214 <HAL_GPIO_DeInit+0xc4>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a66      	ldr	r2, [pc, #408]	; (8008340 <HAL_GPIO_DeInit+0x1f0>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d031      	beq.n	8008210 <HAL_GPIO_DeInit+0xc0>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a65      	ldr	r2, [pc, #404]	; (8008344 <HAL_GPIO_DeInit+0x1f4>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d02b      	beq.n	800820c <HAL_GPIO_DeInit+0xbc>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a64      	ldr	r2, [pc, #400]	; (8008348 <HAL_GPIO_DeInit+0x1f8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d025      	beq.n	8008208 <HAL_GPIO_DeInit+0xb8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a63      	ldr	r2, [pc, #396]	; (800834c <HAL_GPIO_DeInit+0x1fc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d01f      	beq.n	8008204 <HAL_GPIO_DeInit+0xb4>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a62      	ldr	r2, [pc, #392]	; (8008350 <HAL_GPIO_DeInit+0x200>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d019      	beq.n	8008200 <HAL_GPIO_DeInit+0xb0>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a61      	ldr	r2, [pc, #388]	; (8008354 <HAL_GPIO_DeInit+0x204>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d013      	beq.n	80081fc <HAL_GPIO_DeInit+0xac>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a60      	ldr	r2, [pc, #384]	; (8008358 <HAL_GPIO_DeInit+0x208>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00d      	beq.n	80081f8 <HAL_GPIO_DeInit+0xa8>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a5f      	ldr	r2, [pc, #380]	; (800835c <HAL_GPIO_DeInit+0x20c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d007      	beq.n	80081f4 <HAL_GPIO_DeInit+0xa4>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a5e      	ldr	r2, [pc, #376]	; (8008360 <HAL_GPIO_DeInit+0x210>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d101      	bne.n	80081f0 <HAL_GPIO_DeInit+0xa0>
 80081ec:	2309      	movs	r3, #9
 80081ee:	e012      	b.n	8008216 <HAL_GPIO_DeInit+0xc6>
 80081f0:	230a      	movs	r3, #10
 80081f2:	e010      	b.n	8008216 <HAL_GPIO_DeInit+0xc6>
 80081f4:	2308      	movs	r3, #8
 80081f6:	e00e      	b.n	8008216 <HAL_GPIO_DeInit+0xc6>
 80081f8:	2307      	movs	r3, #7
 80081fa:	e00c      	b.n	8008216 <HAL_GPIO_DeInit+0xc6>
 80081fc:	2306      	movs	r3, #6
 80081fe:	e00a      	b.n	8008216 <HAL_GPIO_DeInit+0xc6>
 8008200:	2305      	movs	r3, #5
 8008202:	e008      	b.n	8008216 <HAL_GPIO_DeInit+0xc6>
 8008204:	2304      	movs	r3, #4
 8008206:	e006      	b.n	8008216 <HAL_GPIO_DeInit+0xc6>
 8008208:	2303      	movs	r3, #3
 800820a:	e004      	b.n	8008216 <HAL_GPIO_DeInit+0xc6>
 800820c:	2302      	movs	r3, #2
 800820e:	e002      	b.n	8008216 <HAL_GPIO_DeInit+0xc6>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <HAL_GPIO_DeInit+0xc6>
 8008214:	2300      	movs	r3, #0
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	f002 0203 	and.w	r2, r2, #3
 800821c:	0092      	lsls	r2, r2, #2
 800821e:	4093      	lsls	r3, r2
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	429a      	cmp	r2, r3
 8008224:	d136      	bne.n	8008294 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	43db      	mvns	r3, r3
 800822e:	401a      	ands	r2, r3
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	43db      	mvns	r3, r3
 800823c:	401a      	ands	r2, r3
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	43db      	mvns	r3, r3
 800824c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008250:	4013      	ands	r3, r2
 8008252:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	43db      	mvns	r3, r3
 800825e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008262:	4013      	ands	r3, r2
 8008264:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	220f      	movs	r2, #15
 8008270:	fa02 f303 	lsl.w	r3, r2, r3
 8008274:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008276:	4a30      	ldr	r2, [pc, #192]	; (8008338 <HAL_GPIO_DeInit+0x1e8>)
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	089b      	lsrs	r3, r3, #2
 800827c:	3302      	adds	r3, #2
 800827e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	43da      	mvns	r2, r3
 8008286:	482c      	ldr	r0, [pc, #176]	; (8008338 <HAL_GPIO_DeInit+0x1e8>)
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	089b      	lsrs	r3, r3, #2
 800828c:	400a      	ands	r2, r1
 800828e:	3302      	adds	r3, #2
 8008290:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	2103      	movs	r1, #3
 800829e:	fa01 f303 	lsl.w	r3, r1, r3
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	08da      	lsrs	r2, r3, #3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3208      	adds	r2, #8
 80082b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	220f      	movs	r2, #15
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	43db      	mvns	r3, r3
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	08d2      	lsrs	r2, r2, #3
 80082c8:	4019      	ands	r1, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3208      	adds	r2, #8
 80082ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	2103      	movs	r1, #3
 80082dc:	fa01 f303 	lsl.w	r3, r1, r3
 80082e0:	43db      	mvns	r3, r3
 80082e2:	401a      	ands	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	2101      	movs	r1, #1
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	fa01 f303 	lsl.w	r3, r1, r3
 80082f4:	43db      	mvns	r3, r3
 80082f6:	401a      	ands	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	2103      	movs	r1, #3
 8008306:	fa01 f303 	lsl.w	r3, r1, r3
 800830a:	43db      	mvns	r3, r3
 800830c:	401a      	ands	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	3301      	adds	r3, #1
 8008316:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	f47f af1f 	bne.w	8008164 <HAL_GPIO_DeInit+0x14>
  }
}
 8008326:	bf00      	nop
 8008328:	bf00      	nop
 800832a:	371c      	adds	r7, #28
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	58000080 	.word	0x58000080
 8008338:	58000400 	.word	0x58000400
 800833c:	58020000 	.word	0x58020000
 8008340:	58020400 	.word	0x58020400
 8008344:	58020800 	.word	0x58020800
 8008348:	58020c00 	.word	0x58020c00
 800834c:	58021000 	.word	0x58021000
 8008350:	58021400 	.word	0x58021400
 8008354:	58021800 	.word	0x58021800
 8008358:	58021c00 	.word	0x58021c00
 800835c:	58022000 	.word	0x58022000
 8008360:	58022400 	.word	0x58022400

08008364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	807b      	strh	r3, [r7, #2]
 8008370:	4613      	mov	r3, r2
 8008372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008374:	787b      	ldrb	r3, [r7, #1]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800837a:	887a      	ldrh	r2, [r7, #2]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008380:	e003      	b.n	800838a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008382:	887b      	ldrh	r3, [r7, #2]
 8008384:	041a      	lsls	r2, r3, #16
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	619a      	str	r2, [r3, #24]
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
	...

08008398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e07f      	b.n	80084aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f8a9 	bl	8008516 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2224      	movs	r2, #36	; 0x24
 80083c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 0201 	bic.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80083e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d107      	bne.n	8008412 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800840e:	609a      	str	r2, [r3, #8]
 8008410:	e006      	b.n	8008420 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800841e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	2b02      	cmp	r3, #2
 8008426:	d104      	bne.n	8008432 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6859      	ldr	r1, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4b1d      	ldr	r3, [pc, #116]	; (80084b4 <HAL_I2C_Init+0x11c>)
 800843e:	430b      	orrs	r3, r1
 8008440:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	691a      	ldr	r2, [r3, #16]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	69d9      	ldr	r1, [r3, #28]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1a      	ldr	r2, [r3, #32]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	02008000 	.word	0x02008000

080084b8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e021      	b.n	800850e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2224      	movs	r2, #36	; 0x24
 80084ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0201 	bic.w	r2, r2, #1
 80084e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f821 	bl	800852a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af02      	add	r7, sp, #8
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	4608      	mov	r0, r1
 800854a:	4611      	mov	r1, r2
 800854c:	461a      	mov	r2, r3
 800854e:	4603      	mov	r3, r0
 8008550:	817b      	strh	r3, [r7, #10]
 8008552:	460b      	mov	r3, r1
 8008554:	813b      	strh	r3, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b20      	cmp	r3, #32
 8008564:	f040 80f9 	bne.w	800875a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <HAL_I2C_Mem_Write+0x34>
 800856e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800857a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e0ed      	b.n	800875c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <HAL_I2C_Mem_Write+0x4e>
 800858a:	2302      	movs	r3, #2
 800858c:	e0e6      	b.n	800875c <HAL_I2C_Mem_Write+0x21c>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008596:	f7fc fd5d 	bl	8005054 <HAL_GetTick>
 800859a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	2319      	movs	r3, #25
 80085a2:	2201      	movs	r2, #1
 80085a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fadd 	bl	8008b68 <I2C_WaitOnFlagUntilTimeout>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e0d1      	b.n	800875c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2221      	movs	r2, #33	; 0x21
 80085bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2240      	movs	r2, #64	; 0x40
 80085c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a3a      	ldr	r2, [r7, #32]
 80085d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085e0:	88f8      	ldrh	r0, [r7, #6]
 80085e2:	893a      	ldrh	r2, [r7, #8]
 80085e4:	8979      	ldrh	r1, [r7, #10]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	4603      	mov	r3, r0
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 f9ed 	bl	80089d0 <I2C_RequestMemoryWrite>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d005      	beq.n	8008608 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e0a9      	b.n	800875c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860c:	b29b      	uxth	r3, r3
 800860e:	2bff      	cmp	r3, #255	; 0xff
 8008610:	d90e      	bls.n	8008630 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	22ff      	movs	r2, #255	; 0xff
 8008616:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800861c:	b2da      	uxtb	r2, r3
 800861e:	8979      	ldrh	r1, [r7, #10]
 8008620:	2300      	movs	r3, #0
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fc57 	bl	8008edc <I2C_TransferConfig>
 800862e:	e00f      	b.n	8008650 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008634:	b29a      	uxth	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863e:	b2da      	uxtb	r2, r3
 8008640:	8979      	ldrh	r1, [r7, #10]
 8008642:	2300      	movs	r3, #0
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fc46 	bl	8008edc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 fad6 	bl	8008c06 <I2C_WaitOnTXISFlagUntilTimeout>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e07b      	b.n	800875c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008668:	781a      	ldrb	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867e:	b29b      	uxth	r3, r3
 8008680:	3b01      	subs	r3, #1
 8008682:	b29a      	uxth	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008698:	b29b      	uxth	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d034      	beq.n	8008708 <HAL_I2C_Mem_Write+0x1c8>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d130      	bne.n	8008708 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	2200      	movs	r2, #0
 80086ae:	2180      	movs	r1, #128	; 0x80
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 fa59 	bl	8008b68 <I2C_WaitOnFlagUntilTimeout>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e04d      	b.n	800875c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2bff      	cmp	r3, #255	; 0xff
 80086c8:	d90e      	bls.n	80086e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	22ff      	movs	r2, #255	; 0xff
 80086ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	8979      	ldrh	r1, [r7, #10]
 80086d8:	2300      	movs	r3, #0
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 fbfb 	bl	8008edc <I2C_TransferConfig>
 80086e6:	e00f      	b.n	8008708 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	8979      	ldrh	r1, [r7, #10]
 80086fa:	2300      	movs	r3, #0
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 fbea 	bl	8008edc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870c:	b29b      	uxth	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	d19e      	bne.n	8008650 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 fabc 	bl	8008c94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e01a      	b.n	800875c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2220      	movs	r2, #32
 800872c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6859      	ldr	r1, [r3, #4]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <HAL_I2C_Mem_Write+0x224>)
 800873a:	400b      	ands	r3, r1
 800873c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2220      	movs	r2, #32
 8008742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	e000      	b.n	800875c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800875a:	2302      	movs	r3, #2
  }
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	fe00e800 	.word	0xfe00e800

08008768 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af02      	add	r7, sp, #8
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	4608      	mov	r0, r1
 8008772:	4611      	mov	r1, r2
 8008774:	461a      	mov	r2, r3
 8008776:	4603      	mov	r3, r0
 8008778:	817b      	strh	r3, [r7, #10]
 800877a:	460b      	mov	r3, r1
 800877c:	813b      	strh	r3, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b20      	cmp	r3, #32
 800878c:	f040 80fd 	bne.w	800898a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <HAL_I2C_Mem_Read+0x34>
 8008796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	d105      	bne.n	80087a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e0f1      	b.n	800898c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d101      	bne.n	80087b6 <HAL_I2C_Mem_Read+0x4e>
 80087b2:	2302      	movs	r3, #2
 80087b4:	e0ea      	b.n	800898c <HAL_I2C_Mem_Read+0x224>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80087be:	f7fc fc49 	bl	8005054 <HAL_GetTick>
 80087c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	2319      	movs	r3, #25
 80087ca:	2201      	movs	r2, #1
 80087cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f9c9 	bl	8008b68 <I2C_WaitOnFlagUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e0d5      	b.n	800898c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2222      	movs	r2, #34	; 0x22
 80087e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2240      	movs	r2, #64	; 0x40
 80087ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a3a      	ldr	r2, [r7, #32]
 80087fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008808:	88f8      	ldrh	r0, [r7, #6]
 800880a:	893a      	ldrh	r2, [r7, #8]
 800880c:	8979      	ldrh	r1, [r7, #10]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	4603      	mov	r3, r0
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 f92d 	bl	8008a78 <I2C_RequestMemoryRead>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e0ad      	b.n	800898c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008834:	b29b      	uxth	r3, r3
 8008836:	2bff      	cmp	r3, #255	; 0xff
 8008838:	d90e      	bls.n	8008858 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	22ff      	movs	r2, #255	; 0xff
 800883e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008844:	b2da      	uxtb	r2, r3
 8008846:	8979      	ldrh	r1, [r7, #10]
 8008848:	4b52      	ldr	r3, [pc, #328]	; (8008994 <HAL_I2C_Mem_Read+0x22c>)
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 fb43 	bl	8008edc <I2C_TransferConfig>
 8008856:	e00f      	b.n	8008878 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008866:	b2da      	uxtb	r2, r3
 8008868:	8979      	ldrh	r1, [r7, #10]
 800886a:	4b4a      	ldr	r3, [pc, #296]	; (8008994 <HAL_I2C_Mem_Read+0x22c>)
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 fb32 	bl	8008edc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	2200      	movs	r2, #0
 8008880:	2104      	movs	r1, #4
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 f970 	bl	8008b68 <I2C_WaitOnFlagUntilTimeout>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e07c      	b.n	800898c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	b2d2      	uxtb	r2, r2
 800889e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d034      	beq.n	8008938 <HAL_I2C_Mem_Read+0x1d0>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d130      	bne.n	8008938 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	2200      	movs	r2, #0
 80088de:	2180      	movs	r1, #128	; 0x80
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f941 	bl	8008b68 <I2C_WaitOnFlagUntilTimeout>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e04d      	b.n	800898c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	2bff      	cmp	r3, #255	; 0xff
 80088f8:	d90e      	bls.n	8008918 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	22ff      	movs	r2, #255	; 0xff
 80088fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008904:	b2da      	uxtb	r2, r3
 8008906:	8979      	ldrh	r1, [r7, #10]
 8008908:	2300      	movs	r3, #0
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fae3 	bl	8008edc <I2C_TransferConfig>
 8008916:	e00f      	b.n	8008938 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008926:	b2da      	uxtb	r2, r3
 8008928:	8979      	ldrh	r1, [r7, #10]
 800892a:	2300      	movs	r3, #0
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fad2 	bl	8008edc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d19a      	bne.n	8008878 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 f9a4 	bl	8008c94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e01a      	b.n	800898c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2220      	movs	r2, #32
 800895c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6859      	ldr	r1, [r3, #4]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <HAL_I2C_Mem_Read+0x230>)
 800896a:	400b      	ands	r3, r1
 800896c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2220      	movs	r2, #32
 8008972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	e000      	b.n	800898c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800898a:	2302      	movs	r3, #2
  }
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	80002400 	.word	0x80002400
 8008998:	fe00e800 	.word	0xfe00e800

0800899c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089aa:	b2db      	uxtb	r3, r3
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af02      	add	r7, sp, #8
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	4608      	mov	r0, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	461a      	mov	r2, r3
 80089de:	4603      	mov	r3, r0
 80089e0:	817b      	strh	r3, [r7, #10]
 80089e2:	460b      	mov	r3, r1
 80089e4:	813b      	strh	r3, [r7, #8]
 80089e6:	4613      	mov	r3, r2
 80089e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	8979      	ldrh	r1, [r7, #10]
 80089f0:	4b20      	ldr	r3, [pc, #128]	; (8008a74 <I2C_RequestMemoryWrite+0xa4>)
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fa6f 	bl	8008edc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089fe:	69fa      	ldr	r2, [r7, #28]
 8008a00:	69b9      	ldr	r1, [r7, #24]
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 f8ff 	bl	8008c06 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e02c      	b.n	8008a6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a12:	88fb      	ldrh	r3, [r7, #6]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d105      	bne.n	8008a24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a18:	893b      	ldrh	r3, [r7, #8]
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	629a      	str	r2, [r3, #40]	; 0x28
 8008a22:	e015      	b.n	8008a50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a24:	893b      	ldrh	r3, [r7, #8]
 8008a26:	0a1b      	lsrs	r3, r3, #8
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	69b9      	ldr	r1, [r7, #24]
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 f8e5 	bl	8008c06 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e012      	b.n	8008a6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a46:	893b      	ldrh	r3, [r7, #8]
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2200      	movs	r2, #0
 8008a58:	2180      	movs	r1, #128	; 0x80
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f884 	bl	8008b68 <I2C_WaitOnFlagUntilTimeout>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e000      	b.n	8008a6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	80002000 	.word	0x80002000

08008a78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af02      	add	r7, sp, #8
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	4608      	mov	r0, r1
 8008a82:	4611      	mov	r1, r2
 8008a84:	461a      	mov	r2, r3
 8008a86:	4603      	mov	r3, r0
 8008a88:	817b      	strh	r3, [r7, #10]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	813b      	strh	r3, [r7, #8]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008a92:	88fb      	ldrh	r3, [r7, #6]
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	8979      	ldrh	r1, [r7, #10]
 8008a98:	4b20      	ldr	r3, [pc, #128]	; (8008b1c <I2C_RequestMemoryRead+0xa4>)
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 fa1c 	bl	8008edc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008aa4:	69fa      	ldr	r2, [r7, #28]
 8008aa6:	69b9      	ldr	r1, [r7, #24]
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 f8ac 	bl	8008c06 <I2C_WaitOnTXISFlagUntilTimeout>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e02c      	b.n	8008b12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ab8:	88fb      	ldrh	r3, [r7, #6]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d105      	bne.n	8008aca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008abe:	893b      	ldrh	r3, [r7, #8]
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8008ac8:	e015      	b.n	8008af6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008aca:	893b      	ldrh	r3, [r7, #8]
 8008acc:	0a1b      	lsrs	r3, r3, #8
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	69b9      	ldr	r1, [r7, #24]
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 f892 	bl	8008c06 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e012      	b.n	8008b12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008aec:	893b      	ldrh	r3, [r7, #8]
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	2200      	movs	r2, #0
 8008afe:	2140      	movs	r1, #64	; 0x40
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 f831 	bl	8008b68 <I2C_WaitOnFlagUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e000      	b.n	8008b12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	80002000 	.word	0x80002000

08008b20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	f003 0302 	and.w	r3, r3, #2
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d103      	bne.n	8008b3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d007      	beq.n	8008b5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699a      	ldr	r2, [r3, #24]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0201 	orr.w	r2, r2, #1
 8008b5a:	619a      	str	r2, [r3, #24]
  }
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	603b      	str	r3, [r7, #0]
 8008b74:	4613      	mov	r3, r2
 8008b76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b78:	e031      	b.n	8008bde <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b80:	d02d      	beq.n	8008bde <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b82:	f7fc fa67 	bl	8005054 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d302      	bcc.n	8008b98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d122      	bne.n	8008bde <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	699a      	ldr	r2, [r3, #24]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	bf0c      	ite	eq
 8008ba8:	2301      	moveq	r3, #1
 8008baa:	2300      	movne	r3, #0
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d113      	bne.n	8008bde <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bba:	f043 0220 	orr.w	r2, r3, #32
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e00f      	b.n	8008bfe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	699a      	ldr	r2, [r3, #24]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4013      	ands	r3, r2
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	bf0c      	ite	eq
 8008bee:	2301      	moveq	r3, #1
 8008bf0:	2300      	movne	r3, #0
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	79fb      	ldrb	r3, [r7, #7]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d0be      	beq.n	8008b7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c12:	e033      	b.n	8008c7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	68b9      	ldr	r1, [r7, #8]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 f87f 	bl	8008d1c <I2C_IsErrorOccurred>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e031      	b.n	8008c8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2e:	d025      	beq.n	8008c7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c30:	f7fc fa10 	bl	8005054 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d302      	bcc.n	8008c46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d11a      	bne.n	8008c7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d013      	beq.n	8008c7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c58:	f043 0220 	orr.w	r2, r3, #32
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e007      	b.n	8008c8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d1c4      	bne.n	8008c14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ca0:	e02f      	b.n	8008d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 f838 	bl	8008d1c <I2C_IsErrorOccurred>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e02d      	b.n	8008d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb6:	f7fc f9cd 	bl	8005054 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d302      	bcc.n	8008ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d11a      	bne.n	8008d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f003 0320 	and.w	r3, r3, #32
 8008cd6:	2b20      	cmp	r3, #32
 8008cd8:	d013      	beq.n	8008d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cde:	f043 0220 	orr.w	r2, r3, #32
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e007      	b.n	8008d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d1c8      	bne.n	8008ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	; 0x28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	f003 0310 	and.w	r3, r3, #16
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d068      	beq.n	8008e1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2210      	movs	r2, #16
 8008d4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d50:	e049      	b.n	8008de6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d58:	d045      	beq.n	8008de6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d5a:	f7fc f97b 	bl	8005054 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d302      	bcc.n	8008d70 <I2C_IsErrorOccurred+0x54>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d13a      	bne.n	8008de6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d92:	d121      	bne.n	8008dd8 <I2C_IsErrorOccurred+0xbc>
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d9a:	d01d      	beq.n	8008dd8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d9c:	7cfb      	ldrb	r3, [r7, #19]
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d01a      	beq.n	8008dd8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008db0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008db2:	f7fc f94f 	bl	8005054 <HAL_GetTick>
 8008db6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008db8:	e00e      	b.n	8008dd8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008dba:	f7fc f94b 	bl	8005054 <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	2b19      	cmp	r3, #25
 8008dc6:	d907      	bls.n	8008dd8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	f043 0320 	orr.w	r3, r3, #32
 8008dce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008dd6:	e006      	b.n	8008de6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d1e9      	bne.n	8008dba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	f003 0320 	and.w	r3, r3, #32
 8008df0:	2b20      	cmp	r3, #32
 8008df2:	d003      	beq.n	8008dfc <I2C_IsErrorOccurred+0xe0>
 8008df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0aa      	beq.n	8008d52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d103      	bne.n	8008e0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	f043 0304 	orr.w	r3, r3, #4
 8008e12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00b      	beq.n	8008e66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	f043 0308 	orr.w	r3, r3, #8
 8008e54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00b      	beq.n	8008e88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	f043 0302 	orr.w	r3, r3, #2
 8008e76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01c      	beq.n	8008eca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f7ff fe45 	bl	8008b20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6859      	ldr	r1, [r3, #4]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <I2C_IsErrorOccurred+0x1bc>)
 8008ea2:	400b      	ands	r3, r1
 8008ea4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	431a      	orrs	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3728      	adds	r7, #40	; 0x28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	fe00e800 	.word	0xfe00e800

08008edc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	607b      	str	r3, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	817b      	strh	r3, [r7, #10]
 8008eea:	4613      	mov	r3, r2
 8008eec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008eee:	897b      	ldrh	r3, [r7, #10]
 8008ef0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ef4:	7a7b      	ldrb	r3, [r7, #9]
 8008ef6:	041b      	lsls	r3, r3, #16
 8008ef8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008efc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	0d5b      	lsrs	r3, r3, #21
 8008f16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008f1a:	4b08      	ldr	r3, [pc, #32]	; (8008f3c <I2C_TransferConfig+0x60>)
 8008f1c:	430b      	orrs	r3, r1
 8008f1e:	43db      	mvns	r3, r3
 8008f20:	ea02 0103 	and.w	r1, r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f2e:	bf00      	nop
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	03ff63ff 	.word	0x03ff63ff

08008f40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d138      	bne.n	8008fc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f60:	2302      	movs	r3, #2
 8008f62:	e032      	b.n	8008fca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2224      	movs	r2, #36	; 0x24
 8008f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0201 	bic.w	r2, r2, #1
 8008f82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0201 	orr.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e000      	b.n	8008fca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fc8:	2302      	movs	r3, #2
  }
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d139      	bne.n	8009060 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e033      	b.n	8009062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2224      	movs	r2, #36	; 0x24
 8009006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0201 	bic.w	r2, r2, #1
 8009018:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009028:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2220      	movs	r2, #32
 8009050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	e000      	b.n	8009062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009060:	2302      	movs	r3, #2
  }
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
	...

08009070 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e11a      	b.n	80092b8 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b00      	cmp	r3, #0
 800908c:	d106      	bne.n	800909c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f91a 	bl	80092d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d107      	bne.n	80090c2 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0201 	bic.w	r2, r2, #1
 80090c0:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2200      	movs	r2, #0
 80090c8:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d008      	beq.n	80090e4 <HAL_I2S_Init+0x74>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	2b06      	cmp	r3, #6
 80090d8:	d004      	beq.n	80090e4 <HAL_I2S_Init+0x74>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2b0a      	cmp	r3, #10
 80090e0:	f040 8094 	bne.w	800920c <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d067      	beq.n	80091bc <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80090f4:	2302      	movs	r3, #2
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	e001      	b.n	80090fe <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80090fa:	2301      	movs	r3, #1
 80090fc:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	2b30      	cmp	r3, #48	; 0x30
 8009104:	d003      	beq.n	800910e <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800910a:	2bb0      	cmp	r3, #176	; 0xb0
 800910c:	d102      	bne.n	8009114 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800910e:	2301      	movs	r3, #1
 8009110:	60bb      	str	r3, [r7, #8]
 8009112:	e001      	b.n	8009118 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8009114:	2300      	movs	r3, #0
 8009116:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a68      	ldr	r2, [pc, #416]	; (80092c0 <HAL_I2S_Init+0x250>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d107      	bne.n	8009132 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 8009122:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009126:	f04f 0100 	mov.w	r1, #0
 800912a:	f003 fc8d 	bl	800ca48 <HAL_RCCEx_GetPeriphCLKFreq>
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	e006      	b.n	8009140 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8009132:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009136:	f04f 0100 	mov.w	r1, #0
 800913a:	f003 fc85 	bl	800ca48 <HAL_RCCEx_GetPeriphCLKFreq>
 800913e:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009148:	d113      	bne.n	8009172 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800914a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	fa22 f303 	lsr.w	r3, r2, r3
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	fbb2 f2f3 	udiv	r2, r2, r3
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	461a      	mov	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	fbb2 f3f3 	udiv	r3, r2, r3
 800916c:	3305      	adds	r3, #5
 800916e:	613b      	str	r3, [r7, #16]
 8009170:	e014      	b.n	800919c <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8009172:	2220      	movs	r2, #32
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	fa22 f303 	lsr.w	r3, r2, r3
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	fb02 f303 	mul.w	r3, r2, r3
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	fbb2 f2f3 	udiv	r2, r2, r3
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	461a      	mov	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	695b      	ldr	r3, [r3, #20]
 8009194:	fbb2 f3f3 	udiv	r3, r2, r3
 8009198:	3305      	adds	r3, #5
 800919a:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	4a49      	ldr	r2, [pc, #292]	; (80092c4 <HAL_I2S_Init+0x254>)
 80091a0:	fba2 2303 	umull	r2, r3, r2, r3
 80091a4:	08db      	lsrs	r3, r3, #3
 80091a6:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	085b      	lsrs	r3, r3, #1
 80091b8:	61fb      	str	r3, [r7, #28]
 80091ba:	e003      	b.n	80091c4 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80091bc:	2302      	movs	r3, #2
 80091be:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d102      	bne.n	80091d0 <HAL_I2S_Init+0x160>
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d002      	beq.n	80091d6 <HAL_I2S_Init+0x166>
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	2bff      	cmp	r3, #255	; 0xff
 80091d4:	d907      	bls.n	80091e6 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091da:	f043 0210 	orr.w	r2, r3, #16
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e068      	b.n	80092b8 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 80091ec:	2301      	movs	r3, #1
 80091ee:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091f6:	4b34      	ldr	r3, [pc, #208]	; (80092c8 <HAL_I2S_Init+0x258>)
 80091f8:	4013      	ands	r3, r2
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	0411      	lsls	r1, r2, #16
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	0612      	lsls	r2, r2, #24
 8009202:	4311      	orrs	r1, r2
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	6812      	ldr	r2, [r2, #0]
 8009208:	430b      	orrs	r3, r1
 800920a:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009212:	4b2e      	ldr	r3, [pc, #184]	; (80092cc <HAL_I2S_Init+0x25c>)
 8009214:	4013      	ands	r3, r2
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	6851      	ldr	r1, [r2, #4]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6892      	ldr	r2, [r2, #8]
 800921e:	4311      	orrs	r1, r2
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	68d2      	ldr	r2, [r2, #12]
 8009224:	4311      	orrs	r1, r2
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6992      	ldr	r2, [r2, #24]
 800922a:	4311      	orrs	r1, r2
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6a12      	ldr	r2, [r2, #32]
 8009230:	4311      	orrs	r1, r2
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009236:	4311      	orrs	r1, r2
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	6912      	ldr	r2, [r2, #16]
 800923c:	430a      	orrs	r2, r1
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f042 0201 	orr.w	r2, r2, #1
 8009248:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f640 72f8 	movw	r2, #4088	; 0xff8
 8009252:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009262:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	69da      	ldr	r2, [r3, #28]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	2b04      	cmp	r3, #4
 8009280:	d007      	beq.n	8009292 <HAL_I2S_Init+0x222>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2b06      	cmp	r3, #6
 8009288:	d003      	beq.n	8009292 <HAL_I2S_Init+0x222>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	2b0a      	cmp	r3, #10
 8009290:	d10a      	bne.n	80092a8 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3720      	adds	r7, #32
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	58001400 	.word	0x58001400
 80092c4:	cccccccd 	.word	0xcccccccd
 80092c8:	fe00ffff 	.word	0xfe00ffff
 80092cc:	fdff9040 	.word	0xfdff9040

080092d0 <HAL_I2S_MspInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e0bf      	b.n	8009476 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f8ba 	bl	8009484 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699a      	ldr	r2, [r3, #24]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009326:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6999      	ldr	r1, [r3, #24]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800933c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6899      	ldr	r1, [r3, #8]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	4b4a      	ldr	r3, [pc, #296]	; (8009480 <HAL_LTDC_Init+0x19c>)
 8009358:	400b      	ands	r3, r1
 800935a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	041b      	lsls	r3, r3, #16
 8009362:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6899      	ldr	r1, [r3, #8]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	431a      	orrs	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68d9      	ldr	r1, [r3, #12]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	4b3e      	ldr	r3, [pc, #248]	; (8009480 <HAL_LTDC_Init+0x19c>)
 8009386:	400b      	ands	r3, r1
 8009388:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	041b      	lsls	r3, r3, #16
 8009390:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68d9      	ldr	r1, [r3, #12]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a1a      	ldr	r2, [r3, #32]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	431a      	orrs	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	430a      	orrs	r2, r1
 80093a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6919      	ldr	r1, [r3, #16]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	4b33      	ldr	r3, [pc, #204]	; (8009480 <HAL_LTDC_Init+0x19c>)
 80093b4:	400b      	ands	r3, r1
 80093b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093bc:	041b      	lsls	r3, r3, #16
 80093be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6919      	ldr	r1, [r3, #16]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	431a      	orrs	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6959      	ldr	r1, [r3, #20]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	4b27      	ldr	r3, [pc, #156]	; (8009480 <HAL_LTDC_Init+0x19c>)
 80093e2:	400b      	ands	r3, r1
 80093e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ea:	041b      	lsls	r3, r3, #16
 80093ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6959      	ldr	r1, [r3, #20]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	431a      	orrs	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800940a:	021b      	lsls	r3, r3, #8
 800940c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009414:	041b      	lsls	r3, r3, #16
 8009416:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009426:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4313      	orrs	r3, r2
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800943a:	431a      	orrs	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f042 0206 	orr.w	r2, r2, #6
 8009452:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699a      	ldr	r2, [r3, #24]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f042 0201 	orr.w	r2, r2, #1
 8009462:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	f000f800 	.word	0xf000f800

08009484 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009498:	b5b0      	push	{r4, r5, r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <HAL_LTDC_ConfigLayer+0x1a>
 80094ae:	2302      	movs	r3, #2
 80094b0:	e02c      	b.n	800950c <HAL_LTDC_ConfigLayer+0x74>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2202      	movs	r2, #2
 80094be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2134      	movs	r1, #52	; 0x34
 80094c8:	fb01 f303 	mul.w	r3, r1, r3
 80094cc:	4413      	add	r3, r2
 80094ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	4614      	mov	r4, r2
 80094d6:	461d      	mov	r5, r3
 80094d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	68b9      	ldr	r1, [r7, #8]
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f811 	bl	8009514 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2201      	movs	r2, #1
 80094f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bdb0      	pop	{r4, r5, r7, pc}

08009514 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009514:	b480      	push	{r7}
 8009516:	b089      	sub	sp, #36	; 0x24
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	0c1b      	lsrs	r3, r3, #16
 800952c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009530:	4413      	add	r3, r2
 8009532:	041b      	lsls	r3, r3, #16
 8009534:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	01db      	lsls	r3, r3, #7
 8009540:	4413      	add	r3, r2
 8009542:	3384      	adds	r3, #132	; 0x84
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	6812      	ldr	r2, [r2, #0]
 800954a:	4611      	mov	r1, r2
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	01d2      	lsls	r2, r2, #7
 8009550:	440a      	add	r2, r1
 8009552:	3284      	adds	r2, #132	; 0x84
 8009554:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009558:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800956a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800956c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4619      	mov	r1, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	01db      	lsls	r3, r3, #7
 8009578:	440b      	add	r3, r1
 800957a:	3384      	adds	r3, #132	; 0x84
 800957c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009582:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009592:	4413      	add	r3, r2
 8009594:	041b      	lsls	r3, r3, #16
 8009596:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	01db      	lsls	r3, r3, #7
 80095a2:	4413      	add	r3, r2
 80095a4:	3384      	adds	r3, #132	; 0x84
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	6812      	ldr	r2, [r2, #0]
 80095ac:	4611      	mov	r1, r2
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	01d2      	lsls	r2, r2, #7
 80095b2:	440a      	add	r2, r1
 80095b4:	3284      	adds	r2, #132	; 0x84
 80095b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80095ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095ca:	4413      	add	r3, r2
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4619      	mov	r1, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	01db      	lsls	r3, r3, #7
 80095d8:	440b      	add	r3, r1
 80095da:	3384      	adds	r3, #132	; 0x84
 80095dc:	4619      	mov	r1, r3
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	461a      	mov	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	01db      	lsls	r3, r3, #7
 80095ee:	4413      	add	r3, r2
 80095f0:	3384      	adds	r3, #132	; 0x84
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	6812      	ldr	r2, [r2, #0]
 80095f8:	4611      	mov	r1, r2
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	01d2      	lsls	r2, r2, #7
 80095fe:	440a      	add	r2, r1
 8009600:	3284      	adds	r2, #132	; 0x84
 8009602:	f023 0307 	bic.w	r3, r3, #7
 8009606:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	461a      	mov	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	01db      	lsls	r3, r3, #7
 8009612:	4413      	add	r3, r2
 8009614:	3384      	adds	r3, #132	; 0x84
 8009616:	461a      	mov	r2, r3
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009624:	021b      	lsls	r3, r3, #8
 8009626:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	061b      	lsls	r3, r3, #24
 8009638:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	01db      	lsls	r3, r3, #7
 8009644:	4413      	add	r3, r2
 8009646:	3384      	adds	r3, #132	; 0x84
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	01db      	lsls	r3, r3, #7
 8009654:	4413      	add	r3, r2
 8009656:	3384      	adds	r3, #132	; 0x84
 8009658:	461a      	mov	r2, r3
 800965a:	2300      	movs	r3, #0
 800965c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009664:	461a      	mov	r2, r3
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	431a      	orrs	r2, r3
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	431a      	orrs	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4619      	mov	r1, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	01db      	lsls	r3, r3, #7
 8009678:	440b      	add	r3, r1
 800967a:	3384      	adds	r3, #132	; 0x84
 800967c:	4619      	mov	r1, r3
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	4313      	orrs	r3, r2
 8009682:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	461a      	mov	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	01db      	lsls	r3, r3, #7
 800968e:	4413      	add	r3, r2
 8009690:	3384      	adds	r3, #132	; 0x84
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	6812      	ldr	r2, [r2, #0]
 8009698:	4611      	mov	r1, r2
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	01d2      	lsls	r2, r2, #7
 800969e:	440a      	add	r2, r1
 80096a0:	3284      	adds	r2, #132	; 0x84
 80096a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	461a      	mov	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	01db      	lsls	r3, r3, #7
 80096b2:	4413      	add	r3, r2
 80096b4:	3384      	adds	r3, #132	; 0x84
 80096b6:	461a      	mov	r2, r3
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	01db      	lsls	r3, r3, #7
 80096c8:	4413      	add	r3, r2
 80096ca:	3384      	adds	r3, #132	; 0x84
 80096cc:	69da      	ldr	r2, [r3, #28]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4619      	mov	r1, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	01db      	lsls	r3, r3, #7
 80096d8:	440b      	add	r3, r1
 80096da:	3384      	adds	r3, #132	; 0x84
 80096dc:	4619      	mov	r1, r3
 80096de:	4b58      	ldr	r3, [pc, #352]	; (8009840 <LTDC_SetConfig+0x32c>)
 80096e0:	4013      	ands	r3, r2
 80096e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	69da      	ldr	r2, [r3, #28]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	6a1b      	ldr	r3, [r3, #32]
 80096ec:	68f9      	ldr	r1, [r7, #12]
 80096ee:	6809      	ldr	r1, [r1, #0]
 80096f0:	4608      	mov	r0, r1
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	01c9      	lsls	r1, r1, #7
 80096f6:	4401      	add	r1, r0
 80096f8:	3184      	adds	r1, #132	; 0x84
 80096fa:	4313      	orrs	r3, r2
 80096fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	01db      	lsls	r3, r3, #7
 8009708:	4413      	add	r3, r2
 800970a:	3384      	adds	r3, #132	; 0x84
 800970c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	01db      	lsls	r3, r3, #7
 8009718:	4413      	add	r3, r2
 800971a:	3384      	adds	r3, #132	; 0x84
 800971c:	461a      	mov	r2, r3
 800971e:	2300      	movs	r3, #0
 8009720:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	01db      	lsls	r3, r3, #7
 800972c:	4413      	add	r3, r2
 800972e:	3384      	adds	r3, #132	; 0x84
 8009730:	461a      	mov	r2, r3
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009740:	2304      	movs	r3, #4
 8009742:	61fb      	str	r3, [r7, #28]
 8009744:	e01b      	b.n	800977e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d102      	bne.n	8009754 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800974e:	2303      	movs	r3, #3
 8009750:	61fb      	str	r3, [r7, #28]
 8009752:	e014      	b.n	800977e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	2b04      	cmp	r3, #4
 800975a:	d00b      	beq.n	8009774 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009760:	2b02      	cmp	r3, #2
 8009762:	d007      	beq.n	8009774 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009768:	2b03      	cmp	r3, #3
 800976a:	d003      	beq.n	8009774 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009770:	2b07      	cmp	r3, #7
 8009772:	d102      	bne.n	800977a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009774:	2302      	movs	r3, #2
 8009776:	61fb      	str	r3, [r7, #28]
 8009778:	e001      	b.n	800977e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800977a:	2301      	movs	r3, #1
 800977c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	01db      	lsls	r3, r3, #7
 8009788:	4413      	add	r3, r2
 800978a:	3384      	adds	r3, #132	; 0x84
 800978c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	4611      	mov	r1, r2
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	01d2      	lsls	r2, r2, #7
 8009798:	440a      	add	r2, r1
 800979a:	3284      	adds	r2, #132	; 0x84
 800979c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80097a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	fb02 f303 	mul.w	r3, r2, r3
 80097ac:	041a      	lsls	r2, r3, #16
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	6859      	ldr	r1, [r3, #4]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	1acb      	subs	r3, r1, r3
 80097b8:	69f9      	ldr	r1, [r7, #28]
 80097ba:	fb01 f303 	mul.w	r3, r1, r3
 80097be:	3307      	adds	r3, #7
 80097c0:	68f9      	ldr	r1, [r7, #12]
 80097c2:	6809      	ldr	r1, [r1, #0]
 80097c4:	4608      	mov	r0, r1
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	01c9      	lsls	r1, r1, #7
 80097ca:	4401      	add	r1, r0
 80097cc:	3184      	adds	r1, #132	; 0x84
 80097ce:	4313      	orrs	r3, r2
 80097d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	01db      	lsls	r3, r3, #7
 80097dc:	4413      	add	r3, r2
 80097de:	3384      	adds	r3, #132	; 0x84
 80097e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4619      	mov	r1, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	01db      	lsls	r3, r3, #7
 80097ec:	440b      	add	r3, r1
 80097ee:	3384      	adds	r3, #132	; 0x84
 80097f0:	4619      	mov	r1, r3
 80097f2:	4b14      	ldr	r3, [pc, #80]	; (8009844 <LTDC_SetConfig+0x330>)
 80097f4:	4013      	ands	r3, r2
 80097f6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	01db      	lsls	r3, r3, #7
 8009802:	4413      	add	r3, r2
 8009804:	3384      	adds	r3, #132	; 0x84
 8009806:	461a      	mov	r2, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	01db      	lsls	r3, r3, #7
 8009818:	4413      	add	r3, r2
 800981a:	3384      	adds	r3, #132	; 0x84
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	6812      	ldr	r2, [r2, #0]
 8009822:	4611      	mov	r1, r2
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	01d2      	lsls	r2, r2, #7
 8009828:	440a      	add	r2, r1
 800982a:	3284      	adds	r2, #132	; 0x84
 800982c:	f043 0301 	orr.w	r3, r3, #1
 8009830:	6013      	str	r3, [r2, #0]
}
 8009832:	bf00      	nop
 8009834:	3724      	adds	r7, #36	; 0x24
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	fffff8f8 	.word	0xfffff8f8
 8009844:	fffff800 	.word	0xfffff800

08009848 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af02      	add	r7, sp, #8
 800984e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009854:	f7fb fbfe 	bl	8005054 <HAL_GetTick>
 8009858:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d102      	bne.n	8009866 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	73fb      	strb	r3, [r7, #15]
 8009864:	e0a5      	b.n	80099b2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009870:	2b00      	cmp	r3, #0
 8009872:	f040 809e 	bne.w	80099b2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f8a2 	bl	80099c0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800987c:	f241 3188 	movw	r1, #5000	; 0x1388
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f8a7 	bl	80099d4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689a      	ldr	r2, [r3, #8]
 800988c:	4b4b      	ldr	r3, [pc, #300]	; (80099bc <HAL_OSPI_Init+0x174>)
 800988e:	4013      	ands	r3, r2
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	68d1      	ldr	r1, [r2, #12]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6912      	ldr	r2, [r2, #16]
 8009898:	3a01      	subs	r2, #1
 800989a:	0412      	lsls	r2, r2, #16
 800989c:	4311      	orrs	r1, r2
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	6952      	ldr	r2, [r2, #20]
 80098a2:	3a01      	subs	r2, #1
 80098a4:	0212      	lsls	r2, r2, #8
 80098a6:	4311      	orrs	r1, r2
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098ac:	4311      	orrs	r1, r2
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	69d2      	ldr	r2, [r2, #28]
 80098b2:	4311      	orrs	r1, r2
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6812      	ldr	r2, [r2, #0]
 80098b8:	430b      	orrs	r3, r1
 80098ba:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1a      	ldr	r2, [r3, #32]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80098ec:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	3b01      	subs	r3, #1
 80098fe:	021a      	lsls	r2, r3, #8
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2200      	movs	r2, #0
 8009912:	2120      	movs	r1, #32
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fd55 	bl	800a3c4 <OSPI_WaitFlagStateUntilTimeout>
 800991a:	4603      	mov	r3, r0
 800991c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d146      	bne.n	80099b2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	1e5a      	subs	r2, r3, #1
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800995a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009966:	431a      	orrs	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	430a      	orrs	r2, r1
 800996e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f042 0201 	orr.w	r2, r2, #1
 8009980:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d107      	bne.n	800999a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0202 	orr.w	r2, r2, #2
 8009998:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099a2:	d103      	bne.n	80099ac <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	651a      	str	r2, [r3, #80]	; 0x50
 80099aa:	e002      	b.n	80099b2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	f8e0f8f4 	.word	0xf8e0f8f4

080099c0 <HAL_OSPI_MspInit>:
  * @brief  Initialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspInit(OSPI_HandleTypeDef *hospi)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspInit can be implemented in the user file
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
	...

080099f4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b094      	sub	sp, #80	; 0x50
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a9d      	ldr	r2, [pc, #628]	; (8009c88 <HAL_OSPIM_Config+0x294>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d105      	bne.n	8009a22 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009a20:	e004      	b.n	8009a2c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8009a22:	2301      	movs	r3, #1
 8009a24:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a32:	e01d      	b.n	8009a70 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8009a34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a38:	3301      	adds	r3, #1
 8009a3a:	b2d8      	uxtb	r0, r3
 8009a3c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009a40:	f107 0114 	add.w	r1, r7, #20
 8009a44:	4613      	mov	r3, r2
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	4413      	add	r3, r2
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	440b      	add	r3, r1
 8009a4e:	4619      	mov	r1, r3
 8009a50:	f000 fcf0 	bl	800a434 <OSPIM_GetConfig>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d005      	beq.n	8009a66 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2208      	movs	r2, #8
 8009a64:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009a66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d9dd      	bls.n	8009a34 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8009a78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 8495 	bne.w	800a3ac <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8009a82:	4b81      	ldr	r3, [pc, #516]	; (8009c88 <HAL_OSPIM_Config+0x294>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00b      	beq.n	8009aa6 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009a8e:	4b7e      	ldr	r3, [pc, #504]	; (8009c88 <HAL_OSPIM_Config+0x294>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a7d      	ldr	r2, [pc, #500]	; (8009c88 <HAL_OSPIM_Config+0x294>)
 8009a94:	f023 0301 	bic.w	r3, r3, #1
 8009a98:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8009a9a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009a9e:	f043 0301 	orr.w	r3, r3, #1
 8009aa2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8009aa6:	4b79      	ldr	r3, [pc, #484]	; (8009c8c <HAL_OSPIM_Config+0x298>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00b      	beq.n	8009aca <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8009ab2:	4b76      	ldr	r3, [pc, #472]	; (8009c8c <HAL_OSPIM_Config+0x298>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a75      	ldr	r2, [pc, #468]	; (8009c8c <HAL_OSPIM_Config+0x298>)
 8009ab8:	f023 0301 	bic.w	r3, r3, #1
 8009abc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8009abe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009ac2:	f043 0302 	orr.w	r3, r3, #2
 8009ac6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8009aca:	4971      	ldr	r1, [pc, #452]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ace:	4613      	mov	r3, r2
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	4413      	add	r3, r2
 8009ad4:	00db      	lsls	r3, r3, #3
 8009ad6:	3350      	adds	r3, #80	; 0x50
 8009ad8:	443b      	add	r3, r7
 8009ada:	3b34      	subs	r3, #52	; 0x34
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	440b      	add	r3, r1
 8009ae4:	6859      	ldr	r1, [r3, #4]
 8009ae6:	486a      	ldr	r0, [pc, #424]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009aea:	4613      	mov	r3, r2
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	4413      	add	r3, r2
 8009af0:	00db      	lsls	r3, r3, #3
 8009af2:	3350      	adds	r3, #80	; 0x50
 8009af4:	443b      	add	r3, r7
 8009af6:	3b34      	subs	r3, #52	; 0x34
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4403      	add	r3, r0
 8009b04:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009b06:	4b62      	ldr	r3, [pc, #392]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 80c0 	beq.w	8009c94 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009b14:	4b5e      	ldr	r3, [pc, #376]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a5d      	ldr	r2, [pc, #372]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009b1a:	f023 0301 	bic.w	r3, r3, #1
 8009b1e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8009b20:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	f040 8162 	bne.w	8009dee <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8009b2a:	4959      	ldr	r1, [pc, #356]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009b2c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009b30:	4613      	mov	r3, r2
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	4413      	add	r3, r2
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	3350      	adds	r3, #80	; 0x50
 8009b3a:	443b      	add	r3, r7
 8009b3c:	3b3c      	subs	r3, #60	; 0x3c
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	440b      	add	r3, r1
 8009b46:	6859      	ldr	r1, [r3, #4]
 8009b48:	4851      	ldr	r0, [pc, #324]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009b4a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009b4e:	4613      	mov	r3, r2
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	4413      	add	r3, r2
 8009b54:	00db      	lsls	r3, r3, #3
 8009b56:	3350      	adds	r3, #80	; 0x50
 8009b58:	443b      	add	r3, r7
 8009b5a:	3b3c      	subs	r3, #60	; 0x3c
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	f041 0202 	orr.w	r2, r1, #2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4403      	add	r3, r0
 8009b68:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8009b6a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009b6e:	4613      	mov	r3, r2
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	4413      	add	r3, r2
 8009b74:	00db      	lsls	r3, r3, #3
 8009b76:	3350      	adds	r3, #80	; 0x50
 8009b78:	443b      	add	r3, r7
 8009b7a:	3b38      	subs	r3, #56	; 0x38
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d01f      	beq.n	8009bc2 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8009b82:	4943      	ldr	r1, [pc, #268]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009b84:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009b88:	4613      	mov	r3, r2
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	4413      	add	r3, r2
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	3350      	adds	r3, #80	; 0x50
 8009b92:	443b      	add	r3, r7
 8009b94:	3b38      	subs	r3, #56	; 0x38
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	440b      	add	r3, r1
 8009b9e:	6859      	ldr	r1, [r3, #4]
 8009ba0:	483b      	ldr	r0, [pc, #236]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009ba2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	4413      	add	r3, r2
 8009bac:	00db      	lsls	r3, r3, #3
 8009bae:	3350      	adds	r3, #80	; 0x50
 8009bb0:	443b      	add	r3, r7
 8009bb2:	3b38      	subs	r3, #56	; 0x38
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	f041 0220 	orr.w	r2, r1, #32
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4403      	add	r3, r0
 8009bc0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009bc2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	4413      	add	r3, r2
 8009bcc:	00db      	lsls	r3, r3, #3
 8009bce:	3350      	adds	r3, #80	; 0x50
 8009bd0:	443b      	add	r3, r7
 8009bd2:	3b30      	subs	r3, #48	; 0x30
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d023      	beq.n	8009c22 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8009bda:	492d      	ldr	r1, [pc, #180]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009bdc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009be0:	4613      	mov	r3, r2
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	4413      	add	r3, r2
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	3350      	adds	r3, #80	; 0x50
 8009bea:	443b      	add	r3, r7
 8009bec:	3b30      	subs	r3, #48	; 0x30
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	440b      	add	r3, r1
 8009bfa:	6859      	ldr	r1, [r3, #4]
 8009bfc:	4824      	ldr	r0, [pc, #144]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009bfe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c02:	4613      	mov	r3, r2
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	4413      	add	r3, r2
 8009c08:	00db      	lsls	r3, r3, #3
 8009c0a:	3350      	adds	r3, #80	; 0x50
 8009c0c:	443b      	add	r3, r7
 8009c0e:	3b30      	subs	r3, #48	; 0x30
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4403      	add	r3, r0
 8009c20:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009c22:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c26:	4613      	mov	r3, r2
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	4413      	add	r3, r2
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	3350      	adds	r3, #80	; 0x50
 8009c30:	443b      	add	r3, r7
 8009c32:	3b2c      	subs	r3, #44	; 0x2c
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 80d9 	beq.w	8009dee <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8009c3c:	4914      	ldr	r1, [pc, #80]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009c3e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c42:	4613      	mov	r3, r2
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	4413      	add	r3, r2
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	3350      	adds	r3, #80	; 0x50
 8009c4c:	443b      	add	r3, r7
 8009c4e:	3b2c      	subs	r3, #44	; 0x2c
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	440b      	add	r3, r1
 8009c5c:	6859      	ldr	r1, [r3, #4]
 8009c5e:	480c      	ldr	r0, [pc, #48]	; (8009c90 <HAL_OSPIM_Config+0x29c>)
 8009c60:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c64:	4613      	mov	r3, r2
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	4413      	add	r3, r2
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	3350      	adds	r3, #80	; 0x50
 8009c6e:	443b      	add	r3, r7
 8009c70:	3b2c      	subs	r3, #44	; 0x2c
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4403      	add	r3, r0
 8009c82:	605a      	str	r2, [r3, #4]
 8009c84:	e0b3      	b.n	8009dee <HAL_OSPIM_Config+0x3fa>
 8009c86:	bf00      	nop
 8009c88:	52005000 	.word	0x52005000
 8009c8c:	5200a000 	.word	0x5200a000
 8009c90:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8009c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c96:	4613      	mov	r3, r2
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	4413      	add	r3, r2
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	3350      	adds	r3, #80	; 0x50
 8009ca0:	443b      	add	r3, r7
 8009ca2:	3b3c      	subs	r3, #60	; 0x3c
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f000 80a1 	beq.w	8009dee <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8009cac:	4993      	ldr	r1, [pc, #588]	; (8009efc <HAL_OSPIM_Config+0x508>)
 8009cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	4413      	add	r3, r2
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	3350      	adds	r3, #80	; 0x50
 8009cba:	443b      	add	r3, r7
 8009cbc:	3b3c      	subs	r3, #60	; 0x3c
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	440b      	add	r3, r1
 8009cc6:	6859      	ldr	r1, [r3, #4]
 8009cc8:	488c      	ldr	r0, [pc, #560]	; (8009efc <HAL_OSPIM_Config+0x508>)
 8009cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ccc:	4613      	mov	r3, r2
 8009cce:	005b      	lsls	r3, r3, #1
 8009cd0:	4413      	add	r3, r2
 8009cd2:	00db      	lsls	r3, r3, #3
 8009cd4:	3350      	adds	r3, #80	; 0x50
 8009cd6:	443b      	add	r3, r7
 8009cd8:	3b3c      	subs	r3, #60	; 0x3c
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	f021 0201 	bic.w	r2, r1, #1
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4403      	add	r3, r0
 8009ce6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8009ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cea:	4613      	mov	r3, r2
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	4413      	add	r3, r2
 8009cf0:	00db      	lsls	r3, r3, #3
 8009cf2:	3350      	adds	r3, #80	; 0x50
 8009cf4:	443b      	add	r3, r7
 8009cf6:	3b38      	subs	r3, #56	; 0x38
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d01d      	beq.n	8009d3a <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8009cfe:	497f      	ldr	r1, [pc, #508]	; (8009efc <HAL_OSPIM_Config+0x508>)
 8009d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d02:	4613      	mov	r3, r2
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	4413      	add	r3, r2
 8009d08:	00db      	lsls	r3, r3, #3
 8009d0a:	3350      	adds	r3, #80	; 0x50
 8009d0c:	443b      	add	r3, r7
 8009d0e:	3b38      	subs	r3, #56	; 0x38
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3b01      	subs	r3, #1
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	440b      	add	r3, r1
 8009d18:	6859      	ldr	r1, [r3, #4]
 8009d1a:	4878      	ldr	r0, [pc, #480]	; (8009efc <HAL_OSPIM_Config+0x508>)
 8009d1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d1e:	4613      	mov	r3, r2
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	4413      	add	r3, r2
 8009d24:	00db      	lsls	r3, r3, #3
 8009d26:	3350      	adds	r3, #80	; 0x50
 8009d28:	443b      	add	r3, r7
 8009d2a:	3b38      	subs	r3, #56	; 0x38
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	f021 0210 	bic.w	r2, r1, #16
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4403      	add	r3, r0
 8009d38:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	005b      	lsls	r3, r3, #1
 8009d40:	4413      	add	r3, r2
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	3350      	adds	r3, #80	; 0x50
 8009d46:	443b      	add	r3, r7
 8009d48:	3b30      	subs	r3, #48	; 0x30
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d021      	beq.n	8009d94 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8009d50:	496a      	ldr	r1, [pc, #424]	; (8009efc <HAL_OSPIM_Config+0x508>)
 8009d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d54:	4613      	mov	r3, r2
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	4413      	add	r3, r2
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	3350      	adds	r3, #80	; 0x50
 8009d5e:	443b      	add	r3, r7
 8009d60:	3b30      	subs	r3, #48	; 0x30
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	440b      	add	r3, r1
 8009d6e:	6859      	ldr	r1, [r3, #4]
 8009d70:	4862      	ldr	r0, [pc, #392]	; (8009efc <HAL_OSPIM_Config+0x508>)
 8009d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d74:	4613      	mov	r3, r2
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	4413      	add	r3, r2
 8009d7a:	00db      	lsls	r3, r3, #3
 8009d7c:	3350      	adds	r3, #80	; 0x50
 8009d7e:	443b      	add	r3, r7
 8009d80:	3b30      	subs	r3, #48	; 0x30
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4403      	add	r3, r0
 8009d92:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d96:	4613      	mov	r3, r2
 8009d98:	005b      	lsls	r3, r3, #1
 8009d9a:	4413      	add	r3, r2
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	3350      	adds	r3, #80	; 0x50
 8009da0:	443b      	add	r3, r7
 8009da2:	3b2c      	subs	r3, #44	; 0x2c
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d021      	beq.n	8009dee <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8009daa:	4954      	ldr	r1, [pc, #336]	; (8009efc <HAL_OSPIM_Config+0x508>)
 8009dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dae:	4613      	mov	r3, r2
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	4413      	add	r3, r2
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	3350      	adds	r3, #80	; 0x50
 8009db8:	443b      	add	r3, r7
 8009dba:	3b2c      	subs	r3, #44	; 0x2c
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	440b      	add	r3, r1
 8009dc8:	6859      	ldr	r1, [r3, #4]
 8009dca:	484c      	ldr	r0, [pc, #304]	; (8009efc <HAL_OSPIM_Config+0x508>)
 8009dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dce:	4613      	mov	r3, r2
 8009dd0:	005b      	lsls	r3, r3, #1
 8009dd2:	4413      	add	r3, r2
 8009dd4:	00db      	lsls	r3, r3, #3
 8009dd6:	3350      	adds	r3, #80	; 0x50
 8009dd8:	443b      	add	r3, r7
 8009dda:	3b2c      	subs	r3, #44	; 0x2c
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4403      	add	r3, r0
 8009dec:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	6819      	ldr	r1, [r3, #0]
 8009df2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009df6:	4613      	mov	r3, r2
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	4413      	add	r3, r2
 8009dfc:	00db      	lsls	r3, r3, #3
 8009dfe:	3350      	adds	r3, #80	; 0x50
 8009e00:	443b      	add	r3, r7
 8009e02:	3b3c      	subs	r3, #60	; 0x3c
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4299      	cmp	r1, r3
 8009e08:	d038      	beq.n	8009e7c <HAL_OSPIM_Config+0x488>
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6859      	ldr	r1, [r3, #4]
 8009e0e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009e12:	4613      	mov	r3, r2
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	4413      	add	r3, r2
 8009e18:	00db      	lsls	r3, r3, #3
 8009e1a:	3350      	adds	r3, #80	; 0x50
 8009e1c:	443b      	add	r3, r7
 8009e1e:	3b38      	subs	r3, #56	; 0x38
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4299      	cmp	r1, r3
 8009e24:	d02a      	beq.n	8009e7c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6899      	ldr	r1, [r3, #8]
 8009e2a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009e2e:	4613      	mov	r3, r2
 8009e30:	005b      	lsls	r3, r3, #1
 8009e32:	4413      	add	r3, r2
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	3350      	adds	r3, #80	; 0x50
 8009e38:	443b      	add	r3, r7
 8009e3a:	3b34      	subs	r3, #52	; 0x34
 8009e3c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8009e3e:	4299      	cmp	r1, r3
 8009e40:	d01c      	beq.n	8009e7c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	68d9      	ldr	r1, [r3, #12]
 8009e46:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	4413      	add	r3, r2
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	3350      	adds	r3, #80	; 0x50
 8009e54:	443b      	add	r3, r7
 8009e56:	3b30      	subs	r3, #48	; 0x30
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4299      	cmp	r1, r3
 8009e5c:	d00e      	beq.n	8009e7c <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	6919      	ldr	r1, [r3, #16]
 8009e62:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009e66:	4613      	mov	r3, r2
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	4413      	add	r3, r2
 8009e6c:	00db      	lsls	r3, r3, #3
 8009e6e:	3350      	adds	r3, #80	; 0x50
 8009e70:	443b      	add	r3, r7
 8009e72:	3b2c      	subs	r3, #44	; 0x2c
 8009e74:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009e76:	4299      	cmp	r1, r3
 8009e78:	f040 810e 	bne.w	800a098 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	6819      	ldr	r1, [r3, #0]
 8009e80:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009e84:	4613      	mov	r3, r2
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	4413      	add	r3, r2
 8009e8a:	00db      	lsls	r3, r3, #3
 8009e8c:	3350      	adds	r3, #80	; 0x50
 8009e8e:	443b      	add	r3, r7
 8009e90:	3b3c      	subs	r3, #60	; 0x3c
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4299      	cmp	r1, r3
 8009e96:	d133      	bne.n	8009f00 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	6859      	ldr	r1, [r3, #4]
 8009e9c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	4413      	add	r3, r2
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	3350      	adds	r3, #80	; 0x50
 8009eaa:	443b      	add	r3, r7
 8009eac:	3b38      	subs	r3, #56	; 0x38
 8009eae:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8009eb0:	4299      	cmp	r1, r3
 8009eb2:	d125      	bne.n	8009f00 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	68d9      	ldr	r1, [r3, #12]
 8009eb8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	4413      	add	r3, r2
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	3350      	adds	r3, #80	; 0x50
 8009ec6:	443b      	add	r3, r7
 8009ec8:	3b30      	subs	r3, #48	; 0x30
 8009eca:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	d117      	bne.n	8009f00 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	6919      	ldr	r1, [r3, #16]
 8009ed4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009ed8:	4613      	mov	r3, r2
 8009eda:	005b      	lsls	r3, r3, #1
 8009edc:	4413      	add	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	3350      	adds	r3, #80	; 0x50
 8009ee2:	443b      	add	r3, r7
 8009ee4:	3b2c      	subs	r3, #44	; 0x2c
 8009ee6:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8009ee8:	4299      	cmp	r1, r3
 8009eea:	d109      	bne.n	8009f00 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009eec:	4b03      	ldr	r3, [pc, #12]	; (8009efc <HAL_OSPIM_Config+0x508>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a02      	ldr	r2, [pc, #8]	; (8009efc <HAL_OSPIM_Config+0x508>)
 8009ef2:	f043 0301 	orr.w	r3, r3, #1
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	e0ce      	b.n	800a098 <HAL_OSPIM_Config+0x6a4>
 8009efa:	bf00      	nop
 8009efc:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8009f00:	49bb      	ldr	r1, [pc, #748]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 8009f02:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f06:	4613      	mov	r3, r2
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4413      	add	r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	3350      	adds	r3, #80	; 0x50
 8009f10:	443b      	add	r3, r7
 8009f12:	3b3c      	subs	r3, #60	; 0x3c
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	440b      	add	r3, r1
 8009f1c:	6859      	ldr	r1, [r3, #4]
 8009f1e:	48b4      	ldr	r0, [pc, #720]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 8009f20:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f24:	4613      	mov	r3, r2
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	4413      	add	r3, r2
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	3350      	adds	r3, #80	; 0x50
 8009f2e:	443b      	add	r3, r7
 8009f30:	3b3c      	subs	r3, #60	; 0x3c
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	f021 0201 	bic.w	r2, r1, #1
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4403      	add	r3, r0
 8009f3e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8009f40:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f44:	4613      	mov	r3, r2
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	4413      	add	r3, r2
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	3350      	adds	r3, #80	; 0x50
 8009f4e:	443b      	add	r3, r7
 8009f50:	3b38      	subs	r3, #56	; 0x38
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d01f      	beq.n	8009f98 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8009f58:	49a5      	ldr	r1, [pc, #660]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 8009f5a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f5e:	4613      	mov	r3, r2
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	4413      	add	r3, r2
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	3350      	adds	r3, #80	; 0x50
 8009f68:	443b      	add	r3, r7
 8009f6a:	3b38      	subs	r3, #56	; 0x38
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	440b      	add	r3, r1
 8009f74:	6859      	ldr	r1, [r3, #4]
 8009f76:	489e      	ldr	r0, [pc, #632]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 8009f78:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	4413      	add	r3, r2
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	3350      	adds	r3, #80	; 0x50
 8009f86:	443b      	add	r3, r7
 8009f88:	3b38      	subs	r3, #56	; 0x38
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	f021 0210 	bic.w	r2, r1, #16
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4403      	add	r3, r0
 8009f96:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8009f98:	4995      	ldr	r1, [pc, #596]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 8009f9a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	4413      	add	r3, r2
 8009fa4:	00db      	lsls	r3, r3, #3
 8009fa6:	3350      	adds	r3, #80	; 0x50
 8009fa8:	443b      	add	r3, r7
 8009faa:	3b34      	subs	r3, #52	; 0x34
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	440b      	add	r3, r1
 8009fb4:	6859      	ldr	r1, [r3, #4]
 8009fb6:	488e      	ldr	r0, [pc, #568]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 8009fb8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	4413      	add	r3, r2
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	3350      	adds	r3, #80	; 0x50
 8009fc6:	443b      	add	r3, r7
 8009fc8:	3b34      	subs	r3, #52	; 0x34
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4403      	add	r3, r0
 8009fd6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009fd8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009fdc:	4613      	mov	r3, r2
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	4413      	add	r3, r2
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	3350      	adds	r3, #80	; 0x50
 8009fe6:	443b      	add	r3, r7
 8009fe8:	3b30      	subs	r3, #48	; 0x30
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d023      	beq.n	800a038 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009ff0:	497f      	ldr	r1, [pc, #508]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 8009ff2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	4413      	add	r3, r2
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	3350      	adds	r3, #80	; 0x50
 800a000:	443b      	add	r3, r7
 800a002:	3b30      	subs	r3, #48	; 0x30
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3b01      	subs	r3, #1
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	6859      	ldr	r1, [r3, #4]
 800a012:	4877      	ldr	r0, [pc, #476]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a014:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a018:	4613      	mov	r3, r2
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	4413      	add	r3, r2
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	3350      	adds	r3, #80	; 0x50
 800a022:	443b      	add	r3, r7
 800a024:	3b30      	subs	r3, #48	; 0x30
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3b01      	subs	r3, #1
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4403      	add	r3, r0
 800a036:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a038:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a03c:	4613      	mov	r3, r2
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	4413      	add	r3, r2
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	3350      	adds	r3, #80	; 0x50
 800a046:	443b      	add	r3, r7
 800a048:	3b2c      	subs	r3, #44	; 0x2c
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d023      	beq.n	800a098 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a050:	4967      	ldr	r1, [pc, #412]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a052:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a056:	4613      	mov	r3, r2
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	4413      	add	r3, r2
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	3350      	adds	r3, #80	; 0x50
 800a060:	443b      	add	r3, r7
 800a062:	3b2c      	subs	r3, #44	; 0x2c
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3b01      	subs	r3, #1
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	440b      	add	r3, r1
 800a070:	6859      	ldr	r1, [r3, #4]
 800a072:	485f      	ldr	r0, [pc, #380]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a074:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a078:	4613      	mov	r3, r2
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	4413      	add	r3, r2
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	3350      	adds	r3, #80	; 0x50
 800a082:	443b      	add	r3, r7
 800a084:	3b2c      	subs	r3, #44	; 0x2c
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3b01      	subs	r3, #1
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4403      	add	r3, r0
 800a096:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800a098:	4a55      	ldr	r2, [pc, #340]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ac:	025b      	lsls	r3, r3, #9
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	494f      	ldr	r1, [pc, #316]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	440b      	add	r3, r1
 800a0c0:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	1e5a      	subs	r2, r3, #1
 800a0c8:	4b49      	ldr	r3, [pc, #292]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	0c1b      	lsrs	r3, r3, #16
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d90a      	bls.n	800a0ea <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800a0d4:	4b46      	ldr	r3, [pc, #280]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	041b      	lsls	r3, r3, #16
 800a0e4:	4942      	ldr	r1, [pc, #264]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a0ea:	4b41      	ldr	r3, [pc, #260]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 809a 	beq.w	800a22c <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800a0f8:	4a3d      	ldr	r2, [pc, #244]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f023 0203 	bic.w	r2, r3, #3
 800a10a:	4939      	ldr	r1, [pc, #228]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3b01      	subs	r3, #1
 800a112:	f042 0201 	orr.w	r2, r2, #1
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	440b      	add	r3, r1
 800a11a:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d011      	beq.n	800a148 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800a124:	4a32      	ldr	r2, [pc, #200]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a136:	492e      	ldr	r1, [pc, #184]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	f042 0210 	orr.w	r2, r2, #16
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	440b      	add	r3, r1
 800a146:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d016      	beq.n	800a182 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800a154:	4a26      	ldr	r2, [pc, #152]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a16a:	4921      	ldr	r1, [pc, #132]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	3b01      	subs	r3, #1
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	440b      	add	r3, r1
 800a17e:	605a      	str	r2, [r3, #4]
 800a180:	e019      	b.n	800a1b6 <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d015      	beq.n	800a1b6 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800a18a:	4a19      	ldr	r2, [pc, #100]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	3b01      	subs	r3, #1
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a1a0:	4913      	ldr	r1, [pc, #76]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	440b      	add	r3, r1
 800a1b4:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d018      	beq.n	800a1f4 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a1c2:	4a0b      	ldr	r2, [pc, #44]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a1d8:	4905      	ldr	r1, [pc, #20]	; (800a1f0 <HAL_OSPIM_Config+0x7fc>)
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	440b      	add	r3, r1
 800a1ec:	605a      	str	r2, [r3, #4]
 800a1ee:	e0c5      	b.n	800a37c <HAL_OSPIM_Config+0x988>
 800a1f0:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 80bf 	beq.w	800a37c <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a1fe:	4a6e      	ldr	r2, [pc, #440]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	3b01      	subs	r3, #1
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a214:	4968      	ldr	r1, [pc, #416]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	440b      	add	r3, r1
 800a228:	605a      	str	r2, [r3, #4]
 800a22a:	e0a7      	b.n	800a37c <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800a22c:	4a62      	ldr	r2, [pc, #392]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3b01      	subs	r3, #1
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f023 0203 	bic.w	r2, r3, #3
 800a23e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	431a      	orrs	r2, r3
 800a244:	495c      	ldr	r1, [pc, #368]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	f042 0201 	orr.w	r2, r2, #1
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	440b      	add	r3, r1
 800a254:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d014      	beq.n	800a288 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800a25e:	4a56      	ldr	r2, [pc, #344]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	3b01      	subs	r3, #1
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a272:	015b      	lsls	r3, r3, #5
 800a274:	431a      	orrs	r2, r3
 800a276:	4950      	ldr	r1, [pc, #320]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	f042 0210 	orr.w	r2, r2, #16
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	440b      	add	r3, r1
 800a286:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d019      	beq.n	800a2c8 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800a294:	4a48      	ldr	r2, [pc, #288]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a2aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ac:	049b      	lsls	r3, r3, #18
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	4941      	ldr	r1, [pc, #260]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	440b      	add	r3, r1
 800a2c4:	605a      	str	r2, [r3, #4]
 800a2c6:	e01c      	b.n	800a302 <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d018      	beq.n	800a302 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800a2d0:	4a39      	ldr	r2, [pc, #228]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a2e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2e8:	069b      	lsls	r3, r3, #26
 800a2ea:	431a      	orrs	r2, r3
 800a2ec:	4932      	ldr	r1, [pc, #200]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	f003 0301 	and.w	r3, r3, #1
 800a2f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	440b      	add	r3, r1
 800a300:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d019      	beq.n	800a342 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a30e:	4a2a      	ldr	r2, [pc, #168]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	3b01      	subs	r3, #1
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a326:	049b      	lsls	r3, r3, #18
 800a328:	431a      	orrs	r2, r3
 800a32a:	4923      	ldr	r1, [pc, #140]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	3b01      	subs	r3, #1
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	440b      	add	r3, r1
 800a33e:	605a      	str	r2, [r3, #4]
 800a340:	e01c      	b.n	800a37c <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d018      	beq.n	800a37c <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800a34a:	4a1b      	ldr	r2, [pc, #108]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	3b01      	subs	r3, #1
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a362:	069b      	lsls	r3, r3, #26
 800a364:	431a      	orrs	r2, r3
 800a366:	4914      	ldr	r1, [pc, #80]	; (800a3b8 <HAL_OSPIM_Config+0x9c4>)
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	440b      	add	r3, r1
 800a37a:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800a37c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a380:	f003 0301 	and.w	r3, r3, #1
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a388:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <HAL_OSPIM_Config+0x9c8>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a0b      	ldr	r2, [pc, #44]	; (800a3bc <HAL_OSPIM_Config+0x9c8>)
 800a38e:	f043 0301 	orr.w	r3, r3, #1
 800a392:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800a394:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a398:	f003 0302 	and.w	r3, r3, #2
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d005      	beq.n	800a3ac <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a3a0:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <HAL_OSPIM_Config+0x9cc>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a06      	ldr	r2, [pc, #24]	; (800a3c0 <HAL_OSPIM_Config+0x9cc>)
 800a3a6:	f043 0301 	orr.w	r3, r3, #1
 800a3aa:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800a3ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3750      	adds	r7, #80	; 0x50
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	5200b400 	.word	0x5200b400
 800a3bc:	52005000 	.word	0x52005000
 800a3c0:	5200a000 	.word	0x5200a000

0800a3c4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a3d4:	e01a      	b.n	800a40c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3dc:	d016      	beq.n	800a40c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3de:	f7fa fe39 	bl	8005054 <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d302      	bcc.n	800a3f4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10b      	bne.n	800a40c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3fa:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a400:	f043 0201 	orr.w	r2, r3, #1
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e00e      	b.n	800a42a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6a1a      	ldr	r2, [r3, #32]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	4013      	ands	r3, r2
 800a416:	2b00      	cmp	r3, #0
 800a418:	bf14      	ite	ne
 800a41a:	2301      	movne	r3, #1
 800a41c:	2300      	moveq	r3, #0
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	461a      	mov	r2, r3
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	429a      	cmp	r2, r3
 800a426:	d1d6      	bne.n	800a3d6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
	...

0800a434 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	4603      	mov	r3, r0
 800a43c:	6039      	str	r1, [r7, #0]
 800a43e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800a444:	2300      	movs	r3, #0
 800a446:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d005      	beq.n	800a45a <OSPIM_GetConfig+0x26>
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	2b02      	cmp	r3, #2
 800a452:	d802      	bhi.n	800a45a <OSPIM_GetConfig+0x26>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d102      	bne.n	800a460 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	75fb      	strb	r3, [r7, #23]
 800a45e:	e098      	b.n	800a592 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2200      	movs	r2, #0
 800a46a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	2200      	movs	r2, #0
 800a470:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2200      	movs	r2, #0
 800a476:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	2200      	movs	r2, #0
 800a47c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800a47e:	79fb      	ldrb	r3, [r7, #7]
 800a480:	2b02      	cmp	r3, #2
 800a482:	d10b      	bne.n	800a49c <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800a484:	4b46      	ldr	r3, [pc, #280]	; (800a5a0 <OSPIM_GetConfig+0x16c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d102      	bne.n	800a496 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800a490:	4b44      	ldr	r3, [pc, #272]	; (800a5a4 <OSPIM_GetConfig+0x170>)
 800a492:	613b      	str	r3, [r7, #16]
 800a494:	e002      	b.n	800a49c <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800a496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a49a:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800a49c:	2300      	movs	r3, #0
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	e074      	b.n	800a58c <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800a4a2:	4a3f      	ldr	r2, [pc, #252]	; (800a5a0 <OSPIM_GetConfig+0x16c>)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00a      	beq.n	800a4ce <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4053      	eors	r3, r2
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d103      	bne.n	800a4ce <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	f003 0310 	and.w	r3, r3, #16
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00a      	beq.n	800a4ee <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	4053      	eors	r3, r2
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d103      	bne.n	800a4ee <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	4053      	eors	r3, r2
 800a4fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a502:	2b00      	cmp	r3, #0
 800a504:	d103      	bne.n	800a50e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d018      	beq.n	800a54a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	4053      	eors	r3, r2
 800a51e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d111      	bne.n	800a54a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d106      	bne.n	800a53e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3301      	adds	r3, #1
 800a534:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	60da      	str	r2, [r3, #12]
 800a53c:	e005      	b.n	800a54a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3301      	adds	r3, #1
 800a542:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d018      	beq.n	800a586 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	4053      	eors	r3, r2
 800a55a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d111      	bne.n	800a586 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d106      	bne.n	800a57a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3301      	adds	r3, #1
 800a570:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	611a      	str	r2, [r3, #16]
 800a578:	e005      	b.n	800a586 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3301      	adds	r3, #1
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d987      	bls.n	800a4a2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800a592:	7dfb      	ldrb	r3, [r7, #23]
}
 800a594:	4618      	mov	r0, r3
 800a596:	371c      	adds	r7, #28
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	5200b400 	.word	0x5200b400
 800a5a4:	04040222 	.word	0x04040222

0800a5a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a5ac:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a04      	ldr	r2, [pc, #16]	; (800a5c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a5b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b6:	6013      	str	r3, [r2, #0]
}
 800a5b8:	bf00      	nop
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	58024800 	.word	0x58024800

0800a5c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a5d0:	4b29      	ldr	r3, [pc, #164]	; (800a678 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	f003 0307 	and.w	r3, r3, #7
 800a5d8:	2b06      	cmp	r3, #6
 800a5da:	d00a      	beq.n	800a5f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a5dc:	4b26      	ldr	r3, [pc, #152]	; (800a678 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d001      	beq.n	800a5ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e040      	b.n	800a670 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	e03e      	b.n	800a670 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a5f2:	4b21      	ldr	r3, [pc, #132]	; (800a678 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a5fa:	491f      	ldr	r1, [pc, #124]	; (800a678 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a602:	f7fa fd27 	bl	8005054 <HAL_GetTick>
 800a606:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a608:	e009      	b.n	800a61e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a60a:	f7fa fd23 	bl	8005054 <HAL_GetTick>
 800a60e:	4602      	mov	r2, r0
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a618:	d901      	bls.n	800a61e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e028      	b.n	800a670 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a61e:	4b16      	ldr	r3, [pc, #88]	; (800a678 <HAL_PWREx_ConfigSupply+0xb0>)
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a62a:	d1ee      	bne.n	800a60a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b1e      	cmp	r3, #30
 800a630:	d008      	beq.n	800a644 <HAL_PWREx_ConfigSupply+0x7c>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b2e      	cmp	r3, #46	; 0x2e
 800a636:	d005      	beq.n	800a644 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b1d      	cmp	r3, #29
 800a63c:	d002      	beq.n	800a644 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b2d      	cmp	r3, #45	; 0x2d
 800a642:	d114      	bne.n	800a66e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a644:	f7fa fd06 	bl	8005054 <HAL_GetTick>
 800a648:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a64a:	e009      	b.n	800a660 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a64c:	f7fa fd02 	bl	8005054 <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a65a:	d901      	bls.n	800a660 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e007      	b.n	800a670 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a660:	4b05      	ldr	r3, [pc, #20]	; (800a678 <HAL_PWREx_ConfigSupply+0xb0>)
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a66c:	d1ee      	bne.n	800a64c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	58024800 	.word	0x58024800

0800a67c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b08c      	sub	sp, #48	; 0x30
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	f000 bc1f 	b.w	800aece <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 80b3 	beq.w	800a804 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a69e:	4b95      	ldr	r3, [pc, #596]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6a8:	4b92      	ldr	r3, [pc, #584]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b0:	2b10      	cmp	r3, #16
 800a6b2:	d007      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x48>
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	2b18      	cmp	r3, #24
 800a6b8:	d112      	bne.n	800a6e0 <HAL_RCC_OscConfig+0x64>
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	f003 0303 	and.w	r3, r3, #3
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d10d      	bne.n	800a6e0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6c4:	4b8b      	ldr	r3, [pc, #556]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 8098 	beq.w	800a802 <HAL_RCC_OscConfig+0x186>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f040 8093 	bne.w	800a802 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e3f6      	b.n	800aece <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6e8:	d106      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x7c>
 800a6ea:	4b82      	ldr	r3, [pc, #520]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a81      	ldr	r2, [pc, #516]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a6f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	e058      	b.n	800a7aa <HAL_RCC_OscConfig+0x12e>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d112      	bne.n	800a726 <HAL_RCC_OscConfig+0xaa>
 800a700:	4b7c      	ldr	r3, [pc, #496]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a7b      	ldr	r2, [pc, #492]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	4b79      	ldr	r3, [pc, #484]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a78      	ldr	r2, [pc, #480]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a712:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	4b76      	ldr	r3, [pc, #472]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a75      	ldr	r2, [pc, #468]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a71e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	e041      	b.n	800a7aa <HAL_RCC_OscConfig+0x12e>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a72e:	d112      	bne.n	800a756 <HAL_RCC_OscConfig+0xda>
 800a730:	4b70      	ldr	r3, [pc, #448]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a6f      	ldr	r2, [pc, #444]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	4b6d      	ldr	r3, [pc, #436]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a6c      	ldr	r2, [pc, #432]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a742:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	4b6a      	ldr	r3, [pc, #424]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a69      	ldr	r2, [pc, #420]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a74e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	e029      	b.n	800a7aa <HAL_RCC_OscConfig+0x12e>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a75e:	d112      	bne.n	800a786 <HAL_RCC_OscConfig+0x10a>
 800a760:	4b64      	ldr	r3, [pc, #400]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a63      	ldr	r2, [pc, #396]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a76a:	6013      	str	r3, [r2, #0]
 800a76c:	4b61      	ldr	r3, [pc, #388]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a60      	ldr	r2, [pc, #384]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	4b5e      	ldr	r3, [pc, #376]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a5d      	ldr	r2, [pc, #372]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a77e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	e011      	b.n	800a7aa <HAL_RCC_OscConfig+0x12e>
 800a786:	4b5b      	ldr	r3, [pc, #364]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a5a      	ldr	r2, [pc, #360]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a78c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	4b58      	ldr	r3, [pc, #352]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a57      	ldr	r2, [pc, #348]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	4b55      	ldr	r3, [pc, #340]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a54      	ldr	r2, [pc, #336]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a7a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a7a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d013      	beq.n	800a7da <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7b2:	f7fa fc4f 	bl	8005054 <HAL_GetTick>
 800a7b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7b8:	e008      	b.n	800a7cc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7ba:	f7fa fc4b 	bl	8005054 <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b64      	cmp	r3, #100	; 0x64
 800a7c6:	d901      	bls.n	800a7cc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e380      	b.n	800aece <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7cc:	4b49      	ldr	r3, [pc, #292]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0f0      	beq.n	800a7ba <HAL_RCC_OscConfig+0x13e>
 800a7d8:	e014      	b.n	800a804 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7da:	f7fa fc3b 	bl	8005054 <HAL_GetTick>
 800a7de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7e0:	e008      	b.n	800a7f4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7e2:	f7fa fc37 	bl	8005054 <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	2b64      	cmp	r3, #100	; 0x64
 800a7ee:	d901      	bls.n	800a7f4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e36c      	b.n	800aece <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7f4:	4b3f      	ldr	r3, [pc, #252]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1f0      	bne.n	800a7e2 <HAL_RCC_OscConfig+0x166>
 800a800:	e000      	b.n	800a804 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a802:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0302 	and.w	r3, r3, #2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f000 808c 	beq.w	800a92a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a812:	4b38      	ldr	r3, [pc, #224]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a81a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a81c:	4b35      	ldr	r3, [pc, #212]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a820:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d007      	beq.n	800a838 <HAL_RCC_OscConfig+0x1bc>
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	2b18      	cmp	r3, #24
 800a82c:	d137      	bne.n	800a89e <HAL_RCC_OscConfig+0x222>
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	f003 0303 	and.w	r3, r3, #3
 800a834:	2b00      	cmp	r3, #0
 800a836:	d132      	bne.n	800a89e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a838:	4b2e      	ldr	r3, [pc, #184]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0304 	and.w	r3, r3, #4
 800a840:	2b00      	cmp	r3, #0
 800a842:	d005      	beq.n	800a850 <HAL_RCC_OscConfig+0x1d4>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e33e      	b.n	800aece <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a850:	4b28      	ldr	r3, [pc, #160]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f023 0219 	bic.w	r2, r3, #25
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	4925      	ldr	r1, [pc, #148]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a85e:	4313      	orrs	r3, r2
 800a860:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a862:	f7fa fbf7 	bl	8005054 <HAL_GetTick>
 800a866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a868:	e008      	b.n	800a87c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a86a:	f7fa fbf3 	bl	8005054 <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	2b02      	cmp	r3, #2
 800a876:	d901      	bls.n	800a87c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e328      	b.n	800aece <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a87c:	4b1d      	ldr	r3, [pc, #116]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0304 	and.w	r3, r3, #4
 800a884:	2b00      	cmp	r3, #0
 800a886:	d0f0      	beq.n	800a86a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a888:	4b1a      	ldr	r3, [pc, #104]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	061b      	lsls	r3, r3, #24
 800a896:	4917      	ldr	r1, [pc, #92]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a898:	4313      	orrs	r3, r2
 800a89a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a89c:	e045      	b.n	800a92a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d028      	beq.n	800a8f8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8a6:	4b13      	ldr	r3, [pc, #76]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f023 0219 	bic.w	r2, r3, #25
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	4910      	ldr	r1, [pc, #64]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b8:	f7fa fbcc 	bl	8005054 <HAL_GetTick>
 800a8bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8be:	e008      	b.n	800a8d2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8c0:	f7fa fbc8 	bl	8005054 <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d901      	bls.n	800a8d2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e2fd      	b.n	800aece <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8d2:	4b08      	ldr	r3, [pc, #32]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0304 	and.w	r3, r3, #4
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0f0      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8de:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	061b      	lsls	r3, r3, #24
 800a8ec:	4901      	ldr	r1, [pc, #4]	; (800a8f4 <HAL_RCC_OscConfig+0x278>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	604b      	str	r3, [r1, #4]
 800a8f2:	e01a      	b.n	800a92a <HAL_RCC_OscConfig+0x2ae>
 800a8f4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8f8:	4b97      	ldr	r3, [pc, #604]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a96      	ldr	r2, [pc, #600]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a8fe:	f023 0301 	bic.w	r3, r3, #1
 800a902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a904:	f7fa fba6 	bl	8005054 <HAL_GetTick>
 800a908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a90a:	e008      	b.n	800a91e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a90c:	f7fa fba2 	bl	8005054 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b02      	cmp	r3, #2
 800a918:	d901      	bls.n	800a91e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e2d7      	b.n	800aece <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a91e:	4b8e      	ldr	r3, [pc, #568]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 0304 	and.w	r3, r3, #4
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1f0      	bne.n	800a90c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0310 	and.w	r3, r3, #16
 800a932:	2b00      	cmp	r3, #0
 800a934:	d06a      	beq.n	800aa0c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a936:	4b88      	ldr	r3, [pc, #544]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a93e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a940:	4b85      	ldr	r3, [pc, #532]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a944:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	2b08      	cmp	r3, #8
 800a94a:	d007      	beq.n	800a95c <HAL_RCC_OscConfig+0x2e0>
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	2b18      	cmp	r3, #24
 800a950:	d11b      	bne.n	800a98a <HAL_RCC_OscConfig+0x30e>
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d116      	bne.n	800a98a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a95c:	4b7e      	ldr	r3, [pc, #504]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a964:	2b00      	cmp	r3, #0
 800a966:	d005      	beq.n	800a974 <HAL_RCC_OscConfig+0x2f8>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	2b80      	cmp	r3, #128	; 0x80
 800a96e:	d001      	beq.n	800a974 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e2ac      	b.n	800aece <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a974:	4b78      	ldr	r3, [pc, #480]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a1b      	ldr	r3, [r3, #32]
 800a980:	061b      	lsls	r3, r3, #24
 800a982:	4975      	ldr	r1, [pc, #468]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a984:	4313      	orrs	r3, r2
 800a986:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a988:	e040      	b.n	800aa0c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d023      	beq.n	800a9da <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a992:	4b71      	ldr	r3, [pc, #452]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a70      	ldr	r2, [pc, #448]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a99c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a99e:	f7fa fb59 	bl	8005054 <HAL_GetTick>
 800a9a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9a4:	e008      	b.n	800a9b8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9a6:	f7fa fb55 	bl	8005054 <HAL_GetTick>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d901      	bls.n	800a9b8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e28a      	b.n	800aece <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9b8:	4b67      	ldr	r3, [pc, #412]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d0f0      	beq.n	800a9a6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9c4:	4b64      	ldr	r3, [pc, #400]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	061b      	lsls	r3, r3, #24
 800a9d2:	4961      	ldr	r1, [pc, #388]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	60cb      	str	r3, [r1, #12]
 800a9d8:	e018      	b.n	800aa0c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a9da:	4b5f      	ldr	r3, [pc, #380]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a5e      	ldr	r2, [pc, #376]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800a9e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e6:	f7fa fb35 	bl	8005054 <HAL_GetTick>
 800a9ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9ec:	e008      	b.n	800aa00 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9ee:	f7fa fb31 	bl	8005054 <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d901      	bls.n	800aa00 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e266      	b.n	800aece <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa00:	4b55      	ldr	r3, [pc, #340]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1f0      	bne.n	800a9ee <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0308 	and.w	r3, r3, #8
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d036      	beq.n	800aa86 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d019      	beq.n	800aa54 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa20:	4b4d      	ldr	r3, [pc, #308]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aa22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa24:	4a4c      	ldr	r2, [pc, #304]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aa26:	f043 0301 	orr.w	r3, r3, #1
 800aa2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa2c:	f7fa fb12 	bl	8005054 <HAL_GetTick>
 800aa30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa32:	e008      	b.n	800aa46 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa34:	f7fa fb0e 	bl	8005054 <HAL_GetTick>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d901      	bls.n	800aa46 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e243      	b.n	800aece <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa46:	4b44      	ldr	r3, [pc, #272]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aa48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa4a:	f003 0302 	and.w	r3, r3, #2
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d0f0      	beq.n	800aa34 <HAL_RCC_OscConfig+0x3b8>
 800aa52:	e018      	b.n	800aa86 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa54:	4b40      	ldr	r3, [pc, #256]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aa56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa58:	4a3f      	ldr	r2, [pc, #252]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aa5a:	f023 0301 	bic.w	r3, r3, #1
 800aa5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa60:	f7fa faf8 	bl	8005054 <HAL_GetTick>
 800aa64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa66:	e008      	b.n	800aa7a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa68:	f7fa faf4 	bl	8005054 <HAL_GetTick>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d901      	bls.n	800aa7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e229      	b.n	800aece <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa7a:	4b37      	ldr	r3, [pc, #220]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aa7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa7e:	f003 0302 	and.w	r3, r3, #2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1f0      	bne.n	800aa68 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 0320 	and.w	r3, r3, #32
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d036      	beq.n	800ab00 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d019      	beq.n	800aace <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa9a:	4b2f      	ldr	r3, [pc, #188]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a2e      	ldr	r2, [pc, #184]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aaa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaa4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aaa6:	f7fa fad5 	bl	8005054 <HAL_GetTick>
 800aaaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aaac:	e008      	b.n	800aac0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaae:	f7fa fad1 	bl	8005054 <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d901      	bls.n	800aac0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e206      	b.n	800aece <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aac0:	4b25      	ldr	r3, [pc, #148]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d0f0      	beq.n	800aaae <HAL_RCC_OscConfig+0x432>
 800aacc:	e018      	b.n	800ab00 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aace:	4b22      	ldr	r3, [pc, #136]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a21      	ldr	r2, [pc, #132]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aad8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aada:	f7fa fabb 	bl	8005054 <HAL_GetTick>
 800aade:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aae0:	e008      	b.n	800aaf4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aae2:	f7fa fab7 	bl	8005054 <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d901      	bls.n	800aaf4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e1ec      	b.n	800aece <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aaf4:	4b18      	ldr	r3, [pc, #96]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1f0      	bne.n	800aae2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0304 	and.w	r3, r3, #4
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 80af 	beq.w	800ac6c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab0e:	4b13      	ldr	r3, [pc, #76]	; (800ab5c <HAL_RCC_OscConfig+0x4e0>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a12      	ldr	r2, [pc, #72]	; (800ab5c <HAL_RCC_OscConfig+0x4e0>)
 800ab14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab1a:	f7fa fa9b 	bl	8005054 <HAL_GetTick>
 800ab1e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab20:	e008      	b.n	800ab34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab22:	f7fa fa97 	bl	8005054 <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	2b64      	cmp	r3, #100	; 0x64
 800ab2e:	d901      	bls.n	800ab34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e1cc      	b.n	800aece <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab34:	4b09      	ldr	r3, [pc, #36]	; (800ab5c <HAL_RCC_OscConfig+0x4e0>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0f0      	beq.n	800ab22 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d10b      	bne.n	800ab60 <HAL_RCC_OscConfig+0x4e4>
 800ab48:	4b03      	ldr	r3, [pc, #12]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800ab4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab4c:	4a02      	ldr	r2, [pc, #8]	; (800ab58 <HAL_RCC_OscConfig+0x4dc>)
 800ab4e:	f043 0301 	orr.w	r3, r3, #1
 800ab52:	6713      	str	r3, [r2, #112]	; 0x70
 800ab54:	e05b      	b.n	800ac0e <HAL_RCC_OscConfig+0x592>
 800ab56:	bf00      	nop
 800ab58:	58024400 	.word	0x58024400
 800ab5c:	58024800 	.word	0x58024800
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d112      	bne.n	800ab8e <HAL_RCC_OscConfig+0x512>
 800ab68:	4b9d      	ldr	r3, [pc, #628]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ab6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6c:	4a9c      	ldr	r2, [pc, #624]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ab6e:	f023 0301 	bic.w	r3, r3, #1
 800ab72:	6713      	str	r3, [r2, #112]	; 0x70
 800ab74:	4b9a      	ldr	r3, [pc, #616]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ab76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab78:	4a99      	ldr	r2, [pc, #612]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ab7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab7e:	6713      	str	r3, [r2, #112]	; 0x70
 800ab80:	4b97      	ldr	r3, [pc, #604]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ab82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab84:	4a96      	ldr	r2, [pc, #600]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ab86:	f023 0304 	bic.w	r3, r3, #4
 800ab8a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab8c:	e03f      	b.n	800ac0e <HAL_RCC_OscConfig+0x592>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	d112      	bne.n	800abbc <HAL_RCC_OscConfig+0x540>
 800ab96:	4b92      	ldr	r3, [pc, #584]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ab98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9a:	4a91      	ldr	r2, [pc, #580]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ab9c:	f043 0304 	orr.w	r3, r3, #4
 800aba0:	6713      	str	r3, [r2, #112]	; 0x70
 800aba2:	4b8f      	ldr	r3, [pc, #572]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800aba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba6:	4a8e      	ldr	r2, [pc, #568]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800aba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abac:	6713      	str	r3, [r2, #112]	; 0x70
 800abae:	4b8c      	ldr	r3, [pc, #560]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb2:	4a8b      	ldr	r2, [pc, #556]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abb4:	f043 0301 	orr.w	r3, r3, #1
 800abb8:	6713      	str	r3, [r2, #112]	; 0x70
 800abba:	e028      	b.n	800ac0e <HAL_RCC_OscConfig+0x592>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	2b85      	cmp	r3, #133	; 0x85
 800abc2:	d112      	bne.n	800abea <HAL_RCC_OscConfig+0x56e>
 800abc4:	4b86      	ldr	r3, [pc, #536]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc8:	4a85      	ldr	r2, [pc, #532]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abca:	f043 0304 	orr.w	r3, r3, #4
 800abce:	6713      	str	r3, [r2, #112]	; 0x70
 800abd0:	4b83      	ldr	r3, [pc, #524]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd4:	4a82      	ldr	r2, [pc, #520]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abda:	6713      	str	r3, [r2, #112]	; 0x70
 800abdc:	4b80      	ldr	r3, [pc, #512]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe0:	4a7f      	ldr	r2, [pc, #508]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abe2:	f043 0301 	orr.w	r3, r3, #1
 800abe6:	6713      	str	r3, [r2, #112]	; 0x70
 800abe8:	e011      	b.n	800ac0e <HAL_RCC_OscConfig+0x592>
 800abea:	4b7d      	ldr	r3, [pc, #500]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abee:	4a7c      	ldr	r2, [pc, #496]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abf0:	f023 0301 	bic.w	r3, r3, #1
 800abf4:	6713      	str	r3, [r2, #112]	; 0x70
 800abf6:	4b7a      	ldr	r3, [pc, #488]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfa:	4a79      	ldr	r2, [pc, #484]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800abfc:	f023 0304 	bic.w	r3, r3, #4
 800ac00:	6713      	str	r3, [r2, #112]	; 0x70
 800ac02:	4b77      	ldr	r3, [pc, #476]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ac04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac06:	4a76      	ldr	r2, [pc, #472]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ac08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d015      	beq.n	800ac42 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac16:	f7fa fa1d 	bl	8005054 <HAL_GetTick>
 800ac1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac1c:	e00a      	b.n	800ac34 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac1e:	f7fa fa19 	bl	8005054 <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d901      	bls.n	800ac34 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e14c      	b.n	800aece <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac34:	4b6a      	ldr	r3, [pc, #424]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ac36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0ee      	beq.n	800ac1e <HAL_RCC_OscConfig+0x5a2>
 800ac40:	e014      	b.n	800ac6c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac42:	f7fa fa07 	bl	8005054 <HAL_GetTick>
 800ac46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac48:	e00a      	b.n	800ac60 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac4a:	f7fa fa03 	bl	8005054 <HAL_GetTick>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d901      	bls.n	800ac60 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e136      	b.n	800aece <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac60:	4b5f      	ldr	r3, [pc, #380]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ac62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac64:	f003 0302 	and.w	r3, r3, #2
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1ee      	bne.n	800ac4a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 812b 	beq.w	800aecc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac76:	4b5a      	ldr	r3, [pc, #360]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac7e:	2b18      	cmp	r3, #24
 800ac80:	f000 80bb 	beq.w	800adfa <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	f040 8095 	bne.w	800adb8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac8e:	4b54      	ldr	r3, [pc, #336]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a53      	ldr	r2, [pc, #332]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ac94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac9a:	f7fa f9db 	bl	8005054 <HAL_GetTick>
 800ac9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aca0:	e008      	b.n	800acb4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aca2:	f7fa f9d7 	bl	8005054 <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	2b02      	cmp	r3, #2
 800acae:	d901      	bls.n	800acb4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e10c      	b.n	800aece <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acb4:	4b4a      	ldr	r3, [pc, #296]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1f0      	bne.n	800aca2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acc0:	4b47      	ldr	r3, [pc, #284]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800acc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acc4:	4b47      	ldr	r3, [pc, #284]	; (800ade4 <HAL_RCC_OscConfig+0x768>)
 800acc6:	4013      	ands	r3, r2
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800acd0:	0112      	lsls	r2, r2, #4
 800acd2:	430a      	orrs	r2, r1
 800acd4:	4942      	ldr	r1, [pc, #264]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	628b      	str	r3, [r1, #40]	; 0x28
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acde:	3b01      	subs	r3, #1
 800ace0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace8:	3b01      	subs	r3, #1
 800acea:	025b      	lsls	r3, r3, #9
 800acec:	b29b      	uxth	r3, r3
 800acee:	431a      	orrs	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf4:	3b01      	subs	r3, #1
 800acf6:	041b      	lsls	r3, r3, #16
 800acf8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800acfc:	431a      	orrs	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad02:	3b01      	subs	r3, #1
 800ad04:	061b      	lsls	r3, r3, #24
 800ad06:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad0a:	4935      	ldr	r1, [pc, #212]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ad10:	4b33      	ldr	r3, [pc, #204]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	4a32      	ldr	r2, [pc, #200]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad16:	f023 0301 	bic.w	r3, r3, #1
 800ad1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad1c:	4b30      	ldr	r3, [pc, #192]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad20:	4b31      	ldr	r3, [pc, #196]	; (800ade8 <HAL_RCC_OscConfig+0x76c>)
 800ad22:	4013      	ands	r3, r2
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ad28:	00d2      	lsls	r2, r2, #3
 800ad2a:	492d      	ldr	r1, [pc, #180]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad30:	4b2b      	ldr	r3, [pc, #172]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad34:	f023 020c 	bic.w	r2, r3, #12
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3c:	4928      	ldr	r1, [pc, #160]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad42:	4b27      	ldr	r3, [pc, #156]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad46:	f023 0202 	bic.w	r2, r3, #2
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad4e:	4924      	ldr	r1, [pc, #144]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad50:	4313      	orrs	r3, r2
 800ad52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad54:	4b22      	ldr	r3, [pc, #136]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	4a21      	ldr	r2, [pc, #132]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad60:	4b1f      	ldr	r3, [pc, #124]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad64:	4a1e      	ldr	r2, [pc, #120]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad6c:	4b1c      	ldr	r3, [pc, #112]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	4a1b      	ldr	r2, [pc, #108]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ad78:	4b19      	ldr	r3, [pc, #100]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	4a18      	ldr	r2, [pc, #96]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad7e:	f043 0301 	orr.w	r3, r3, #1
 800ad82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad84:	4b16      	ldr	r3, [pc, #88]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a15      	ldr	r2, [pc, #84]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800ad8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad90:	f7fa f960 	bl	8005054 <HAL_GetTick>
 800ad94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad96:	e008      	b.n	800adaa <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad98:	f7fa f95c 	bl	8005054 <HAL_GetTick>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d901      	bls.n	800adaa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e091      	b.n	800aece <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800adaa:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d0f0      	beq.n	800ad98 <HAL_RCC_OscConfig+0x71c>
 800adb6:	e089      	b.n	800aecc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adb8:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a08      	ldr	r2, [pc, #32]	; (800ade0 <HAL_RCC_OscConfig+0x764>)
 800adbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800adc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc4:	f7fa f946 	bl	8005054 <HAL_GetTick>
 800adc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adca:	e00f      	b.n	800adec <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adcc:	f7fa f942 	bl	8005054 <HAL_GetTick>
 800add0:	4602      	mov	r2, r0
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	2b02      	cmp	r3, #2
 800add8:	d908      	bls.n	800adec <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800adda:	2303      	movs	r3, #3
 800addc:	e077      	b.n	800aece <HAL_RCC_OscConfig+0x852>
 800adde:	bf00      	nop
 800ade0:	58024400 	.word	0x58024400
 800ade4:	fffffc0c 	.word	0xfffffc0c
 800ade8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adec:	4b3a      	ldr	r3, [pc, #232]	; (800aed8 <HAL_RCC_OscConfig+0x85c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1e9      	bne.n	800adcc <HAL_RCC_OscConfig+0x750>
 800adf8:	e068      	b.n	800aecc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800adfa:	4b37      	ldr	r3, [pc, #220]	; (800aed8 <HAL_RCC_OscConfig+0x85c>)
 800adfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ae00:	4b35      	ldr	r3, [pc, #212]	; (800aed8 <HAL_RCC_OscConfig+0x85c>)
 800ae02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae04:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d031      	beq.n	800ae72 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f003 0203 	and.w	r2, r3, #3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d12a      	bne.n	800ae72 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	091b      	lsrs	r3, r3, #4
 800ae20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d122      	bne.n	800ae72 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae36:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d11a      	bne.n	800ae72 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	0a5b      	lsrs	r3, r3, #9
 800ae40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae48:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d111      	bne.n	800ae72 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	0c1b      	lsrs	r3, r3, #16
 800ae52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d108      	bne.n	800ae72 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	0e1b      	lsrs	r3, r3, #24
 800ae64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d001      	beq.n	800ae76 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e02b      	b.n	800aece <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ae76:	4b18      	ldr	r3, [pc, #96]	; (800aed8 <HAL_RCC_OscConfig+0x85c>)
 800ae78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7a:	08db      	lsrs	r3, r3, #3
 800ae7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae80:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d01f      	beq.n	800aecc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ae8c:	4b12      	ldr	r3, [pc, #72]	; (800aed8 <HAL_RCC_OscConfig+0x85c>)
 800ae8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae90:	4a11      	ldr	r2, [pc, #68]	; (800aed8 <HAL_RCC_OscConfig+0x85c>)
 800ae92:	f023 0301 	bic.w	r3, r3, #1
 800ae96:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae98:	f7fa f8dc 	bl	8005054 <HAL_GetTick>
 800ae9c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ae9e:	bf00      	nop
 800aea0:	f7fa f8d8 	bl	8005054 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d0f9      	beq.n	800aea0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aeac:	4b0a      	ldr	r3, [pc, #40]	; (800aed8 <HAL_RCC_OscConfig+0x85c>)
 800aeae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeb0:	4b0a      	ldr	r3, [pc, #40]	; (800aedc <HAL_RCC_OscConfig+0x860>)
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aeb8:	00d2      	lsls	r2, r2, #3
 800aeba:	4907      	ldr	r1, [pc, #28]	; (800aed8 <HAL_RCC_OscConfig+0x85c>)
 800aebc:	4313      	orrs	r3, r2
 800aebe:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aec0:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <HAL_RCC_OscConfig+0x85c>)
 800aec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec4:	4a04      	ldr	r2, [pc, #16]	; (800aed8 <HAL_RCC_OscConfig+0x85c>)
 800aec6:	f043 0301 	orr.w	r3, r3, #1
 800aeca:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3730      	adds	r7, #48	; 0x30
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	58024400 	.word	0x58024400
 800aedc:	ffff0007 	.word	0xffff0007

0800aee0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e19c      	b.n	800b22e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aef4:	4b8a      	ldr	r3, [pc, #552]	; (800b120 <HAL_RCC_ClockConfig+0x240>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 030f 	and.w	r3, r3, #15
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d910      	bls.n	800af24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af02:	4b87      	ldr	r3, [pc, #540]	; (800b120 <HAL_RCC_ClockConfig+0x240>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f023 020f 	bic.w	r2, r3, #15
 800af0a:	4985      	ldr	r1, [pc, #532]	; (800b120 <HAL_RCC_ClockConfig+0x240>)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	4313      	orrs	r3, r2
 800af10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af12:	4b83      	ldr	r3, [pc, #524]	; (800b120 <HAL_RCC_ClockConfig+0x240>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 030f 	and.w	r3, r3, #15
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d001      	beq.n	800af24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e184      	b.n	800b22e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d010      	beq.n	800af52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	691a      	ldr	r2, [r3, #16]
 800af34:	4b7b      	ldr	r3, [pc, #492]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d908      	bls.n	800af52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af40:	4b78      	ldr	r3, [pc, #480]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	4975      	ldr	r1, [pc, #468]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800af4e:	4313      	orrs	r3, r2
 800af50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 0308 	and.w	r3, r3, #8
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d010      	beq.n	800af80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	695a      	ldr	r2, [r3, #20]
 800af62:	4b70      	ldr	r3, [pc, #448]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d908      	bls.n	800af80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af6e:	4b6d      	ldr	r3, [pc, #436]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800af70:	69db      	ldr	r3, [r3, #28]
 800af72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	496a      	ldr	r1, [pc, #424]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800af7c:	4313      	orrs	r3, r2
 800af7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 0310 	and.w	r3, r3, #16
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d010      	beq.n	800afae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	699a      	ldr	r2, [r3, #24]
 800af90:	4b64      	ldr	r3, [pc, #400]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af98:	429a      	cmp	r2, r3
 800af9a:	d908      	bls.n	800afae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af9c:	4b61      	ldr	r3, [pc, #388]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800af9e:	69db      	ldr	r3, [r3, #28]
 800afa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	495e      	ldr	r1, [pc, #376]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 0320 	and.w	r3, r3, #32
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d010      	beq.n	800afdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	69da      	ldr	r2, [r3, #28]
 800afbe:	4b59      	ldr	r3, [pc, #356]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d908      	bls.n	800afdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800afca:	4b56      	ldr	r3, [pc, #344]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	4953      	ldr	r1, [pc, #332]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800afd8:	4313      	orrs	r3, r2
 800afda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0302 	and.w	r3, r3, #2
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d010      	beq.n	800b00a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68da      	ldr	r2, [r3, #12]
 800afec:	4b4d      	ldr	r3, [pc, #308]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	f003 030f 	and.w	r3, r3, #15
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d908      	bls.n	800b00a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aff8:	4b4a      	ldr	r3, [pc, #296]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	f023 020f 	bic.w	r2, r3, #15
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	4947      	ldr	r1, [pc, #284]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b006:	4313      	orrs	r3, r2
 800b008:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	d055      	beq.n	800b0c2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b016:	4b43      	ldr	r3, [pc, #268]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	4940      	ldr	r1, [pc, #256]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b024:	4313      	orrs	r3, r2
 800b026:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d107      	bne.n	800b040 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b030:	4b3c      	ldr	r3, [pc, #240]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d121      	bne.n	800b080 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e0f6      	b.n	800b22e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	2b03      	cmp	r3, #3
 800b046:	d107      	bne.n	800b058 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b048:	4b36      	ldr	r3, [pc, #216]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d115      	bne.n	800b080 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e0ea      	b.n	800b22e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d107      	bne.n	800b070 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b060:	4b30      	ldr	r3, [pc, #192]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d109      	bne.n	800b080 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e0de      	b.n	800b22e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b070:	4b2c      	ldr	r3, [pc, #176]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0304 	and.w	r3, r3, #4
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e0d6      	b.n	800b22e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b080:	4b28      	ldr	r3, [pc, #160]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	f023 0207 	bic.w	r2, r3, #7
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	4925      	ldr	r1, [pc, #148]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b092:	f7f9 ffdf 	bl	8005054 <HAL_GetTick>
 800b096:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b098:	e00a      	b.n	800b0b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b09a:	f7f9 ffdb 	bl	8005054 <HAL_GetTick>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d901      	bls.n	800b0b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e0be      	b.n	800b22e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0b0:	4b1c      	ldr	r3, [pc, #112]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	00db      	lsls	r3, r3, #3
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d1eb      	bne.n	800b09a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 0302 	and.w	r3, r3, #2
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d010      	beq.n	800b0f0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68da      	ldr	r2, [r3, #12]
 800b0d2:	4b14      	ldr	r3, [pc, #80]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	f003 030f 	and.w	r3, r3, #15
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d208      	bcs.n	800b0f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0de:	4b11      	ldr	r3, [pc, #68]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	f023 020f 	bic.w	r2, r3, #15
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	490e      	ldr	r1, [pc, #56]	; (800b124 <HAL_RCC_ClockConfig+0x244>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b0f0:	4b0b      	ldr	r3, [pc, #44]	; (800b120 <HAL_RCC_ClockConfig+0x240>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 030f 	and.w	r3, r3, #15
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d214      	bcs.n	800b128 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0fe:	4b08      	ldr	r3, [pc, #32]	; (800b120 <HAL_RCC_ClockConfig+0x240>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f023 020f 	bic.w	r2, r3, #15
 800b106:	4906      	ldr	r1, [pc, #24]	; (800b120 <HAL_RCC_ClockConfig+0x240>)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b10e:	4b04      	ldr	r3, [pc, #16]	; (800b120 <HAL_RCC_ClockConfig+0x240>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 030f 	and.w	r3, r3, #15
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d005      	beq.n	800b128 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e086      	b.n	800b22e <HAL_RCC_ClockConfig+0x34e>
 800b120:	52002000 	.word	0x52002000
 800b124:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	2b00      	cmp	r3, #0
 800b132:	d010      	beq.n	800b156 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	691a      	ldr	r2, [r3, #16]
 800b138:	4b3f      	ldr	r3, [pc, #252]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b140:	429a      	cmp	r2, r3
 800b142:	d208      	bcs.n	800b156 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b144:	4b3c      	ldr	r3, [pc, #240]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	4939      	ldr	r1, [pc, #228]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b152:	4313      	orrs	r3, r2
 800b154:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 0308 	and.w	r3, r3, #8
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d010      	beq.n	800b184 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	695a      	ldr	r2, [r3, #20]
 800b166:	4b34      	ldr	r3, [pc, #208]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b16e:	429a      	cmp	r2, r3
 800b170:	d208      	bcs.n	800b184 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b172:	4b31      	ldr	r3, [pc, #196]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b174:	69db      	ldr	r3, [r3, #28]
 800b176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	695b      	ldr	r3, [r3, #20]
 800b17e:	492e      	ldr	r1, [pc, #184]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b180:	4313      	orrs	r3, r2
 800b182:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 0310 	and.w	r3, r3, #16
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d010      	beq.n	800b1b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	699a      	ldr	r2, [r3, #24]
 800b194:	4b28      	ldr	r3, [pc, #160]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b196:	69db      	ldr	r3, [r3, #28]
 800b198:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d208      	bcs.n	800b1b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b1a0:	4b25      	ldr	r3, [pc, #148]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	4922      	ldr	r1, [pc, #136]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 0320 	and.w	r3, r3, #32
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d010      	beq.n	800b1e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	69da      	ldr	r2, [r3, #28]
 800b1c2:	4b1d      	ldr	r3, [pc, #116]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d208      	bcs.n	800b1e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b1ce:	4b1a      	ldr	r3, [pc, #104]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	4917      	ldr	r1, [pc, #92]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b1e0:	f000 f89e 	bl	800b320 <HAL_RCC_GetSysClockFreq>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	4b14      	ldr	r3, [pc, #80]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	0a1b      	lsrs	r3, r3, #8
 800b1ec:	f003 030f 	and.w	r3, r3, #15
 800b1f0:	4912      	ldr	r1, [pc, #72]	; (800b23c <HAL_RCC_ClockConfig+0x35c>)
 800b1f2:	5ccb      	ldrb	r3, [r1, r3]
 800b1f4:	f003 031f 	and.w	r3, r3, #31
 800b1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1fc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b1fe:	4b0e      	ldr	r3, [pc, #56]	; (800b238 <HAL_RCC_ClockConfig+0x358>)
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	f003 030f 	and.w	r3, r3, #15
 800b206:	4a0d      	ldr	r2, [pc, #52]	; (800b23c <HAL_RCC_ClockConfig+0x35c>)
 800b208:	5cd3      	ldrb	r3, [r2, r3]
 800b20a:	f003 031f 	and.w	r3, r3, #31
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	fa22 f303 	lsr.w	r3, r2, r3
 800b214:	4a0a      	ldr	r2, [pc, #40]	; (800b240 <HAL_RCC_ClockConfig+0x360>)
 800b216:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b218:	4a0a      	ldr	r2, [pc, #40]	; (800b244 <HAL_RCC_ClockConfig+0x364>)
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b21e:	4b0a      	ldr	r3, [pc, #40]	; (800b248 <HAL_RCC_ClockConfig+0x368>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4618      	mov	r0, r3
 800b224:	f7f9 fee0 	bl	8004fe8 <HAL_InitTick>
 800b228:	4603      	mov	r3, r0
 800b22a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	58024400 	.word	0x58024400
 800b23c:	08012994 	.word	0x08012994
 800b240:	2400000c 	.word	0x2400000c
 800b244:	24000008 	.word	0x24000008
 800b248:	24000080 	.word	0x24000080

0800b24c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08c      	sub	sp, #48	; 0x30
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d12a      	bne.n	800b2b4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b25e:	4b2d      	ldr	r3, [pc, #180]	; (800b314 <HAL_RCC_MCOConfig+0xc8>)
 800b260:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b264:	4a2b      	ldr	r2, [pc, #172]	; (800b314 <HAL_RCC_MCOConfig+0xc8>)
 800b266:	f043 0301 	orr.w	r3, r3, #1
 800b26a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b26e:	4b29      	ldr	r3, [pc, #164]	; (800b314 <HAL_RCC_MCOConfig+0xc8>)
 800b270:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	61bb      	str	r3, [r7, #24]
 800b27a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b27c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b282:	2302      	movs	r3, #2
 800b284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b286:	2303      	movs	r3, #3
 800b288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b28e:	2300      	movs	r3, #0
 800b290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b292:	f107 031c 	add.w	r3, r7, #28
 800b296:	4619      	mov	r1, r3
 800b298:	481f      	ldr	r0, [pc, #124]	; (800b318 <HAL_RCC_MCOConfig+0xcc>)
 800b29a:	f7fc fda9 	bl	8007df0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b29e:	4b1d      	ldr	r3, [pc, #116]	; (800b314 <HAL_RCC_MCOConfig+0xc8>)
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b2a6:	68b9      	ldr	r1, [r7, #8]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	430b      	orrs	r3, r1
 800b2ac:	4919      	ldr	r1, [pc, #100]	; (800b314 <HAL_RCC_MCOConfig+0xc8>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b2b2:	e02a      	b.n	800b30a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b2b4:	4b17      	ldr	r3, [pc, #92]	; (800b314 <HAL_RCC_MCOConfig+0xc8>)
 800b2b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b2ba:	4a16      	ldr	r2, [pc, #88]	; (800b314 <HAL_RCC_MCOConfig+0xc8>)
 800b2bc:	f043 0304 	orr.w	r3, r3, #4
 800b2c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b2c4:	4b13      	ldr	r3, [pc, #76]	; (800b314 <HAL_RCC_MCOConfig+0xc8>)
 800b2c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b2ca:	f003 0304 	and.w	r3, r3, #4
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b2d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2d8:	2302      	movs	r3, #2
 800b2da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b2e8:	f107 031c 	add.w	r3, r7, #28
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	480b      	ldr	r0, [pc, #44]	; (800b31c <HAL_RCC_MCOConfig+0xd0>)
 800b2f0:	f7fc fd7e 	bl	8007df0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b2f4:	4b07      	ldr	r3, [pc, #28]	; (800b314 <HAL_RCC_MCOConfig+0xc8>)
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	01d9      	lsls	r1, r3, #7
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	430b      	orrs	r3, r1
 800b304:	4903      	ldr	r1, [pc, #12]	; (800b314 <HAL_RCC_MCOConfig+0xc8>)
 800b306:	4313      	orrs	r3, r2
 800b308:	610b      	str	r3, [r1, #16]
}
 800b30a:	bf00      	nop
 800b30c:	3730      	adds	r7, #48	; 0x30
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	58024400 	.word	0x58024400
 800b318:	58020000 	.word	0x58020000
 800b31c:	58020800 	.word	0x58020800

0800b320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b320:	b480      	push	{r7}
 800b322:	b089      	sub	sp, #36	; 0x24
 800b324:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b326:	4bb3      	ldr	r3, [pc, #716]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b32e:	2b18      	cmp	r3, #24
 800b330:	f200 8155 	bhi.w	800b5de <HAL_RCC_GetSysClockFreq+0x2be>
 800b334:	a201      	add	r2, pc, #4	; (adr r2, 800b33c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b33a:	bf00      	nop
 800b33c:	0800b3a1 	.word	0x0800b3a1
 800b340:	0800b5df 	.word	0x0800b5df
 800b344:	0800b5df 	.word	0x0800b5df
 800b348:	0800b5df 	.word	0x0800b5df
 800b34c:	0800b5df 	.word	0x0800b5df
 800b350:	0800b5df 	.word	0x0800b5df
 800b354:	0800b5df 	.word	0x0800b5df
 800b358:	0800b5df 	.word	0x0800b5df
 800b35c:	0800b3c7 	.word	0x0800b3c7
 800b360:	0800b5df 	.word	0x0800b5df
 800b364:	0800b5df 	.word	0x0800b5df
 800b368:	0800b5df 	.word	0x0800b5df
 800b36c:	0800b5df 	.word	0x0800b5df
 800b370:	0800b5df 	.word	0x0800b5df
 800b374:	0800b5df 	.word	0x0800b5df
 800b378:	0800b5df 	.word	0x0800b5df
 800b37c:	0800b3cd 	.word	0x0800b3cd
 800b380:	0800b5df 	.word	0x0800b5df
 800b384:	0800b5df 	.word	0x0800b5df
 800b388:	0800b5df 	.word	0x0800b5df
 800b38c:	0800b5df 	.word	0x0800b5df
 800b390:	0800b5df 	.word	0x0800b5df
 800b394:	0800b5df 	.word	0x0800b5df
 800b398:	0800b5df 	.word	0x0800b5df
 800b39c:	0800b3d3 	.word	0x0800b3d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3a0:	4b94      	ldr	r3, [pc, #592]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0320 	and.w	r3, r3, #32
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d009      	beq.n	800b3c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ac:	4b91      	ldr	r3, [pc, #580]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	08db      	lsrs	r3, r3, #3
 800b3b2:	f003 0303 	and.w	r3, r3, #3
 800b3b6:	4a90      	ldr	r2, [pc, #576]	; (800b5f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b3be:	e111      	b.n	800b5e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b3c0:	4b8d      	ldr	r3, [pc, #564]	; (800b5f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3c2:	61bb      	str	r3, [r7, #24]
      break;
 800b3c4:	e10e      	b.n	800b5e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b3c6:	4b8d      	ldr	r3, [pc, #564]	; (800b5fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b3c8:	61bb      	str	r3, [r7, #24]
      break;
 800b3ca:	e10b      	b.n	800b5e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b3cc:	4b8c      	ldr	r3, [pc, #560]	; (800b600 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b3ce:	61bb      	str	r3, [r7, #24]
      break;
 800b3d0:	e108      	b.n	800b5e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3d2:	4b88      	ldr	r3, [pc, #544]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d6:	f003 0303 	and.w	r3, r3, #3
 800b3da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b3dc:	4b85      	ldr	r3, [pc, #532]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e0:	091b      	lsrs	r3, r3, #4
 800b3e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b3e8:	4b82      	ldr	r3, [pc, #520]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	f003 0301 	and.w	r3, r3, #1
 800b3f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3f2:	4b80      	ldr	r3, [pc, #512]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f6:	08db      	lsrs	r3, r3, #3
 800b3f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	fb02 f303 	mul.w	r3, r2, r3
 800b402:	ee07 3a90 	vmov	s15, r3
 800b406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b40a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 80e1 	beq.w	800b5d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	2b02      	cmp	r3, #2
 800b41a:	f000 8083 	beq.w	800b524 <HAL_RCC_GetSysClockFreq+0x204>
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	2b02      	cmp	r3, #2
 800b422:	f200 80a1 	bhi.w	800b568 <HAL_RCC_GetSysClockFreq+0x248>
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <HAL_RCC_GetSysClockFreq+0x114>
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d056      	beq.n	800b4e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b432:	e099      	b.n	800b568 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b434:	4b6f      	ldr	r3, [pc, #444]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0320 	and.w	r3, r3, #32
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d02d      	beq.n	800b49c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b440:	4b6c      	ldr	r3, [pc, #432]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	08db      	lsrs	r3, r3, #3
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	4a6b      	ldr	r2, [pc, #428]	; (800b5f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b44c:	fa22 f303 	lsr.w	r3, r2, r3
 800b450:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	ee07 3a90 	vmov	s15, r3
 800b458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	ee07 3a90 	vmov	s15, r3
 800b462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b46a:	4b62      	ldr	r3, [pc, #392]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b472:	ee07 3a90 	vmov	s15, r3
 800b476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b47e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b48a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b48e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b492:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b496:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b49a:	e087      	b.n	800b5ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b608 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b4aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ae:	4b51      	ldr	r3, [pc, #324]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4be:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4de:	e065      	b.n	800b5ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b60c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b4ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f2:	4b40      	ldr	r3, [pc, #256]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fa:	ee07 3a90 	vmov	s15, r3
 800b4fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b502:	ed97 6a02 	vldr	s12, [r7, #8]
 800b506:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b50a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b50e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b51e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b522:	e043      	b.n	800b5ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b610 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b536:	4b2f      	ldr	r3, [pc, #188]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b53e:	ee07 3a90 	vmov	s15, r3
 800b542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b546:	ed97 6a02 	vldr	s12, [r7, #8]
 800b54a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b54e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b566:	e021      	b.n	800b5ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b572:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b60c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b57a:	4b1e      	ldr	r3, [pc, #120]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b582:	ee07 3a90 	vmov	s15, r3
 800b586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b58a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b58e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b59a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b59e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b5ac:	4b11      	ldr	r3, [pc, #68]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b0:	0a5b      	lsrs	r3, r3, #9
 800b5b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	ee07 3a90 	vmov	s15, r3
 800b5c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b5c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5d0:	ee17 3a90 	vmov	r3, s15
 800b5d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b5d6:	e005      	b.n	800b5e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	61bb      	str	r3, [r7, #24]
      break;
 800b5dc:	e002      	b.n	800b5e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b5de:	4b07      	ldr	r3, [pc, #28]	; (800b5fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b5e0:	61bb      	str	r3, [r7, #24]
      break;
 800b5e2:	bf00      	nop
  }

  return sysclockfreq;
 800b5e4:	69bb      	ldr	r3, [r7, #24]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3724      	adds	r7, #36	; 0x24
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	58024400 	.word	0x58024400
 800b5f8:	03d09000 	.word	0x03d09000
 800b5fc:	003d0900 	.word	0x003d0900
 800b600:	016e3600 	.word	0x016e3600
 800b604:	46000000 	.word	0x46000000
 800b608:	4c742400 	.word	0x4c742400
 800b60c:	4a742400 	.word	0x4a742400
 800b610:	4bb71b00 	.word	0x4bb71b00

0800b614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b61a:	f7ff fe81 	bl	800b320 <HAL_RCC_GetSysClockFreq>
 800b61e:	4602      	mov	r2, r0
 800b620:	4b10      	ldr	r3, [pc, #64]	; (800b664 <HAL_RCC_GetHCLKFreq+0x50>)
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	0a1b      	lsrs	r3, r3, #8
 800b626:	f003 030f 	and.w	r3, r3, #15
 800b62a:	490f      	ldr	r1, [pc, #60]	; (800b668 <HAL_RCC_GetHCLKFreq+0x54>)
 800b62c:	5ccb      	ldrb	r3, [r1, r3]
 800b62e:	f003 031f 	and.w	r3, r3, #31
 800b632:	fa22 f303 	lsr.w	r3, r2, r3
 800b636:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b638:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <HAL_RCC_GetHCLKFreq+0x50>)
 800b63a:	699b      	ldr	r3, [r3, #24]
 800b63c:	f003 030f 	and.w	r3, r3, #15
 800b640:	4a09      	ldr	r2, [pc, #36]	; (800b668 <HAL_RCC_GetHCLKFreq+0x54>)
 800b642:	5cd3      	ldrb	r3, [r2, r3]
 800b644:	f003 031f 	and.w	r3, r3, #31
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	fa22 f303 	lsr.w	r3, r2, r3
 800b64e:	4a07      	ldr	r2, [pc, #28]	; (800b66c <HAL_RCC_GetHCLKFreq+0x58>)
 800b650:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b652:	4a07      	ldr	r2, [pc, #28]	; (800b670 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b658:	4b04      	ldr	r3, [pc, #16]	; (800b66c <HAL_RCC_GetHCLKFreq+0x58>)
 800b65a:	681b      	ldr	r3, [r3, #0]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	58024400 	.word	0x58024400
 800b668:	08012994 	.word	0x08012994
 800b66c:	2400000c 	.word	0x2400000c
 800b670:	24000008 	.word	0x24000008

0800b674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b678:	f7ff ffcc 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b67c:	4602      	mov	r2, r0
 800b67e:	4b06      	ldr	r3, [pc, #24]	; (800b698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b680:	69db      	ldr	r3, [r3, #28]
 800b682:	091b      	lsrs	r3, r3, #4
 800b684:	f003 0307 	and.w	r3, r3, #7
 800b688:	4904      	ldr	r1, [pc, #16]	; (800b69c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b68a:	5ccb      	ldrb	r3, [r1, r3]
 800b68c:	f003 031f 	and.w	r3, r3, #31
 800b690:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b694:	4618      	mov	r0, r3
 800b696:	bd80      	pop	{r7, pc}
 800b698:	58024400 	.word	0x58024400
 800b69c:	08012994 	.word	0x08012994

0800b6a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b6a4:	f7ff ffb6 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	4b06      	ldr	r3, [pc, #24]	; (800b6c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b6ac:	69db      	ldr	r3, [r3, #28]
 800b6ae:	0a1b      	lsrs	r3, r3, #8
 800b6b0:	f003 0307 	and.w	r3, r3, #7
 800b6b4:	4904      	ldr	r1, [pc, #16]	; (800b6c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b6b6:	5ccb      	ldrb	r3, [r1, r3]
 800b6b8:	f003 031f 	and.w	r3, r3, #31
 800b6bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	58024400 	.word	0x58024400
 800b6c8:	08012994 	.word	0x08012994

0800b6cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6d0:	b0c8      	sub	sp, #288	; 0x120
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b6e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b6f0:	2500      	movs	r5, #0
 800b6f2:	ea54 0305 	orrs.w	r3, r4, r5
 800b6f6:	d049      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b6f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b702:	d02f      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b704:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b708:	d828      	bhi.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b70a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b70e:	d01a      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b714:	d822      	bhi.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b716:	2b00      	cmp	r3, #0
 800b718:	d003      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b71a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b71e:	d007      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b720:	e01c      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b722:	4ba7      	ldr	r3, [pc, #668]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b726:	4aa6      	ldr	r2, [pc, #664]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b72c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b72e:	e01a      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b734:	3308      	adds	r3, #8
 800b736:	2102      	movs	r1, #2
 800b738:	4618      	mov	r0, r3
 800b73a:	f002 fa6d 	bl	800dc18 <RCCEx_PLL2_Config>
 800b73e:	4603      	mov	r3, r0
 800b740:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b744:	e00f      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b74a:	3328      	adds	r3, #40	; 0x28
 800b74c:	2102      	movs	r1, #2
 800b74e:	4618      	mov	r0, r3
 800b750:	f002 fb14 	bl	800dd7c <RCCEx_PLL3_Config>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b75a:	e004      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b762:	e000      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b764:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b766:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10a      	bne.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b76e:	4b94      	ldr	r3, [pc, #592]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b772:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b77c:	4a90      	ldr	r2, [pc, #576]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b77e:	430b      	orrs	r3, r1
 800b780:	6513      	str	r3, [r2, #80]	; 0x50
 800b782:	e003      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b784:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b788:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b78c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b798:	f04f 0900 	mov.w	r9, #0
 800b79c:	ea58 0309 	orrs.w	r3, r8, r9
 800b7a0:	d047      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b7a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7a8:	2b04      	cmp	r3, #4
 800b7aa:	d82a      	bhi.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b7ac:	a201      	add	r2, pc, #4	; (adr r2, 800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b2:	bf00      	nop
 800b7b4:	0800b7c9 	.word	0x0800b7c9
 800b7b8:	0800b7d7 	.word	0x0800b7d7
 800b7bc:	0800b7ed 	.word	0x0800b7ed
 800b7c0:	0800b80b 	.word	0x0800b80b
 800b7c4:	0800b80b 	.word	0x0800b80b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7c8:	4b7d      	ldr	r3, [pc, #500]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	4a7c      	ldr	r2, [pc, #496]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7d4:	e01a      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7da:	3308      	adds	r3, #8
 800b7dc:	2100      	movs	r1, #0
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f002 fa1a 	bl	800dc18 <RCCEx_PLL2_Config>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7ea:	e00f      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7f0:	3328      	adds	r3, #40	; 0x28
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f002 fac1 	bl	800dd7c <RCCEx_PLL3_Config>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b800:	e004      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b808:	e000      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b80a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b80c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10a      	bne.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b814:	4b6a      	ldr	r3, [pc, #424]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b818:	f023 0107 	bic.w	r1, r3, #7
 800b81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b822:	4a67      	ldr	r2, [pc, #412]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b824:	430b      	orrs	r3, r1
 800b826:	6513      	str	r3, [r2, #80]	; 0x50
 800b828:	e003      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b82a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b82e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b83e:	f04f 0b00 	mov.w	fp, #0
 800b842:	ea5a 030b 	orrs.w	r3, sl, fp
 800b846:	d054      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b84e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b852:	d036      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b854:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b858:	d82f      	bhi.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b85a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b85e:	d032      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b864:	d829      	bhi.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b866:	2bc0      	cmp	r3, #192	; 0xc0
 800b868:	d02f      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b86a:	2bc0      	cmp	r3, #192	; 0xc0
 800b86c:	d825      	bhi.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b86e:	2b80      	cmp	r3, #128	; 0x80
 800b870:	d018      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b872:	2b80      	cmp	r3, #128	; 0x80
 800b874:	d821      	bhi.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b87a:	2b40      	cmp	r3, #64	; 0x40
 800b87c:	d007      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b87e:	e01c      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b880:	4b4f      	ldr	r3, [pc, #316]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b884:	4a4e      	ldr	r2, [pc, #312]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b88a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b88c:	e01e      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b88e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b892:	3308      	adds	r3, #8
 800b894:	2100      	movs	r1, #0
 800b896:	4618      	mov	r0, r3
 800b898:	f002 f9be 	bl	800dc18 <RCCEx_PLL2_Config>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b8a2:	e013      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8a8:	3328      	adds	r3, #40	; 0x28
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f002 fa65 	bl	800dd7c <RCCEx_PLL3_Config>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b8b8:	e008      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b8c0:	e004      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8c2:	bf00      	nop
 800b8c4:	e002      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8c6:	bf00      	nop
 800b8c8:	e000      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10a      	bne.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b8d4:	4b3a      	ldr	r3, [pc, #232]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8e2:	4a37      	ldr	r2, [pc, #220]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	6513      	str	r3, [r2, #80]	; 0x50
 800b8e8:	e003      	b.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b8f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b8fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b902:	2300      	movs	r3, #0
 800b904:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b908:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b90c:	460b      	mov	r3, r1
 800b90e:	4313      	orrs	r3, r2
 800b910:	d05c      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b918:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b91c:	d03b      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b91e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b922:	d834      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b928:	d037      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b92a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b92e:	d82e      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b930:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b934:	d033      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b936:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b93a:	d828      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b93c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b940:	d01a      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b946:	d822      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b94c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b950:	d007      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b952:	e01c      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b954:	4b1a      	ldr	r3, [pc, #104]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b958:	4a19      	ldr	r2, [pc, #100]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b95a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b95e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b960:	e01e      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b966:	3308      	adds	r3, #8
 800b968:	2100      	movs	r1, #0
 800b96a:	4618      	mov	r0, r3
 800b96c:	f002 f954 	bl	800dc18 <RCCEx_PLL2_Config>
 800b970:	4603      	mov	r3, r0
 800b972:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b976:	e013      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b97c:	3328      	adds	r3, #40	; 0x28
 800b97e:	2100      	movs	r1, #0
 800b980:	4618      	mov	r0, r3
 800b982:	f002 f9fb 	bl	800dd7c <RCCEx_PLL3_Config>
 800b986:	4603      	mov	r3, r0
 800b988:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b98c:	e008      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b994:	e004      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b996:	bf00      	nop
 800b998:	e002      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b99a:	bf00      	nop
 800b99c:	e000      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b99e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10d      	bne.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b9a8:	4b05      	ldr	r3, [pc, #20]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ac:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b9b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9b6:	4a02      	ldr	r2, [pc, #8]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9b8:	430b      	orrs	r3, r1
 800b9ba:	6513      	str	r3, [r2, #80]	; 0x50
 800b9bc:	e006      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b9be:	bf00      	nop
 800b9c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b9cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b9d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b9e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	d03a      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b9ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9f2:	2b30      	cmp	r3, #48	; 0x30
 800b9f4:	d01f      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b9f6:	2b30      	cmp	r3, #48	; 0x30
 800b9f8:	d819      	bhi.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b9fa:	2b20      	cmp	r3, #32
 800b9fc:	d00c      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b9fe:	2b20      	cmp	r3, #32
 800ba00:	d815      	bhi.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d019      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ba06:	2b10      	cmp	r3, #16
 800ba08:	d111      	bne.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba0a:	4bae      	ldr	r3, [pc, #696]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0e:	4aad      	ldr	r2, [pc, #692]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ba16:	e011      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	2102      	movs	r1, #2
 800ba20:	4618      	mov	r0, r3
 800ba22:	f002 f8f9 	bl	800dc18 <RCCEx_PLL2_Config>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ba2c:	e006      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba34:	e002      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba36:	bf00      	nop
 800ba38:	e000      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10a      	bne.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ba44:	4b9f      	ldr	r3, [pc, #636]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba48:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ba4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba52:	4a9c      	ldr	r2, [pc, #624]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba54:	430b      	orrs	r3, r1
 800ba56:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba58:	e003      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ba62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ba6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba72:	2300      	movs	r3, #0
 800ba74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	d051      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ba82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba8c:	d035      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800ba8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba92:	d82e      	bhi.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba98:	d031      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x432>
 800ba9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba9e:	d828      	bhi.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800baa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baa4:	d01a      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800baa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baaa:	d822      	bhi.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800baac:	2b00      	cmp	r3, #0
 800baae:	d003      	beq.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bab4:	d007      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800bab6:	e01c      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bab8:	4b82      	ldr	r3, [pc, #520]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	4a81      	ldr	r2, [pc, #516]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800babe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bac4:	e01c      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baca:	3308      	adds	r3, #8
 800bacc:	2100      	movs	r1, #0
 800bace:	4618      	mov	r0, r3
 800bad0:	f002 f8a2 	bl	800dc18 <RCCEx_PLL2_Config>
 800bad4:	4603      	mov	r3, r0
 800bad6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bada:	e011      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800badc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bae0:	3328      	adds	r3, #40	; 0x28
 800bae2:	2100      	movs	r1, #0
 800bae4:	4618      	mov	r0, r3
 800bae6:	f002 f949 	bl	800dd7c <RCCEx_PLL3_Config>
 800baea:	4603      	mov	r3, r0
 800baec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800baf0:	e006      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800baf8:	e002      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bafa:	bf00      	nop
 800bafc:	e000      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bafe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10a      	bne.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bb08:	4b6e      	ldr	r3, [pc, #440]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb0c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bb10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb16:	4a6b      	ldr	r2, [pc, #428]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb18:	430b      	orrs	r3, r1
 800bb1a:	6513      	str	r3, [r2, #80]	; 0x50
 800bb1c:	e003      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bb26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bb32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb36:	2300      	movs	r3, #0
 800bb38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bb40:	460b      	mov	r3, r1
 800bb42:	4313      	orrs	r3, r2
 800bb44:	d053      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bb46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb50:	d033      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bb52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb56:	d82c      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb5c:	d02f      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bb5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb62:	d826      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb68:	d02b      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bb6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb6e:	d820      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb74:	d012      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bb76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb7a:	d81a      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d022      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bb80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb84:	d115      	bne.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb8a:	3308      	adds	r3, #8
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f002 f842 	bl	800dc18 <RCCEx_PLL2_Config>
 800bb94:	4603      	mov	r3, r0
 800bb96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb9a:	e015      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bba0:	3328      	adds	r3, #40	; 0x28
 800bba2:	2101      	movs	r1, #1
 800bba4:	4618      	mov	r0, r3
 800bba6:	f002 f8e9 	bl	800dd7c <RCCEx_PLL3_Config>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bbb0:	e00a      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bbb8:	e006      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bbba:	bf00      	nop
 800bbbc:	e004      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bbbe:	bf00      	nop
 800bbc0:	e002      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bbc2:	bf00      	nop
 800bbc4:	e000      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bbc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10a      	bne.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bbd0:	4b3c      	ldr	r3, [pc, #240]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bbd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbde:	4a39      	ldr	r2, [pc, #228]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbe0:	430b      	orrs	r3, r1
 800bbe2:	6513      	str	r3, [r2, #80]	; 0x50
 800bbe4:	e003      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bbee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bbfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bbfe:	2300      	movs	r3, #0
 800bc00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	d060      	beq.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bc0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc16:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bc1a:	d039      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bc1c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bc20:	d832      	bhi.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc26:	d035      	beq.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bc28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc2c:	d82c      	bhi.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc32:	d031      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bc34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc38:	d826      	bhi.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc3e:	d02d      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bc40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc44:	d820      	bhi.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc4a:	d012      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bc4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc50:	d81a      	bhi.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d024      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bc56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc5a:	d115      	bne.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc60:	3308      	adds	r3, #8
 800bc62:	2101      	movs	r1, #1
 800bc64:	4618      	mov	r0, r3
 800bc66:	f001 ffd7 	bl	800dc18 <RCCEx_PLL2_Config>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc70:	e017      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc76:	3328      	adds	r3, #40	; 0x28
 800bc78:	2101      	movs	r1, #1
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f002 f87e 	bl	800dd7c <RCCEx_PLL3_Config>
 800bc80:	4603      	mov	r3, r0
 800bc82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc86:	e00c      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc8e:	e008      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc90:	bf00      	nop
 800bc92:	e006      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc94:	bf00      	nop
 800bc96:	e004      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc98:	bf00      	nop
 800bc9a:	e002      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc9c:	bf00      	nop
 800bc9e:	e000      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bca2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10e      	bne.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bcaa:	4b06      	ldr	r3, [pc, #24]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bcb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bcba:	4a02      	ldr	r2, [pc, #8]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcbc:	430b      	orrs	r3, r1
 800bcbe:	6593      	str	r3, [r2, #88]	; 0x58
 800bcc0:	e006      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bcc2:	bf00      	nop
 800bcc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bccc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bcd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bcdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bce0:	2300      	movs	r3, #0
 800bce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bcea:	460b      	mov	r3, r1
 800bcec:	4313      	orrs	r3, r2
 800bcee:	d037      	beq.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bcf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcfa:	d00e      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bcfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd00:	d816      	bhi.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d018      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bd06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd0a:	d111      	bne.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd0c:	4bc4      	ldr	r3, [pc, #784]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd10:	4ac3      	ldr	r2, [pc, #780]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bd18:	e00f      	b.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd1e:	3308      	adds	r3, #8
 800bd20:	2101      	movs	r1, #1
 800bd22:	4618      	mov	r0, r3
 800bd24:	f001 ff78 	bl	800dc18 <RCCEx_PLL2_Config>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bd2e:	e004      	b.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd36:	e000      	b.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bd38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10a      	bne.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd42:	4bb7      	ldr	r3, [pc, #732]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bd4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd50:	4ab3      	ldr	r2, [pc, #716]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd52:	430b      	orrs	r3, r1
 800bd54:	6513      	str	r3, [r2, #80]	; 0x50
 800bd56:	e003      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bd6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd70:	2300      	movs	r3, #0
 800bd72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bd76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	d039      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bd80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d81c      	bhi.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bd8a:	a201      	add	r2, pc, #4	; (adr r2, 800bd90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd90:	0800bdcd 	.word	0x0800bdcd
 800bd94:	0800bda1 	.word	0x0800bda1
 800bd98:	0800bdaf 	.word	0x0800bdaf
 800bd9c:	0800bdcd 	.word	0x0800bdcd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bda0:	4b9f      	ldr	r3, [pc, #636]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda4:	4a9e      	ldr	r2, [pc, #632]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bda6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bdac:	e00f      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdb2:	3308      	adds	r3, #8
 800bdb4:	2102      	movs	r1, #2
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f001 ff2e 	bl	800dc18 <RCCEx_PLL2_Config>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bdc2:	e004      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bdca:	e000      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bdcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10a      	bne.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bdd6:	4b92      	ldr	r3, [pc, #584]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdda:	f023 0103 	bic.w	r1, r3, #3
 800bdde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bde2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bde4:	4a8e      	ldr	r2, [pc, #568]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bde6:	430b      	orrs	r3, r1
 800bde8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bdea:	e003      	b.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdf0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bdf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800be00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be04:	2300      	movs	r3, #0
 800be06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800be0e:	460b      	mov	r3, r1
 800be10:	4313      	orrs	r3, r2
 800be12:	f000 8099 	beq.w	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be16:	4b83      	ldr	r3, [pc, #524]	; (800c024 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a82      	ldr	r2, [pc, #520]	; (800c024 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be22:	f7f9 f917 	bl	8005054 <HAL_GetTick>
 800be26:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be2a:	e00b      	b.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be2c:	f7f9 f912 	bl	8005054 <HAL_GetTick>
 800be30:	4602      	mov	r2, r0
 800be32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	2b64      	cmp	r3, #100	; 0x64
 800be3a:	d903      	bls.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be42:	e005      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be44:	4b77      	ldr	r3, [pc, #476]	; (800c024 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d0ed      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800be50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be54:	2b00      	cmp	r3, #0
 800be56:	d173      	bne.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800be58:	4b71      	ldr	r3, [pc, #452]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be64:	4053      	eors	r3, r2
 800be66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d015      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be6e:	4b6c      	ldr	r3, [pc, #432]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be7a:	4b69      	ldr	r3, [pc, #420]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be7e:	4a68      	ldr	r2, [pc, #416]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be86:	4b66      	ldr	r3, [pc, #408]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8a:	4a65      	ldr	r2, [pc, #404]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800be92:	4a63      	ldr	r2, [pc, #396]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800be9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea6:	d118      	bne.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bea8:	f7f9 f8d4 	bl	8005054 <HAL_GetTick>
 800beac:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800beb0:	e00d      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800beb2:	f7f9 f8cf 	bl	8005054 <HAL_GetTick>
 800beb6:	4602      	mov	r2, r0
 800beb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bebc:	1ad2      	subs	r2, r2, r3
 800bebe:	f241 3388 	movw	r3, #5000	; 0x1388
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d903      	bls.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bec6:	2303      	movs	r3, #3
 800bec8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800becc:	e005      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bece:	4b54      	ldr	r3, [pc, #336]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bed2:	f003 0302 	and.w	r3, r3, #2
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d0eb      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800beda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d129      	bne.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bee6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800beea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800beee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bef2:	d10e      	bne.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bef4:	4b4a      	ldr	r3, [pc, #296]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800befc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf04:	091a      	lsrs	r2, r3, #4
 800bf06:	4b48      	ldr	r3, [pc, #288]	; (800c028 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bf08:	4013      	ands	r3, r2
 800bf0a:	4a45      	ldr	r2, [pc, #276]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf0c:	430b      	orrs	r3, r1
 800bf0e:	6113      	str	r3, [r2, #16]
 800bf10:	e005      	b.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bf12:	4b43      	ldr	r3, [pc, #268]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	4a42      	ldr	r2, [pc, #264]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bf1c:	6113      	str	r3, [r2, #16]
 800bf1e:	4b40      	ldr	r3, [pc, #256]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bf22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf2e:	4a3c      	ldr	r2, [pc, #240]	; (800c020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf30:	430b      	orrs	r3, r1
 800bf32:	6713      	str	r3, [r2, #112]	; 0x70
 800bf34:	e008      	b.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800bf3e:	e003      	b.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bf48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf50:	f002 0301 	and.w	r3, r2, #1
 800bf54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bf62:	460b      	mov	r3, r1
 800bf64:	4313      	orrs	r3, r2
 800bf66:	f000 8090 	beq.w	800c08a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bf6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf72:	2b28      	cmp	r3, #40	; 0x28
 800bf74:	d870      	bhi.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bf76:	a201      	add	r2, pc, #4	; (adr r2, 800bf7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bf78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7c:	0800c061 	.word	0x0800c061
 800bf80:	0800c059 	.word	0x0800c059
 800bf84:	0800c059 	.word	0x0800c059
 800bf88:	0800c059 	.word	0x0800c059
 800bf8c:	0800c059 	.word	0x0800c059
 800bf90:	0800c059 	.word	0x0800c059
 800bf94:	0800c059 	.word	0x0800c059
 800bf98:	0800c059 	.word	0x0800c059
 800bf9c:	0800c02d 	.word	0x0800c02d
 800bfa0:	0800c059 	.word	0x0800c059
 800bfa4:	0800c059 	.word	0x0800c059
 800bfa8:	0800c059 	.word	0x0800c059
 800bfac:	0800c059 	.word	0x0800c059
 800bfb0:	0800c059 	.word	0x0800c059
 800bfb4:	0800c059 	.word	0x0800c059
 800bfb8:	0800c059 	.word	0x0800c059
 800bfbc:	0800c043 	.word	0x0800c043
 800bfc0:	0800c059 	.word	0x0800c059
 800bfc4:	0800c059 	.word	0x0800c059
 800bfc8:	0800c059 	.word	0x0800c059
 800bfcc:	0800c059 	.word	0x0800c059
 800bfd0:	0800c059 	.word	0x0800c059
 800bfd4:	0800c059 	.word	0x0800c059
 800bfd8:	0800c059 	.word	0x0800c059
 800bfdc:	0800c061 	.word	0x0800c061
 800bfe0:	0800c059 	.word	0x0800c059
 800bfe4:	0800c059 	.word	0x0800c059
 800bfe8:	0800c059 	.word	0x0800c059
 800bfec:	0800c059 	.word	0x0800c059
 800bff0:	0800c059 	.word	0x0800c059
 800bff4:	0800c059 	.word	0x0800c059
 800bff8:	0800c059 	.word	0x0800c059
 800bffc:	0800c061 	.word	0x0800c061
 800c000:	0800c059 	.word	0x0800c059
 800c004:	0800c059 	.word	0x0800c059
 800c008:	0800c059 	.word	0x0800c059
 800c00c:	0800c059 	.word	0x0800c059
 800c010:	0800c059 	.word	0x0800c059
 800c014:	0800c059 	.word	0x0800c059
 800c018:	0800c059 	.word	0x0800c059
 800c01c:	0800c061 	.word	0x0800c061
 800c020:	58024400 	.word	0x58024400
 800c024:	58024800 	.word	0x58024800
 800c028:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c030:	3308      	adds	r3, #8
 800c032:	2101      	movs	r1, #1
 800c034:	4618      	mov	r0, r3
 800c036:	f001 fdef 	bl	800dc18 <RCCEx_PLL2_Config>
 800c03a:	4603      	mov	r3, r0
 800c03c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c040:	e00f      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c046:	3328      	adds	r3, #40	; 0x28
 800c048:	2101      	movs	r1, #1
 800c04a:	4618      	mov	r0, r3
 800c04c:	f001 fe96 	bl	800dd7c <RCCEx_PLL3_Config>
 800c050:	4603      	mov	r3, r0
 800c052:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c056:	e004      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c05e:	e000      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c060:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c062:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10b      	bne.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c06a:	4bc0      	ldr	r3, [pc, #768]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c06e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c07a:	4abc      	ldr	r2, [pc, #752]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c07c:	430b      	orrs	r3, r1
 800c07e:	6553      	str	r3, [r2, #84]	; 0x54
 800c080:	e003      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c082:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c086:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f002 0302 	and.w	r3, r2, #2
 800c096:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c09a:	2300      	movs	r3, #0
 800c09c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c0a0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	d043      	beq.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0b2:	2b05      	cmp	r3, #5
 800c0b4:	d824      	bhi.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c0b6:	a201      	add	r2, pc, #4	; (adr r2, 800c0bc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0bc:	0800c109 	.word	0x0800c109
 800c0c0:	0800c0d5 	.word	0x0800c0d5
 800c0c4:	0800c0eb 	.word	0x0800c0eb
 800c0c8:	0800c109 	.word	0x0800c109
 800c0cc:	0800c109 	.word	0x0800c109
 800c0d0:	0800c109 	.word	0x0800c109
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0d8:	3308      	adds	r3, #8
 800c0da:	2101      	movs	r1, #1
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f001 fd9b 	bl	800dc18 <RCCEx_PLL2_Config>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0e8:	e00f      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0ee:	3328      	adds	r3, #40	; 0x28
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f001 fe42 	bl	800dd7c <RCCEx_PLL3_Config>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0fe:	e004      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c106:	e000      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c10a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10b      	bne.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c112:	4b96      	ldr	r3, [pc, #600]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c116:	f023 0107 	bic.w	r1, r3, #7
 800c11a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c122:	4a92      	ldr	r2, [pc, #584]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c124:	430b      	orrs	r3, r1
 800c126:	6553      	str	r3, [r2, #84]	; 0x54
 800c128:	e003      	b.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c12e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	f002 0304 	and.w	r3, r2, #4
 800c13e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c142:	2300      	movs	r3, #0
 800c144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c148:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c14c:	460b      	mov	r3, r1
 800c14e:	4313      	orrs	r3, r2
 800c150:	d043      	beq.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c15a:	2b05      	cmp	r3, #5
 800c15c:	d824      	bhi.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c15e:	a201      	add	r2, pc, #4	; (adr r2, 800c164 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c164:	0800c1b1 	.word	0x0800c1b1
 800c168:	0800c17d 	.word	0x0800c17d
 800c16c:	0800c193 	.word	0x0800c193
 800c170:	0800c1b1 	.word	0x0800c1b1
 800c174:	0800c1b1 	.word	0x0800c1b1
 800c178:	0800c1b1 	.word	0x0800c1b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c17c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c180:	3308      	adds	r3, #8
 800c182:	2101      	movs	r1, #1
 800c184:	4618      	mov	r0, r3
 800c186:	f001 fd47 	bl	800dc18 <RCCEx_PLL2_Config>
 800c18a:	4603      	mov	r3, r0
 800c18c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c190:	e00f      	b.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c196:	3328      	adds	r3, #40	; 0x28
 800c198:	2101      	movs	r1, #1
 800c19a:	4618      	mov	r0, r3
 800c19c:	f001 fdee 	bl	800dd7c <RCCEx_PLL3_Config>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c1a6:	e004      	b.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c1ae:	e000      	b.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c1b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10b      	bne.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c1ba:	4b6c      	ldr	r3, [pc, #432]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1be:	f023 0107 	bic.w	r1, r3, #7
 800c1c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1ca:	4a68      	ldr	r2, [pc, #416]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1cc:	430b      	orrs	r3, r1
 800c1ce:	6593      	str	r3, [r2, #88]	; 0x58
 800c1d0:	e003      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c1da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e2:	f002 0320 	and.w	r3, r2, #32
 800c1e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	d055      	beq.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c1fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c206:	d033      	beq.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c20c:	d82c      	bhi.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c20e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c212:	d02f      	beq.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c218:	d826      	bhi.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c21a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c21e:	d02b      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c220:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c224:	d820      	bhi.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c22a:	d012      	beq.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c22c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c230:	d81a      	bhi.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c232:	2b00      	cmp	r3, #0
 800c234:	d022      	beq.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c23a:	d115      	bne.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c23c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c240:	3308      	adds	r3, #8
 800c242:	2100      	movs	r1, #0
 800c244:	4618      	mov	r0, r3
 800c246:	f001 fce7 	bl	800dc18 <RCCEx_PLL2_Config>
 800c24a:	4603      	mov	r3, r0
 800c24c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c250:	e015      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c256:	3328      	adds	r3, #40	; 0x28
 800c258:	2102      	movs	r1, #2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f001 fd8e 	bl	800dd7c <RCCEx_PLL3_Config>
 800c260:	4603      	mov	r3, r0
 800c262:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c266:	e00a      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c26e:	e006      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c270:	bf00      	nop
 800c272:	e004      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c274:	bf00      	nop
 800c276:	e002      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c278:	bf00      	nop
 800c27a:	e000      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c27c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c27e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10b      	bne.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c286:	4b39      	ldr	r3, [pc, #228]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c28a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c28e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c296:	4a35      	ldr	r2, [pc, #212]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c298:	430b      	orrs	r3, r1
 800c29a:	6553      	str	r3, [r2, #84]	; 0x54
 800c29c:	e003      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c29e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c2a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c2b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c2bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	d058      	beq.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c2c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c2ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c2d2:	d033      	beq.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c2d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c2d8:	d82c      	bhi.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2de:	d02f      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c2e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e4:	d826      	bhi.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2ea:	d02b      	beq.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c2ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2f0:	d820      	bhi.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2f6:	d012      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c2f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2fc:	d81a      	bhi.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d022      	beq.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c306:	d115      	bne.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c30c:	3308      	adds	r3, #8
 800c30e:	2100      	movs	r1, #0
 800c310:	4618      	mov	r0, r3
 800c312:	f001 fc81 	bl	800dc18 <RCCEx_PLL2_Config>
 800c316:	4603      	mov	r3, r0
 800c318:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c31c:	e015      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c31e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c322:	3328      	adds	r3, #40	; 0x28
 800c324:	2102      	movs	r1, #2
 800c326:	4618      	mov	r0, r3
 800c328:	f001 fd28 	bl	800dd7c <RCCEx_PLL3_Config>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c332:	e00a      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c33a:	e006      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c33c:	bf00      	nop
 800c33e:	e004      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c340:	bf00      	nop
 800c342:	e002      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c344:	bf00      	nop
 800c346:	e000      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c34a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10e      	bne.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c352:	4b06      	ldr	r3, [pc, #24]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c356:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c35a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c35e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c362:	4a02      	ldr	r2, [pc, #8]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c364:	430b      	orrs	r3, r1
 800c366:	6593      	str	r3, [r2, #88]	; 0x58
 800c368:	e006      	b.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c36a:	bf00      	nop
 800c36c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c374:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c388:	2300      	movs	r3, #0
 800c38a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c38e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c392:	460b      	mov	r3, r1
 800c394:	4313      	orrs	r3, r2
 800c396:	d055      	beq.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c39c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c3a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c3a4:	d033      	beq.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c3a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c3aa:	d82c      	bhi.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3b0:	d02f      	beq.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3b6:	d826      	bhi.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c3bc:	d02b      	beq.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c3be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c3c2:	d820      	bhi.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3c8:	d012      	beq.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c3ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3ce:	d81a      	bhi.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d022      	beq.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c3d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3d8:	d115      	bne.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3de:	3308      	adds	r3, #8
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f001 fc18 	bl	800dc18 <RCCEx_PLL2_Config>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c3ee:	e015      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3f4:	3328      	adds	r3, #40	; 0x28
 800c3f6:	2102      	movs	r1, #2
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f001 fcbf 	bl	800dd7c <RCCEx_PLL3_Config>
 800c3fe:	4603      	mov	r3, r0
 800c400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c404:	e00a      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c40c:	e006      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c40e:	bf00      	nop
 800c410:	e004      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c412:	bf00      	nop
 800c414:	e002      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c416:	bf00      	nop
 800c418:	e000      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c41a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c41c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10b      	bne.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c424:	4ba1      	ldr	r3, [pc, #644]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c428:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c42c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c430:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c434:	4a9d      	ldr	r2, [pc, #628]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c436:	430b      	orrs	r3, r1
 800c438:	6593      	str	r3, [r2, #88]	; 0x58
 800c43a:	e003      	b.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c43c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c440:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	f002 0308 	and.w	r3, r2, #8
 800c450:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c454:	2300      	movs	r3, #0
 800c456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c45a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c45e:	460b      	mov	r3, r1
 800c460:	4313      	orrs	r3, r2
 800c462:	d01e      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c46c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c470:	d10c      	bne.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c476:	3328      	adds	r3, #40	; 0x28
 800c478:	2102      	movs	r1, #2
 800c47a:	4618      	mov	r0, r3
 800c47c:	f001 fc7e 	bl	800dd7c <RCCEx_PLL3_Config>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d002      	beq.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c48c:	4b87      	ldr	r3, [pc, #540]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c48e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c490:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c49c:	4a83      	ldr	r2, [pc, #524]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c49e:	430b      	orrs	r3, r1
 800c4a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	f002 0310 	and.w	r3, r2, #16
 800c4ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c4b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	d01e      	beq.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c4c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ce:	d10c      	bne.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4d4:	3328      	adds	r3, #40	; 0x28
 800c4d6:	2102      	movs	r1, #2
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f001 fc4f 	bl	800dd7c <RCCEx_PLL3_Config>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d002      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c4ea:	4b70      	ldr	r3, [pc, #448]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c4f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4fa:	4a6c      	ldr	r2, [pc, #432]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4fc:	430b      	orrs	r3, r1
 800c4fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c50c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c510:	2300      	movs	r3, #0
 800c512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c516:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c51a:	460b      	mov	r3, r1
 800c51c:	4313      	orrs	r3, r2
 800c51e:	d03e      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c524:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c52c:	d022      	beq.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c52e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c532:	d81b      	bhi.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c534:	2b00      	cmp	r3, #0
 800c536:	d003      	beq.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c53c:	d00b      	beq.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c53e:	e015      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c544:	3308      	adds	r3, #8
 800c546:	2100      	movs	r1, #0
 800c548:	4618      	mov	r0, r3
 800c54a:	f001 fb65 	bl	800dc18 <RCCEx_PLL2_Config>
 800c54e:	4603      	mov	r3, r0
 800c550:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c554:	e00f      	b.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c55a:	3328      	adds	r3, #40	; 0x28
 800c55c:	2102      	movs	r1, #2
 800c55e:	4618      	mov	r0, r3
 800c560:	f001 fc0c 	bl	800dd7c <RCCEx_PLL3_Config>
 800c564:	4603      	mov	r3, r0
 800c566:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c56a:	e004      	b.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c572:	e000      	b.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c574:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c576:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10b      	bne.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c57e:	4b4b      	ldr	r3, [pc, #300]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c582:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c58a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c58e:	4a47      	ldr	r2, [pc, #284]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c590:	430b      	orrs	r3, r1
 800c592:	6593      	str	r3, [r2, #88]	; 0x58
 800c594:	e003      	b.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c596:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c59a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c59e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c5aa:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	d03b      	beq.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c5ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5c6:	d01f      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c5c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5cc:	d818      	bhi.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c5ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5d2:	d003      	beq.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c5d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5d8:	d007      	beq.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c5da:	e011      	b.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5dc:	4b33      	ldr	r3, [pc, #204]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e0:	4a32      	ldr	r2, [pc, #200]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c5e8:	e00f      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ee:	3328      	adds	r3, #40	; 0x28
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f001 fbc2 	bl	800dd7c <RCCEx_PLL3_Config>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c5fe:	e004      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c606:	e000      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c60a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10b      	bne.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c612:	4b26      	ldr	r3, [pc, #152]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c616:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c61a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c622:	4a22      	ldr	r2, [pc, #136]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c624:	430b      	orrs	r3, r1
 800c626:	6553      	str	r3, [r2, #84]	; 0x54
 800c628:	e003      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c62a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c62e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c63e:	673b      	str	r3, [r7, #112]	; 0x70
 800c640:	2300      	movs	r3, #0
 800c642:	677b      	str	r3, [r7, #116]	; 0x74
 800c644:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c648:	460b      	mov	r3, r1
 800c64a:	4313      	orrs	r3, r2
 800c64c:	d034      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c64e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c654:	2b00      	cmp	r3, #0
 800c656:	d003      	beq.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c65c:	d007      	beq.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c65e:	e011      	b.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c660:	4b12      	ldr	r3, [pc, #72]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c664:	4a11      	ldr	r2, [pc, #68]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c66a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c66c:	e00e      	b.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c66e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c672:	3308      	adds	r3, #8
 800c674:	2102      	movs	r1, #2
 800c676:	4618      	mov	r0, r3
 800c678:	f001 face 	bl	800dc18 <RCCEx_PLL2_Config>
 800c67c:	4603      	mov	r3, r0
 800c67e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c682:	e003      	b.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c68a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c68c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c690:	2b00      	cmp	r3, #0
 800c692:	d10d      	bne.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c694:	4b05      	ldr	r3, [pc, #20]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c698:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c69c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6a2:	4a02      	ldr	r2, [pc, #8]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6a4:	430b      	orrs	r3, r1
 800c6a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c6a8:	e006      	b.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c6aa:	bf00      	nop
 800c6ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c6c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c6ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	d00c      	beq.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6d8:	3328      	adds	r3, #40	; 0x28
 800c6da:	2102      	movs	r1, #2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f001 fb4d 	bl	800dd7c <RCCEx_PLL3_Config>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d002      	beq.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c6ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c6fa:	663b      	str	r3, [r7, #96]	; 0x60
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	667b      	str	r3, [r7, #100]	; 0x64
 800c700:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c704:	460b      	mov	r3, r1
 800c706:	4313      	orrs	r3, r2
 800c708:	d038      	beq.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c70a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c716:	d018      	beq.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c71c:	d811      	bhi.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c71e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c722:	d014      	beq.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c728:	d80b      	bhi.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d011      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c72e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c732:	d106      	bne.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c734:	4bc3      	ldr	r3, [pc, #780]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c738:	4ac2      	ldr	r2, [pc, #776]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c73a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c73e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c740:	e008      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c742:	2301      	movs	r3, #1
 800c744:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c748:	e004      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c74a:	bf00      	nop
 800c74c:	e002      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c74e:	bf00      	nop
 800c750:	e000      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c752:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c754:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10b      	bne.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c75c:	4bb9      	ldr	r3, [pc, #740]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c75e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c760:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c76c:	4ab5      	ldr	r2, [pc, #724]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c76e:	430b      	orrs	r3, r1
 800c770:	6553      	str	r3, [r2, #84]	; 0x54
 800c772:	e003      	b.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c774:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c778:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c77c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c784:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c788:	65bb      	str	r3, [r7, #88]	; 0x58
 800c78a:	2300      	movs	r3, #0
 800c78c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c78e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c792:	460b      	mov	r3, r1
 800c794:	4313      	orrs	r3, r2
 800c796:	d009      	beq.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c798:	4baa      	ldr	r3, [pc, #680]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c79c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7a6:	4aa7      	ldr	r2, [pc, #668]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7a8:	430b      	orrs	r3, r1
 800c7aa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c7ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c7b8:	653b      	str	r3, [r7, #80]	; 0x50
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	657b      	str	r3, [r7, #84]	; 0x54
 800c7be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	d009      	beq.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c7c8:	4b9e      	ldr	r3, [pc, #632]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7cc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c7d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d6:	4a9b      	ldr	r2, [pc, #620]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7d8:	430b      	orrs	r3, r1
 800c7da:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c7dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c7e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	d009      	beq.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c7f8:	4b92      	ldr	r3, [pc, #584]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7fc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c806:	4a8f      	ldr	r2, [pc, #572]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c808:	430b      	orrs	r3, r1
 800c80a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c80c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c818:	643b      	str	r3, [r7, #64]	; 0x40
 800c81a:	2300      	movs	r3, #0
 800c81c:	647b      	str	r3, [r7, #68]	; 0x44
 800c81e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c822:	460b      	mov	r3, r1
 800c824:	4313      	orrs	r3, r2
 800c826:	d00e      	beq.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c828:	4b86      	ldr	r3, [pc, #536]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	4a85      	ldr	r2, [pc, #532]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c82e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c832:	6113      	str	r3, [r2, #16]
 800c834:	4b83      	ldr	r3, [pc, #524]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c836:	6919      	ldr	r1, [r3, #16]
 800c838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c83c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c840:	4a80      	ldr	r2, [pc, #512]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c842:	430b      	orrs	r3, r1
 800c844:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c852:	63bb      	str	r3, [r7, #56]	; 0x38
 800c854:	2300      	movs	r3, #0
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c858:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c85c:	460b      	mov	r3, r1
 800c85e:	4313      	orrs	r3, r2
 800c860:	d009      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c862:	4b78      	ldr	r3, [pc, #480]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c866:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c86a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c86e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c870:	4a74      	ldr	r2, [pc, #464]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c872:	430b      	orrs	r3, r1
 800c874:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c882:	633b      	str	r3, [r7, #48]	; 0x30
 800c884:	2300      	movs	r3, #0
 800c886:	637b      	str	r3, [r7, #52]	; 0x34
 800c888:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c88c:	460b      	mov	r3, r1
 800c88e:	4313      	orrs	r3, r2
 800c890:	d00a      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c892:	4b6c      	ldr	r3, [pc, #432]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c896:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c89a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c89e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8a2:	4a68      	ldr	r2, [pc, #416]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8a4:	430b      	orrs	r3, r1
 800c8a6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c8a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	62b9      	str	r1, [r7, #40]	; 0x28
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	d011      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f001 f9a3 	bl	800dc18 <RCCEx_PLL2_Config>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c8d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d003      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	6239      	str	r1, [r7, #32]
 800c8f4:	f003 0302 	and.w	r3, r3, #2
 800c8f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c8fe:	460b      	mov	r3, r1
 800c900:	4313      	orrs	r3, r2
 800c902:	d011      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c908:	3308      	adds	r3, #8
 800c90a:	2101      	movs	r1, #1
 800c90c:	4618      	mov	r0, r3
 800c90e:	f001 f983 	bl	800dc18 <RCCEx_PLL2_Config>
 800c912:	4603      	mov	r3, r0
 800c914:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c918:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c920:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c924:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	2100      	movs	r1, #0
 800c932:	61b9      	str	r1, [r7, #24]
 800c934:	f003 0304 	and.w	r3, r3, #4
 800c938:	61fb      	str	r3, [r7, #28]
 800c93a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c93e:	460b      	mov	r3, r1
 800c940:	4313      	orrs	r3, r2
 800c942:	d011      	beq.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c948:	3308      	adds	r3, #8
 800c94a:	2102      	movs	r1, #2
 800c94c:	4618      	mov	r0, r3
 800c94e:	f001 f963 	bl	800dc18 <RCCEx_PLL2_Config>
 800c952:	4603      	mov	r3, r0
 800c954:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c958:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c960:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c964:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	2100      	movs	r1, #0
 800c972:	6139      	str	r1, [r7, #16]
 800c974:	f003 0308 	and.w	r3, r3, #8
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c97e:	460b      	mov	r3, r1
 800c980:	4313      	orrs	r3, r2
 800c982:	d011      	beq.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c988:	3328      	adds	r3, #40	; 0x28
 800c98a:	2100      	movs	r1, #0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f001 f9f5 	bl	800dd7c <RCCEx_PLL3_Config>
 800c992:	4603      	mov	r3, r0
 800c994:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c998:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d003      	beq.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c9a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	60b9      	str	r1, [r7, #8]
 800c9b4:	f003 0310 	and.w	r3, r3, #16
 800c9b8:	60fb      	str	r3, [r7, #12]
 800c9ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c9be:	460b      	mov	r3, r1
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	d011      	beq.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9c8:	3328      	adds	r3, #40	; 0x28
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f001 f9d5 	bl	800dd7c <RCCEx_PLL3_Config>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c9d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d003      	beq.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c9e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	6039      	str	r1, [r7, #0]
 800c9f4:	f003 0320 	and.w	r3, r3, #32
 800c9f8:	607b      	str	r3, [r7, #4]
 800c9fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c9fe:	460b      	mov	r3, r1
 800ca00:	4313      	orrs	r3, r2
 800ca02:	d011      	beq.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca08:	3328      	adds	r3, #40	; 0x28
 800ca0a:	2102      	movs	r1, #2
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f001 f9b5 	bl	800dd7c <RCCEx_PLL3_Config>
 800ca12:	4603      	mov	r3, r0
 800ca14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ca18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d003      	beq.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800ca28:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d101      	bne.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800ca30:	2300      	movs	r3, #0
 800ca32:	e000      	b.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca42:	bf00      	nop
 800ca44:	58024400 	.word	0x58024400

0800ca48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b090      	sub	sp, #64	; 0x40
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ca52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca56:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ca5a:	430b      	orrs	r3, r1
 800ca5c:	f040 8094 	bne.w	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ca60:	4b97      	ldr	r3, [pc, #604]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca64:	f003 0307 	and.w	r3, r3, #7
 800ca68:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	2b04      	cmp	r3, #4
 800ca6e:	f200 8087 	bhi.w	800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ca72:	a201      	add	r2, pc, #4	; (adr r2, 800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ca74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca78:	0800ca8d 	.word	0x0800ca8d
 800ca7c:	0800cab5 	.word	0x0800cab5
 800ca80:	0800cadd 	.word	0x0800cadd
 800ca84:	0800cb79 	.word	0x0800cb79
 800ca88:	0800cb05 	.word	0x0800cb05
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca8c:	4b8c      	ldr	r3, [pc, #560]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca98:	d108      	bne.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 ff68 	bl	800d974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800caa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa8:	f000 bc97 	b.w	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800caac:	2300      	movs	r3, #0
 800caae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cab0:	f000 bc93 	b.w	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cab4:	4b82      	ldr	r3, [pc, #520]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cabc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cac0:	d108      	bne.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cac2:	f107 0318 	add.w	r3, r7, #24
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 fcac 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cad0:	f000 bc83 	b.w	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cad4:	2300      	movs	r3, #0
 800cad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad8:	f000 bc7f 	b.w	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cadc:	4b78      	ldr	r3, [pc, #480]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cae8:	d108      	bne.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800caea:	f107 030c 	add.w	r3, r7, #12
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fdec 	bl	800d6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf8:	f000 bc6f 	b.w	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb00:	f000 bc6b 	b.w	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb04:	4b6e      	ldr	r3, [pc, #440]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb0c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb0e:	4b6c      	ldr	r3, [pc, #432]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 0304 	and.w	r3, r3, #4
 800cb16:	2b04      	cmp	r3, #4
 800cb18:	d10c      	bne.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d109      	bne.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb20:	4b67      	ldr	r3, [pc, #412]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	08db      	lsrs	r3, r3, #3
 800cb26:	f003 0303 	and.w	r3, r3, #3
 800cb2a:	4a66      	ldr	r2, [pc, #408]	; (800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cb2c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb32:	e01f      	b.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb34:	4b62      	ldr	r3, [pc, #392]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb40:	d106      	bne.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb48:	d102      	bne.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb4a:	4b5f      	ldr	r3, [pc, #380]	; (800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb4e:	e011      	b.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb50:	4b5b      	ldr	r3, [pc, #364]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb5c:	d106      	bne.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb64:	d102      	bne.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb66:	4b59      	ldr	r3, [pc, #356]	; (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cb68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb6a:	e003      	b.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb70:	f000 bc33 	b.w	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cb74:	f000 bc31 	b.w	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb78:	4b55      	ldr	r3, [pc, #340]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7c:	f000 bc2d 	b.w	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb84:	f000 bc29 	b.w	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800cb88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb8c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800cb90:	430b      	orrs	r3, r1
 800cb92:	f040 809f 	bne.w	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800cb96:	4b4a      	ldr	r3, [pc, #296]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb9a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800cb9e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cba6:	d04d      	beq.n	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800cba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbae:	f200 8084 	bhi.w	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb4:	2bc0      	cmp	r3, #192	; 0xc0
 800cbb6:	d07d      	beq.n	800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbba:	2bc0      	cmp	r3, #192	; 0xc0
 800cbbc:	d87d      	bhi.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	2b80      	cmp	r3, #128	; 0x80
 800cbc2:	d02d      	beq.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	2b80      	cmp	r3, #128	; 0x80
 800cbc8:	d877      	bhi.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d003      	beq.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd2:	2b40      	cmp	r3, #64	; 0x40
 800cbd4:	d012      	beq.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800cbd6:	e070      	b.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbd8:	4b39      	ldr	r3, [pc, #228]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbe4:	d107      	bne.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbea:	4618      	mov	r0, r3
 800cbec:	f000 fec2 	bl	800d974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbf4:	e3f1      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbfa:	e3ee      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbfc:	4b30      	ldr	r3, [pc, #192]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc08:	d107      	bne.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc0a:	f107 0318 	add.w	r3, r7, #24
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f000 fc08 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc18:	e3df      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc1e:	e3dc      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc20:	4b27      	ldr	r3, [pc, #156]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc2c:	d107      	bne.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc2e:	f107 030c 	add.w	r3, r7, #12
 800cc32:	4618      	mov	r0, r3
 800cc34:	f000 fd4a 	bl	800d6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc3c:	e3cd      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc42:	e3ca      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc44:	4b1e      	ldr	r3, [pc, #120]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc4c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc4e:	4b1c      	ldr	r3, [pc, #112]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f003 0304 	and.w	r3, r3, #4
 800cc56:	2b04      	cmp	r3, #4
 800cc58:	d10c      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800cc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d109      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc60:	4b17      	ldr	r3, [pc, #92]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	08db      	lsrs	r3, r3, #3
 800cc66:	f003 0303 	and.w	r3, r3, #3
 800cc6a:	4a16      	ldr	r2, [pc, #88]	; (800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cc6c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc72:	e01e      	b.n	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc74:	4b12      	ldr	r3, [pc, #72]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc80:	d106      	bne.n	800cc90 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800cc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc88:	d102      	bne.n	800cc90 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc8a:	4b0f      	ldr	r3, [pc, #60]	; (800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc8e:	e010      	b.n	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc90:	4b0b      	ldr	r3, [pc, #44]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc9c:	d106      	bne.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800cc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cca4:	d102      	bne.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cca6:	4b09      	ldr	r3, [pc, #36]	; (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccaa:	e002      	b.n	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ccb0:	e393      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ccb2:	e392      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ccb4:	4b06      	ldr	r3, [pc, #24]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccb8:	e38f      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccbe:	e38c      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ccc0:	58024400 	.word	0x58024400
 800ccc4:	03d09000 	.word	0x03d09000
 800ccc8:	003d0900 	.word	0x003d0900
 800cccc:	016e3600 	.word	0x016e3600
 800ccd0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800ccd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccd8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ccdc:	430b      	orrs	r3, r1
 800ccde:	f040 809c 	bne.w	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800cce2:	4b9e      	ldr	r3, [pc, #632]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cce6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800ccea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccf2:	d054      	beq.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccfa:	f200 808b 	bhi.w	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cd04:	f000 8083 	beq.w	800ce0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800cd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cd0e:	f200 8081 	bhi.w	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd18:	d02f      	beq.n	800cd7a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd20:	d878      	bhi.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d004      	beq.n	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800cd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd2e:	d012      	beq.n	800cd56 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800cd30:	e070      	b.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd32:	4b8a      	ldr	r3, [pc, #552]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd3e:	d107      	bne.n	800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd44:	4618      	mov	r0, r3
 800cd46:	f000 fe15 	bl	800d974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd4e:	e344      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd54:	e341      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd56:	4b81      	ldr	r3, [pc, #516]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd62:	d107      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd64:	f107 0318 	add.w	r3, r7, #24
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 fb5b 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd72:	e332      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cd74:	2300      	movs	r3, #0
 800cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd78:	e32f      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd7a:	4b78      	ldr	r3, [pc, #480]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd86:	d107      	bne.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd88:	f107 030c 	add.w	r3, r7, #12
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f000 fc9d 	bl	800d6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd96:	e320      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd9c:	e31d      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd9e:	4b6f      	ldr	r3, [pc, #444]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cda2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cda6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cda8:	4b6c      	ldr	r3, [pc, #432]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f003 0304 	and.w	r3, r3, #4
 800cdb0:	2b04      	cmp	r3, #4
 800cdb2:	d10c      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800cdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d109      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdba:	4b68      	ldr	r3, [pc, #416]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	08db      	lsrs	r3, r3, #3
 800cdc0:	f003 0303 	and.w	r3, r3, #3
 800cdc4:	4a66      	ldr	r2, [pc, #408]	; (800cf60 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800cdc6:	fa22 f303 	lsr.w	r3, r2, r3
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdcc:	e01e      	b.n	800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cdce:	4b63      	ldr	r3, [pc, #396]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdda:	d106      	bne.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800cddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cde2:	d102      	bne.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cde4:	4b5f      	ldr	r3, [pc, #380]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800cde6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cde8:	e010      	b.n	800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdea:	4b5c      	ldr	r3, [pc, #368]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdf6:	d106      	bne.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800cdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdfe:	d102      	bne.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce00:	4b59      	ldr	r3, [pc, #356]	; (800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ce02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce04:	e002      	b.n	800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce06:	2300      	movs	r3, #0
 800ce08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800ce0a:	e2e6      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ce0c:	e2e5      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce0e:	4b57      	ldr	r3, [pc, #348]	; (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce12:	e2e2      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce18:	e2df      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ce1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce1e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ce22:	430b      	orrs	r3, r1
 800ce24:	f040 80a7 	bne.w	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ce28:	4b4c      	ldr	r3, [pc, #304]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce2c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ce30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce38:	d055      	beq.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce40:	f200 8096 	bhi.w	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ce4a:	f000 8084 	beq.w	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ce54:	f200 808c 	bhi.w	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ce58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce5e:	d030      	beq.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce66:	f200 8083 	bhi.w	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d004      	beq.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800ce70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce76:	d012      	beq.n	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800ce78:	e07a      	b.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce7a:	4b38      	ldr	r3, [pc, #224]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce86:	d107      	bne.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 fd71 	bl	800d974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce96:	e2a0      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce9c:	e29d      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce9e:	4b2f      	ldr	r3, [pc, #188]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ceaa:	d107      	bne.n	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceac:	f107 0318 	add.w	r3, r7, #24
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f000 fab7 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceba:	e28e      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec0:	e28b      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cec2:	4b26      	ldr	r3, [pc, #152]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ceca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cece:	d107      	bne.n	800cee0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ced0:	f107 030c 	add.w	r3, r7, #12
 800ced4:	4618      	mov	r0, r3
 800ced6:	f000 fbf9 	bl	800d6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cede:	e27c      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cee0:	2300      	movs	r3, #0
 800cee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee4:	e279      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cee6:	4b1d      	ldr	r3, [pc, #116]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ceee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cef0:	4b1a      	ldr	r3, [pc, #104]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f003 0304 	and.w	r3, r3, #4
 800cef8:	2b04      	cmp	r3, #4
 800cefa:	d10c      	bne.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800cefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d109      	bne.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf02:	4b16      	ldr	r3, [pc, #88]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	08db      	lsrs	r3, r3, #3
 800cf08:	f003 0303 	and.w	r3, r3, #3
 800cf0c:	4a14      	ldr	r2, [pc, #80]	; (800cf60 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800cf0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf14:	e01e      	b.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf16:	4b11      	ldr	r3, [pc, #68]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf22:	d106      	bne.n	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800cf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf2a:	d102      	bne.n	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf2c:	4b0d      	ldr	r3, [pc, #52]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800cf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf30:	e010      	b.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf32:	4b0a      	ldr	r3, [pc, #40]	; (800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf3e:	d106      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf46:	d102      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf48:	4b07      	ldr	r3, [pc, #28]	; (800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf4c:	e002      	b.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cf52:	e242      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cf54:	e241      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf56:	4b05      	ldr	r3, [pc, #20]	; (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5a:	e23e      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cf5c:	58024400 	.word	0x58024400
 800cf60:	03d09000 	.word	0x03d09000
 800cf64:	003d0900 	.word	0x003d0900
 800cf68:	016e3600 	.word	0x016e3600
 800cf6c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf74:	e231      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cf76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf7a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cf7e:	430b      	orrs	r3, r1
 800cf80:	f040 8085 	bne.w	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cf84:	4b9c      	ldr	r3, [pc, #624]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cf86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf88:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cf8c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf94:	d06b      	beq.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800cf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf9c:	d874      	bhi.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cfa4:	d056      	beq.n	800d054 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800cfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cfac:	d86c      	bhi.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cfb4:	d03b      	beq.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cfbc:	d864      	bhi.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfc4:	d021      	beq.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800cfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfcc:	d85c      	bhi.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d004      	beq.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfda:	d004      	beq.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800cfdc:	e054      	b.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cfde:	f7fe fb49 	bl	800b674 <HAL_RCC_GetPCLK1Freq>
 800cfe2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfe4:	e1f9      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfe6:	4b84      	ldr	r3, [pc, #528]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cff2:	d107      	bne.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cff4:	f107 0318 	add.w	r3, r7, #24
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 fa13 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d002:	e1ea      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d008:	e1e7      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d00a:	4b7b      	ldr	r3, [pc, #492]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d016:	d107      	bne.n	800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d018:	f107 030c 	add.w	r3, r7, #12
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 fb55 	bl	800d6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d026:	e1d8      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d02c:	e1d5      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d02e:	4b72      	ldr	r3, [pc, #456]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f003 0304 	and.w	r3, r3, #4
 800d036:	2b04      	cmp	r3, #4
 800d038:	d109      	bne.n	800d04e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d03a:	4b6f      	ldr	r3, [pc, #444]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	08db      	lsrs	r3, r3, #3
 800d040:	f003 0303 	and.w	r3, r3, #3
 800d044:	4a6d      	ldr	r2, [pc, #436]	; (800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d046:	fa22 f303 	lsr.w	r3, r2, r3
 800d04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d04c:	e1c5      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d04e:	2300      	movs	r3, #0
 800d050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d052:	e1c2      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d054:	4b68      	ldr	r3, [pc, #416]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d05c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d060:	d102      	bne.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800d062:	4b67      	ldr	r3, [pc, #412]	; (800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800d064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d066:	e1b8      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d06c:	e1b5      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d06e:	4b62      	ldr	r3, [pc, #392]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d07a:	d102      	bne.n	800d082 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800d07c:	4b61      	ldr	r3, [pc, #388]	; (800d204 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800d07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d080:	e1ab      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d086:	e1a8      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d08c:	e1a5      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d092:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d096:	430b      	orrs	r3, r1
 800d098:	d173      	bne.n	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d09a:	4b57      	ldr	r3, [pc, #348]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d09e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d0a2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0aa:	d02f      	beq.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0b2:	d863      	bhi.n	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d004      	beq.n	800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0c0:	d012      	beq.n	800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800d0c2:	e05b      	b.n	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0c4:	4b4c      	ldr	r3, [pc, #304]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0d0:	d107      	bne.n	800d0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0d2:	f107 0318 	add.w	r3, r7, #24
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 f9a4 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0e0:	e17b      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0e6:	e178      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0e8:	4b43      	ldr	r3, [pc, #268]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0f4:	d107      	bne.n	800d106 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0f6:	f107 030c 	add.w	r3, r7, #12
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 fae6 	bl	800d6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d104:	e169      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d106:	2300      	movs	r3, #0
 800d108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d10a:	e166      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d10c:	4b3a      	ldr	r3, [pc, #232]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d114:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d116:	4b38      	ldr	r3, [pc, #224]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f003 0304 	and.w	r3, r3, #4
 800d11e:	2b04      	cmp	r3, #4
 800d120:	d10c      	bne.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800d122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d124:	2b00      	cmp	r3, #0
 800d126:	d109      	bne.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d128:	4b33      	ldr	r3, [pc, #204]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	08db      	lsrs	r3, r3, #3
 800d12e:	f003 0303 	and.w	r3, r3, #3
 800d132:	4a32      	ldr	r2, [pc, #200]	; (800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d134:	fa22 f303 	lsr.w	r3, r2, r3
 800d138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d13a:	e01e      	b.n	800d17a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d13c:	4b2e      	ldr	r3, [pc, #184]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d148:	d106      	bne.n	800d158 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800d14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d14c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d150:	d102      	bne.n	800d158 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d152:	4b2b      	ldr	r3, [pc, #172]	; (800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800d154:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d156:	e010      	b.n	800d17a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d158:	4b27      	ldr	r3, [pc, #156]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d164:	d106      	bne.n	800d174 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d16c:	d102      	bne.n	800d174 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d16e:	4b25      	ldr	r3, [pc, #148]	; (800d204 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800d170:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d172:	e002      	b.n	800d17a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d174:	2300      	movs	r3, #0
 800d176:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d178:	e12f      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d17a:	e12e      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d17c:	2300      	movs	r3, #0
 800d17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d180:	e12b      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d182:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d186:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d18a:	430b      	orrs	r3, r1
 800d18c:	d13c      	bne.n	800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d18e:	4b1a      	ldr	r3, [pc, #104]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d196:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d004      	beq.n	800d1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1a4:	d012      	beq.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800d1a6:	e023      	b.n	800d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d1a8:	4b13      	ldr	r3, [pc, #76]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1b4:	d107      	bne.n	800d1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 fbda 	bl	800d974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1c4:	e109      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1ca:	e106      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1cc:	4b0a      	ldr	r3, [pc, #40]	; (800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1d8:	d107      	bne.n	800d1ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1da:	f107 0318 	add.w	r3, r7, #24
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 f920 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d1e4:	6a3b      	ldr	r3, [r7, #32]
 800d1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1e8:	e0f7      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1ee:	e0f4      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1f4:	e0f1      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d1f6:	bf00      	nop
 800d1f8:	58024400 	.word	0x58024400
 800d1fc:	03d09000 	.word	0x03d09000
 800d200:	003d0900 	.word	0x003d0900
 800d204:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d20c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d210:	430b      	orrs	r3, r1
 800d212:	f040 8091 	bne.w	800d338 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d216:	4b73      	ldr	r3, [pc, #460]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d21a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d21e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d222:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800d226:	f000 8081 	beq.w	800d32c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800d22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800d230:	d87f      	bhi.n	800d332 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d238:	d06b      	beq.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800d23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d240:	d877      	bhi.n	800d332 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d248:	d056      	beq.n	800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800d24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d250:	d86f      	bhi.n	800d332 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d254:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d258:	d03b      	beq.n	800d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d260:	d867      	bhi.n	800d332 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d268:	d021      	beq.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d270:	d85f      	bhi.n	800d332 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	2b00      	cmp	r3, #0
 800d276:	d004      	beq.n	800d282 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d27e:	d004      	beq.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800d280:	e057      	b.n	800d332 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d282:	f000 f8b9 	bl	800d3f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d286:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d288:	e0a7      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d28a:	4b56      	ldr	r3, [pc, #344]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d296:	d107      	bne.n	800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d298:	f107 0318 	add.w	r3, r7, #24
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 f8c1 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2a6:	e098      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2ac:	e095      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d2ae:	4b4d      	ldr	r3, [pc, #308]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2ba:	d107      	bne.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2bc:	f107 030c 	add.w	r3, r7, #12
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f000 fa03 	bl	800d6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2ca:	e086      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2d0:	e083      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d2d2:	4b44      	ldr	r3, [pc, #272]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f003 0304 	and.w	r3, r3, #4
 800d2da:	2b04      	cmp	r3, #4
 800d2dc:	d109      	bne.n	800d2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2de:	4b41      	ldr	r3, [pc, #260]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	08db      	lsrs	r3, r3, #3
 800d2e4:	f003 0303 	and.w	r3, r3, #3
 800d2e8:	4a3f      	ldr	r2, [pc, #252]	; (800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800d2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2f0:	e073      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2f6:	e070      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d2f8:	4b3a      	ldr	r3, [pc, #232]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d304:	d102      	bne.n	800d30c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800d306:	4b39      	ldr	r3, [pc, #228]	; (800d3ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800d308:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d30a:	e066      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d30c:	2300      	movs	r3, #0
 800d30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d310:	e063      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d312:	4b34      	ldr	r3, [pc, #208]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d31a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d31e:	d102      	bne.n	800d326 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800d320:	4b33      	ldr	r3, [pc, #204]	; (800d3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d324:	e059      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d326:	2300      	movs	r3, #0
 800d328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d32a:	e056      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d32c:	4b31      	ldr	r3, [pc, #196]	; (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800d32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d330:	e053      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d332:	2300      	movs	r3, #0
 800d334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d336:	e050      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d33c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d340:	430b      	orrs	r3, r1
 800d342:	d148      	bne.n	800d3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d344:	4b27      	ldr	r3, [pc, #156]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d348:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d34c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d354:	d02a      	beq.n	800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800d356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d35c:	d838      	bhi.n	800d3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d360:	2b00      	cmp	r3, #0
 800d362:	d004      	beq.n	800d36e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d36a:	d00d      	beq.n	800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800d36c:	e030      	b.n	800d3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d36e:	4b1d      	ldr	r3, [pc, #116]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d376:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d37a:	d102      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800d37c:	4b1c      	ldr	r3, [pc, #112]	; (800d3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d380:	e02b      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d382:	2300      	movs	r3, #0
 800d384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d386:	e028      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d388:	4b16      	ldr	r3, [pc, #88]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d390:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d394:	d107      	bne.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 faea 	bl	800d974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3a4:	e019      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3aa:	e016      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3ac:	4b0d      	ldr	r3, [pc, #52]	; (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d3b8:	d107      	bne.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ba:	f107 0318 	add.w	r3, r7, #24
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f000 f830 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3c8:	e007      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3ce:	e004      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3d4:	e001      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3740      	adds	r7, #64	; 0x40
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	58024400 	.word	0x58024400
 800d3e8:	03d09000 	.word	0x03d09000
 800d3ec:	003d0900 	.word	0x003d0900
 800d3f0:	016e3600 	.word	0x016e3600
 800d3f4:	00bb8000 	.word	0x00bb8000

0800d3f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800d3fc:	f7fe f90a 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800d400:	4602      	mov	r2, r0
 800d402:	4b06      	ldr	r3, [pc, #24]	; (800d41c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	091b      	lsrs	r3, r3, #4
 800d408:	f003 0307 	and.w	r3, r3, #7
 800d40c:	4904      	ldr	r1, [pc, #16]	; (800d420 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d40e:	5ccb      	ldrb	r3, [r1, r3]
 800d410:	f003 031f 	and.w	r3, r3, #31
 800d414:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d418:	4618      	mov	r0, r3
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	58024400 	.word	0x58024400
 800d420:	08012994 	.word	0x08012994

0800d424 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d424:	b480      	push	{r7}
 800d426:	b089      	sub	sp, #36	; 0x24
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d42c:	4ba1      	ldr	r3, [pc, #644]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d430:	f003 0303 	and.w	r3, r3, #3
 800d434:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d436:	4b9f      	ldr	r3, [pc, #636]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d43a:	0b1b      	lsrs	r3, r3, #12
 800d43c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d440:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d442:	4b9c      	ldr	r3, [pc, #624]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d446:	091b      	lsrs	r3, r3, #4
 800d448:	f003 0301 	and.w	r3, r3, #1
 800d44c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d44e:	4b99      	ldr	r3, [pc, #612]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d452:	08db      	lsrs	r3, r3, #3
 800d454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d458:	693a      	ldr	r2, [r7, #16]
 800d45a:	fb02 f303 	mul.w	r3, r2, r3
 800d45e:	ee07 3a90 	vmov	s15, r3
 800d462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 8111 	beq.w	800d694 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	2b02      	cmp	r3, #2
 800d476:	f000 8083 	beq.w	800d580 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	f200 80a1 	bhi.w	800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d003      	beq.n	800d490 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d056      	beq.n	800d53c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d48e:	e099      	b.n	800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d490:	4b88      	ldr	r3, [pc, #544]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f003 0320 	and.w	r3, r3, #32
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d02d      	beq.n	800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d49c:	4b85      	ldr	r3, [pc, #532]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	08db      	lsrs	r3, r3, #3
 800d4a2:	f003 0303 	and.w	r3, r3, #3
 800d4a6:	4a84      	ldr	r2, [pc, #528]	; (800d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	ee07 3a90 	vmov	s15, r3
 800d4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	ee07 3a90 	vmov	s15, r3
 800d4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4c6:	4b7b      	ldr	r3, [pc, #492]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ce:	ee07 3a90 	vmov	s15, r3
 800d4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d6bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d4f6:	e087      	b.n	800d608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	ee07 3a90 	vmov	s15, r3
 800d4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d502:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d50a:	4b6a      	ldr	r3, [pc, #424]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d512:	ee07 3a90 	vmov	s15, r3
 800d516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d51a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d51e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d6bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d53a:	e065      	b.n	800d608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	ee07 3a90 	vmov	s15, r3
 800d542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d546:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d54e:	4b59      	ldr	r3, [pc, #356]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d556:	ee07 3a90 	vmov	s15, r3
 800d55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d55e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d562:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d6bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d57a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d57e:	e043      	b.n	800d608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	ee07 3a90 	vmov	s15, r3
 800d586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d58a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d592:	4b48      	ldr	r3, [pc, #288]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d59a:	ee07 3a90 	vmov	s15, r3
 800d59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d6bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5c2:	e021      	b.n	800d608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	ee07 3a90 	vmov	s15, r3
 800d5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5d6:	4b37      	ldr	r3, [pc, #220]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5de:	ee07 3a90 	vmov	s15, r3
 800d5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d6bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d606:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d608:	4b2a      	ldr	r3, [pc, #168]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d60c:	0a5b      	lsrs	r3, r3, #9
 800d60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d612:	ee07 3a90 	vmov	s15, r3
 800d616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d61a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d61e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d622:	edd7 6a07 	vldr	s13, [r7, #28]
 800d626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d62a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d62e:	ee17 2a90 	vmov	r2, s15
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d636:	4b1f      	ldr	r3, [pc, #124]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d63a:	0c1b      	lsrs	r3, r3, #16
 800d63c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d640:	ee07 3a90 	vmov	s15, r3
 800d644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d64c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d650:	edd7 6a07 	vldr	s13, [r7, #28]
 800d654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d65c:	ee17 2a90 	vmov	r2, s15
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d664:	4b13      	ldr	r3, [pc, #76]	; (800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d668:	0e1b      	lsrs	r3, r3, #24
 800d66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d66e:	ee07 3a90 	vmov	s15, r3
 800d672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d67a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d67e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d68a:	ee17 2a90 	vmov	r2, s15
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d692:	e008      	b.n	800d6a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	609a      	str	r2, [r3, #8]
}
 800d6a6:	bf00      	nop
 800d6a8:	3724      	adds	r7, #36	; 0x24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	58024400 	.word	0x58024400
 800d6b8:	03d09000 	.word	0x03d09000
 800d6bc:	46000000 	.word	0x46000000
 800d6c0:	4c742400 	.word	0x4c742400
 800d6c4:	4a742400 	.word	0x4a742400
 800d6c8:	4bb71b00 	.word	0x4bb71b00

0800d6cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b089      	sub	sp, #36	; 0x24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6d4:	4ba1      	ldr	r3, [pc, #644]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6d8:	f003 0303 	and.w	r3, r3, #3
 800d6dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d6de:	4b9f      	ldr	r3, [pc, #636]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e2:	0d1b      	lsrs	r3, r3, #20
 800d6e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d6ea:	4b9c      	ldr	r3, [pc, #624]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ee:	0a1b      	lsrs	r3, r3, #8
 800d6f0:	f003 0301 	and.w	r3, r3, #1
 800d6f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d6f6:	4b99      	ldr	r3, [pc, #612]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6fa:	08db      	lsrs	r3, r3, #3
 800d6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d700:	693a      	ldr	r2, [r7, #16]
 800d702:	fb02 f303 	mul.w	r3, r2, r3
 800d706:	ee07 3a90 	vmov	s15, r3
 800d70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d70e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2b00      	cmp	r3, #0
 800d716:	f000 8111 	beq.w	800d93c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	f000 8083 	beq.w	800d828 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	2b02      	cmp	r3, #2
 800d726:	f200 80a1 	bhi.w	800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d003      	beq.n	800d738 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d056      	beq.n	800d7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d736:	e099      	b.n	800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d738:	4b88      	ldr	r3, [pc, #544]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f003 0320 	and.w	r3, r3, #32
 800d740:	2b00      	cmp	r3, #0
 800d742:	d02d      	beq.n	800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d744:	4b85      	ldr	r3, [pc, #532]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	08db      	lsrs	r3, r3, #3
 800d74a:	f003 0303 	and.w	r3, r3, #3
 800d74e:	4a84      	ldr	r2, [pc, #528]	; (800d960 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d750:	fa22 f303 	lsr.w	r3, r2, r3
 800d754:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	ee07 3a90 	vmov	s15, r3
 800d75c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	ee07 3a90 	vmov	s15, r3
 800d766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d76e:	4b7b      	ldr	r3, [pc, #492]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d776:	ee07 3a90 	vmov	s15, r3
 800d77a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d77e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d782:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d78e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d79a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d79e:	e087      	b.n	800d8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	ee07 3a90 	vmov	s15, r3
 800d7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d968 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7b2:	4b6a      	ldr	r3, [pc, #424]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ba:	ee07 3a90 	vmov	s15, r3
 800d7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7e2:	e065      	b.n	800d8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	ee07 3a90 	vmov	s15, r3
 800d7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7f6:	4b59      	ldr	r3, [pc, #356]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7fe:	ee07 3a90 	vmov	s15, r3
 800d802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d806:	ed97 6a03 	vldr	s12, [r7, #12]
 800d80a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d826:	e043      	b.n	800d8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	ee07 3a90 	vmov	s15, r3
 800d82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d832:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d83a:	4b48      	ldr	r3, [pc, #288]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d842:	ee07 3a90 	vmov	s15, r3
 800d846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d84a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d84e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d85a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d86a:	e021      	b.n	800d8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	ee07 3a90 	vmov	s15, r3
 800d872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d876:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d87e:	4b37      	ldr	r3, [pc, #220]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d886:	ee07 3a90 	vmov	s15, r3
 800d88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d88e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d892:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d89e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d8b0:	4b2a      	ldr	r3, [pc, #168]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b4:	0a5b      	lsrs	r3, r3, #9
 800d8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ba:	ee07 3a90 	vmov	s15, r3
 800d8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8d6:	ee17 2a90 	vmov	r2, s15
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d8de:	4b1f      	ldr	r3, [pc, #124]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8e2:	0c1b      	lsrs	r3, r3, #16
 800d8e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8e8:	ee07 3a90 	vmov	s15, r3
 800d8ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d904:	ee17 2a90 	vmov	r2, s15
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d90c:	4b13      	ldr	r3, [pc, #76]	; (800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d910:	0e1b      	lsrs	r3, r3, #24
 800d912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d916:	ee07 3a90 	vmov	s15, r3
 800d91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d922:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d926:	edd7 6a07 	vldr	s13, [r7, #28]
 800d92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d932:	ee17 2a90 	vmov	r2, s15
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d93a:	e008      	b.n	800d94e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	609a      	str	r2, [r3, #8]
}
 800d94e:	bf00      	nop
 800d950:	3724      	adds	r7, #36	; 0x24
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	58024400 	.word	0x58024400
 800d960:	03d09000 	.word	0x03d09000
 800d964:	46000000 	.word	0x46000000
 800d968:	4c742400 	.word	0x4c742400
 800d96c:	4a742400 	.word	0x4a742400
 800d970:	4bb71b00 	.word	0x4bb71b00

0800d974 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d974:	b480      	push	{r7}
 800d976:	b089      	sub	sp, #36	; 0x24
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d97c:	4ba0      	ldr	r3, [pc, #640]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d980:	f003 0303 	and.w	r3, r3, #3
 800d984:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d986:	4b9e      	ldr	r3, [pc, #632]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d98a:	091b      	lsrs	r3, r3, #4
 800d98c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d990:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d992:	4b9b      	ldr	r3, [pc, #620]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d996:	f003 0301 	and.w	r3, r3, #1
 800d99a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d99c:	4b98      	ldr	r3, [pc, #608]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a0:	08db      	lsrs	r3, r3, #3
 800d9a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9a6:	693a      	ldr	r2, [r7, #16]
 800d9a8:	fb02 f303 	mul.w	r3, r2, r3
 800d9ac:	ee07 3a90 	vmov	s15, r3
 800d9b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 8111 	beq.w	800dbe2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	f000 8083 	beq.w	800dace <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	f200 80a1 	bhi.w	800db12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d003      	beq.n	800d9de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d056      	beq.n	800da8a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d9dc:	e099      	b.n	800db12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9de:	4b88      	ldr	r3, [pc, #544]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f003 0320 	and.w	r3, r3, #32
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d02d      	beq.n	800da46 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d9ea:	4b85      	ldr	r3, [pc, #532]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	08db      	lsrs	r3, r3, #3
 800d9f0:	f003 0303 	and.w	r3, r3, #3
 800d9f4:	4a83      	ldr	r2, [pc, #524]	; (800dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d9fa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	ee07 3a90 	vmov	s15, r3
 800da02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	ee07 3a90 	vmov	s15, r3
 800da0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da14:	4b7a      	ldr	r3, [pc, #488]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da1c:	ee07 3a90 	vmov	s15, r3
 800da20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da24:	ed97 6a03 	vldr	s12, [r7, #12]
 800da28:	eddf 5a77 	vldr	s11, [pc, #476]	; 800dc08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800da44:	e087      	b.n	800db56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	ee07 3a90 	vmov	s15, r3
 800da4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da50:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800dc0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800da54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da58:	4b69      	ldr	r3, [pc, #420]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da60:	ee07 3a90 	vmov	s15, r3
 800da64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da68:	ed97 6a03 	vldr	s12, [r7, #12]
 800da6c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800dc08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da88:	e065      	b.n	800db56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	ee07 3a90 	vmov	s15, r3
 800da90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da94:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800da98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da9c:	4b58      	ldr	r3, [pc, #352]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daa4:	ee07 3a90 	vmov	s15, r3
 800daa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daac:	ed97 6a03 	vldr	s12, [r7, #12]
 800dab0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800dc08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dabc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dac8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dacc:	e043      	b.n	800db56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	ee07 3a90 	vmov	s15, r3
 800dad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dad8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800dc14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dadc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dae0:	4b47      	ldr	r3, [pc, #284]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dae8:	ee07 3a90 	vmov	s15, r3
 800daec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800daf4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800dc08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800daf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dafc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db10:	e021      	b.n	800db56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	ee07 3a90 	vmov	s15, r3
 800db18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db1c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dc0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800db20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db24:	4b36      	ldr	r3, [pc, #216]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db2c:	ee07 3a90 	vmov	s15, r3
 800db30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db34:	ed97 6a03 	vldr	s12, [r7, #12]
 800db38:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dc08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db54:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800db56:	4b2a      	ldr	r3, [pc, #168]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db5a:	0a5b      	lsrs	r3, r3, #9
 800db5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db60:	ee07 3a90 	vmov	s15, r3
 800db64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db70:	edd7 6a07 	vldr	s13, [r7, #28]
 800db74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db7c:	ee17 2a90 	vmov	r2, s15
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800db84:	4b1e      	ldr	r3, [pc, #120]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db88:	0c1b      	lsrs	r3, r3, #16
 800db8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db8e:	ee07 3a90 	vmov	s15, r3
 800db92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800dba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbaa:	ee17 2a90 	vmov	r2, s15
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dbb2:	4b13      	ldr	r3, [pc, #76]	; (800dc00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb6:	0e1b      	lsrs	r3, r3, #24
 800dbb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbbc:	ee07 3a90 	vmov	s15, r3
 800dbc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dbc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbcc:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbd8:	ee17 2a90 	vmov	r2, s15
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dbe0:	e008      	b.n	800dbf4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	609a      	str	r2, [r3, #8]
}
 800dbf4:	bf00      	nop
 800dbf6:	3724      	adds	r7, #36	; 0x24
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr
 800dc00:	58024400 	.word	0x58024400
 800dc04:	03d09000 	.word	0x03d09000
 800dc08:	46000000 	.word	0x46000000
 800dc0c:	4c742400 	.word	0x4c742400
 800dc10:	4a742400 	.word	0x4a742400
 800dc14:	4bb71b00 	.word	0x4bb71b00

0800dc18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc26:	4b53      	ldr	r3, [pc, #332]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2a:	f003 0303 	and.w	r3, r3, #3
 800dc2e:	2b03      	cmp	r3, #3
 800dc30:	d101      	bne.n	800dc36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e099      	b.n	800dd6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dc36:	4b4f      	ldr	r3, [pc, #316]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a4e      	ldr	r2, [pc, #312]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dc3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dc40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc42:	f7f7 fa07 	bl	8005054 <HAL_GetTick>
 800dc46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc48:	e008      	b.n	800dc5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc4a:	f7f7 fa03 	bl	8005054 <HAL_GetTick>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	1ad3      	subs	r3, r2, r3
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d901      	bls.n	800dc5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dc58:	2303      	movs	r3, #3
 800dc5a:	e086      	b.n	800dd6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc5c:	4b45      	ldr	r3, [pc, #276]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1f0      	bne.n	800dc4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dc68:	4b42      	ldr	r3, [pc, #264]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	031b      	lsls	r3, r3, #12
 800dc76:	493f      	ldr	r1, [pc, #252]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	628b      	str	r3, [r1, #40]	; 0x28
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	3b01      	subs	r3, #1
 800dc82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	025b      	lsls	r3, r3, #9
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	431a      	orrs	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	3b01      	subs	r3, #1
 800dc98:	041b      	lsls	r3, r3, #16
 800dc9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dc9e:	431a      	orrs	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	691b      	ldr	r3, [r3, #16]
 800dca4:	3b01      	subs	r3, #1
 800dca6:	061b      	lsls	r3, r3, #24
 800dca8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dcac:	4931      	ldr	r1, [pc, #196]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dcb2:	4b30      	ldr	r3, [pc, #192]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	695b      	ldr	r3, [r3, #20]
 800dcbe:	492d      	ldr	r1, [pc, #180]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dcc4:	4b2b      	ldr	r3, [pc, #172]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc8:	f023 0220 	bic.w	r2, r3, #32
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	699b      	ldr	r3, [r3, #24]
 800dcd0:	4928      	ldr	r1, [pc, #160]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dcd6:	4b27      	ldr	r3, [pc, #156]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dcd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcda:	4a26      	ldr	r2, [pc, #152]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dcdc:	f023 0310 	bic.w	r3, r3, #16
 800dce0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dce2:	4b24      	ldr	r3, [pc, #144]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dce6:	4b24      	ldr	r3, [pc, #144]	; (800dd78 <RCCEx_PLL2_Config+0x160>)
 800dce8:	4013      	ands	r3, r2
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	69d2      	ldr	r2, [r2, #28]
 800dcee:	00d2      	lsls	r2, r2, #3
 800dcf0:	4920      	ldr	r1, [pc, #128]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dcf6:	4b1f      	ldr	r3, [pc, #124]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcfa:	4a1e      	ldr	r2, [pc, #120]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dcfc:	f043 0310 	orr.w	r3, r3, #16
 800dd00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d106      	bne.n	800dd16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dd08:	4b1a      	ldr	r3, [pc, #104]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd0c:	4a19      	ldr	r2, [pc, #100]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dd0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd14:	e00f      	b.n	800dd36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d106      	bne.n	800dd2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dd1c:	4b15      	ldr	r3, [pc, #84]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd20:	4a14      	ldr	r2, [pc, #80]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dd22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd28:	e005      	b.n	800dd36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dd2a:	4b12      	ldr	r3, [pc, #72]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd2e:	4a11      	ldr	r2, [pc, #68]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dd30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dd36:	4b0f      	ldr	r3, [pc, #60]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a0e      	ldr	r2, [pc, #56]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dd3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd42:	f7f7 f987 	bl	8005054 <HAL_GetTick>
 800dd46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd48:	e008      	b.n	800dd5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd4a:	f7f7 f983 	bl	8005054 <HAL_GetTick>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	2b02      	cmp	r3, #2
 800dd56:	d901      	bls.n	800dd5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dd58:	2303      	movs	r3, #3
 800dd5a:	e006      	b.n	800dd6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd5c:	4b05      	ldr	r3, [pc, #20]	; (800dd74 <RCCEx_PLL2_Config+0x15c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d0f0      	beq.n	800dd4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	58024400 	.word	0x58024400
 800dd78:	ffff0007 	.word	0xffff0007

0800dd7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd8a:	4b53      	ldr	r3, [pc, #332]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800dd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd8e:	f003 0303 	and.w	r3, r3, #3
 800dd92:	2b03      	cmp	r3, #3
 800dd94:	d101      	bne.n	800dd9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	e099      	b.n	800dece <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dd9a:	4b4f      	ldr	r3, [pc, #316]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a4e      	ldr	r2, [pc, #312]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800dda0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dda4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dda6:	f7f7 f955 	bl	8005054 <HAL_GetTick>
 800ddaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ddac:	e008      	b.n	800ddc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ddae:	f7f7 f951 	bl	8005054 <HAL_GetTick>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d901      	bls.n	800ddc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	e086      	b.n	800dece <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ddc0:	4b45      	ldr	r3, [pc, #276]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1f0      	bne.n	800ddae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ddcc:	4b42      	ldr	r3, [pc, #264]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800ddce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	051b      	lsls	r3, r3, #20
 800ddda:	493f      	ldr	r1, [pc, #252]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800dddc:	4313      	orrs	r3, r2
 800ddde:	628b      	str	r3, [r1, #40]	; 0x28
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	3b01      	subs	r3, #1
 800dde6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	025b      	lsls	r3, r3, #9
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	431a      	orrs	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	041b      	lsls	r3, r3, #16
 800ddfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800de02:	431a      	orrs	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	3b01      	subs	r3, #1
 800de0a:	061b      	lsls	r3, r3, #24
 800de0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800de10:	4931      	ldr	r1, [pc, #196]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de12:	4313      	orrs	r3, r2
 800de14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800de16:	4b30      	ldr	r3, [pc, #192]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	695b      	ldr	r3, [r3, #20]
 800de22:	492d      	ldr	r1, [pc, #180]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de24:	4313      	orrs	r3, r2
 800de26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800de28:	4b2b      	ldr	r3, [pc, #172]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	699b      	ldr	r3, [r3, #24]
 800de34:	4928      	ldr	r1, [pc, #160]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de36:	4313      	orrs	r3, r2
 800de38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800de3a:	4b27      	ldr	r3, [pc, #156]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3e:	4a26      	ldr	r2, [pc, #152]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800de46:	4b24      	ldr	r3, [pc, #144]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de4a:	4b24      	ldr	r3, [pc, #144]	; (800dedc <RCCEx_PLL3_Config+0x160>)
 800de4c:	4013      	ands	r3, r2
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	69d2      	ldr	r2, [r2, #28]
 800de52:	00d2      	lsls	r2, r2, #3
 800de54:	4920      	ldr	r1, [pc, #128]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de56:	4313      	orrs	r3, r2
 800de58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800de5a:	4b1f      	ldr	r3, [pc, #124]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5e:	4a1e      	ldr	r2, [pc, #120]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d106      	bne.n	800de7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800de6c:	4b1a      	ldr	r3, [pc, #104]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de70:	4a19      	ldr	r2, [pc, #100]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800de76:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de78:	e00f      	b.n	800de9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d106      	bne.n	800de8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800de80:	4b15      	ldr	r3, [pc, #84]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de84:	4a14      	ldr	r2, [pc, #80]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800de8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de8c:	e005      	b.n	800de9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800de8e:	4b12      	ldr	r3, [pc, #72]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de92:	4a11      	ldr	r2, [pc, #68]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800de9a:	4b0f      	ldr	r3, [pc, #60]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a0e      	ldr	r2, [pc, #56]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800dea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dea6:	f7f7 f8d5 	bl	8005054 <HAL_GetTick>
 800deaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800deac:	e008      	b.n	800dec0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800deae:	f7f7 f8d1 	bl	8005054 <HAL_GetTick>
 800deb2:	4602      	mov	r2, r0
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	2b02      	cmp	r3, #2
 800deba:	d901      	bls.n	800dec0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800debc:	2303      	movs	r3, #3
 800debe:	e006      	b.n	800dece <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dec0:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <RCCEx_PLL3_Config+0x15c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d0f0      	beq.n	800deae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800decc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	58024400 	.word	0x58024400
 800dedc:	ffff0007 	.word	0xffff0007

0800dee0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d074      	beq.n	800dfdc <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800def8:	b2db      	uxtb	r3, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	d106      	bne.n	800df0c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 f870 	bl	800dfec <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2202      	movs	r2, #2
 800df10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	f003 0310 	and.w	r3, r3, #16
 800df1e:	2b10      	cmp	r3, #16
 800df20:	d053      	beq.n	800dfca <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	22ca      	movs	r2, #202	; 0xca
 800df28:	625a      	str	r2, [r3, #36]	; 0x24
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2253      	movs	r2, #83	; 0x53
 800df30:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f888 	bl	800e048 <RTC_EnterInitMode>
 800df38:	4603      	mov	r3, r0
 800df3a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d124      	bne.n	800df8c <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	6999      	ldr	r1, [r3, #24]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	4b26      	ldr	r3, [pc, #152]	; (800dfe8 <HAL_RTC_Init+0x108>)
 800df4e:	400b      	ands	r3, r1
 800df50:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	6999      	ldr	r1, [r3, #24]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	685a      	ldr	r2, [r3, #4]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	431a      	orrs	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	699b      	ldr	r3, [r3, #24]
 800df66:	431a      	orrs	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	430a      	orrs	r2, r1
 800df6e:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	0419      	lsls	r1, r3, #16
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68da      	ldr	r2, [r3, #12]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	430a      	orrs	r2, r1
 800df80:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f896 	bl	800e0b4 <RTC_ExitInitMode>
 800df88:	4603      	mov	r3, r0
 800df8a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d116      	bne.n	800dfc0 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	699a      	ldr	r2, [r3, #24]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800dfa0:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	6999      	ldr	r1, [r3, #24]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6a1a      	ldr	r2, [r3, #32]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	69db      	ldr	r3, [r3, #28]
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	695b      	ldr	r3, [r3, #20]
 800dfb6:	431a      	orrs	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	430a      	orrs	r2, r1
 800dfbe:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	22ff      	movs	r2, #255	; 0xff
 800dfc6:	625a      	str	r2, [r3, #36]	; 0x24
 800dfc8:	e001      	b.n	800dfce <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dfce:	7bfb      	ldrb	r3, [r7, #15]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d103      	bne.n	800dfdc <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	fb8fffbf 	.word	0xfb8fffbf

0800dfec <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4a0d      	ldr	r2, [pc, #52]	; (800e044 <HAL_RTC_WaitForSynchro+0x44>)
 800e00e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800e010:	f7f7 f820 	bl	8005054 <HAL_GetTick>
 800e014:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800e016:	e009      	b.n	800e02c <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e018:	f7f7 f81c 	bl	8005054 <HAL_GetTick>
 800e01c:	4602      	mov	r2, r0
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	1ad3      	subs	r3, r2, r3
 800e022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e026:	d901      	bls.n	800e02c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800e028:	2303      	movs	r3, #3
 800e02a:	e007      	b.n	800e03c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	f003 0320 	and.w	r3, r3, #32
 800e036:	2b00      	cmp	r3, #0
 800e038:	d0ee      	beq.n	800e018 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	0001005f 	.word	0x0001005f

0800e048 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d123      	bne.n	800e0aa <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68da      	ldr	r2, [r3, #12]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e070:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e072:	f7f6 ffef 	bl	8005054 <HAL_GetTick>
 800e076:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e078:	e00d      	b.n	800e096 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e07a:	f7f6 ffeb 	bl	8005054 <HAL_GetTick>
 800e07e:	4602      	mov	r2, r0
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e088:	d905      	bls.n	800e096 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800e08a:	2303      	movs	r3, #3
 800e08c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2203      	movs	r2, #3
 800e092:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <RTC_EnterInitMode+0x62>
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
 800e0a6:	2b03      	cmp	r3, #3
 800e0a8:	d1e7      	bne.n	800e07a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800e0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3710      	adds	r7, #16
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e0c0:	4b1a      	ldr	r3, [pc, #104]	; (800e12c <RTC_ExitInitMode+0x78>)
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	4a19      	ldr	r2, [pc, #100]	; (800e12c <RTC_ExitInitMode+0x78>)
 800e0c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0ca:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e0cc:	4b17      	ldr	r3, [pc, #92]	; (800e12c <RTC_ExitInitMode+0x78>)
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	f003 0320 	and.w	r3, r3, #32
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d10c      	bne.n	800e0f2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7ff ff91 	bl	800e000 <HAL_RTC_WaitForSynchro>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d01e      	beq.n	800e122 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2203      	movs	r2, #3
 800e0e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800e0ec:	2303      	movs	r3, #3
 800e0ee:	73fb      	strb	r3, [r7, #15]
 800e0f0:	e017      	b.n	800e122 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0f2:	4b0e      	ldr	r3, [pc, #56]	; (800e12c <RTC_ExitInitMode+0x78>)
 800e0f4:	699b      	ldr	r3, [r3, #24]
 800e0f6:	4a0d      	ldr	r2, [pc, #52]	; (800e12c <RTC_ExitInitMode+0x78>)
 800e0f8:	f023 0320 	bic.w	r3, r3, #32
 800e0fc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f7ff ff7e 	bl	800e000 <HAL_RTC_WaitForSynchro>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d005      	beq.n	800e116 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2203      	movs	r2, #3
 800e10e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800e112:	2303      	movs	r3, #3
 800e114:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e116:	4b05      	ldr	r3, [pc, #20]	; (800e12c <RTC_ExitInitMode+0x78>)
 800e118:	699b      	ldr	r3, [r3, #24]
 800e11a:	4a04      	ldr	r2, [pc, #16]	; (800e12c <RTC_ExitInitMode+0x78>)
 800e11c:	f043 0320 	orr.w	r3, r3, #32
 800e120:	6193      	str	r3, [r2, #24]
  }

  return status;
 800e122:	7bfb      	ldrb	r3, [r7, #15]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3710      	adds	r7, #16
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	58004000 	.word	0x58004000

0800e130 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b08a      	sub	sp, #40	; 0x28
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d101      	bne.n	800e142 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	e075      	b.n	800e22e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d105      	bne.n	800e15a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f90b 	bl	800e370 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2204      	movs	r2, #4
 800e15e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f000 f868 	bl	800e238 <HAL_SD_InitCard>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d001      	beq.n	800e172 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e16e:	2301      	movs	r3, #1
 800e170:	e05d      	b.n	800e22e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e172:	f107 0308 	add.w	r3, r7, #8
 800e176:	4619      	mov	r1, r3
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 faa7 	bl	800e6cc <HAL_SD_GetCardStatus>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e184:	2301      	movs	r3, #1
 800e186:	e052      	b.n	800e22e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e188:	7e3b      	ldrb	r3, [r7, #24]
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e18e:	7e7b      	ldrb	r3, [r7, #25]
 800e190:	b2db      	uxtb	r3, r3
 800e192:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d10a      	bne.n	800e1b2 <HAL_SD_Init+0x82>
 800e19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d102      	bne.n	800e1a8 <HAL_SD_Init+0x78>
 800e1a2:	6a3b      	ldr	r3, [r7, #32]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d004      	beq.n	800e1b2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1ae:	659a      	str	r2, [r3, #88]	; 0x58
 800e1b0:	e00b      	b.n	800e1ca <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d104      	bne.n	800e1c4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1c0:	659a      	str	r2, [r3, #88]	; 0x58
 800e1c2:	e002      	b.n	800e1ca <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 fb39 	bl	800e848 <HAL_SD_ConfigWideBusOperation>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d001      	beq.n	800e1e0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	e026      	b.n	800e22e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e1e0:	f7f6 ff38 	bl	8005054 <HAL_GetTick>
 800e1e4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e1e6:	e011      	b.n	800e20c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e1e8:	f7f6 ff34 	bl	8005054 <HAL_GetTick>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f6:	d109      	bne.n	800e20c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e1fe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2201      	movs	r2, #1
 800e204:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800e208:	2303      	movs	r3, #3
 800e20a:	e010      	b.n	800e22e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 fc2d 	bl	800ea6c <HAL_SD_GetCardState>
 800e212:	4603      	mov	r3, r0
 800e214:	2b04      	cmp	r3, #4
 800e216:	d1e7      	bne.n	800e1e8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2201      	movs	r2, #1
 800e228:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3728      	adds	r7, #40	; 0x28
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
	...

0800e238 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e238:	b590      	push	{r4, r7, lr}
 800e23a:	b08d      	sub	sp, #52	; 0x34
 800e23c:	af02      	add	r7, sp, #8
 800e23e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e240:	2300      	movs	r3, #0
 800e242:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e244:	2300      	movs	r3, #0
 800e246:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e248:	2300      	movs	r3, #0
 800e24a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e24c:	2300      	movs	r3, #0
 800e24e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e250:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e254:	f04f 0100 	mov.w	r1, #0
 800e258:	f7fe fbf6 	bl	800ca48 <HAL_RCCEx_GetPeriphCLKFreq>
 800e25c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e260:	2b00      	cmp	r3, #0
 800e262:	d109      	bne.n	800e278 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2201      	movs	r2, #1
 800e268:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e272:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e274:	2301      	movs	r3, #1
 800e276:	e070      	b.n	800e35a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27a:	0a1b      	lsrs	r3, r3, #8
 800e27c:	4a39      	ldr	r2, [pc, #228]	; (800e364 <HAL_SD_InitCard+0x12c>)
 800e27e:	fba2 2303 	umull	r2, r3, r2, r3
 800e282:	091b      	lsrs	r3, r3, #4
 800e284:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681c      	ldr	r4, [r3, #0]
 800e28a:	466a      	mov	r2, sp
 800e28c:	f107 0318 	add.w	r3, r7, #24
 800e290:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e294:	e882 0003 	stmia.w	r2, {r0, r1}
 800e298:	f107 030c 	add.w	r3, r7, #12
 800e29c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f002 fd4e 	bl	8010d40 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f002 fd80 	bl	8010dae <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d005      	beq.n	800e2c0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	005b      	lsls	r3, r3, #1
 800e2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2be:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d007      	beq.n	800e2d6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e2c6:	4a28      	ldr	r2, [pc, #160]	; (800e368 <HAL_SD_InitCard+0x130>)
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7f6 fecb 	bl	800506c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 fcb6 	bl	800ec48 <SD_PowerON>
 800e2dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00b      	beq.n	800e2fc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2f0:	6a3b      	ldr	r3, [r7, #32]
 800e2f2:	431a      	orrs	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e02e      	b.n	800e35a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 fbd5 	bl	800eaac <SD_InitCard>
 800e302:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e304:	6a3b      	ldr	r3, [r7, #32]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00b      	beq.n	800e322 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e316:	6a3b      	ldr	r3, [r7, #32]
 800e318:	431a      	orrs	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	e01b      	b.n	800e35a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e32a:	4618      	mov	r0, r3
 800e32c:	f002 fdd4 	bl	8010ed8 <SDMMC_CmdBlockLength>
 800e330:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e332:	6a3b      	ldr	r3, [r7, #32]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d00f      	beq.n	800e358 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a0b      	ldr	r2, [pc, #44]	; (800e36c <HAL_SD_InitCard+0x134>)
 800e33e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e344:	6a3b      	ldr	r3, [r7, #32]
 800e346:	431a      	orrs	r2, r3
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e354:	2301      	movs	r3, #1
 800e356:	e000      	b.n	800e35a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	372c      	adds	r7, #44	; 0x2c
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd90      	pop	{r4, r7, pc}
 800e362:	bf00      	nop
 800e364:	014f8b59 	.word	0x014f8b59
 800e368:	00012110 	.word	0x00012110
 800e36c:	1fe00fff 	.word	0x1fe00fff

0800e370 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e392:	0f9b      	lsrs	r3, r3, #30
 800e394:	b2da      	uxtb	r2, r3
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e39e:	0e9b      	lsrs	r3, r3, #26
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	f003 030f 	and.w	r3, r3, #15
 800e3a6:	b2da      	uxtb	r2, r3
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3b0:	0e1b      	lsrs	r3, r3, #24
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	f003 0303 	and.w	r3, r3, #3
 800e3b8:	b2da      	uxtb	r2, r3
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3c2:	0c1b      	lsrs	r3, r3, #16
 800e3c4:	b2da      	uxtb	r2, r3
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3ce:	0a1b      	lsrs	r3, r3, #8
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3da:	b2da      	uxtb	r2, r3
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3e4:	0d1b      	lsrs	r3, r3, #20
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3f0:	0c1b      	lsrs	r3, r3, #16
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	f003 030f 	and.w	r3, r3, #15
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e402:	0bdb      	lsrs	r3, r3, #15
 800e404:	b2db      	uxtb	r3, r3
 800e406:	f003 0301 	and.w	r3, r3, #1
 800e40a:	b2da      	uxtb	r2, r3
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e414:	0b9b      	lsrs	r3, r3, #14
 800e416:	b2db      	uxtb	r3, r3
 800e418:	f003 0301 	and.w	r3, r3, #1
 800e41c:	b2da      	uxtb	r2, r3
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e426:	0b5b      	lsrs	r3, r3, #13
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	f003 0301 	and.w	r3, r3, #1
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e438:	0b1b      	lsrs	r3, r3, #12
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	f003 0301 	and.w	r3, r3, #1
 800e440:	b2da      	uxtb	r2, r3
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	2200      	movs	r2, #0
 800e44a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e450:	2b00      	cmp	r3, #0
 800e452:	d163      	bne.n	800e51c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e458:	009a      	lsls	r2, r3, #2
 800e45a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e45e:	4013      	ands	r3, r2
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e464:	0f92      	lsrs	r2, r2, #30
 800e466:	431a      	orrs	r2, r3
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e470:	0edb      	lsrs	r3, r3, #27
 800e472:	b2db      	uxtb	r3, r3
 800e474:	f003 0307 	and.w	r3, r3, #7
 800e478:	b2da      	uxtb	r2, r3
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e482:	0e1b      	lsrs	r3, r3, #24
 800e484:	b2db      	uxtb	r3, r3
 800e486:	f003 0307 	and.w	r3, r3, #7
 800e48a:	b2da      	uxtb	r2, r3
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e494:	0d5b      	lsrs	r3, r3, #21
 800e496:	b2db      	uxtb	r3, r3
 800e498:	f003 0307 	and.w	r3, r3, #7
 800e49c:	b2da      	uxtb	r2, r3
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4a6:	0c9b      	lsrs	r3, r3, #18
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	f003 0307 	and.w	r3, r3, #7
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4b8:	0bdb      	lsrs	r3, r3, #15
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	f003 0307 	and.w	r3, r3, #7
 800e4c0:	b2da      	uxtb	r2, r3
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	691b      	ldr	r3, [r3, #16]
 800e4ca:	1c5a      	adds	r2, r3, #1
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	7e1b      	ldrb	r3, [r3, #24]
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	f003 0307 	and.w	r3, r3, #7
 800e4da:	3302      	adds	r3, #2
 800e4dc:	2201      	movs	r2, #1
 800e4de:	fa02 f303 	lsl.w	r3, r2, r3
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e4e6:	fb03 f202 	mul.w	r2, r3, r2
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	7a1b      	ldrb	r3, [r3, #8]
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	f003 030f 	and.w	r3, r3, #15
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	409a      	lsls	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e508:	0a52      	lsrs	r2, r2, #9
 800e50a:	fb03 f202 	mul.w	r2, r3, r2
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e518:	655a      	str	r2, [r3, #84]	; 0x54
 800e51a:	e031      	b.n	800e580 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e520:	2b01      	cmp	r3, #1
 800e522:	d11d      	bne.n	800e560 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e528:	041b      	lsls	r3, r3, #16
 800e52a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e532:	0c1b      	lsrs	r3, r3, #16
 800e534:	431a      	orrs	r2, r3
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	691b      	ldr	r3, [r3, #16]
 800e53e:	3301      	adds	r3, #1
 800e540:	029a      	lsls	r2, r3, #10
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e554:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	655a      	str	r2, [r3, #84]	; 0x54
 800e55e:	e00f      	b.n	800e580 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a58      	ldr	r2, [pc, #352]	; (800e6c8 <HAL_SD_GetCardCSD+0x344>)
 800e566:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e56c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e57c:	2301      	movs	r3, #1
 800e57e:	e09d      	b.n	800e6bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e584:	0b9b      	lsrs	r3, r3, #14
 800e586:	b2db      	uxtb	r3, r3
 800e588:	f003 0301 	and.w	r3, r3, #1
 800e58c:	b2da      	uxtb	r2, r3
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e596:	09db      	lsrs	r3, r3, #7
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e59e:	b2da      	uxtb	r2, r3
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5b8:	0fdb      	lsrs	r3, r3, #31
 800e5ba:	b2da      	uxtb	r2, r3
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5c4:	0f5b      	lsrs	r3, r3, #29
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	f003 0303 	and.w	r3, r3, #3
 800e5cc:	b2da      	uxtb	r2, r3
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5d6:	0e9b      	lsrs	r3, r3, #26
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	f003 0307 	and.w	r3, r3, #7
 800e5de:	b2da      	uxtb	r2, r3
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5e8:	0d9b      	lsrs	r3, r3, #22
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	f003 030f 	and.w	r3, r3, #15
 800e5f0:	b2da      	uxtb	r2, r3
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5fa:	0d5b      	lsrs	r3, r3, #21
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	f003 0301 	and.w	r3, r3, #1
 800e602:	b2da      	uxtb	r2, r3
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	2200      	movs	r2, #0
 800e60e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e616:	0c1b      	lsrs	r3, r3, #16
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	f003 0301 	and.w	r3, r3, #1
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e62a:	0bdb      	lsrs	r3, r3, #15
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	f003 0301 	and.w	r3, r3, #1
 800e632:	b2da      	uxtb	r2, r3
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e63e:	0b9b      	lsrs	r3, r3, #14
 800e640:	b2db      	uxtb	r3, r3
 800e642:	f003 0301 	and.w	r3, r3, #1
 800e646:	b2da      	uxtb	r2, r3
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e652:	0b5b      	lsrs	r3, r3, #13
 800e654:	b2db      	uxtb	r3, r3
 800e656:	f003 0301 	and.w	r3, r3, #1
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e666:	0b1b      	lsrs	r3, r3, #12
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	f003 0301 	and.w	r3, r3, #1
 800e66e:	b2da      	uxtb	r2, r3
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e67a:	0a9b      	lsrs	r3, r3, #10
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	f003 0303 	and.w	r3, r3, #3
 800e682:	b2da      	uxtb	r2, r3
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e68e:	0a1b      	lsrs	r3, r3, #8
 800e690:	b2db      	uxtb	r3, r3
 800e692:	f003 0303 	and.w	r3, r3, #3
 800e696:	b2da      	uxtb	r2, r3
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6a2:	085b      	lsrs	r3, r3, #1
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr
 800e6c8:	1fe00fff 	.word	0x1fe00fff

0800e6cc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b094      	sub	sp, #80	; 0x50
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b03      	cmp	r3, #3
 800e6e6:	d101      	bne.n	800e6ec <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e0a7      	b.n	800e83c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e6ec:	f107 0308 	add.w	r3, r7, #8
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 fb36 	bl	800ed64 <SD_SendSDStatus>
 800e6f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d011      	beq.n	800e724 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a4f      	ldr	r2, [pc, #316]	; (800e844 <HAL_SD_GetCardStatus+0x178>)
 800e706:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e70c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e70e:	431a      	orrs	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e71c:	2301      	movs	r3, #1
 800e71e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e722:	e070      	b.n	800e806 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	099b      	lsrs	r3, r3, #6
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	f003 0303 	and.w	r3, r3, #3
 800e72e:	b2da      	uxtb	r2, r3
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	095b      	lsrs	r3, r3, #5
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	f003 0301 	and.w	r3, r3, #1
 800e73e:	b2da      	uxtb	r2, r3
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	0a1b      	lsrs	r3, r3, #8
 800e748:	b29b      	uxth	r3, r3
 800e74a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e74e:	b29a      	uxth	r2, r3
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	0e1b      	lsrs	r3, r3, #24
 800e754:	b29b      	uxth	r3, r3
 800e756:	4313      	orrs	r3, r2
 800e758:	b29a      	uxth	r2, r3
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	061a      	lsls	r2, r3, #24
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	021b      	lsls	r3, r3, #8
 800e766:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e76a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	0a1b      	lsrs	r3, r3, #8
 800e770:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e774:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	0e1b      	lsrs	r3, r3, #24
 800e77a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	b2da      	uxtb	r2, r3
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	0a1b      	lsrs	r3, r3, #8
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	0d1b      	lsrs	r3, r3, #20
 800e796:	b2db      	uxtb	r3, r3
 800e798:	f003 030f 	and.w	r3, r3, #15
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	0c1b      	lsrs	r3, r3, #16
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	0a9b      	lsrs	r3, r3, #10
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7c8:	b2da      	uxtb	r2, r3
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	0a1b      	lsrs	r3, r3, #8
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	f003 0303 	and.w	r3, r3, #3
 800e7d8:	b2da      	uxtb	r2, r3
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	091b      	lsrs	r3, r3, #4
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	f003 030f 	and.w	r3, r3, #15
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	f003 030f 	and.w	r3, r3, #15
 800e7f6:	b2da      	uxtb	r2, r3
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	0e1b      	lsrs	r3, r3, #24
 800e800:	b2da      	uxtb	r2, r3
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e80e:	4618      	mov	r0, r3
 800e810:	f002 fb62 	bl	8010ed8 <SDMMC_CmdBlockLength>
 800e814:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d00d      	beq.n	800e838 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a08      	ldr	r2, [pc, #32]	; (800e844 <HAL_SD_GetCardStatus+0x178>)
 800e822:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e828:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2201      	movs	r2, #1
 800e82e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e838:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3750      	adds	r7, #80	; 0x50
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	1fe00fff 	.word	0x1fe00fff

0800e848 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e848:	b590      	push	{r4, r7, lr}
 800e84a:	b08d      	sub	sp, #52	; 0x34
 800e84c:	af02      	add	r7, sp, #8
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2203      	movs	r2, #3
 800e85c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e864:	2b03      	cmp	r3, #3
 800e866:	d02e      	beq.n	800e8c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e86e:	d106      	bne.n	800e87e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e874:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	635a      	str	r2, [r3, #52]	; 0x34
 800e87c:	e029      	b.n	800e8d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e884:	d10a      	bne.n	800e89c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 fb64 	bl	800ef54 <SD_WideBus_Enable>
 800e88c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e892:	6a3b      	ldr	r3, [r7, #32]
 800e894:	431a      	orrs	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	635a      	str	r2, [r3, #52]	; 0x34
 800e89a:	e01a      	b.n	800e8d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10a      	bne.n	800e8b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 fba1 	bl	800efea <SD_WideBus_Disable>
 800e8a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8ae:	6a3b      	ldr	r3, [r7, #32]
 800e8b0:	431a      	orrs	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	635a      	str	r2, [r3, #52]	; 0x34
 800e8b6:	e00c      	b.n	800e8d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	635a      	str	r2, [r3, #52]	; 0x34
 800e8c4:	e005      	b.n	800e8d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d007      	beq.n	800e8ea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a5f      	ldr	r2, [pc, #380]	; (800ea5c <HAL_SD_ConfigWideBusOperation+0x214>)
 800e8e0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8e8:	e096      	b.n	800ea18 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e8ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e8ee:	f04f 0100 	mov.w	r1, #0
 800e8f2:	f7fe f8a9 	bl	800ca48 <HAL_RCCEx_GetPeriphCLKFreq>
 800e8f6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f000 8083 	beq.w	800ea06 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	691b      	ldr	r3, [r3, #16]
 800e914:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	695a      	ldr	r2, [r3, #20]
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	4950      	ldr	r1, [pc, #320]	; (800ea60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e91e:	fba1 1303 	umull	r1, r3, r1, r3
 800e922:	0e1b      	lsrs	r3, r3, #24
 800e924:	429a      	cmp	r2, r3
 800e926:	d303      	bcc.n	800e930 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	695b      	ldr	r3, [r3, #20]
 800e92c:	61bb      	str	r3, [r7, #24]
 800e92e:	e05a      	b.n	800e9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e938:	d103      	bne.n	800e942 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	695b      	ldr	r3, [r3, #20]
 800e93e:	61bb      	str	r3, [r7, #24]
 800e940:	e051      	b.n	800e9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e94a:	d126      	bne.n	800e99a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	695b      	ldr	r3, [r3, #20]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d10e      	bne.n	800e972 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	4a43      	ldr	r2, [pc, #268]	; (800ea64 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d906      	bls.n	800e96a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	4a40      	ldr	r2, [pc, #256]	; (800ea60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e960:	fba2 2303 	umull	r2, r3, r2, r3
 800e964:	0e5b      	lsrs	r3, r3, #25
 800e966:	61bb      	str	r3, [r7, #24]
 800e968:	e03d      	b.n	800e9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	695b      	ldr	r3, [r3, #20]
 800e96e:	61bb      	str	r3, [r7, #24]
 800e970:	e039      	b.n	800e9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	695b      	ldr	r3, [r3, #20]
 800e976:	005b      	lsls	r3, r3, #1
 800e978:	69fa      	ldr	r2, [r7, #28]
 800e97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e97e:	4a39      	ldr	r2, [pc, #228]	; (800ea64 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d906      	bls.n	800e992 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	4a36      	ldr	r2, [pc, #216]	; (800ea60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e988:	fba2 2303 	umull	r2, r3, r2, r3
 800e98c:	0e5b      	lsrs	r3, r3, #25
 800e98e:	61bb      	str	r3, [r7, #24]
 800e990:	e029      	b.n	800e9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	695b      	ldr	r3, [r3, #20]
 800e996:	61bb      	str	r3, [r7, #24]
 800e998:	e025      	b.n	800e9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	695b      	ldr	r3, [r3, #20]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10e      	bne.n	800e9c0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	4a30      	ldr	r2, [pc, #192]	; (800ea68 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d906      	bls.n	800e9b8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	4a2c      	ldr	r2, [pc, #176]	; (800ea60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e9b2:	0e1b      	lsrs	r3, r3, #24
 800e9b4:	61bb      	str	r3, [r7, #24]
 800e9b6:	e016      	b.n	800e9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	695b      	ldr	r3, [r3, #20]
 800e9bc:	61bb      	str	r3, [r7, #24]
 800e9be:	e012      	b.n	800e9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	695b      	ldr	r3, [r3, #20]
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	69fa      	ldr	r2, [r7, #28]
 800e9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9cc:	4a26      	ldr	r2, [pc, #152]	; (800ea68 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d906      	bls.n	800e9e0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	4a22      	ldr	r2, [pc, #136]	; (800ea60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800e9da:	0e1b      	lsrs	r3, r3, #24
 800e9dc:	61bb      	str	r3, [r7, #24]
 800e9de:	e002      	b.n	800e9e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	695b      	ldr	r3, [r3, #20]
 800e9e4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681c      	ldr	r4, [r3, #0]
 800e9ea:	466a      	mov	r2, sp
 800e9ec:	f107 0314 	add.w	r3, r7, #20
 800e9f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e9f4:	e882 0003 	stmia.w	r2, {r0, r1}
 800e9f8:	f107 0308 	add.w	r3, r7, #8
 800e9fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f002 f99e 	bl	8010d40 <SDMMC_Init>
 800ea04:	e008      	b.n	800ea18 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea20:	4618      	mov	r0, r3
 800ea22:	f002 fa59 	bl	8010ed8 <SDMMC_CmdBlockLength>
 800ea26:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea28:	6a3b      	ldr	r3, [r7, #32]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d00c      	beq.n	800ea48 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a0a      	ldr	r2, [pc, #40]	; (800ea5c <HAL_SD_ConfigWideBusOperation+0x214>)
 800ea34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	431a      	orrs	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ea42:	2301      	movs	r3, #1
 800ea44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ea50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	372c      	adds	r7, #44	; 0x2c
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd90      	pop	{r4, r7, pc}
 800ea5c:	1fe00fff 	.word	0x1fe00fff
 800ea60:	55e63b89 	.word	0x55e63b89
 800ea64:	02faf080 	.word	0x02faf080
 800ea68:	017d7840 	.word	0x017d7840

0800ea6c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ea74:	2300      	movs	r3, #0
 800ea76:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ea78:	f107 030c 	add.w	r3, r7, #12
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 fa40 	bl	800ef04 <SD_SendStatus>
 800ea84:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d005      	beq.n	800ea98 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	431a      	orrs	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	0a5b      	lsrs	r3, r3, #9
 800ea9c:	f003 030f 	and.w	r3, r3, #15
 800eaa0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800eaa2:	693b      	ldr	r3, [r7, #16]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b090      	sub	sp, #64	; 0x40
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800eab4:	2300      	movs	r3, #0
 800eab6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800eab8:	f7f6 facc 	bl	8005054 <HAL_GetTick>
 800eabc:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f002 f984 	bl	8010dd0 <SDMMC_GetPowerState>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d102      	bne.n	800ead4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eace:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ead2:	e0b5      	b.n	800ec40 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead8:	2b03      	cmp	r3, #3
 800eada:	d02e      	beq.n	800eb3a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4618      	mov	r0, r3
 800eae2:	f002 fb05 	bl	80110f0 <SDMMC_CmdSendCID>
 800eae6:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800eae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d001      	beq.n	800eaf2 <SD_InitCard+0x46>
    {
      return errorstate;
 800eaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf0:	e0a6      	b.n	800ec40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2100      	movs	r1, #0
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f002 f9ae 	bl	8010e5a <SDMMC_GetResponse>
 800eafe:	4602      	mov	r2, r0
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2104      	movs	r1, #4
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f002 f9a5 	bl	8010e5a <SDMMC_GetResponse>
 800eb10:	4602      	mov	r2, r0
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2108      	movs	r1, #8
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f002 f99c 	bl	8010e5a <SDMMC_GetResponse>
 800eb22:	4602      	mov	r2, r0
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	210c      	movs	r1, #12
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f002 f993 	bl	8010e5a <SDMMC_GetResponse>
 800eb34:	4602      	mov	r2, r0
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3e:	2b03      	cmp	r3, #3
 800eb40:	d01d      	beq.n	800eb7e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800eb42:	e019      	b.n	800eb78 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f107 020a 	add.w	r2, r7, #10
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f002 fb0d 	bl	801116e <SDMMC_CmdSetRelAdd>
 800eb54:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800eb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d001      	beq.n	800eb60 <SD_InitCard+0xb4>
      {
        return errorstate;
 800eb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb5e:	e06f      	b.n	800ec40 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800eb60:	f7f6 fa78 	bl	8005054 <HAL_GetTick>
 800eb64:	4602      	mov	r2, r0
 800eb66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	f241 3287 	movw	r2, #4999	; 0x1387
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d902      	bls.n	800eb78 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800eb72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb76:	e063      	b.n	800ec40 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800eb78:	897b      	ldrh	r3, [r7, #10]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d0e2      	beq.n	800eb44 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb82:	2b03      	cmp	r3, #3
 800eb84:	d036      	beq.n	800ebf4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800eb86:	897b      	ldrh	r3, [r7, #10]
 800eb88:	461a      	mov	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb96:	041b      	lsls	r3, r3, #16
 800eb98:	4619      	mov	r1, r3
 800eb9a:	4610      	mov	r0, r2
 800eb9c:	f002 fac7 	bl	801112e <SDMMC_CmdSendCSD>
 800eba0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800eba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <SD_InitCard+0x100>
    {
      return errorstate;
 800eba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebaa:	e049      	b.n	800ec40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f002 f951 	bl	8010e5a <SDMMC_GetResponse>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2104      	movs	r1, #4
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f002 f948 	bl	8010e5a <SDMMC_GetResponse>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2108      	movs	r1, #8
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f002 f93f 	bl	8010e5a <SDMMC_GetResponse>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	210c      	movs	r1, #12
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f002 f936 	bl	8010e5a <SDMMC_GetResponse>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2104      	movs	r1, #4
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f002 f92d 	bl	8010e5a <SDMMC_GetResponse>
 800ec00:	4603      	mov	r3, r0
 800ec02:	0d1a      	lsrs	r2, r3, #20
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ec08:	f107 030c 	add.w	r3, r7, #12
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f7ff fbb8 	bl	800e384 <HAL_SD_GetCardCSD>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d002      	beq.n	800ec20 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ec1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ec1e:	e00f      	b.n	800ec40 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec28:	041b      	lsls	r3, r3, #16
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	f002 f976 	bl	8010f1e <SDMMC_CmdSelDesel>
 800ec32:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <SD_InitCard+0x192>
  {
    return errorstate;
 800ec3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3c:	e000      	b.n	800ec40 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3740      	adds	r7, #64	; 0x40
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec50:	2300      	movs	r3, #0
 800ec52:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ec54:	2300      	movs	r3, #0
 800ec56:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4618      	mov	r0, r3
 800ec62:	f002 f97f 	bl	8010f64 <SDMMC_CmdGoIdleState>
 800ec66:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d001      	beq.n	800ec72 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	e072      	b.n	800ed58 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4618      	mov	r0, r3
 800ec78:	f002 f992 	bl	8010fa0 <SDMMC_CmdOperCond>
 800ec7c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec84:	d10d      	bne.n	800eca2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f002 f967 	bl	8010f64 <SDMMC_CmdGoIdleState>
 800ec96:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d004      	beq.n	800eca8 <SD_PowerON+0x60>
    {
      return errorstate;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	e05a      	b.n	800ed58 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2201      	movs	r2, #1
 800eca6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d137      	bne.n	800ed20 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f002 f992 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800ecbc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d02d      	beq.n	800ed20 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ecc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ecc8:	e046      	b.n	800ed58 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2100      	movs	r1, #0
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f002 f985 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800ecd6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d001      	beq.n	800ece2 <SD_PowerON+0x9a>
    {
      return errorstate;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	e03a      	b.n	800ed58 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	491e      	ldr	r1, [pc, #120]	; (800ed60 <SD_PowerON+0x118>)
 800ece8:	4618      	mov	r0, r3
 800ecea:	f002 f99c 	bl	8011026 <SDMMC_CmdAppOperCommand>
 800ecee:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d002      	beq.n	800ecfc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ecf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ecfa:	e02d      	b.n	800ed58 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2100      	movs	r1, #0
 800ed02:	4618      	mov	r0, r3
 800ed04:	f002 f8a9 	bl	8010e5a <SDMMC_GetResponse>
 800ed08:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	0fdb      	lsrs	r3, r3, #31
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d101      	bne.n	800ed16 <SD_PowerON+0xce>
 800ed12:	2301      	movs	r3, #1
 800ed14:	e000      	b.n	800ed18 <SD_PowerON+0xd0>
 800ed16:	2300      	movs	r3, #0
 800ed18:	613b      	str	r3, [r7, #16]

    count++;
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d802      	bhi.n	800ed30 <SD_PowerON+0xe8>
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d0cc      	beq.n	800ecca <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d902      	bls.n	800ed40 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ed3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ed3e:	e00b      	b.n	800ed58 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d002      	beq.n	800ed56 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2201      	movs	r2, #1
 800ed54:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3718      	adds	r7, #24
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	c1100000 	.word	0xc1100000

0800ed64 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b08c      	sub	sp, #48	; 0x30
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ed6e:	f7f6 f971 	bl	8005054 <HAL_GetTick>
 800ed72:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f002 f86b 	bl	8010e5a <SDMMC_GetResponse>
 800ed84:	4603      	mov	r3, r0
 800ed86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed8e:	d102      	bne.n	800ed96 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ed90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed94:	e0b0      	b.n	800eef8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	2140      	movs	r1, #64	; 0x40
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f002 f89b 	bl	8010ed8 <SDMMC_CmdBlockLength>
 800eda2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eda4:	6a3b      	ldr	r3, [r7, #32]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d005      	beq.n	800edb6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800edb2:	6a3b      	ldr	r3, [r7, #32]
 800edb4:	e0a0      	b.n	800eef8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edbe:	041b      	lsls	r3, r3, #16
 800edc0:	4619      	mov	r1, r3
 800edc2:	4610      	mov	r0, r2
 800edc4:	f002 f90c 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800edc8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800edca:	6a3b      	ldr	r3, [r7, #32]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d005      	beq.n	800eddc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800edd8:	6a3b      	ldr	r3, [r7, #32]
 800edda:	e08d      	b.n	800eef8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eddc:	f04f 33ff 	mov.w	r3, #4294967295
 800ede0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ede2:	2340      	movs	r3, #64	; 0x40
 800ede4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ede6:	2360      	movs	r3, #96	; 0x60
 800ede8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800edea:	2302      	movs	r3, #2
 800edec:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800edee:	2300      	movs	r3, #0
 800edf0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800edf2:	2301      	movs	r3, #1
 800edf4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f107 0208 	add.w	r2, r7, #8
 800edfe:	4611      	mov	r1, r2
 800ee00:	4618      	mov	r0, r3
 800ee02:	f002 f83d 	bl	8010e80 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f002 f9f4 	bl	80111f8 <SDMMC_CmdStatusRegister>
 800ee10:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee12:	6a3b      	ldr	r3, [r7, #32]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d02b      	beq.n	800ee70 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ee20:	6a3b      	ldr	r3, [r7, #32]
 800ee22:	e069      	b.n	800eef8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d013      	beq.n	800ee5a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800ee32:	2300      	movs	r3, #0
 800ee34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee36:	e00d      	b.n	800ee54 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f001 ffa9 	bl	8010d94 <SDMMC_ReadFIFO>
 800ee42:	4602      	mov	r2, r0
 800ee44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee46:	601a      	str	r2, [r3, #0]
        pData++;
 800ee48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4a:	3304      	adds	r3, #4
 800ee4c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800ee4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee50:	3301      	adds	r3, #1
 800ee52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee56:	2b07      	cmp	r3, #7
 800ee58:	d9ee      	bls.n	800ee38 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ee5a:	f7f6 f8fb 	bl	8005054 <HAL_GetTick>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee68:	d102      	bne.n	800ee70 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ee6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee6e:	e043      	b.n	800eef8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee76:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d0d2      	beq.n	800ee24 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee84:	f003 0308 	and.w	r3, r3, #8
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d001      	beq.n	800ee90 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ee8c:	2308      	movs	r3, #8
 800ee8e:	e033      	b.n	800eef8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee96:	f003 0302 	and.w	r3, r3, #2
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ee9e:	2302      	movs	r3, #2
 800eea0:	e02a      	b.n	800eef8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eea8:	f003 0320 	and.w	r3, r3, #32
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d017      	beq.n	800eee0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800eeb0:	2320      	movs	r3, #32
 800eeb2:	e021      	b.n	800eef8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f001 ff6b 	bl	8010d94 <SDMMC_ReadFIFO>
 800eebe:	4602      	mov	r2, r0
 800eec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec2:	601a      	str	r2, [r3, #0]
    pData++;
 800eec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec6:	3304      	adds	r3, #4
 800eec8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eeca:	f7f6 f8c3 	bl	8005054 <HAL_GetTick>
 800eece:	4602      	mov	r2, r0
 800eed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed2:	1ad3      	subs	r3, r2, r3
 800eed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eed8:	d102      	bne.n	800eee0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eeda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eede:	e00b      	b.n	800eef8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d1e2      	bne.n	800eeb4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4a03      	ldr	r2, [pc, #12]	; (800ef00 <SD_SendSDStatus+0x19c>)
 800eef4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3730      	adds	r7, #48	; 0x30
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	18000f3a 	.word	0x18000f3a

0800ef04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d102      	bne.n	800ef1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ef14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef18:	e018      	b.n	800ef4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef22:	041b      	lsls	r3, r3, #16
 800ef24:	4619      	mov	r1, r3
 800ef26:	4610      	mov	r0, r2
 800ef28:	f002 f943 	bl	80111b2 <SDMMC_CmdSendStatus>
 800ef2c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d001      	beq.n	800ef38 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	e009      	b.n	800ef4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f001 ff8b 	bl	8010e5a <SDMMC_GetResponse>
 800ef44:	4602      	mov	r2, r0
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	60fb      	str	r3, [r7, #12]
 800ef60:	2300      	movs	r3, #0
 800ef62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2100      	movs	r1, #0
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f001 ff75 	bl	8010e5a <SDMMC_GetResponse>
 800ef70:	4603      	mov	r3, r0
 800ef72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef7a:	d102      	bne.n	800ef82 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ef7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef80:	e02f      	b.n	800efe2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ef82:	f107 030c 	add.w	r3, r7, #12
 800ef86:	4619      	mov	r1, r3
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f879 	bl	800f080 <SD_FindSCR>
 800ef8e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d001      	beq.n	800ef9a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	e023      	b.n	800efe2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d01c      	beq.n	800efde <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efac:	041b      	lsls	r3, r3, #16
 800efae:	4619      	mov	r1, r3
 800efb0:	4610      	mov	r0, r2
 800efb2:	f002 f815 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800efb6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d001      	beq.n	800efc2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	e00f      	b.n	800efe2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	2102      	movs	r1, #2
 800efc8:	4618      	mov	r0, r3
 800efca:	f002 f84c 	bl	8011066 <SDMMC_CmdBusWidth>
 800efce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	e003      	b.n	800efe2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800efda:	2300      	movs	r3, #0
 800efdc:	e001      	b.n	800efe2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800efde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3718      	adds	r7, #24
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b086      	sub	sp, #24
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eff2:	2300      	movs	r3, #0
 800eff4:	60fb      	str	r3, [r7, #12]
 800eff6:	2300      	movs	r3, #0
 800eff8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2100      	movs	r1, #0
 800f000:	4618      	mov	r0, r3
 800f002:	f001 ff2a 	bl	8010e5a <SDMMC_GetResponse>
 800f006:	4603      	mov	r3, r0
 800f008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f00c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f010:	d102      	bne.n	800f018 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f016:	e02f      	b.n	800f078 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f018:	f107 030c 	add.w	r3, r7, #12
 800f01c:	4619      	mov	r1, r3
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 f82e 	bl	800f080 <SD_FindSCR>
 800f024:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d001      	beq.n	800f030 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	e023      	b.n	800f078 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f036:	2b00      	cmp	r3, #0
 800f038:	d01c      	beq.n	800f074 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f042:	041b      	lsls	r3, r3, #16
 800f044:	4619      	mov	r1, r3
 800f046:	4610      	mov	r0, r2
 800f048:	f001 ffca 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800f04c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d001      	beq.n	800f058 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	e00f      	b.n	800f078 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2100      	movs	r1, #0
 800f05e:	4618      	mov	r0, r3
 800f060:	f002 f801 	bl	8011066 <SDMMC_CmdBusWidth>
 800f064:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d001      	beq.n	800f070 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	e003      	b.n	800f078 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f070:	2300      	movs	r3, #0
 800f072:	e001      	b.n	800f078 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f074:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3718      	adds	r7, #24
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08e      	sub	sp, #56	; 0x38
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f08a:	f7f5 ffe3 	bl	8005054 <HAL_GetTick>
 800f08e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f090:	2300      	movs	r3, #0
 800f092:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f094:	2300      	movs	r3, #0
 800f096:	60bb      	str	r3, [r7, #8]
 800f098:	2300      	movs	r3, #0
 800f09a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2108      	movs	r1, #8
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f001 ff16 	bl	8010ed8 <SDMMC_CmdBlockLength>
 800f0ac:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d001      	beq.n	800f0b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b6:	e0ad      	b.n	800f214 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0c0:	041b      	lsls	r3, r3, #16
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	4610      	mov	r0, r2
 800f0c6:	f001 ff8b 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800f0ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d4:	e09e      	b.n	800f214 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800f0da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f0dc:	2308      	movs	r3, #8
 800f0de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f0e0:	2330      	movs	r3, #48	; 0x30
 800f0e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f0e4:	2302      	movs	r3, #2
 800f0e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f107 0210 	add.w	r2, r7, #16
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f001 fec0 	bl	8010e80 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4618      	mov	r0, r3
 800f106:	f001 ffd1 	bl	80110ac <SDMMC_CmdSendSCR>
 800f10a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d027      	beq.n	800f162 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f114:	e07e      	b.n	800f214 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f11c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f120:	2b00      	cmp	r3, #0
 800f122:	d113      	bne.n	800f14c <SD_FindSCR+0xcc>
 800f124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f126:	2b00      	cmp	r3, #0
 800f128:	d110      	bne.n	800f14c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4618      	mov	r0, r3
 800f130:	f001 fe30 	bl	8010d94 <SDMMC_ReadFIFO>
 800f134:	4603      	mov	r3, r0
 800f136:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4618      	mov	r0, r3
 800f13e:	f001 fe29 	bl	8010d94 <SDMMC_ReadFIFO>
 800f142:	4603      	mov	r3, r0
 800f144:	60fb      	str	r3, [r7, #12]
      index++;
 800f146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f148:	3301      	adds	r3, #1
 800f14a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f14c:	f7f5 ff82 	bl	8005054 <HAL_GetTick>
 800f150:	4602      	mov	r2, r0
 800f152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f15a:	d102      	bne.n	800f162 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f15c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f160:	e058      	b.n	800f214 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f168:	f240 532a 	movw	r3, #1322	; 0x52a
 800f16c:	4013      	ands	r3, r2
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d0d1      	beq.n	800f116 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f178:	f003 0308 	and.w	r3, r3, #8
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d005      	beq.n	800f18c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2208      	movs	r2, #8
 800f186:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f188:	2308      	movs	r3, #8
 800f18a:	e043      	b.n	800f214 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f192:	f003 0302 	and.w	r3, r3, #2
 800f196:	2b00      	cmp	r3, #0
 800f198:	d005      	beq.n	800f1a6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2202      	movs	r2, #2
 800f1a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f1a2:	2302      	movs	r3, #2
 800f1a4:	e036      	b.n	800f214 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1ac:	f003 0320 	and.w	r3, r3, #32
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d005      	beq.n	800f1c0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2220      	movs	r2, #32
 800f1ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f1bc:	2320      	movs	r3, #32
 800f1be:	e029      	b.n	800f214 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4a15      	ldr	r2, [pc, #84]	; (800f21c <SD_FindSCR+0x19c>)
 800f1c6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	061a      	lsls	r2, r3, #24
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	021b      	lsls	r3, r3, #8
 800f1d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f1d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	0a1b      	lsrs	r3, r3, #8
 800f1da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f1de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	0e1b      	lsrs	r3, r3, #24
 800f1e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e8:	601a      	str	r2, [r3, #0]
    scr++;
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	3304      	adds	r3, #4
 800f1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	061a      	lsls	r2, r3, #24
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	021b      	lsls	r3, r3, #8
 800f1f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f1fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	0a1b      	lsrs	r3, r3, #8
 800f202:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f206:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	0e1b      	lsrs	r3, r3, #24
 800f20c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f212:	2300      	movs	r3, #0
}
 800f214:	4618      	mov	r0, r3
 800f216:	3738      	adds	r7, #56	; 0x38
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	18000f3a 	.word	0x18000f3a

0800f220 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800f230:	2301      	movs	r3, #1
 800f232:	e02b      	b.n	800f28c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d106      	bne.n	800f24e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 f825 	bl	800f298 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2202      	movs	r2, #2
 800f252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	3304      	adds	r3, #4
 800f25e:	4619      	mov	r1, r3
 800f260:	4610      	mov	r0, r2
 800f262:	f001 fca7 	bl	8010bb4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6818      	ldr	r0, [r3, #0]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	461a      	mov	r2, r3
 800f270:	6839      	ldr	r1, [r7, #0]
 800f272:	f001 fcfb 	bl	8010c6c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800f276:	4b07      	ldr	r3, [pc, #28]	; (800f294 <HAL_SDRAM_Init+0x74>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a06      	ldr	r2, [pc, #24]	; (800f294 <HAL_SDRAM_Init+0x74>)
 800f27c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f280:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2201      	movs	r2, #1
 800f286:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	52004000 	.word	0x52004000

0800f298 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800f2a0:	bf00      	nop
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d101      	bne.n	800f2be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	e10f      	b.n	800f4de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	4a87      	ldr	r2, [pc, #540]	; (800f4e8 <HAL_SPI_Init+0x23c>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d00f      	beq.n	800f2ee <HAL_SPI_Init+0x42>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4a86      	ldr	r2, [pc, #536]	; (800f4ec <HAL_SPI_Init+0x240>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d00a      	beq.n	800f2ee <HAL_SPI_Init+0x42>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a84      	ldr	r2, [pc, #528]	; (800f4f0 <HAL_SPI_Init+0x244>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d005      	beq.n	800f2ee <HAL_SPI_Init+0x42>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	2b0f      	cmp	r3, #15
 800f2e8:	d901      	bls.n	800f2ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e0f7      	b.n	800f4de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 f90a 	bl	800f508 <SPI_GetPacketSize>
 800f2f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	4a7b      	ldr	r2, [pc, #492]	; (800f4e8 <HAL_SPI_Init+0x23c>)
 800f2fc:	4293      	cmp	r3, r2
 800f2fe:	d00c      	beq.n	800f31a <HAL_SPI_Init+0x6e>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	4a79      	ldr	r2, [pc, #484]	; (800f4ec <HAL_SPI_Init+0x240>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d007      	beq.n	800f31a <HAL_SPI_Init+0x6e>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	4a78      	ldr	r2, [pc, #480]	; (800f4f0 <HAL_SPI_Init+0x244>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d002      	beq.n	800f31a <HAL_SPI_Init+0x6e>
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2b08      	cmp	r3, #8
 800f318:	d811      	bhi.n	800f33e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f31e:	4a72      	ldr	r2, [pc, #456]	; (800f4e8 <HAL_SPI_Init+0x23c>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d009      	beq.n	800f338 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a70      	ldr	r2, [pc, #448]	; (800f4ec <HAL_SPI_Init+0x240>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d004      	beq.n	800f338 <HAL_SPI_Init+0x8c>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	4a6f      	ldr	r2, [pc, #444]	; (800f4f0 <HAL_SPI_Init+0x244>)
 800f334:	4293      	cmp	r3, r2
 800f336:	d104      	bne.n	800f342 <HAL_SPI_Init+0x96>
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2b10      	cmp	r3, #16
 800f33c:	d901      	bls.n	800f342 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f33e:	2301      	movs	r3, #1
 800f340:	e0cd      	b.n	800f4de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d106      	bne.n	800f35c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f8cc 	bl	800f4f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2202      	movs	r2, #2
 800f360:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f022 0201 	bic.w	r2, r2, #1
 800f372:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f37e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	699b      	ldr	r3, [r3, #24]
 800f384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f388:	d119      	bne.n	800f3be <HAL_SPI_Init+0x112>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f392:	d103      	bne.n	800f39c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d008      	beq.n	800f3ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d10c      	bne.n	800f3be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f3a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3ac:	d107      	bne.n	800f3be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f3bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d00f      	beq.n	800f3ea <HAL_SPI_Init+0x13e>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	2b06      	cmp	r3, #6
 800f3d0:	d90b      	bls.n	800f3ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	430a      	orrs	r2, r1
 800f3e6:	601a      	str	r2, [r3, #0]
 800f3e8:	e007      	b.n	800f3fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f3f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	69da      	ldr	r2, [r3, #28]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f402:	431a      	orrs	r2, r3
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	431a      	orrs	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f40c:	ea42 0103 	orr.w	r1, r2, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	68da      	ldr	r2, [r3, #12]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	430a      	orrs	r2, r1
 800f41a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f424:	431a      	orrs	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f42a:	431a      	orrs	r2, r3
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	699b      	ldr	r3, [r3, #24]
 800f430:	431a      	orrs	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	431a      	orrs	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	695b      	ldr	r3, [r3, #20]
 800f43c:	431a      	orrs	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a1b      	ldr	r3, [r3, #32]
 800f442:	431a      	orrs	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	431a      	orrs	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f44e:	431a      	orrs	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	431a      	orrs	r2, r3
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f45a:	ea42 0103 	orr.w	r1, r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	430a      	orrs	r2, r1
 800f468:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d113      	bne.n	800f49a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f484:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f498:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f022 0201 	bic.w	r2, r2, #1
 800f4a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00a      	beq.n	800f4cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	430a      	orrs	r2, r1
 800f4ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f4dc:	2300      	movs	r3, #0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	40013000 	.word	0x40013000
 800f4ec:	40003800 	.word	0x40003800
 800f4f0:	40003c00 	.word	0x40003c00

0800f4f4 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800f4fc:	bf00      	nop
 800f4fe:	370c      	adds	r7, #12
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f514:	095b      	lsrs	r3, r3, #5
 800f516:	3301      	adds	r3, #1
 800f518:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	3301      	adds	r3, #1
 800f520:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	3307      	adds	r3, #7
 800f526:	08db      	lsrs	r3, r3, #3
 800f528:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f532:	4618      	mov	r0, r3
 800f534:	3714      	adds	r7, #20
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr

0800f53e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b082      	sub	sp, #8
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d101      	bne.n	800f550 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	e042      	b.n	800f5d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f556:	2b00      	cmp	r3, #0
 800f558:	d106      	bne.n	800f568 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2200      	movs	r2, #0
 800f55e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 f83b 	bl	800f5de <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2224      	movs	r2, #36	; 0x24
 800f56c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f022 0201 	bic.w	r2, r2, #1
 800f57e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f98d 	bl	800f8a0 <UART_SetConfig>
 800f586:	4603      	mov	r3, r0
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d101      	bne.n	800f590 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f58c:	2301      	movs	r3, #1
 800f58e:	e022      	b.n	800f5d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f594:	2b00      	cmp	r3, #0
 800f596:	d002      	beq.n	800f59e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f000 ffed 	bl	8010578 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	685a      	ldr	r2, [r3, #4]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f5ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	689a      	ldr	r2, [r3, #8]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f5bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f042 0201 	orr.w	r2, r2, #1
 800f5cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f001 f874 	bl	80106bc <UART_CheckIdleState>
 800f5d4:	4603      	mov	r3, r0
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800f5de:	b480      	push	{r7}
 800f5e0:	b083      	sub	sp, #12
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800f5e6:	bf00      	nop
 800f5e8:	370c      	adds	r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr

0800f5f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b08a      	sub	sp, #40	; 0x28
 800f5f6:	af02      	add	r7, sp, #8
 800f5f8:	60f8      	str	r0, [r7, #12]
 800f5fa:	60b9      	str	r1, [r7, #8]
 800f5fc:	603b      	str	r3, [r7, #0]
 800f5fe:	4613      	mov	r3, r2
 800f600:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f608:	2b20      	cmp	r3, #32
 800f60a:	d17b      	bne.n	800f704 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d002      	beq.n	800f618 <HAL_UART_Transmit+0x26>
 800f612:	88fb      	ldrh	r3, [r7, #6]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d101      	bne.n	800f61c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f618:	2301      	movs	r3, #1
 800f61a:	e074      	b.n	800f706 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2200      	movs	r2, #0
 800f620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2221      	movs	r2, #33	; 0x21
 800f628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f62c:	f7f5 fd12 	bl	8005054 <HAL_GetTick>
 800f630:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	88fa      	ldrh	r2, [r7, #6]
 800f636:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	88fa      	ldrh	r2, [r7, #6]
 800f63e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f64a:	d108      	bne.n	800f65e <HAL_UART_Transmit+0x6c>
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d104      	bne.n	800f65e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f654:	2300      	movs	r3, #0
 800f656:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	61bb      	str	r3, [r7, #24]
 800f65c:	e003      	b.n	800f666 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f662:	2300      	movs	r3, #0
 800f664:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f666:	e030      	b.n	800f6ca <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	9300      	str	r3, [sp, #0]
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	2200      	movs	r2, #0
 800f670:	2180      	movs	r1, #128	; 0x80
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f001 f8cc 	bl	8010810 <UART_WaitOnFlagUntilTimeout>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d005      	beq.n	800f68a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2220      	movs	r2, #32
 800f682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800f686:	2303      	movs	r3, #3
 800f688:	e03d      	b.n	800f706 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d10b      	bne.n	800f6a8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f690:	69bb      	ldr	r3, [r7, #24]
 800f692:	881b      	ldrh	r3, [r3, #0]
 800f694:	461a      	mov	r2, r3
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f69e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f6a0:	69bb      	ldr	r3, [r7, #24]
 800f6a2:	3302      	adds	r3, #2
 800f6a4:	61bb      	str	r3, [r7, #24]
 800f6a6:	e007      	b.n	800f6b8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	781a      	ldrb	r2, [r3, #0]
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1c8      	bne.n	800f668 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	9300      	str	r3, [sp, #0]
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	2140      	movs	r1, #64	; 0x40
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f001 f895 	bl	8010810 <UART_WaitOnFlagUntilTimeout>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d005      	beq.n	800f6f8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2220      	movs	r2, #32
 800f6f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	e006      	b.n	800f706 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2220      	movs	r2, #32
 800f6fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f700:	2300      	movs	r3, #0
 800f702:	e000      	b.n	800f706 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f704:	2302      	movs	r3, #2
  }
}
 800f706:	4618      	mov	r0, r3
 800f708:	3720      	adds	r7, #32
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b08a      	sub	sp, #40	; 0x28
 800f712:	af02      	add	r7, sp, #8
 800f714:	60f8      	str	r0, [r7, #12]
 800f716:	60b9      	str	r1, [r7, #8]
 800f718:	603b      	str	r3, [r7, #0]
 800f71a:	4613      	mov	r3, r2
 800f71c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f724:	2b20      	cmp	r3, #32
 800f726:	f040 80b5 	bne.w	800f894 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d002      	beq.n	800f736 <HAL_UART_Receive+0x28>
 800f730:	88fb      	ldrh	r3, [r7, #6]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d101      	bne.n	800f73a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f736:	2301      	movs	r3, #1
 800f738:	e0ad      	b.n	800f896 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2200      	movs	r2, #0
 800f73e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2222      	movs	r2, #34	; 0x22
 800f746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2200      	movs	r2, #0
 800f74e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f750:	f7f5 fc80 	bl	8005054 <HAL_GetTick>
 800f754:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	88fa      	ldrh	r2, [r7, #6]
 800f75a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	88fa      	ldrh	r2, [r7, #6]
 800f762:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	689b      	ldr	r3, [r3, #8]
 800f76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f76e:	d10e      	bne.n	800f78e <HAL_UART_Receive+0x80>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d105      	bne.n	800f784 <HAL_UART_Receive+0x76>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f77e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f782:	e02d      	b.n	800f7e0 <HAL_UART_Receive+0xd2>
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	22ff      	movs	r2, #255	; 0xff
 800f788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f78c:	e028      	b.n	800f7e0 <HAL_UART_Receive+0xd2>
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d10d      	bne.n	800f7b2 <HAL_UART_Receive+0xa4>
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	691b      	ldr	r3, [r3, #16]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d104      	bne.n	800f7a8 <HAL_UART_Receive+0x9a>
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	22ff      	movs	r2, #255	; 0xff
 800f7a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f7a6:	e01b      	b.n	800f7e0 <HAL_UART_Receive+0xd2>
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	227f      	movs	r2, #127	; 0x7f
 800f7ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f7b0:	e016      	b.n	800f7e0 <HAL_UART_Receive+0xd2>
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7ba:	d10d      	bne.n	800f7d8 <HAL_UART_Receive+0xca>
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	691b      	ldr	r3, [r3, #16]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d104      	bne.n	800f7ce <HAL_UART_Receive+0xc0>
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	227f      	movs	r2, #127	; 0x7f
 800f7c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f7cc:	e008      	b.n	800f7e0 <HAL_UART_Receive+0xd2>
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	223f      	movs	r2, #63	; 0x3f
 800f7d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f7d6:	e003      	b.n	800f7e0 <HAL_UART_Receive+0xd2>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f7e6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7f0:	d108      	bne.n	800f804 <HAL_UART_Receive+0xf6>
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d104      	bne.n	800f804 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	61bb      	str	r3, [r7, #24]
 800f802:	e003      	b.n	800f80c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f808:	2300      	movs	r3, #0
 800f80a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f80c:	e036      	b.n	800f87c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	9300      	str	r3, [sp, #0]
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	2200      	movs	r2, #0
 800f816:	2120      	movs	r1, #32
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f000 fff9 	bl	8010810 <UART_WaitOnFlagUntilTimeout>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d005      	beq.n	800f830 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2220      	movs	r2, #32
 800f828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800f82c:	2303      	movs	r3, #3
 800f82e:	e032      	b.n	800f896 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d10c      	bne.n	800f850 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	8a7b      	ldrh	r3, [r7, #18]
 800f840:	4013      	ands	r3, r2
 800f842:	b29a      	uxth	r2, r3
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f848:	69bb      	ldr	r3, [r7, #24]
 800f84a:	3302      	adds	r3, #2
 800f84c:	61bb      	str	r3, [r7, #24]
 800f84e:	e00c      	b.n	800f86a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f856:	b2da      	uxtb	r2, r3
 800f858:	8a7b      	ldrh	r3, [r7, #18]
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	4013      	ands	r3, r2
 800f85e:	b2da      	uxtb	r2, r3
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	3301      	adds	r3, #1
 800f868:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f870:	b29b      	uxth	r3, r3
 800f872:	3b01      	subs	r3, #1
 800f874:	b29a      	uxth	r2, r3
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f882:	b29b      	uxth	r3, r3
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1c2      	bne.n	800f80e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2220      	movs	r2, #32
 800f88c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800f890:	2300      	movs	r3, #0
 800f892:	e000      	b.n	800f896 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f894:	2302      	movs	r3, #2
  }
}
 800f896:	4618      	mov	r0, r3
 800f898:	3720      	adds	r7, #32
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
	...

0800f8a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f8a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f8a4:	b092      	sub	sp, #72	; 0x48
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	689a      	ldr	r2, [r3, #8]
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	691b      	ldr	r3, [r3, #16]
 800f8b8:	431a      	orrs	r2, r3
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	695b      	ldr	r3, [r3, #20]
 800f8be:	431a      	orrs	r2, r3
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	69db      	ldr	r3, [r3, #28]
 800f8c4:	4313      	orrs	r3, r2
 800f8c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	4bbe      	ldr	r3, [pc, #760]	; (800fbc8 <UART_SetConfig+0x328>)
 800f8d0:	4013      	ands	r3, r2
 800f8d2:	697a      	ldr	r2, [r7, #20]
 800f8d4:	6812      	ldr	r2, [r2, #0]
 800f8d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8d8:	430b      	orrs	r3, r1
 800f8da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	68da      	ldr	r2, [r3, #12]
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	430a      	orrs	r2, r1
 800f8f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	699b      	ldr	r3, [r3, #24]
 800f8f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	4ab3      	ldr	r2, [pc, #716]	; (800fbcc <UART_SetConfig+0x32c>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d004      	beq.n	800f90c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	6a1b      	ldr	r3, [r3, #32]
 800f906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f908:	4313      	orrs	r3, r2
 800f90a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	689a      	ldr	r2, [r3, #8]
 800f912:	4baf      	ldr	r3, [pc, #700]	; (800fbd0 <UART_SetConfig+0x330>)
 800f914:	4013      	ands	r3, r2
 800f916:	697a      	ldr	r2, [r7, #20]
 800f918:	6812      	ldr	r2, [r2, #0]
 800f91a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f91c:	430b      	orrs	r3, r1
 800f91e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f926:	f023 010f 	bic.w	r1, r3, #15
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	430a      	orrs	r2, r1
 800f934:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4aa6      	ldr	r2, [pc, #664]	; (800fbd4 <UART_SetConfig+0x334>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d177      	bne.n	800fa30 <UART_SetConfig+0x190>
 800f940:	4ba5      	ldr	r3, [pc, #660]	; (800fbd8 <UART_SetConfig+0x338>)
 800f942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f948:	2b28      	cmp	r3, #40	; 0x28
 800f94a:	d86d      	bhi.n	800fa28 <UART_SetConfig+0x188>
 800f94c:	a201      	add	r2, pc, #4	; (adr r2, 800f954 <UART_SetConfig+0xb4>)
 800f94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f952:	bf00      	nop
 800f954:	0800f9f9 	.word	0x0800f9f9
 800f958:	0800fa29 	.word	0x0800fa29
 800f95c:	0800fa29 	.word	0x0800fa29
 800f960:	0800fa29 	.word	0x0800fa29
 800f964:	0800fa29 	.word	0x0800fa29
 800f968:	0800fa29 	.word	0x0800fa29
 800f96c:	0800fa29 	.word	0x0800fa29
 800f970:	0800fa29 	.word	0x0800fa29
 800f974:	0800fa01 	.word	0x0800fa01
 800f978:	0800fa29 	.word	0x0800fa29
 800f97c:	0800fa29 	.word	0x0800fa29
 800f980:	0800fa29 	.word	0x0800fa29
 800f984:	0800fa29 	.word	0x0800fa29
 800f988:	0800fa29 	.word	0x0800fa29
 800f98c:	0800fa29 	.word	0x0800fa29
 800f990:	0800fa29 	.word	0x0800fa29
 800f994:	0800fa09 	.word	0x0800fa09
 800f998:	0800fa29 	.word	0x0800fa29
 800f99c:	0800fa29 	.word	0x0800fa29
 800f9a0:	0800fa29 	.word	0x0800fa29
 800f9a4:	0800fa29 	.word	0x0800fa29
 800f9a8:	0800fa29 	.word	0x0800fa29
 800f9ac:	0800fa29 	.word	0x0800fa29
 800f9b0:	0800fa29 	.word	0x0800fa29
 800f9b4:	0800fa11 	.word	0x0800fa11
 800f9b8:	0800fa29 	.word	0x0800fa29
 800f9bc:	0800fa29 	.word	0x0800fa29
 800f9c0:	0800fa29 	.word	0x0800fa29
 800f9c4:	0800fa29 	.word	0x0800fa29
 800f9c8:	0800fa29 	.word	0x0800fa29
 800f9cc:	0800fa29 	.word	0x0800fa29
 800f9d0:	0800fa29 	.word	0x0800fa29
 800f9d4:	0800fa19 	.word	0x0800fa19
 800f9d8:	0800fa29 	.word	0x0800fa29
 800f9dc:	0800fa29 	.word	0x0800fa29
 800f9e0:	0800fa29 	.word	0x0800fa29
 800f9e4:	0800fa29 	.word	0x0800fa29
 800f9e8:	0800fa29 	.word	0x0800fa29
 800f9ec:	0800fa29 	.word	0x0800fa29
 800f9f0:	0800fa29 	.word	0x0800fa29
 800f9f4:	0800fa21 	.word	0x0800fa21
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9fe:	e326      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa00:	2304      	movs	r3, #4
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa06:	e322      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa08:	2308      	movs	r3, #8
 800fa0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa0e:	e31e      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa10:	2310      	movs	r3, #16
 800fa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa16:	e31a      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa18:	2320      	movs	r3, #32
 800fa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa1e:	e316      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa20:	2340      	movs	r3, #64	; 0x40
 800fa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa26:	e312      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa28:	2380      	movs	r3, #128	; 0x80
 800fa2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa2e:	e30e      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4a69      	ldr	r2, [pc, #420]	; (800fbdc <UART_SetConfig+0x33c>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d130      	bne.n	800fa9c <UART_SetConfig+0x1fc>
 800fa3a:	4b67      	ldr	r3, [pc, #412]	; (800fbd8 <UART_SetConfig+0x338>)
 800fa3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa3e:	f003 0307 	and.w	r3, r3, #7
 800fa42:	2b05      	cmp	r3, #5
 800fa44:	d826      	bhi.n	800fa94 <UART_SetConfig+0x1f4>
 800fa46:	a201      	add	r2, pc, #4	; (adr r2, 800fa4c <UART_SetConfig+0x1ac>)
 800fa48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa4c:	0800fa65 	.word	0x0800fa65
 800fa50:	0800fa6d 	.word	0x0800fa6d
 800fa54:	0800fa75 	.word	0x0800fa75
 800fa58:	0800fa7d 	.word	0x0800fa7d
 800fa5c:	0800fa85 	.word	0x0800fa85
 800fa60:	0800fa8d 	.word	0x0800fa8d
 800fa64:	2300      	movs	r3, #0
 800fa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6a:	e2f0      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa6c:	2304      	movs	r3, #4
 800fa6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa72:	e2ec      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa74:	2308      	movs	r3, #8
 800fa76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa7a:	e2e8      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa7c:	2310      	movs	r3, #16
 800fa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa82:	e2e4      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa84:	2320      	movs	r3, #32
 800fa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa8a:	e2e0      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa8c:	2340      	movs	r3, #64	; 0x40
 800fa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa92:	e2dc      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa94:	2380      	movs	r3, #128	; 0x80
 800fa96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa9a:	e2d8      	b.n	801004e <UART_SetConfig+0x7ae>
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a4f      	ldr	r2, [pc, #316]	; (800fbe0 <UART_SetConfig+0x340>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d130      	bne.n	800fb08 <UART_SetConfig+0x268>
 800faa6:	4b4c      	ldr	r3, [pc, #304]	; (800fbd8 <UART_SetConfig+0x338>)
 800faa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faaa:	f003 0307 	and.w	r3, r3, #7
 800faae:	2b05      	cmp	r3, #5
 800fab0:	d826      	bhi.n	800fb00 <UART_SetConfig+0x260>
 800fab2:	a201      	add	r2, pc, #4	; (adr r2, 800fab8 <UART_SetConfig+0x218>)
 800fab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab8:	0800fad1 	.word	0x0800fad1
 800fabc:	0800fad9 	.word	0x0800fad9
 800fac0:	0800fae1 	.word	0x0800fae1
 800fac4:	0800fae9 	.word	0x0800fae9
 800fac8:	0800faf1 	.word	0x0800faf1
 800facc:	0800faf9 	.word	0x0800faf9
 800fad0:	2300      	movs	r3, #0
 800fad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fad6:	e2ba      	b.n	801004e <UART_SetConfig+0x7ae>
 800fad8:	2304      	movs	r3, #4
 800fada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fade:	e2b6      	b.n	801004e <UART_SetConfig+0x7ae>
 800fae0:	2308      	movs	r3, #8
 800fae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fae6:	e2b2      	b.n	801004e <UART_SetConfig+0x7ae>
 800fae8:	2310      	movs	r3, #16
 800faea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faee:	e2ae      	b.n	801004e <UART_SetConfig+0x7ae>
 800faf0:	2320      	movs	r3, #32
 800faf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faf6:	e2aa      	b.n	801004e <UART_SetConfig+0x7ae>
 800faf8:	2340      	movs	r3, #64	; 0x40
 800fafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fafe:	e2a6      	b.n	801004e <UART_SetConfig+0x7ae>
 800fb00:	2380      	movs	r3, #128	; 0x80
 800fb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb06:	e2a2      	b.n	801004e <UART_SetConfig+0x7ae>
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4a35      	ldr	r2, [pc, #212]	; (800fbe4 <UART_SetConfig+0x344>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d130      	bne.n	800fb74 <UART_SetConfig+0x2d4>
 800fb12:	4b31      	ldr	r3, [pc, #196]	; (800fbd8 <UART_SetConfig+0x338>)
 800fb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb16:	f003 0307 	and.w	r3, r3, #7
 800fb1a:	2b05      	cmp	r3, #5
 800fb1c:	d826      	bhi.n	800fb6c <UART_SetConfig+0x2cc>
 800fb1e:	a201      	add	r2, pc, #4	; (adr r2, 800fb24 <UART_SetConfig+0x284>)
 800fb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb24:	0800fb3d 	.word	0x0800fb3d
 800fb28:	0800fb45 	.word	0x0800fb45
 800fb2c:	0800fb4d 	.word	0x0800fb4d
 800fb30:	0800fb55 	.word	0x0800fb55
 800fb34:	0800fb5d 	.word	0x0800fb5d
 800fb38:	0800fb65 	.word	0x0800fb65
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb42:	e284      	b.n	801004e <UART_SetConfig+0x7ae>
 800fb44:	2304      	movs	r3, #4
 800fb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb4a:	e280      	b.n	801004e <UART_SetConfig+0x7ae>
 800fb4c:	2308      	movs	r3, #8
 800fb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb52:	e27c      	b.n	801004e <UART_SetConfig+0x7ae>
 800fb54:	2310      	movs	r3, #16
 800fb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb5a:	e278      	b.n	801004e <UART_SetConfig+0x7ae>
 800fb5c:	2320      	movs	r3, #32
 800fb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb62:	e274      	b.n	801004e <UART_SetConfig+0x7ae>
 800fb64:	2340      	movs	r3, #64	; 0x40
 800fb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb6a:	e270      	b.n	801004e <UART_SetConfig+0x7ae>
 800fb6c:	2380      	movs	r3, #128	; 0x80
 800fb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb72:	e26c      	b.n	801004e <UART_SetConfig+0x7ae>
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4a1b      	ldr	r2, [pc, #108]	; (800fbe8 <UART_SetConfig+0x348>)
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d142      	bne.n	800fc04 <UART_SetConfig+0x364>
 800fb7e:	4b16      	ldr	r3, [pc, #88]	; (800fbd8 <UART_SetConfig+0x338>)
 800fb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb82:	f003 0307 	and.w	r3, r3, #7
 800fb86:	2b05      	cmp	r3, #5
 800fb88:	d838      	bhi.n	800fbfc <UART_SetConfig+0x35c>
 800fb8a:	a201      	add	r2, pc, #4	; (adr r2, 800fb90 <UART_SetConfig+0x2f0>)
 800fb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb90:	0800fba9 	.word	0x0800fba9
 800fb94:	0800fbb1 	.word	0x0800fbb1
 800fb98:	0800fbb9 	.word	0x0800fbb9
 800fb9c:	0800fbc1 	.word	0x0800fbc1
 800fba0:	0800fbed 	.word	0x0800fbed
 800fba4:	0800fbf5 	.word	0x0800fbf5
 800fba8:	2300      	movs	r3, #0
 800fbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbae:	e24e      	b.n	801004e <UART_SetConfig+0x7ae>
 800fbb0:	2304      	movs	r3, #4
 800fbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbb6:	e24a      	b.n	801004e <UART_SetConfig+0x7ae>
 800fbb8:	2308      	movs	r3, #8
 800fbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbbe:	e246      	b.n	801004e <UART_SetConfig+0x7ae>
 800fbc0:	2310      	movs	r3, #16
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbc6:	e242      	b.n	801004e <UART_SetConfig+0x7ae>
 800fbc8:	cfff69f3 	.word	0xcfff69f3
 800fbcc:	58000c00 	.word	0x58000c00
 800fbd0:	11fff4ff 	.word	0x11fff4ff
 800fbd4:	40011000 	.word	0x40011000
 800fbd8:	58024400 	.word	0x58024400
 800fbdc:	40004400 	.word	0x40004400
 800fbe0:	40004800 	.word	0x40004800
 800fbe4:	40004c00 	.word	0x40004c00
 800fbe8:	40005000 	.word	0x40005000
 800fbec:	2320      	movs	r3, #32
 800fbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbf2:	e22c      	b.n	801004e <UART_SetConfig+0x7ae>
 800fbf4:	2340      	movs	r3, #64	; 0x40
 800fbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbfa:	e228      	b.n	801004e <UART_SetConfig+0x7ae>
 800fbfc:	2380      	movs	r3, #128	; 0x80
 800fbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc02:	e224      	b.n	801004e <UART_SetConfig+0x7ae>
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4ab1      	ldr	r2, [pc, #708]	; (800fed0 <UART_SetConfig+0x630>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d176      	bne.n	800fcfc <UART_SetConfig+0x45c>
 800fc0e:	4bb1      	ldr	r3, [pc, #708]	; (800fed4 <UART_SetConfig+0x634>)
 800fc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc16:	2b28      	cmp	r3, #40	; 0x28
 800fc18:	d86c      	bhi.n	800fcf4 <UART_SetConfig+0x454>
 800fc1a:	a201      	add	r2, pc, #4	; (adr r2, 800fc20 <UART_SetConfig+0x380>)
 800fc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc20:	0800fcc5 	.word	0x0800fcc5
 800fc24:	0800fcf5 	.word	0x0800fcf5
 800fc28:	0800fcf5 	.word	0x0800fcf5
 800fc2c:	0800fcf5 	.word	0x0800fcf5
 800fc30:	0800fcf5 	.word	0x0800fcf5
 800fc34:	0800fcf5 	.word	0x0800fcf5
 800fc38:	0800fcf5 	.word	0x0800fcf5
 800fc3c:	0800fcf5 	.word	0x0800fcf5
 800fc40:	0800fccd 	.word	0x0800fccd
 800fc44:	0800fcf5 	.word	0x0800fcf5
 800fc48:	0800fcf5 	.word	0x0800fcf5
 800fc4c:	0800fcf5 	.word	0x0800fcf5
 800fc50:	0800fcf5 	.word	0x0800fcf5
 800fc54:	0800fcf5 	.word	0x0800fcf5
 800fc58:	0800fcf5 	.word	0x0800fcf5
 800fc5c:	0800fcf5 	.word	0x0800fcf5
 800fc60:	0800fcd5 	.word	0x0800fcd5
 800fc64:	0800fcf5 	.word	0x0800fcf5
 800fc68:	0800fcf5 	.word	0x0800fcf5
 800fc6c:	0800fcf5 	.word	0x0800fcf5
 800fc70:	0800fcf5 	.word	0x0800fcf5
 800fc74:	0800fcf5 	.word	0x0800fcf5
 800fc78:	0800fcf5 	.word	0x0800fcf5
 800fc7c:	0800fcf5 	.word	0x0800fcf5
 800fc80:	0800fcdd 	.word	0x0800fcdd
 800fc84:	0800fcf5 	.word	0x0800fcf5
 800fc88:	0800fcf5 	.word	0x0800fcf5
 800fc8c:	0800fcf5 	.word	0x0800fcf5
 800fc90:	0800fcf5 	.word	0x0800fcf5
 800fc94:	0800fcf5 	.word	0x0800fcf5
 800fc98:	0800fcf5 	.word	0x0800fcf5
 800fc9c:	0800fcf5 	.word	0x0800fcf5
 800fca0:	0800fce5 	.word	0x0800fce5
 800fca4:	0800fcf5 	.word	0x0800fcf5
 800fca8:	0800fcf5 	.word	0x0800fcf5
 800fcac:	0800fcf5 	.word	0x0800fcf5
 800fcb0:	0800fcf5 	.word	0x0800fcf5
 800fcb4:	0800fcf5 	.word	0x0800fcf5
 800fcb8:	0800fcf5 	.word	0x0800fcf5
 800fcbc:	0800fcf5 	.word	0x0800fcf5
 800fcc0:	0800fced 	.word	0x0800fced
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcca:	e1c0      	b.n	801004e <UART_SetConfig+0x7ae>
 800fccc:	2304      	movs	r3, #4
 800fcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcd2:	e1bc      	b.n	801004e <UART_SetConfig+0x7ae>
 800fcd4:	2308      	movs	r3, #8
 800fcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcda:	e1b8      	b.n	801004e <UART_SetConfig+0x7ae>
 800fcdc:	2310      	movs	r3, #16
 800fcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fce2:	e1b4      	b.n	801004e <UART_SetConfig+0x7ae>
 800fce4:	2320      	movs	r3, #32
 800fce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcea:	e1b0      	b.n	801004e <UART_SetConfig+0x7ae>
 800fcec:	2340      	movs	r3, #64	; 0x40
 800fcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcf2:	e1ac      	b.n	801004e <UART_SetConfig+0x7ae>
 800fcf4:	2380      	movs	r3, #128	; 0x80
 800fcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcfa:	e1a8      	b.n	801004e <UART_SetConfig+0x7ae>
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4a75      	ldr	r2, [pc, #468]	; (800fed8 <UART_SetConfig+0x638>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d130      	bne.n	800fd68 <UART_SetConfig+0x4c8>
 800fd06:	4b73      	ldr	r3, [pc, #460]	; (800fed4 <UART_SetConfig+0x634>)
 800fd08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd0a:	f003 0307 	and.w	r3, r3, #7
 800fd0e:	2b05      	cmp	r3, #5
 800fd10:	d826      	bhi.n	800fd60 <UART_SetConfig+0x4c0>
 800fd12:	a201      	add	r2, pc, #4	; (adr r2, 800fd18 <UART_SetConfig+0x478>)
 800fd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd18:	0800fd31 	.word	0x0800fd31
 800fd1c:	0800fd39 	.word	0x0800fd39
 800fd20:	0800fd41 	.word	0x0800fd41
 800fd24:	0800fd49 	.word	0x0800fd49
 800fd28:	0800fd51 	.word	0x0800fd51
 800fd2c:	0800fd59 	.word	0x0800fd59
 800fd30:	2300      	movs	r3, #0
 800fd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd36:	e18a      	b.n	801004e <UART_SetConfig+0x7ae>
 800fd38:	2304      	movs	r3, #4
 800fd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd3e:	e186      	b.n	801004e <UART_SetConfig+0x7ae>
 800fd40:	2308      	movs	r3, #8
 800fd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd46:	e182      	b.n	801004e <UART_SetConfig+0x7ae>
 800fd48:	2310      	movs	r3, #16
 800fd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd4e:	e17e      	b.n	801004e <UART_SetConfig+0x7ae>
 800fd50:	2320      	movs	r3, #32
 800fd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd56:	e17a      	b.n	801004e <UART_SetConfig+0x7ae>
 800fd58:	2340      	movs	r3, #64	; 0x40
 800fd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd5e:	e176      	b.n	801004e <UART_SetConfig+0x7ae>
 800fd60:	2380      	movs	r3, #128	; 0x80
 800fd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd66:	e172      	b.n	801004e <UART_SetConfig+0x7ae>
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	4a5b      	ldr	r2, [pc, #364]	; (800fedc <UART_SetConfig+0x63c>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d130      	bne.n	800fdd4 <UART_SetConfig+0x534>
 800fd72:	4b58      	ldr	r3, [pc, #352]	; (800fed4 <UART_SetConfig+0x634>)
 800fd74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd76:	f003 0307 	and.w	r3, r3, #7
 800fd7a:	2b05      	cmp	r3, #5
 800fd7c:	d826      	bhi.n	800fdcc <UART_SetConfig+0x52c>
 800fd7e:	a201      	add	r2, pc, #4	; (adr r2, 800fd84 <UART_SetConfig+0x4e4>)
 800fd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd84:	0800fd9d 	.word	0x0800fd9d
 800fd88:	0800fda5 	.word	0x0800fda5
 800fd8c:	0800fdad 	.word	0x0800fdad
 800fd90:	0800fdb5 	.word	0x0800fdb5
 800fd94:	0800fdbd 	.word	0x0800fdbd
 800fd98:	0800fdc5 	.word	0x0800fdc5
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fda2:	e154      	b.n	801004e <UART_SetConfig+0x7ae>
 800fda4:	2304      	movs	r3, #4
 800fda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdaa:	e150      	b.n	801004e <UART_SetConfig+0x7ae>
 800fdac:	2308      	movs	r3, #8
 800fdae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdb2:	e14c      	b.n	801004e <UART_SetConfig+0x7ae>
 800fdb4:	2310      	movs	r3, #16
 800fdb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdba:	e148      	b.n	801004e <UART_SetConfig+0x7ae>
 800fdbc:	2320      	movs	r3, #32
 800fdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdc2:	e144      	b.n	801004e <UART_SetConfig+0x7ae>
 800fdc4:	2340      	movs	r3, #64	; 0x40
 800fdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdca:	e140      	b.n	801004e <UART_SetConfig+0x7ae>
 800fdcc:	2380      	movs	r3, #128	; 0x80
 800fdce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdd2:	e13c      	b.n	801004e <UART_SetConfig+0x7ae>
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4a41      	ldr	r2, [pc, #260]	; (800fee0 <UART_SetConfig+0x640>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	f040 8082 	bne.w	800fee4 <UART_SetConfig+0x644>
 800fde0:	4b3c      	ldr	r3, [pc, #240]	; (800fed4 <UART_SetConfig+0x634>)
 800fde2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fde4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fde8:	2b28      	cmp	r3, #40	; 0x28
 800fdea:	d86d      	bhi.n	800fec8 <UART_SetConfig+0x628>
 800fdec:	a201      	add	r2, pc, #4	; (adr r2, 800fdf4 <UART_SetConfig+0x554>)
 800fdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf2:	bf00      	nop
 800fdf4:	0800fe99 	.word	0x0800fe99
 800fdf8:	0800fec9 	.word	0x0800fec9
 800fdfc:	0800fec9 	.word	0x0800fec9
 800fe00:	0800fec9 	.word	0x0800fec9
 800fe04:	0800fec9 	.word	0x0800fec9
 800fe08:	0800fec9 	.word	0x0800fec9
 800fe0c:	0800fec9 	.word	0x0800fec9
 800fe10:	0800fec9 	.word	0x0800fec9
 800fe14:	0800fea1 	.word	0x0800fea1
 800fe18:	0800fec9 	.word	0x0800fec9
 800fe1c:	0800fec9 	.word	0x0800fec9
 800fe20:	0800fec9 	.word	0x0800fec9
 800fe24:	0800fec9 	.word	0x0800fec9
 800fe28:	0800fec9 	.word	0x0800fec9
 800fe2c:	0800fec9 	.word	0x0800fec9
 800fe30:	0800fec9 	.word	0x0800fec9
 800fe34:	0800fea9 	.word	0x0800fea9
 800fe38:	0800fec9 	.word	0x0800fec9
 800fe3c:	0800fec9 	.word	0x0800fec9
 800fe40:	0800fec9 	.word	0x0800fec9
 800fe44:	0800fec9 	.word	0x0800fec9
 800fe48:	0800fec9 	.word	0x0800fec9
 800fe4c:	0800fec9 	.word	0x0800fec9
 800fe50:	0800fec9 	.word	0x0800fec9
 800fe54:	0800feb1 	.word	0x0800feb1
 800fe58:	0800fec9 	.word	0x0800fec9
 800fe5c:	0800fec9 	.word	0x0800fec9
 800fe60:	0800fec9 	.word	0x0800fec9
 800fe64:	0800fec9 	.word	0x0800fec9
 800fe68:	0800fec9 	.word	0x0800fec9
 800fe6c:	0800fec9 	.word	0x0800fec9
 800fe70:	0800fec9 	.word	0x0800fec9
 800fe74:	0800feb9 	.word	0x0800feb9
 800fe78:	0800fec9 	.word	0x0800fec9
 800fe7c:	0800fec9 	.word	0x0800fec9
 800fe80:	0800fec9 	.word	0x0800fec9
 800fe84:	0800fec9 	.word	0x0800fec9
 800fe88:	0800fec9 	.word	0x0800fec9
 800fe8c:	0800fec9 	.word	0x0800fec9
 800fe90:	0800fec9 	.word	0x0800fec9
 800fe94:	0800fec1 	.word	0x0800fec1
 800fe98:	2301      	movs	r3, #1
 800fe9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe9e:	e0d6      	b.n	801004e <UART_SetConfig+0x7ae>
 800fea0:	2304      	movs	r3, #4
 800fea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fea6:	e0d2      	b.n	801004e <UART_SetConfig+0x7ae>
 800fea8:	2308      	movs	r3, #8
 800feaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feae:	e0ce      	b.n	801004e <UART_SetConfig+0x7ae>
 800feb0:	2310      	movs	r3, #16
 800feb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feb6:	e0ca      	b.n	801004e <UART_SetConfig+0x7ae>
 800feb8:	2320      	movs	r3, #32
 800feba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800febe:	e0c6      	b.n	801004e <UART_SetConfig+0x7ae>
 800fec0:	2340      	movs	r3, #64	; 0x40
 800fec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fec6:	e0c2      	b.n	801004e <UART_SetConfig+0x7ae>
 800fec8:	2380      	movs	r3, #128	; 0x80
 800feca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fece:	e0be      	b.n	801004e <UART_SetConfig+0x7ae>
 800fed0:	40011400 	.word	0x40011400
 800fed4:	58024400 	.word	0x58024400
 800fed8:	40007800 	.word	0x40007800
 800fedc:	40007c00 	.word	0x40007c00
 800fee0:	40011800 	.word	0x40011800
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	4aad      	ldr	r2, [pc, #692]	; (80101a0 <UART_SetConfig+0x900>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d176      	bne.n	800ffdc <UART_SetConfig+0x73c>
 800feee:	4bad      	ldr	r3, [pc, #692]	; (80101a4 <UART_SetConfig+0x904>)
 800fef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fef6:	2b28      	cmp	r3, #40	; 0x28
 800fef8:	d86c      	bhi.n	800ffd4 <UART_SetConfig+0x734>
 800fefa:	a201      	add	r2, pc, #4	; (adr r2, 800ff00 <UART_SetConfig+0x660>)
 800fefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff00:	0800ffa5 	.word	0x0800ffa5
 800ff04:	0800ffd5 	.word	0x0800ffd5
 800ff08:	0800ffd5 	.word	0x0800ffd5
 800ff0c:	0800ffd5 	.word	0x0800ffd5
 800ff10:	0800ffd5 	.word	0x0800ffd5
 800ff14:	0800ffd5 	.word	0x0800ffd5
 800ff18:	0800ffd5 	.word	0x0800ffd5
 800ff1c:	0800ffd5 	.word	0x0800ffd5
 800ff20:	0800ffad 	.word	0x0800ffad
 800ff24:	0800ffd5 	.word	0x0800ffd5
 800ff28:	0800ffd5 	.word	0x0800ffd5
 800ff2c:	0800ffd5 	.word	0x0800ffd5
 800ff30:	0800ffd5 	.word	0x0800ffd5
 800ff34:	0800ffd5 	.word	0x0800ffd5
 800ff38:	0800ffd5 	.word	0x0800ffd5
 800ff3c:	0800ffd5 	.word	0x0800ffd5
 800ff40:	0800ffb5 	.word	0x0800ffb5
 800ff44:	0800ffd5 	.word	0x0800ffd5
 800ff48:	0800ffd5 	.word	0x0800ffd5
 800ff4c:	0800ffd5 	.word	0x0800ffd5
 800ff50:	0800ffd5 	.word	0x0800ffd5
 800ff54:	0800ffd5 	.word	0x0800ffd5
 800ff58:	0800ffd5 	.word	0x0800ffd5
 800ff5c:	0800ffd5 	.word	0x0800ffd5
 800ff60:	0800ffbd 	.word	0x0800ffbd
 800ff64:	0800ffd5 	.word	0x0800ffd5
 800ff68:	0800ffd5 	.word	0x0800ffd5
 800ff6c:	0800ffd5 	.word	0x0800ffd5
 800ff70:	0800ffd5 	.word	0x0800ffd5
 800ff74:	0800ffd5 	.word	0x0800ffd5
 800ff78:	0800ffd5 	.word	0x0800ffd5
 800ff7c:	0800ffd5 	.word	0x0800ffd5
 800ff80:	0800ffc5 	.word	0x0800ffc5
 800ff84:	0800ffd5 	.word	0x0800ffd5
 800ff88:	0800ffd5 	.word	0x0800ffd5
 800ff8c:	0800ffd5 	.word	0x0800ffd5
 800ff90:	0800ffd5 	.word	0x0800ffd5
 800ff94:	0800ffd5 	.word	0x0800ffd5
 800ff98:	0800ffd5 	.word	0x0800ffd5
 800ff9c:	0800ffd5 	.word	0x0800ffd5
 800ffa0:	0800ffcd 	.word	0x0800ffcd
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffaa:	e050      	b.n	801004e <UART_SetConfig+0x7ae>
 800ffac:	2304      	movs	r3, #4
 800ffae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffb2:	e04c      	b.n	801004e <UART_SetConfig+0x7ae>
 800ffb4:	2308      	movs	r3, #8
 800ffb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffba:	e048      	b.n	801004e <UART_SetConfig+0x7ae>
 800ffbc:	2310      	movs	r3, #16
 800ffbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffc2:	e044      	b.n	801004e <UART_SetConfig+0x7ae>
 800ffc4:	2320      	movs	r3, #32
 800ffc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffca:	e040      	b.n	801004e <UART_SetConfig+0x7ae>
 800ffcc:	2340      	movs	r3, #64	; 0x40
 800ffce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffd2:	e03c      	b.n	801004e <UART_SetConfig+0x7ae>
 800ffd4:	2380      	movs	r3, #128	; 0x80
 800ffd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffda:	e038      	b.n	801004e <UART_SetConfig+0x7ae>
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a71      	ldr	r2, [pc, #452]	; (80101a8 <UART_SetConfig+0x908>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d130      	bne.n	8010048 <UART_SetConfig+0x7a8>
 800ffe6:	4b6f      	ldr	r3, [pc, #444]	; (80101a4 <UART_SetConfig+0x904>)
 800ffe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffea:	f003 0307 	and.w	r3, r3, #7
 800ffee:	2b05      	cmp	r3, #5
 800fff0:	d826      	bhi.n	8010040 <UART_SetConfig+0x7a0>
 800fff2:	a201      	add	r2, pc, #4	; (adr r2, 800fff8 <UART_SetConfig+0x758>)
 800fff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff8:	08010011 	.word	0x08010011
 800fffc:	08010019 	.word	0x08010019
 8010000:	08010021 	.word	0x08010021
 8010004:	08010029 	.word	0x08010029
 8010008:	08010031 	.word	0x08010031
 801000c:	08010039 	.word	0x08010039
 8010010:	2302      	movs	r3, #2
 8010012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010016:	e01a      	b.n	801004e <UART_SetConfig+0x7ae>
 8010018:	2304      	movs	r3, #4
 801001a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801001e:	e016      	b.n	801004e <UART_SetConfig+0x7ae>
 8010020:	2308      	movs	r3, #8
 8010022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010026:	e012      	b.n	801004e <UART_SetConfig+0x7ae>
 8010028:	2310      	movs	r3, #16
 801002a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801002e:	e00e      	b.n	801004e <UART_SetConfig+0x7ae>
 8010030:	2320      	movs	r3, #32
 8010032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010036:	e00a      	b.n	801004e <UART_SetConfig+0x7ae>
 8010038:	2340      	movs	r3, #64	; 0x40
 801003a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801003e:	e006      	b.n	801004e <UART_SetConfig+0x7ae>
 8010040:	2380      	movs	r3, #128	; 0x80
 8010042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010046:	e002      	b.n	801004e <UART_SetConfig+0x7ae>
 8010048:	2380      	movs	r3, #128	; 0x80
 801004a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4a55      	ldr	r2, [pc, #340]	; (80101a8 <UART_SetConfig+0x908>)
 8010054:	4293      	cmp	r3, r2
 8010056:	f040 80f8 	bne.w	801024a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801005a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801005e:	2b20      	cmp	r3, #32
 8010060:	dc46      	bgt.n	80100f0 <UART_SetConfig+0x850>
 8010062:	2b02      	cmp	r3, #2
 8010064:	db75      	blt.n	8010152 <UART_SetConfig+0x8b2>
 8010066:	3b02      	subs	r3, #2
 8010068:	2b1e      	cmp	r3, #30
 801006a:	d872      	bhi.n	8010152 <UART_SetConfig+0x8b2>
 801006c:	a201      	add	r2, pc, #4	; (adr r2, 8010074 <UART_SetConfig+0x7d4>)
 801006e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010072:	bf00      	nop
 8010074:	080100f7 	.word	0x080100f7
 8010078:	08010153 	.word	0x08010153
 801007c:	080100ff 	.word	0x080100ff
 8010080:	08010153 	.word	0x08010153
 8010084:	08010153 	.word	0x08010153
 8010088:	08010153 	.word	0x08010153
 801008c:	0801010f 	.word	0x0801010f
 8010090:	08010153 	.word	0x08010153
 8010094:	08010153 	.word	0x08010153
 8010098:	08010153 	.word	0x08010153
 801009c:	08010153 	.word	0x08010153
 80100a0:	08010153 	.word	0x08010153
 80100a4:	08010153 	.word	0x08010153
 80100a8:	08010153 	.word	0x08010153
 80100ac:	0801011f 	.word	0x0801011f
 80100b0:	08010153 	.word	0x08010153
 80100b4:	08010153 	.word	0x08010153
 80100b8:	08010153 	.word	0x08010153
 80100bc:	08010153 	.word	0x08010153
 80100c0:	08010153 	.word	0x08010153
 80100c4:	08010153 	.word	0x08010153
 80100c8:	08010153 	.word	0x08010153
 80100cc:	08010153 	.word	0x08010153
 80100d0:	08010153 	.word	0x08010153
 80100d4:	08010153 	.word	0x08010153
 80100d8:	08010153 	.word	0x08010153
 80100dc:	08010153 	.word	0x08010153
 80100e0:	08010153 	.word	0x08010153
 80100e4:	08010153 	.word	0x08010153
 80100e8:	08010153 	.word	0x08010153
 80100ec:	08010145 	.word	0x08010145
 80100f0:	2b40      	cmp	r3, #64	; 0x40
 80100f2:	d02a      	beq.n	801014a <UART_SetConfig+0x8aa>
 80100f4:	e02d      	b.n	8010152 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80100f6:	f7fd f97f 	bl	800d3f8 <HAL_RCCEx_GetD3PCLK1Freq>
 80100fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80100fc:	e02f      	b.n	801015e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010102:	4618      	mov	r0, r3
 8010104:	f7fd f98e 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801010a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801010c:	e027      	b.n	801015e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801010e:	f107 0318 	add.w	r3, r7, #24
 8010112:	4618      	mov	r0, r3
 8010114:	f7fd fada 	bl	800d6cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801011c:	e01f      	b.n	801015e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801011e:	4b21      	ldr	r3, [pc, #132]	; (80101a4 <UART_SetConfig+0x904>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f003 0320 	and.w	r3, r3, #32
 8010126:	2b00      	cmp	r3, #0
 8010128:	d009      	beq.n	801013e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801012a:	4b1e      	ldr	r3, [pc, #120]	; (80101a4 <UART_SetConfig+0x904>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	08db      	lsrs	r3, r3, #3
 8010130:	f003 0303 	and.w	r3, r3, #3
 8010134:	4a1d      	ldr	r2, [pc, #116]	; (80101ac <UART_SetConfig+0x90c>)
 8010136:	fa22 f303 	lsr.w	r3, r2, r3
 801013a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801013c:	e00f      	b.n	801015e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801013e:	4b1b      	ldr	r3, [pc, #108]	; (80101ac <UART_SetConfig+0x90c>)
 8010140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010142:	e00c      	b.n	801015e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010144:	4b1a      	ldr	r3, [pc, #104]	; (80101b0 <UART_SetConfig+0x910>)
 8010146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010148:	e009      	b.n	801015e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801014a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801014e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010150:	e005      	b.n	801015e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010152:	2300      	movs	r3, #0
 8010154:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010156:	2301      	movs	r3, #1
 8010158:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801015c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801015e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010160:	2b00      	cmp	r3, #0
 8010162:	f000 81ee 	beq.w	8010542 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801016a:	4a12      	ldr	r2, [pc, #72]	; (80101b4 <UART_SetConfig+0x914>)
 801016c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010170:	461a      	mov	r2, r3
 8010172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010174:	fbb3 f3f2 	udiv	r3, r3, r2
 8010178:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	685a      	ldr	r2, [r3, #4]
 801017e:	4613      	mov	r3, r2
 8010180:	005b      	lsls	r3, r3, #1
 8010182:	4413      	add	r3, r2
 8010184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010186:	429a      	cmp	r2, r3
 8010188:	d305      	bcc.n	8010196 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010192:	429a      	cmp	r2, r3
 8010194:	d910      	bls.n	80101b8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010196:	2301      	movs	r3, #1
 8010198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801019c:	e1d1      	b.n	8010542 <UART_SetConfig+0xca2>
 801019e:	bf00      	nop
 80101a0:	40011c00 	.word	0x40011c00
 80101a4:	58024400 	.word	0x58024400
 80101a8:	58000c00 	.word	0x58000c00
 80101ac:	03d09000 	.word	0x03d09000
 80101b0:	003d0900 	.word	0x003d0900
 80101b4:	08012f2c 	.word	0x08012f2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ba:	2200      	movs	r2, #0
 80101bc:	60bb      	str	r3, [r7, #8]
 80101be:	60fa      	str	r2, [r7, #12]
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c4:	4ac0      	ldr	r2, [pc, #768]	; (80104c8 <UART_SetConfig+0xc28>)
 80101c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	2200      	movs	r2, #0
 80101ce:	603b      	str	r3, [r7, #0]
 80101d0:	607a      	str	r2, [r7, #4]
 80101d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80101da:	f7f0 f8d9 	bl	8000390 <__aeabi_uldivmod>
 80101de:	4602      	mov	r2, r0
 80101e0:	460b      	mov	r3, r1
 80101e2:	4610      	mov	r0, r2
 80101e4:	4619      	mov	r1, r3
 80101e6:	f04f 0200 	mov.w	r2, #0
 80101ea:	f04f 0300 	mov.w	r3, #0
 80101ee:	020b      	lsls	r3, r1, #8
 80101f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80101f4:	0202      	lsls	r2, r0, #8
 80101f6:	6979      	ldr	r1, [r7, #20]
 80101f8:	6849      	ldr	r1, [r1, #4]
 80101fa:	0849      	lsrs	r1, r1, #1
 80101fc:	2000      	movs	r0, #0
 80101fe:	460c      	mov	r4, r1
 8010200:	4605      	mov	r5, r0
 8010202:	eb12 0804 	adds.w	r8, r2, r4
 8010206:	eb43 0905 	adc.w	r9, r3, r5
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	2200      	movs	r2, #0
 8010210:	469a      	mov	sl, r3
 8010212:	4693      	mov	fp, r2
 8010214:	4652      	mov	r2, sl
 8010216:	465b      	mov	r3, fp
 8010218:	4640      	mov	r0, r8
 801021a:	4649      	mov	r1, r9
 801021c:	f7f0 f8b8 	bl	8000390 <__aeabi_uldivmod>
 8010220:	4602      	mov	r2, r0
 8010222:	460b      	mov	r3, r1
 8010224:	4613      	mov	r3, r2
 8010226:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801022e:	d308      	bcc.n	8010242 <UART_SetConfig+0x9a2>
 8010230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010236:	d204      	bcs.n	8010242 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801023e:	60da      	str	r2, [r3, #12]
 8010240:	e17f      	b.n	8010542 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010242:	2301      	movs	r3, #1
 8010244:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010248:	e17b      	b.n	8010542 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	69db      	ldr	r3, [r3, #28]
 801024e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010252:	f040 80bd 	bne.w	80103d0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010256:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801025a:	2b20      	cmp	r3, #32
 801025c:	dc48      	bgt.n	80102f0 <UART_SetConfig+0xa50>
 801025e:	2b00      	cmp	r3, #0
 8010260:	db7b      	blt.n	801035a <UART_SetConfig+0xaba>
 8010262:	2b20      	cmp	r3, #32
 8010264:	d879      	bhi.n	801035a <UART_SetConfig+0xaba>
 8010266:	a201      	add	r2, pc, #4	; (adr r2, 801026c <UART_SetConfig+0x9cc>)
 8010268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801026c:	080102f7 	.word	0x080102f7
 8010270:	080102ff 	.word	0x080102ff
 8010274:	0801035b 	.word	0x0801035b
 8010278:	0801035b 	.word	0x0801035b
 801027c:	08010307 	.word	0x08010307
 8010280:	0801035b 	.word	0x0801035b
 8010284:	0801035b 	.word	0x0801035b
 8010288:	0801035b 	.word	0x0801035b
 801028c:	08010317 	.word	0x08010317
 8010290:	0801035b 	.word	0x0801035b
 8010294:	0801035b 	.word	0x0801035b
 8010298:	0801035b 	.word	0x0801035b
 801029c:	0801035b 	.word	0x0801035b
 80102a0:	0801035b 	.word	0x0801035b
 80102a4:	0801035b 	.word	0x0801035b
 80102a8:	0801035b 	.word	0x0801035b
 80102ac:	08010327 	.word	0x08010327
 80102b0:	0801035b 	.word	0x0801035b
 80102b4:	0801035b 	.word	0x0801035b
 80102b8:	0801035b 	.word	0x0801035b
 80102bc:	0801035b 	.word	0x0801035b
 80102c0:	0801035b 	.word	0x0801035b
 80102c4:	0801035b 	.word	0x0801035b
 80102c8:	0801035b 	.word	0x0801035b
 80102cc:	0801035b 	.word	0x0801035b
 80102d0:	0801035b 	.word	0x0801035b
 80102d4:	0801035b 	.word	0x0801035b
 80102d8:	0801035b 	.word	0x0801035b
 80102dc:	0801035b 	.word	0x0801035b
 80102e0:	0801035b 	.word	0x0801035b
 80102e4:	0801035b 	.word	0x0801035b
 80102e8:	0801035b 	.word	0x0801035b
 80102ec:	0801034d 	.word	0x0801034d
 80102f0:	2b40      	cmp	r3, #64	; 0x40
 80102f2:	d02e      	beq.n	8010352 <UART_SetConfig+0xab2>
 80102f4:	e031      	b.n	801035a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80102f6:	f7fb f9bd 	bl	800b674 <HAL_RCC_GetPCLK1Freq>
 80102fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80102fc:	e033      	b.n	8010366 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102fe:	f7fb f9cf 	bl	800b6a0 <HAL_RCC_GetPCLK2Freq>
 8010302:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010304:	e02f      	b.n	8010366 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801030a:	4618      	mov	r0, r3
 801030c:	f7fd f88a 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010314:	e027      	b.n	8010366 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010316:	f107 0318 	add.w	r3, r7, #24
 801031a:	4618      	mov	r0, r3
 801031c:	f7fd f9d6 	bl	800d6cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010324:	e01f      	b.n	8010366 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010326:	4b69      	ldr	r3, [pc, #420]	; (80104cc <UART_SetConfig+0xc2c>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f003 0320 	and.w	r3, r3, #32
 801032e:	2b00      	cmp	r3, #0
 8010330:	d009      	beq.n	8010346 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010332:	4b66      	ldr	r3, [pc, #408]	; (80104cc <UART_SetConfig+0xc2c>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	08db      	lsrs	r3, r3, #3
 8010338:	f003 0303 	and.w	r3, r3, #3
 801033c:	4a64      	ldr	r2, [pc, #400]	; (80104d0 <UART_SetConfig+0xc30>)
 801033e:	fa22 f303 	lsr.w	r3, r2, r3
 8010342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010344:	e00f      	b.n	8010366 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010346:	4b62      	ldr	r3, [pc, #392]	; (80104d0 <UART_SetConfig+0xc30>)
 8010348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801034a:	e00c      	b.n	8010366 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801034c:	4b61      	ldr	r3, [pc, #388]	; (80104d4 <UART_SetConfig+0xc34>)
 801034e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010350:	e009      	b.n	8010366 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010358:	e005      	b.n	8010366 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801035a:	2300      	movs	r3, #0
 801035c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801035e:	2301      	movs	r3, #1
 8010360:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010364:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010368:	2b00      	cmp	r3, #0
 801036a:	f000 80ea 	beq.w	8010542 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010372:	4a55      	ldr	r2, [pc, #340]	; (80104c8 <UART_SetConfig+0xc28>)
 8010374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010378:	461a      	mov	r2, r3
 801037a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801037c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010380:	005a      	lsls	r2, r3, #1
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	085b      	lsrs	r3, r3, #1
 8010388:	441a      	add	r2, r3
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010392:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010396:	2b0f      	cmp	r3, #15
 8010398:	d916      	bls.n	80103c8 <UART_SetConfig+0xb28>
 801039a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103a0:	d212      	bcs.n	80103c8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80103a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	f023 030f 	bic.w	r3, r3, #15
 80103aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80103ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ae:	085b      	lsrs	r3, r3, #1
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	f003 0307 	and.w	r3, r3, #7
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80103ba:	4313      	orrs	r3, r2
 80103bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80103c4:	60da      	str	r2, [r3, #12]
 80103c6:	e0bc      	b.n	8010542 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80103c8:	2301      	movs	r3, #1
 80103ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80103ce:	e0b8      	b.n	8010542 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80103d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80103d4:	2b20      	cmp	r3, #32
 80103d6:	dc4b      	bgt.n	8010470 <UART_SetConfig+0xbd0>
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f2c0 8087 	blt.w	80104ec <UART_SetConfig+0xc4c>
 80103de:	2b20      	cmp	r3, #32
 80103e0:	f200 8084 	bhi.w	80104ec <UART_SetConfig+0xc4c>
 80103e4:	a201      	add	r2, pc, #4	; (adr r2, 80103ec <UART_SetConfig+0xb4c>)
 80103e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ea:	bf00      	nop
 80103ec:	08010477 	.word	0x08010477
 80103f0:	0801047f 	.word	0x0801047f
 80103f4:	080104ed 	.word	0x080104ed
 80103f8:	080104ed 	.word	0x080104ed
 80103fc:	08010487 	.word	0x08010487
 8010400:	080104ed 	.word	0x080104ed
 8010404:	080104ed 	.word	0x080104ed
 8010408:	080104ed 	.word	0x080104ed
 801040c:	08010497 	.word	0x08010497
 8010410:	080104ed 	.word	0x080104ed
 8010414:	080104ed 	.word	0x080104ed
 8010418:	080104ed 	.word	0x080104ed
 801041c:	080104ed 	.word	0x080104ed
 8010420:	080104ed 	.word	0x080104ed
 8010424:	080104ed 	.word	0x080104ed
 8010428:	080104ed 	.word	0x080104ed
 801042c:	080104a7 	.word	0x080104a7
 8010430:	080104ed 	.word	0x080104ed
 8010434:	080104ed 	.word	0x080104ed
 8010438:	080104ed 	.word	0x080104ed
 801043c:	080104ed 	.word	0x080104ed
 8010440:	080104ed 	.word	0x080104ed
 8010444:	080104ed 	.word	0x080104ed
 8010448:	080104ed 	.word	0x080104ed
 801044c:	080104ed 	.word	0x080104ed
 8010450:	080104ed 	.word	0x080104ed
 8010454:	080104ed 	.word	0x080104ed
 8010458:	080104ed 	.word	0x080104ed
 801045c:	080104ed 	.word	0x080104ed
 8010460:	080104ed 	.word	0x080104ed
 8010464:	080104ed 	.word	0x080104ed
 8010468:	080104ed 	.word	0x080104ed
 801046c:	080104df 	.word	0x080104df
 8010470:	2b40      	cmp	r3, #64	; 0x40
 8010472:	d037      	beq.n	80104e4 <UART_SetConfig+0xc44>
 8010474:	e03a      	b.n	80104ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010476:	f7fb f8fd 	bl	800b674 <HAL_RCC_GetPCLK1Freq>
 801047a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801047c:	e03c      	b.n	80104f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801047e:	f7fb f90f 	bl	800b6a0 <HAL_RCC_GetPCLK2Freq>
 8010482:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010484:	e038      	b.n	80104f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801048a:	4618      	mov	r0, r3
 801048c:	f7fc ffca 	bl	800d424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010494:	e030      	b.n	80104f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010496:	f107 0318 	add.w	r3, r7, #24
 801049a:	4618      	mov	r0, r3
 801049c:	f7fd f916 	bl	800d6cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104a4:	e028      	b.n	80104f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80104a6:	4b09      	ldr	r3, [pc, #36]	; (80104cc <UART_SetConfig+0xc2c>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f003 0320 	and.w	r3, r3, #32
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d012      	beq.n	80104d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80104b2:	4b06      	ldr	r3, [pc, #24]	; (80104cc <UART_SetConfig+0xc2c>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	08db      	lsrs	r3, r3, #3
 80104b8:	f003 0303 	and.w	r3, r3, #3
 80104bc:	4a04      	ldr	r2, [pc, #16]	; (80104d0 <UART_SetConfig+0xc30>)
 80104be:	fa22 f303 	lsr.w	r3, r2, r3
 80104c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80104c4:	e018      	b.n	80104f8 <UART_SetConfig+0xc58>
 80104c6:	bf00      	nop
 80104c8:	08012f2c 	.word	0x08012f2c
 80104cc:	58024400 	.word	0x58024400
 80104d0:	03d09000 	.word	0x03d09000
 80104d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80104d8:	4b24      	ldr	r3, [pc, #144]	; (801056c <UART_SetConfig+0xccc>)
 80104da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104dc:	e00c      	b.n	80104f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80104de:	4b24      	ldr	r3, [pc, #144]	; (8010570 <UART_SetConfig+0xcd0>)
 80104e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104e2:	e009      	b.n	80104f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80104e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104ea:	e005      	b.n	80104f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80104ec:	2300      	movs	r3, #0
 80104ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80104f0:	2301      	movs	r3, #1
 80104f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80104f6:	bf00      	nop
    }

    if (pclk != 0U)
 80104f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d021      	beq.n	8010542 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010502:	4a1c      	ldr	r2, [pc, #112]	; (8010574 <UART_SetConfig+0xcd4>)
 8010504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010508:	461a      	mov	r2, r3
 801050a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801050c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	085b      	lsrs	r3, r3, #1
 8010516:	441a      	add	r2, r3
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010520:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010524:	2b0f      	cmp	r3, #15
 8010526:	d909      	bls.n	801053c <UART_SetConfig+0xc9c>
 8010528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801052e:	d205      	bcs.n	801053c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010532:	b29a      	uxth	r2, r3
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	60da      	str	r2, [r3, #12]
 801053a:	e002      	b.n	8010542 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801053c:	2301      	movs	r3, #1
 801053e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	2201      	movs	r2, #1
 8010546:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	2201      	movs	r2, #1
 801054e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	2200      	movs	r2, #0
 8010556:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	2200      	movs	r2, #0
 801055c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801055e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010562:	4618      	mov	r0, r3
 8010564:	3748      	adds	r7, #72	; 0x48
 8010566:	46bd      	mov	sp, r7
 8010568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801056c:	03d09000 	.word	0x03d09000
 8010570:	003d0900 	.word	0x003d0900
 8010574:	08012f2c 	.word	0x08012f2c

08010578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010584:	f003 0301 	and.w	r3, r3, #1
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00a      	beq.n	80105a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	430a      	orrs	r2, r1
 80105a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105a6:	f003 0302 	and.w	r3, r3, #2
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00a      	beq.n	80105c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	430a      	orrs	r2, r1
 80105c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105c8:	f003 0304 	and.w	r3, r3, #4
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00a      	beq.n	80105e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	430a      	orrs	r2, r1
 80105e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105ea:	f003 0308 	and.w	r3, r3, #8
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00a      	beq.n	8010608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	430a      	orrs	r2, r1
 8010606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801060c:	f003 0310 	and.w	r3, r3, #16
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00a      	beq.n	801062a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	430a      	orrs	r2, r1
 8010628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801062e:	f003 0320 	and.w	r3, r3, #32
 8010632:	2b00      	cmp	r3, #0
 8010634:	d00a      	beq.n	801064c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	689b      	ldr	r3, [r3, #8]
 801063c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	430a      	orrs	r2, r1
 801064a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010654:	2b00      	cmp	r3, #0
 8010656:	d01a      	beq.n	801068e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	430a      	orrs	r2, r1
 801066c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010676:	d10a      	bne.n	801068e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	430a      	orrs	r2, r1
 801068c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00a      	beq.n	80106b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	430a      	orrs	r2, r1
 80106ae:	605a      	str	r2, [r3, #4]
  }
}
 80106b0:	bf00      	nop
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b098      	sub	sp, #96	; 0x60
 80106c0:	af02      	add	r7, sp, #8
 80106c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106cc:	f7f4 fcc2 	bl	8005054 <HAL_GetTick>
 80106d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	f003 0308 	and.w	r3, r3, #8
 80106dc:	2b08      	cmp	r3, #8
 80106de:	d12f      	bne.n	8010740 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80106e4:	9300      	str	r3, [sp, #0]
 80106e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106e8:	2200      	movs	r2, #0
 80106ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 f88e 	bl	8010810 <UART_WaitOnFlagUntilTimeout>
 80106f4:	4603      	mov	r3, r0
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d022      	beq.n	8010740 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010702:	e853 3f00 	ldrex	r3, [r3]
 8010706:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801070a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801070e:	653b      	str	r3, [r7, #80]	; 0x50
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	461a      	mov	r2, r3
 8010716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010718:	647b      	str	r3, [r7, #68]	; 0x44
 801071a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801071c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801071e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010720:	e841 2300 	strex	r3, r2, [r1]
 8010724:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010728:	2b00      	cmp	r3, #0
 801072a:	d1e6      	bne.n	80106fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2220      	movs	r2, #32
 8010730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801073c:	2303      	movs	r3, #3
 801073e:	e063      	b.n	8010808 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f003 0304 	and.w	r3, r3, #4
 801074a:	2b04      	cmp	r3, #4
 801074c:	d149      	bne.n	80107e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801074e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010752:	9300      	str	r3, [sp, #0]
 8010754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010756:	2200      	movs	r2, #0
 8010758:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f000 f857 	bl	8010810 <UART_WaitOnFlagUntilTimeout>
 8010762:	4603      	mov	r3, r0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d03c      	beq.n	80107e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010770:	e853 3f00 	ldrex	r3, [r3]
 8010774:	623b      	str	r3, [r7, #32]
   return(result);
 8010776:	6a3b      	ldr	r3, [r7, #32]
 8010778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801077c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	461a      	mov	r2, r3
 8010784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010786:	633b      	str	r3, [r7, #48]	; 0x30
 8010788:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801078a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801078c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801078e:	e841 2300 	strex	r3, r2, [r1]
 8010792:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010796:	2b00      	cmp	r3, #0
 8010798:	d1e6      	bne.n	8010768 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	3308      	adds	r3, #8
 80107a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	e853 3f00 	ldrex	r3, [r3]
 80107a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f023 0301 	bic.w	r3, r3, #1
 80107b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	3308      	adds	r3, #8
 80107b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107ba:	61fa      	str	r2, [r7, #28]
 80107bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107be:	69b9      	ldr	r1, [r7, #24]
 80107c0:	69fa      	ldr	r2, [r7, #28]
 80107c2:	e841 2300 	strex	r3, r2, [r1]
 80107c6:	617b      	str	r3, [r7, #20]
   return(result);
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d1e5      	bne.n	801079a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2220      	movs	r2, #32
 80107d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107de:	2303      	movs	r3, #3
 80107e0:	e012      	b.n	8010808 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2220      	movs	r2, #32
 80107e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2220      	movs	r2, #32
 80107ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2200      	movs	r2, #0
 80107fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2200      	movs	r2, #0
 8010802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3758      	adds	r7, #88	; 0x58
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	603b      	str	r3, [r7, #0]
 801081c:	4613      	mov	r3, r2
 801081e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010820:	e049      	b.n	80108b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010828:	d045      	beq.n	80108b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801082a:	f7f4 fc13 	bl	8005054 <HAL_GetTick>
 801082e:	4602      	mov	r2, r0
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	1ad3      	subs	r3, r2, r3
 8010834:	69ba      	ldr	r2, [r7, #24]
 8010836:	429a      	cmp	r2, r3
 8010838:	d302      	bcc.n	8010840 <UART_WaitOnFlagUntilTimeout+0x30>
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d101      	bne.n	8010844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010840:	2303      	movs	r3, #3
 8010842:	e048      	b.n	80108d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f003 0304 	and.w	r3, r3, #4
 801084e:	2b00      	cmp	r3, #0
 8010850:	d031      	beq.n	80108b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	69db      	ldr	r3, [r3, #28]
 8010858:	f003 0308 	and.w	r3, r3, #8
 801085c:	2b08      	cmp	r3, #8
 801085e:	d110      	bne.n	8010882 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	2208      	movs	r2, #8
 8010866:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f000 f839 	bl	80108e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2208      	movs	r2, #8
 8010872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2200      	movs	r2, #0
 801087a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801087e:	2301      	movs	r3, #1
 8010880:	e029      	b.n	80108d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	69db      	ldr	r3, [r3, #28]
 8010888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801088c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010890:	d111      	bne.n	80108b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801089a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f000 f81f 	bl	80108e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2220      	movs	r2, #32
 80108a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2200      	movs	r2, #0
 80108ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80108b2:	2303      	movs	r3, #3
 80108b4:	e00f      	b.n	80108d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	69da      	ldr	r2, [r3, #28]
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	4013      	ands	r3, r2
 80108c0:	68ba      	ldr	r2, [r7, #8]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	bf0c      	ite	eq
 80108c6:	2301      	moveq	r3, #1
 80108c8:	2300      	movne	r3, #0
 80108ca:	b2db      	uxtb	r3, r3
 80108cc:	461a      	mov	r2, r3
 80108ce:	79fb      	ldrb	r3, [r7, #7]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d0a6      	beq.n	8010822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
	...

080108e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b095      	sub	sp, #84	; 0x54
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f0:	e853 3f00 	ldrex	r3, [r3]
 80108f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80108f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80108fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	461a      	mov	r2, r3
 8010904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010906:	643b      	str	r3, [r7, #64]	; 0x40
 8010908:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801090a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801090c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801090e:	e841 2300 	strex	r3, r2, [r1]
 8010912:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1e6      	bne.n	80108e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	3308      	adds	r3, #8
 8010920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010922:	6a3b      	ldr	r3, [r7, #32]
 8010924:	e853 3f00 	ldrex	r3, [r3]
 8010928:	61fb      	str	r3, [r7, #28]
   return(result);
 801092a:	69fa      	ldr	r2, [r7, #28]
 801092c:	4b1e      	ldr	r3, [pc, #120]	; (80109a8 <UART_EndRxTransfer+0xc8>)
 801092e:	4013      	ands	r3, r2
 8010930:	64bb      	str	r3, [r7, #72]	; 0x48
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	3308      	adds	r3, #8
 8010938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801093a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801093c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801093e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010942:	e841 2300 	strex	r3, r2, [r1]
 8010946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1e5      	bne.n	801091a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010952:	2b01      	cmp	r3, #1
 8010954:	d118      	bne.n	8010988 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	e853 3f00 	ldrex	r3, [r3]
 8010962:	60bb      	str	r3, [r7, #8]
   return(result);
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	f023 0310 	bic.w	r3, r3, #16
 801096a:	647b      	str	r3, [r7, #68]	; 0x44
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	461a      	mov	r2, r3
 8010972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010974:	61bb      	str	r3, [r7, #24]
 8010976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010978:	6979      	ldr	r1, [r7, #20]
 801097a:	69ba      	ldr	r2, [r7, #24]
 801097c:	e841 2300 	strex	r3, r2, [r1]
 8010980:	613b      	str	r3, [r7, #16]
   return(result);
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d1e6      	bne.n	8010956 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2220      	movs	r2, #32
 801098c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2200      	movs	r2, #0
 801099a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801099c:	bf00      	nop
 801099e:	3754      	adds	r7, #84	; 0x54
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr
 80109a8:	effffffe 	.word	0xeffffffe

080109ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d101      	bne.n	80109c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80109be:	2302      	movs	r3, #2
 80109c0:	e027      	b.n	8010a12 <HAL_UARTEx_DisableFifoMode+0x66>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2201      	movs	r2, #1
 80109c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2224      	movs	r2, #36	; 0x24
 80109ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	681a      	ldr	r2, [r3, #0]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f022 0201 	bic.w	r2, r2, #1
 80109e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80109f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2200      	movs	r2, #0
 80109f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	68fa      	ldr	r2, [r7, #12]
 80109fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2220      	movs	r2, #32
 8010a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3714      	adds	r7, #20
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr

08010a1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a1e:	b580      	push	{r7, lr}
 8010a20:	b084      	sub	sp, #16
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	6078      	str	r0, [r7, #4]
 8010a26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	d101      	bne.n	8010a36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010a32:	2302      	movs	r3, #2
 8010a34:	e02d      	b.n	8010a92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2201      	movs	r2, #1
 8010a3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2224      	movs	r2, #36	; 0x24
 8010a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f022 0201 	bic.w	r2, r2, #1
 8010a5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	689b      	ldr	r3, [r3, #8]
 8010a64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	683a      	ldr	r2, [r7, #0]
 8010a6e:	430a      	orrs	r2, r1
 8010a70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 f850 	bl	8010b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2220      	movs	r2, #32
 8010a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010a90:	2300      	movs	r3, #0
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3710      	adds	r7, #16
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}

08010a9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a9a:	b580      	push	{r7, lr}
 8010a9c:	b084      	sub	sp, #16
 8010a9e:	af00      	add	r7, sp, #0
 8010aa0:	6078      	str	r0, [r7, #4]
 8010aa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d101      	bne.n	8010ab2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010aae:	2302      	movs	r3, #2
 8010ab0:	e02d      	b.n	8010b0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2224      	movs	r2, #36	; 0x24
 8010abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	f022 0201 	bic.w	r2, r2, #1
 8010ad8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	689b      	ldr	r3, [r3, #8]
 8010ae0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	683a      	ldr	r2, [r7, #0]
 8010aea:	430a      	orrs	r2, r1
 8010aec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 f812 	bl	8010b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	68fa      	ldr	r2, [r7, #12]
 8010afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2220      	movs	r2, #32
 8010b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2200      	movs	r2, #0
 8010b08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010b0c:	2300      	movs	r3, #0
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3710      	adds	r7, #16
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
	...

08010b18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d108      	bne.n	8010b3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2201      	movs	r2, #1
 8010b34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010b38:	e031      	b.n	8010b9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010b3a:	2310      	movs	r3, #16
 8010b3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010b3e:	2310      	movs	r3, #16
 8010b40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	689b      	ldr	r3, [r3, #8]
 8010b48:	0e5b      	lsrs	r3, r3, #25
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	f003 0307 	and.w	r3, r3, #7
 8010b50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	689b      	ldr	r3, [r3, #8]
 8010b58:	0f5b      	lsrs	r3, r3, #29
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	f003 0307 	and.w	r3, r3, #7
 8010b60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b62:	7bbb      	ldrb	r3, [r7, #14]
 8010b64:	7b3a      	ldrb	r2, [r7, #12]
 8010b66:	4911      	ldr	r1, [pc, #68]	; (8010bac <UARTEx_SetNbDataToProcess+0x94>)
 8010b68:	5c8a      	ldrb	r2, [r1, r2]
 8010b6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b6e:	7b3a      	ldrb	r2, [r7, #12]
 8010b70:	490f      	ldr	r1, [pc, #60]	; (8010bb0 <UARTEx_SetNbDataToProcess+0x98>)
 8010b72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b74:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
 8010b82:	7b7a      	ldrb	r2, [r7, #13]
 8010b84:	4909      	ldr	r1, [pc, #36]	; (8010bac <UARTEx_SetNbDataToProcess+0x94>)
 8010b86:	5c8a      	ldrb	r2, [r1, r2]
 8010b88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b8c:	7b7a      	ldrb	r2, [r7, #13]
 8010b8e:	4908      	ldr	r1, [pc, #32]	; (8010bb0 <UARTEx_SetNbDataToProcess+0x98>)
 8010b90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b92:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010b9e:	bf00      	nop
 8010ba0:	3714      	adds	r7, #20
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	08012f44 	.word	0x08012f44
 8010bb0:	08012f4c 	.word	0x08012f4c

08010bb4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d121      	bne.n	8010c0a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681a      	ldr	r2, [r3, #0]
 8010bca:	4b27      	ldr	r3, [pc, #156]	; (8010c68 <FMC_SDRAM_Init+0xb4>)
 8010bcc:	4013      	ands	r3, r2
 8010bce:	683a      	ldr	r2, [r7, #0]
 8010bd0:	6851      	ldr	r1, [r2, #4]
 8010bd2:	683a      	ldr	r2, [r7, #0]
 8010bd4:	6892      	ldr	r2, [r2, #8]
 8010bd6:	4311      	orrs	r1, r2
 8010bd8:	683a      	ldr	r2, [r7, #0]
 8010bda:	68d2      	ldr	r2, [r2, #12]
 8010bdc:	4311      	orrs	r1, r2
 8010bde:	683a      	ldr	r2, [r7, #0]
 8010be0:	6912      	ldr	r2, [r2, #16]
 8010be2:	4311      	orrs	r1, r2
 8010be4:	683a      	ldr	r2, [r7, #0]
 8010be6:	6952      	ldr	r2, [r2, #20]
 8010be8:	4311      	orrs	r1, r2
 8010bea:	683a      	ldr	r2, [r7, #0]
 8010bec:	6992      	ldr	r2, [r2, #24]
 8010bee:	4311      	orrs	r1, r2
 8010bf0:	683a      	ldr	r2, [r7, #0]
 8010bf2:	69d2      	ldr	r2, [r2, #28]
 8010bf4:	4311      	orrs	r1, r2
 8010bf6:	683a      	ldr	r2, [r7, #0]
 8010bf8:	6a12      	ldr	r2, [r2, #32]
 8010bfa:	4311      	orrs	r1, r2
 8010bfc:	683a      	ldr	r2, [r7, #0]
 8010bfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010c00:	430a      	orrs	r2, r1
 8010c02:	431a      	orrs	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	601a      	str	r2, [r3, #0]
 8010c08:	e026      	b.n	8010c58 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	69d9      	ldr	r1, [r3, #28]
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	6a1b      	ldr	r3, [r3, #32]
 8010c1a:	4319      	orrs	r1, r3
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c20:	430b      	orrs	r3, r1
 8010c22:	431a      	orrs	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	685a      	ldr	r2, [r3, #4]
 8010c2c:	4b0e      	ldr	r3, [pc, #56]	; (8010c68 <FMC_SDRAM_Init+0xb4>)
 8010c2e:	4013      	ands	r3, r2
 8010c30:	683a      	ldr	r2, [r7, #0]
 8010c32:	6851      	ldr	r1, [r2, #4]
 8010c34:	683a      	ldr	r2, [r7, #0]
 8010c36:	6892      	ldr	r2, [r2, #8]
 8010c38:	4311      	orrs	r1, r2
 8010c3a:	683a      	ldr	r2, [r7, #0]
 8010c3c:	68d2      	ldr	r2, [r2, #12]
 8010c3e:	4311      	orrs	r1, r2
 8010c40:	683a      	ldr	r2, [r7, #0]
 8010c42:	6912      	ldr	r2, [r2, #16]
 8010c44:	4311      	orrs	r1, r2
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	6952      	ldr	r2, [r2, #20]
 8010c4a:	4311      	orrs	r1, r2
 8010c4c:	683a      	ldr	r2, [r7, #0]
 8010c4e:	6992      	ldr	r2, [r2, #24]
 8010c50:	430a      	orrs	r2, r1
 8010c52:	431a      	orrs	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010c58:	2300      	movs	r3, #0
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	370c      	adds	r7, #12
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	ffff8000 	.word	0xffff8000

08010c6c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b085      	sub	sp, #20
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d128      	bne.n	8010cd0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	689b      	ldr	r3, [r3, #8]
 8010c82:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	1e59      	subs	r1, r3, #1
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	685b      	ldr	r3, [r3, #4]
 8010c90:	3b01      	subs	r3, #1
 8010c92:	011b      	lsls	r3, r3, #4
 8010c94:	4319      	orrs	r1, r3
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	689b      	ldr	r3, [r3, #8]
 8010c9a:	3b01      	subs	r3, #1
 8010c9c:	021b      	lsls	r3, r3, #8
 8010c9e:	4319      	orrs	r1, r3
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	3b01      	subs	r3, #1
 8010ca6:	031b      	lsls	r3, r3, #12
 8010ca8:	4319      	orrs	r1, r3
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	691b      	ldr	r3, [r3, #16]
 8010cae:	3b01      	subs	r3, #1
 8010cb0:	041b      	lsls	r3, r3, #16
 8010cb2:	4319      	orrs	r1, r3
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	695b      	ldr	r3, [r3, #20]
 8010cb8:	3b01      	subs	r3, #1
 8010cba:	051b      	lsls	r3, r3, #20
 8010cbc:	4319      	orrs	r1, r3
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	699b      	ldr	r3, [r3, #24]
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	061b      	lsls	r3, r3, #24
 8010cc6:	430b      	orrs	r3, r1
 8010cc8:	431a      	orrs	r2, r3
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	609a      	str	r2, [r3, #8]
 8010cce:	e02d      	b.n	8010d2c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	689a      	ldr	r2, [r3, #8]
 8010cd4:	4b19      	ldr	r3, [pc, #100]	; (8010d3c <FMC_SDRAM_Timing_Init+0xd0>)
 8010cd6:	4013      	ands	r3, r2
 8010cd8:	68ba      	ldr	r2, [r7, #8]
 8010cda:	68d2      	ldr	r2, [r2, #12]
 8010cdc:	3a01      	subs	r2, #1
 8010cde:	0311      	lsls	r1, r2, #12
 8010ce0:	68ba      	ldr	r2, [r7, #8]
 8010ce2:	6952      	ldr	r2, [r2, #20]
 8010ce4:	3a01      	subs	r2, #1
 8010ce6:	0512      	lsls	r2, r2, #20
 8010ce8:	430a      	orrs	r2, r1
 8010cea:	431a      	orrs	r2, r3
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	1e59      	subs	r1, r3, #1
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	3b01      	subs	r3, #1
 8010d04:	011b      	lsls	r3, r3, #4
 8010d06:	4319      	orrs	r1, r3
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	021b      	lsls	r3, r3, #8
 8010d10:	4319      	orrs	r1, r3
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	691b      	ldr	r3, [r3, #16]
 8010d16:	3b01      	subs	r3, #1
 8010d18:	041b      	lsls	r3, r3, #16
 8010d1a:	4319      	orrs	r1, r3
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	699b      	ldr	r3, [r3, #24]
 8010d20:	3b01      	subs	r3, #1
 8010d22:	061b      	lsls	r3, r3, #24
 8010d24:	430b      	orrs	r3, r1
 8010d26:	431a      	orrs	r2, r3
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	ff0f0fff 	.word	0xff0f0fff

08010d40 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010d40:	b084      	sub	sp, #16
 8010d42:	b480      	push	{r7}
 8010d44:	b085      	sub	sp, #20
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
 8010d4a:	f107 001c 	add.w	r0, r7, #28
 8010d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010d52:	2300      	movs	r3, #0
 8010d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8010d56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010d58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010d5a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8010d5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8010d62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8010d66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010d68:	68fa      	ldr	r2, [r7, #12]
 8010d6a:	4313      	orrs	r3, r2
 8010d6c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	685a      	ldr	r2, [r3, #4]
 8010d72:	4b07      	ldr	r3, [pc, #28]	; (8010d90 <SDMMC_Init+0x50>)
 8010d74:	4013      	ands	r3, r2
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	431a      	orrs	r2, r3
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010d7e:	2300      	movs	r3, #0
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3714      	adds	r7, #20
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	b004      	add	sp, #16
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	ffc02c00 	.word	0xffc02c00

08010d94 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010d94:	b480      	push	{r7}
 8010d96:	b083      	sub	sp, #12
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	370c      	adds	r7, #12
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr

08010dae <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010dae:	b480      	push	{r7}
 8010db0:	b083      	sub	sp, #12
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f043 0203 	orr.w	r2, r3, #3
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010dc2:	2300      	movs	r3, #0
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	370c      	adds	r7, #12
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b083      	sub	sp, #12
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	f003 0303 	and.w	r3, r3, #3
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr

08010dec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b085      	sub	sp, #20
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010df6:	2300      	movs	r3, #0
 8010df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010e0a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010e10:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010e16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010e18:	68fa      	ldr	r2, [r7, #12]
 8010e1a:	4313      	orrs	r3, r2
 8010e1c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	68da      	ldr	r2, [r3, #12]
 8010e22:	4b06      	ldr	r3, [pc, #24]	; (8010e3c <SDMMC_SendCommand+0x50>)
 8010e24:	4013      	ands	r3, r2
 8010e26:	68fa      	ldr	r2, [r7, #12]
 8010e28:	431a      	orrs	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010e2e:	2300      	movs	r3, #0
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3714      	adds	r7, #20
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr
 8010e3c:	fffee0c0 	.word	0xfffee0c0

08010e40 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	691b      	ldr	r3, [r3, #16]
 8010e4c:	b2db      	uxtb	r3, r3
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010e5a:	b480      	push	{r7}
 8010e5c:	b085      	sub	sp, #20
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	3314      	adds	r3, #20
 8010e68:	461a      	mov	r2, r3
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3714      	adds	r7, #20
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7e:	4770      	bx	lr

08010e80 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010e80:	b480      	push	{r7}
 8010e82:	b085      	sub	sp, #20
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	681a      	ldr	r2, [r3, #0]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	685a      	ldr	r2, [r3, #4]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010ea6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010eac:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8010eb2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010eb4:	68fa      	ldr	r2, [r7, #12]
 8010eb6:	4313      	orrs	r3, r2
 8010eb8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	431a      	orrs	r2, r3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010eca:	2300      	movs	r3, #0

}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3714      	adds	r7, #20
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr

08010ed8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b088      	sub	sp, #32
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010ee6:	2310      	movs	r3, #16
 8010ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010efa:	f107 0308 	add.w	r3, r7, #8
 8010efe:	4619      	mov	r1, r3
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7ff ff73 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f0a:	2110      	movs	r1, #16
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 f995 	bl	801123c <SDMMC_GetCmdResp1>
 8010f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f14:	69fb      	ldr	r3, [r7, #28]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3720      	adds	r7, #32
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b088      	sub	sp, #32
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
 8010f26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010f2c:	2307      	movs	r3, #7
 8010f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f36:	2300      	movs	r3, #0
 8010f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f40:	f107 0308 	add.w	r3, r7, #8
 8010f44:	4619      	mov	r1, r3
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7ff ff50 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f50:	2107      	movs	r1, #7
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 f972 	bl	801123c <SDMMC_GetCmdResp1>
 8010f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f5a:	69fb      	ldr	r3, [r7, #28]
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3720      	adds	r7, #32
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}

08010f64 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b088      	sub	sp, #32
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010f70:	2300      	movs	r3, #0
 8010f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010f74:	2300      	movs	r3, #0
 8010f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f82:	f107 0308 	add.w	r3, r7, #8
 8010f86:	4619      	mov	r1, r3
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f7ff ff2f 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f000 fb96 	bl	80116c0 <SDMMC_GetCmdError>
 8010f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f96:	69fb      	ldr	r3, [r7, #28]
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3720      	adds	r7, #32
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b088      	sub	sp, #32
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010fa8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010fae:	2308      	movs	r3, #8
 8010fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fc2:	f107 0308 	add.w	r3, r7, #8
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f7ff ff0f 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 fb28 	bl	8011624 <SDMMC_GetCmdResp7>
 8010fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fd6:	69fb      	ldr	r3, [r7, #28]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3720      	adds	r7, #32
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b088      	sub	sp, #32
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010fee:	2337      	movs	r3, #55	; 0x37
 8010ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011002:	f107 0308 	add.w	r3, r7, #8
 8011006:	4619      	mov	r1, r3
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7ff feef 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801100e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011012:	2137      	movs	r1, #55	; 0x37
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f000 f911 	bl	801123c <SDMMC_GetCmdResp1>
 801101a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801101c:	69fb      	ldr	r3, [r7, #28]
}
 801101e:	4618      	mov	r0, r3
 8011020:	3720      	adds	r7, #32
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011026:	b580      	push	{r7, lr}
 8011028:	b088      	sub	sp, #32
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
 801102e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011034:	2329      	movs	r3, #41	; 0x29
 8011036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011038:	f44f 7380 	mov.w	r3, #256	; 0x100
 801103c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801103e:	2300      	movs	r3, #0
 8011040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011046:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011048:	f107 0308 	add.w	r3, r7, #8
 801104c:	4619      	mov	r1, r3
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f7ff fecc 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 fa2d 	bl	80114b4 <SDMMC_GetCmdResp3>
 801105a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801105c:	69fb      	ldr	r3, [r7, #28]
}
 801105e:	4618      	mov	r0, r3
 8011060:	3720      	adds	r7, #32
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011066:	b580      	push	{r7, lr}
 8011068:	b088      	sub	sp, #32
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
 801106e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011074:	2306      	movs	r3, #6
 8011076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011078:	f44f 7380 	mov.w	r3, #256	; 0x100
 801107c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801107e:	2300      	movs	r3, #0
 8011080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011086:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011088:	f107 0308 	add.w	r3, r7, #8
 801108c:	4619      	mov	r1, r3
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f7ff feac 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011094:	f241 3288 	movw	r2, #5000	; 0x1388
 8011098:	2106      	movs	r1, #6
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 f8ce 	bl	801123c <SDMMC_GetCmdResp1>
 80110a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110a2:	69fb      	ldr	r3, [r7, #28]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3720      	adds	r7, #32
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}

080110ac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b088      	sub	sp, #32
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80110b4:	2300      	movs	r3, #0
 80110b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80110b8:	2333      	movs	r3, #51	; 0x33
 80110ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110c2:	2300      	movs	r3, #0
 80110c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110cc:	f107 0308 	add.w	r3, r7, #8
 80110d0:	4619      	mov	r1, r3
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f7ff fe8a 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80110d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80110dc:	2133      	movs	r1, #51	; 0x33
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 f8ac 	bl	801123c <SDMMC_GetCmdResp1>
 80110e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110e6:	69fb      	ldr	r3, [r7, #28]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3720      	adds	r7, #32
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b088      	sub	sp, #32
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80110f8:	2300      	movs	r3, #0
 80110fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80110fc:	2302      	movs	r3, #2
 80110fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011100:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011106:	2300      	movs	r3, #0
 8011108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801110e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011110:	f107 0308 	add.w	r3, r7, #8
 8011114:	4619      	mov	r1, r3
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7ff fe68 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f000 f97f 	bl	8011420 <SDMMC_GetCmdResp2>
 8011122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011124:	69fb      	ldr	r3, [r7, #28]
}
 8011126:	4618      	mov	r0, r3
 8011128:	3720      	adds	r7, #32
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}

0801112e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801112e:	b580      	push	{r7, lr}
 8011130:	b088      	sub	sp, #32
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
 8011136:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801113c:	2309      	movs	r3, #9
 801113e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011140:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011146:	2300      	movs	r3, #0
 8011148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801114e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011150:	f107 0308 	add.w	r3, r7, #8
 8011154:	4619      	mov	r1, r3
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f7ff fe48 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 f95f 	bl	8011420 <SDMMC_GetCmdResp2>
 8011162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011164:	69fb      	ldr	r3, [r7, #28]
}
 8011166:	4618      	mov	r0, r3
 8011168:	3720      	adds	r7, #32
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}

0801116e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801116e:	b580      	push	{r7, lr}
 8011170:	b088      	sub	sp, #32
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
 8011176:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011178:	2300      	movs	r3, #0
 801117a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801117c:	2303      	movs	r3, #3
 801117e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011186:	2300      	movs	r3, #0
 8011188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801118e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011190:	f107 0308 	add.w	r3, r7, #8
 8011194:	4619      	mov	r1, r3
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f7ff fe28 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801119c:	683a      	ldr	r2, [r7, #0]
 801119e:	2103      	movs	r1, #3
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f000 f9c7 	bl	8011534 <SDMMC_GetCmdResp6>
 80111a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111a8:	69fb      	ldr	r3, [r7, #28]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3720      	adds	r7, #32
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b088      	sub	sp, #32
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
 80111ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80111c0:	230d      	movs	r3, #13
 80111c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111ca:	2300      	movs	r3, #0
 80111cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111d4:	f107 0308 	add.w	r3, r7, #8
 80111d8:	4619      	mov	r1, r3
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f7ff fe06 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80111e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80111e4:	210d      	movs	r1, #13
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 f828 	bl	801123c <SDMMC_GetCmdResp1>
 80111ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111ee:	69fb      	ldr	r3, [r7, #28]
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3720      	adds	r7, #32
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b088      	sub	sp, #32
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011200:	2300      	movs	r3, #0
 8011202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011204:	230d      	movs	r3, #13
 8011206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011208:	f44f 7380 	mov.w	r3, #256	; 0x100
 801120c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801120e:	2300      	movs	r3, #0
 8011210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011216:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011218:	f107 0308 	add.w	r3, r7, #8
 801121c:	4619      	mov	r1, r3
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f7ff fde4 	bl	8010dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011224:	f241 3288 	movw	r2, #5000	; 0x1388
 8011228:	210d      	movs	r1, #13
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f000 f806 	bl	801123c <SDMMC_GetCmdResp1>
 8011230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011232:	69fb      	ldr	r3, [r7, #28]
}
 8011234:	4618      	mov	r0, r3
 8011236:	3720      	adds	r7, #32
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b088      	sub	sp, #32
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	460b      	mov	r3, r1
 8011246:	607a      	str	r2, [r7, #4]
 8011248:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801124a:	4b70      	ldr	r3, [pc, #448]	; (801140c <SDMMC_GetCmdResp1+0x1d0>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	4a70      	ldr	r2, [pc, #448]	; (8011410 <SDMMC_GetCmdResp1+0x1d4>)
 8011250:	fba2 2303 	umull	r2, r3, r2, r3
 8011254:	0a5a      	lsrs	r2, r3, #9
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	fb02 f303 	mul.w	r3, r2, r3
 801125c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801125e:	69fb      	ldr	r3, [r7, #28]
 8011260:	1e5a      	subs	r2, r3, #1
 8011262:	61fa      	str	r2, [r7, #28]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d102      	bne.n	801126e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011268:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801126c:	e0c9      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011272:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8011274:	69ba      	ldr	r2, [r7, #24]
 8011276:	4b67      	ldr	r3, [pc, #412]	; (8011414 <SDMMC_GetCmdResp1+0x1d8>)
 8011278:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801127a:	2b00      	cmp	r3, #0
 801127c:	d0ef      	beq.n	801125e <SDMMC_GetCmdResp1+0x22>
 801127e:	69bb      	ldr	r3, [r7, #24]
 8011280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011284:	2b00      	cmp	r3, #0
 8011286:	d1ea      	bne.n	801125e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801128c:	f003 0304 	and.w	r3, r3, #4
 8011290:	2b00      	cmp	r3, #0
 8011292:	d004      	beq.n	801129e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2204      	movs	r2, #4
 8011298:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801129a:	2304      	movs	r3, #4
 801129c:	e0b1      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112a2:	f003 0301 	and.w	r3, r3, #1
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d004      	beq.n	80112b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2201      	movs	r2, #1
 80112ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112b0:	2301      	movs	r3, #1
 80112b2:	e0a6      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	4a58      	ldr	r2, [pc, #352]	; (8011418 <SDMMC_GetCmdResp1+0x1dc>)
 80112b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80112ba:	68f8      	ldr	r0, [r7, #12]
 80112bc:	f7ff fdc0 	bl	8010e40 <SDMMC_GetCommandResponse>
 80112c0:	4603      	mov	r3, r0
 80112c2:	461a      	mov	r2, r3
 80112c4:	7afb      	ldrb	r3, [r7, #11]
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d001      	beq.n	80112ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112ca:	2301      	movs	r3, #1
 80112cc:	e099      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80112ce:	2100      	movs	r1, #0
 80112d0:	68f8      	ldr	r0, [r7, #12]
 80112d2:	f7ff fdc2 	bl	8010e5a <SDMMC_GetResponse>
 80112d6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80112d8:	697a      	ldr	r2, [r7, #20]
 80112da:	4b50      	ldr	r3, [pc, #320]	; (801141c <SDMMC_GetCmdResp1+0x1e0>)
 80112dc:	4013      	ands	r3, r2
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d101      	bne.n	80112e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80112e2:	2300      	movs	r3, #0
 80112e4:	e08d      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	da02      	bge.n	80112f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80112ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80112f0:	e087      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d001      	beq.n	8011300 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80112fc:	2340      	movs	r3, #64	; 0x40
 80112fe:	e080      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011306:	2b00      	cmp	r3, #0
 8011308:	d001      	beq.n	801130e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801130a:	2380      	movs	r3, #128	; 0x80
 801130c:	e079      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011314:	2b00      	cmp	r3, #0
 8011316:	d002      	beq.n	801131e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011318:	f44f 7380 	mov.w	r3, #256	; 0x100
 801131c:	e071      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011324:	2b00      	cmp	r3, #0
 8011326:	d002      	beq.n	801132e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011328:	f44f 7300 	mov.w	r3, #512	; 0x200
 801132c:	e069      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011334:	2b00      	cmp	r3, #0
 8011336:	d002      	beq.n	801133e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801133c:	e061      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011344:	2b00      	cmp	r3, #0
 8011346:	d002      	beq.n	801134e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801134c:	e059      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011354:	2b00      	cmp	r3, #0
 8011356:	d002      	beq.n	801135e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801135c:	e051      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801136c:	e049      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011374:	2b00      	cmp	r3, #0
 8011376:	d002      	beq.n	801137e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011378:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801137c:	e041      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011384:	2b00      	cmp	r3, #0
 8011386:	d002      	beq.n	801138e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801138c:	e039      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011394:	2b00      	cmp	r3, #0
 8011396:	d002      	beq.n	801139e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801139c:	e031      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d002      	beq.n	80113ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80113a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80113ac:	e029      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d002      	beq.n	80113be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80113b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80113bc:	e021      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d002      	beq.n	80113ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80113c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80113cc:	e019      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d002      	beq.n	80113de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80113d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80113dc:	e011      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d002      	beq.n	80113ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80113e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80113ec:	e009      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	f003 0308 	and.w	r3, r3, #8
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d002      	beq.n	80113fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80113f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80113fc:	e001      	b.n	8011402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80113fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011402:	4618      	mov	r0, r3
 8011404:	3720      	adds	r7, #32
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}
 801140a:	bf00      	nop
 801140c:	24000008 	.word	0x24000008
 8011410:	10624dd3 	.word	0x10624dd3
 8011414:	00200045 	.word	0x00200045
 8011418:	002000c5 	.word	0x002000c5
 801141c:	fdffe008 	.word	0xfdffe008

08011420 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011420:	b480      	push	{r7}
 8011422:	b085      	sub	sp, #20
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011428:	4b1f      	ldr	r3, [pc, #124]	; (80114a8 <SDMMC_GetCmdResp2+0x88>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	4a1f      	ldr	r2, [pc, #124]	; (80114ac <SDMMC_GetCmdResp2+0x8c>)
 801142e:	fba2 2303 	umull	r2, r3, r2, r3
 8011432:	0a5b      	lsrs	r3, r3, #9
 8011434:	f241 3288 	movw	r2, #5000	; 0x1388
 8011438:	fb02 f303 	mul.w	r3, r2, r3
 801143c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	1e5a      	subs	r2, r3, #1
 8011442:	60fa      	str	r2, [r7, #12]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d102      	bne.n	801144e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011448:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801144c:	e026      	b.n	801149c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011452:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801145a:	2b00      	cmp	r3, #0
 801145c:	d0ef      	beq.n	801143e <SDMMC_GetCmdResp2+0x1e>
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011464:	2b00      	cmp	r3, #0
 8011466:	d1ea      	bne.n	801143e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801146c:	f003 0304 	and.w	r3, r3, #4
 8011470:	2b00      	cmp	r3, #0
 8011472:	d004      	beq.n	801147e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2204      	movs	r2, #4
 8011478:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801147a:	2304      	movs	r3, #4
 801147c:	e00e      	b.n	801149c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011482:	f003 0301 	and.w	r3, r3, #1
 8011486:	2b00      	cmp	r3, #0
 8011488:	d004      	beq.n	8011494 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2201      	movs	r2, #1
 801148e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011490:	2301      	movs	r3, #1
 8011492:	e003      	b.n	801149c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	4a06      	ldr	r2, [pc, #24]	; (80114b0 <SDMMC_GetCmdResp2+0x90>)
 8011498:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801149a:	2300      	movs	r3, #0
}
 801149c:	4618      	mov	r0, r3
 801149e:	3714      	adds	r7, #20
 80114a0:	46bd      	mov	sp, r7
 80114a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a6:	4770      	bx	lr
 80114a8:	24000008 	.word	0x24000008
 80114ac:	10624dd3 	.word	0x10624dd3
 80114b0:	002000c5 	.word	0x002000c5

080114b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80114b4:	b480      	push	{r7}
 80114b6:	b085      	sub	sp, #20
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80114bc:	4b1a      	ldr	r3, [pc, #104]	; (8011528 <SDMMC_GetCmdResp3+0x74>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	4a1a      	ldr	r2, [pc, #104]	; (801152c <SDMMC_GetCmdResp3+0x78>)
 80114c2:	fba2 2303 	umull	r2, r3, r2, r3
 80114c6:	0a5b      	lsrs	r3, r3, #9
 80114c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80114cc:	fb02 f303 	mul.w	r3, r2, r3
 80114d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	1e5a      	subs	r2, r3, #1
 80114d6:	60fa      	str	r2, [r7, #12]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d102      	bne.n	80114e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80114e0:	e01b      	b.n	801151a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d0ef      	beq.n	80114d2 <SDMMC_GetCmdResp3+0x1e>
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d1ea      	bne.n	80114d2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011500:	f003 0304 	and.w	r3, r3, #4
 8011504:	2b00      	cmp	r3, #0
 8011506:	d004      	beq.n	8011512 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2204      	movs	r2, #4
 801150c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801150e:	2304      	movs	r3, #4
 8011510:	e003      	b.n	801151a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	4a06      	ldr	r2, [pc, #24]	; (8011530 <SDMMC_GetCmdResp3+0x7c>)
 8011516:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	3714      	adds	r7, #20
 801151e:	46bd      	mov	sp, r7
 8011520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011524:	4770      	bx	lr
 8011526:	bf00      	nop
 8011528:	24000008 	.word	0x24000008
 801152c:	10624dd3 	.word	0x10624dd3
 8011530:	002000c5 	.word	0x002000c5

08011534 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b088      	sub	sp, #32
 8011538:	af00      	add	r7, sp, #0
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	460b      	mov	r3, r1
 801153e:	607a      	str	r2, [r7, #4]
 8011540:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011542:	4b35      	ldr	r3, [pc, #212]	; (8011618 <SDMMC_GetCmdResp6+0xe4>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4a35      	ldr	r2, [pc, #212]	; (801161c <SDMMC_GetCmdResp6+0xe8>)
 8011548:	fba2 2303 	umull	r2, r3, r2, r3
 801154c:	0a5b      	lsrs	r3, r3, #9
 801154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011552:	fb02 f303 	mul.w	r3, r2, r3
 8011556:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	1e5a      	subs	r2, r3, #1
 801155c:	61fa      	str	r2, [r7, #28]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d102      	bne.n	8011568 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011562:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011566:	e052      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801156c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011574:	2b00      	cmp	r3, #0
 8011576:	d0ef      	beq.n	8011558 <SDMMC_GetCmdResp6+0x24>
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801157e:	2b00      	cmp	r3, #0
 8011580:	d1ea      	bne.n	8011558 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011586:	f003 0304 	and.w	r3, r3, #4
 801158a:	2b00      	cmp	r3, #0
 801158c:	d004      	beq.n	8011598 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2204      	movs	r2, #4
 8011592:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011594:	2304      	movs	r3, #4
 8011596:	e03a      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801159c:	f003 0301 	and.w	r3, r3, #1
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d004      	beq.n	80115ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	2201      	movs	r2, #1
 80115a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115aa:	2301      	movs	r3, #1
 80115ac:	e02f      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80115ae:	68f8      	ldr	r0, [r7, #12]
 80115b0:	f7ff fc46 	bl	8010e40 <SDMMC_GetCommandResponse>
 80115b4:	4603      	mov	r3, r0
 80115b6:	461a      	mov	r2, r3
 80115b8:	7afb      	ldrb	r3, [r7, #11]
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d001      	beq.n	80115c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115be:	2301      	movs	r3, #1
 80115c0:	e025      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	4a16      	ldr	r2, [pc, #88]	; (8011620 <SDMMC_GetCmdResp6+0xec>)
 80115c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80115c8:	2100      	movs	r1, #0
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	f7ff fc45 	bl	8010e5a <SDMMC_GetResponse>
 80115d0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d106      	bne.n	80115ea <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	0c1b      	lsrs	r3, r3, #16
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80115e6:	2300      	movs	r3, #0
 80115e8:	e011      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d002      	beq.n	80115fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80115f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80115f8:	e009      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011600:	2b00      	cmp	r3, #0
 8011602:	d002      	beq.n	801160a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011608:	e001      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801160a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801160e:	4618      	mov	r0, r3
 8011610:	3720      	adds	r7, #32
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	24000008 	.word	0x24000008
 801161c:	10624dd3 	.word	0x10624dd3
 8011620:	002000c5 	.word	0x002000c5

08011624 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011624:	b480      	push	{r7}
 8011626:	b085      	sub	sp, #20
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801162c:	4b22      	ldr	r3, [pc, #136]	; (80116b8 <SDMMC_GetCmdResp7+0x94>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	4a22      	ldr	r2, [pc, #136]	; (80116bc <SDMMC_GetCmdResp7+0x98>)
 8011632:	fba2 2303 	umull	r2, r3, r2, r3
 8011636:	0a5b      	lsrs	r3, r3, #9
 8011638:	f241 3288 	movw	r2, #5000	; 0x1388
 801163c:	fb02 f303 	mul.w	r3, r2, r3
 8011640:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	1e5a      	subs	r2, r3, #1
 8011646:	60fa      	str	r2, [r7, #12]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d102      	bne.n	8011652 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801164c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011650:	e02c      	b.n	80116ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011656:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801165e:	2b00      	cmp	r3, #0
 8011660:	d0ef      	beq.n	8011642 <SDMMC_GetCmdResp7+0x1e>
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011668:	2b00      	cmp	r3, #0
 801166a:	d1ea      	bne.n	8011642 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011670:	f003 0304 	and.w	r3, r3, #4
 8011674:	2b00      	cmp	r3, #0
 8011676:	d004      	beq.n	8011682 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2204      	movs	r2, #4
 801167c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801167e:	2304      	movs	r3, #4
 8011680:	e014      	b.n	80116ac <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011686:	f003 0301 	and.w	r3, r3, #1
 801168a:	2b00      	cmp	r3, #0
 801168c:	d004      	beq.n	8011698 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2201      	movs	r2, #1
 8011692:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011694:	2301      	movs	r3, #1
 8011696:	e009      	b.n	80116ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801169c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d002      	beq.n	80116aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2240      	movs	r2, #64	; 0x40
 80116a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80116aa:	2300      	movs	r3, #0

}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3714      	adds	r7, #20
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr
 80116b8:	24000008 	.word	0x24000008
 80116bc:	10624dd3 	.word	0x10624dd3

080116c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b085      	sub	sp, #20
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80116c8:	4b11      	ldr	r3, [pc, #68]	; (8011710 <SDMMC_GetCmdError+0x50>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	4a11      	ldr	r2, [pc, #68]	; (8011714 <SDMMC_GetCmdError+0x54>)
 80116ce:	fba2 2303 	umull	r2, r3, r2, r3
 80116d2:	0a5b      	lsrs	r3, r3, #9
 80116d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80116d8:	fb02 f303 	mul.w	r3, r2, r3
 80116dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	1e5a      	subs	r2, r3, #1
 80116e2:	60fa      	str	r2, [r7, #12]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d102      	bne.n	80116ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80116e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80116ec:	e009      	b.n	8011702 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d0f1      	beq.n	80116de <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	4a06      	ldr	r2, [pc, #24]	; (8011718 <SDMMC_GetCmdError+0x58>)
 80116fe:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	3714      	adds	r7, #20
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr
 801170e:	bf00      	nop
 8011710:	24000008 	.word	0x24000008
 8011714:	10624dd3 	.word	0x10624dd3
 8011718:	002000c5 	.word	0x002000c5

0801171c <__errno>:
 801171c:	4b01      	ldr	r3, [pc, #4]	; (8011724 <__errno+0x8>)
 801171e:	6818      	ldr	r0, [r3, #0]
 8011720:	4770      	bx	lr
 8011722:	bf00      	nop
 8011724:	24000088 	.word	0x24000088

08011728 <__libc_init_array>:
 8011728:	b570      	push	{r4, r5, r6, lr}
 801172a:	4d0d      	ldr	r5, [pc, #52]	; (8011760 <__libc_init_array+0x38>)
 801172c:	4c0d      	ldr	r4, [pc, #52]	; (8011764 <__libc_init_array+0x3c>)
 801172e:	1b64      	subs	r4, r4, r5
 8011730:	10a4      	asrs	r4, r4, #2
 8011732:	2600      	movs	r6, #0
 8011734:	42a6      	cmp	r6, r4
 8011736:	d109      	bne.n	801174c <__libc_init_array+0x24>
 8011738:	4d0b      	ldr	r5, [pc, #44]	; (8011768 <__libc_init_array+0x40>)
 801173a:	4c0c      	ldr	r4, [pc, #48]	; (801176c <__libc_init_array+0x44>)
 801173c:	f001 f8f2 	bl	8012924 <_init>
 8011740:	1b64      	subs	r4, r4, r5
 8011742:	10a4      	asrs	r4, r4, #2
 8011744:	2600      	movs	r6, #0
 8011746:	42a6      	cmp	r6, r4
 8011748:	d105      	bne.n	8011756 <__libc_init_array+0x2e>
 801174a:	bd70      	pop	{r4, r5, r6, pc}
 801174c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011750:	4798      	blx	r3
 8011752:	3601      	adds	r6, #1
 8011754:	e7ee      	b.n	8011734 <__libc_init_array+0xc>
 8011756:	f855 3b04 	ldr.w	r3, [r5], #4
 801175a:	4798      	blx	r3
 801175c:	3601      	adds	r6, #1
 801175e:	e7f2      	b.n	8011746 <__libc_init_array+0x1e>
 8011760:	08012ff4 	.word	0x08012ff4
 8011764:	08012ff4 	.word	0x08012ff4
 8011768:	08012ff4 	.word	0x08012ff4
 801176c:	08012ff8 	.word	0x08012ff8

08011770 <memset>:
 8011770:	4402      	add	r2, r0
 8011772:	4603      	mov	r3, r0
 8011774:	4293      	cmp	r3, r2
 8011776:	d100      	bne.n	801177a <memset+0xa>
 8011778:	4770      	bx	lr
 801177a:	f803 1b01 	strb.w	r1, [r3], #1
 801177e:	e7f9      	b.n	8011774 <memset+0x4>

08011780 <iprintf>:
 8011780:	b40f      	push	{r0, r1, r2, r3}
 8011782:	4b0a      	ldr	r3, [pc, #40]	; (80117ac <iprintf+0x2c>)
 8011784:	b513      	push	{r0, r1, r4, lr}
 8011786:	681c      	ldr	r4, [r3, #0]
 8011788:	b124      	cbz	r4, 8011794 <iprintf+0x14>
 801178a:	69a3      	ldr	r3, [r4, #24]
 801178c:	b913      	cbnz	r3, 8011794 <iprintf+0x14>
 801178e:	4620      	mov	r0, r4
 8011790:	f000 fb24 	bl	8011ddc <__sinit>
 8011794:	ab05      	add	r3, sp, #20
 8011796:	9a04      	ldr	r2, [sp, #16]
 8011798:	68a1      	ldr	r1, [r4, #8]
 801179a:	9301      	str	r3, [sp, #4]
 801179c:	4620      	mov	r0, r4
 801179e:	f000 fd35 	bl	801220c <_vfiprintf_r>
 80117a2:	b002      	add	sp, #8
 80117a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117a8:	b004      	add	sp, #16
 80117aa:	4770      	bx	lr
 80117ac:	24000088 	.word	0x24000088

080117b0 <_puts_r>:
 80117b0:	b570      	push	{r4, r5, r6, lr}
 80117b2:	460e      	mov	r6, r1
 80117b4:	4605      	mov	r5, r0
 80117b6:	b118      	cbz	r0, 80117c0 <_puts_r+0x10>
 80117b8:	6983      	ldr	r3, [r0, #24]
 80117ba:	b90b      	cbnz	r3, 80117c0 <_puts_r+0x10>
 80117bc:	f000 fb0e 	bl	8011ddc <__sinit>
 80117c0:	69ab      	ldr	r3, [r5, #24]
 80117c2:	68ac      	ldr	r4, [r5, #8]
 80117c4:	b913      	cbnz	r3, 80117cc <_puts_r+0x1c>
 80117c6:	4628      	mov	r0, r5
 80117c8:	f000 fb08 	bl	8011ddc <__sinit>
 80117cc:	4b2c      	ldr	r3, [pc, #176]	; (8011880 <_puts_r+0xd0>)
 80117ce:	429c      	cmp	r4, r3
 80117d0:	d120      	bne.n	8011814 <_puts_r+0x64>
 80117d2:	686c      	ldr	r4, [r5, #4]
 80117d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117d6:	07db      	lsls	r3, r3, #31
 80117d8:	d405      	bmi.n	80117e6 <_puts_r+0x36>
 80117da:	89a3      	ldrh	r3, [r4, #12]
 80117dc:	0598      	lsls	r0, r3, #22
 80117de:	d402      	bmi.n	80117e6 <_puts_r+0x36>
 80117e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117e2:	f000 fb99 	bl	8011f18 <__retarget_lock_acquire_recursive>
 80117e6:	89a3      	ldrh	r3, [r4, #12]
 80117e8:	0719      	lsls	r1, r3, #28
 80117ea:	d51d      	bpl.n	8011828 <_puts_r+0x78>
 80117ec:	6923      	ldr	r3, [r4, #16]
 80117ee:	b1db      	cbz	r3, 8011828 <_puts_r+0x78>
 80117f0:	3e01      	subs	r6, #1
 80117f2:	68a3      	ldr	r3, [r4, #8]
 80117f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80117f8:	3b01      	subs	r3, #1
 80117fa:	60a3      	str	r3, [r4, #8]
 80117fc:	bb39      	cbnz	r1, 801184e <_puts_r+0x9e>
 80117fe:	2b00      	cmp	r3, #0
 8011800:	da38      	bge.n	8011874 <_puts_r+0xc4>
 8011802:	4622      	mov	r2, r4
 8011804:	210a      	movs	r1, #10
 8011806:	4628      	mov	r0, r5
 8011808:	f000 f90e 	bl	8011a28 <__swbuf_r>
 801180c:	3001      	adds	r0, #1
 801180e:	d011      	beq.n	8011834 <_puts_r+0x84>
 8011810:	250a      	movs	r5, #10
 8011812:	e011      	b.n	8011838 <_puts_r+0x88>
 8011814:	4b1b      	ldr	r3, [pc, #108]	; (8011884 <_puts_r+0xd4>)
 8011816:	429c      	cmp	r4, r3
 8011818:	d101      	bne.n	801181e <_puts_r+0x6e>
 801181a:	68ac      	ldr	r4, [r5, #8]
 801181c:	e7da      	b.n	80117d4 <_puts_r+0x24>
 801181e:	4b1a      	ldr	r3, [pc, #104]	; (8011888 <_puts_r+0xd8>)
 8011820:	429c      	cmp	r4, r3
 8011822:	bf08      	it	eq
 8011824:	68ec      	ldreq	r4, [r5, #12]
 8011826:	e7d5      	b.n	80117d4 <_puts_r+0x24>
 8011828:	4621      	mov	r1, r4
 801182a:	4628      	mov	r0, r5
 801182c:	f000 f94e 	bl	8011acc <__swsetup_r>
 8011830:	2800      	cmp	r0, #0
 8011832:	d0dd      	beq.n	80117f0 <_puts_r+0x40>
 8011834:	f04f 35ff 	mov.w	r5, #4294967295
 8011838:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801183a:	07da      	lsls	r2, r3, #31
 801183c:	d405      	bmi.n	801184a <_puts_r+0x9a>
 801183e:	89a3      	ldrh	r3, [r4, #12]
 8011840:	059b      	lsls	r3, r3, #22
 8011842:	d402      	bmi.n	801184a <_puts_r+0x9a>
 8011844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011846:	f000 fb68 	bl	8011f1a <__retarget_lock_release_recursive>
 801184a:	4628      	mov	r0, r5
 801184c:	bd70      	pop	{r4, r5, r6, pc}
 801184e:	2b00      	cmp	r3, #0
 8011850:	da04      	bge.n	801185c <_puts_r+0xac>
 8011852:	69a2      	ldr	r2, [r4, #24]
 8011854:	429a      	cmp	r2, r3
 8011856:	dc06      	bgt.n	8011866 <_puts_r+0xb6>
 8011858:	290a      	cmp	r1, #10
 801185a:	d004      	beq.n	8011866 <_puts_r+0xb6>
 801185c:	6823      	ldr	r3, [r4, #0]
 801185e:	1c5a      	adds	r2, r3, #1
 8011860:	6022      	str	r2, [r4, #0]
 8011862:	7019      	strb	r1, [r3, #0]
 8011864:	e7c5      	b.n	80117f2 <_puts_r+0x42>
 8011866:	4622      	mov	r2, r4
 8011868:	4628      	mov	r0, r5
 801186a:	f000 f8dd 	bl	8011a28 <__swbuf_r>
 801186e:	3001      	adds	r0, #1
 8011870:	d1bf      	bne.n	80117f2 <_puts_r+0x42>
 8011872:	e7df      	b.n	8011834 <_puts_r+0x84>
 8011874:	6823      	ldr	r3, [r4, #0]
 8011876:	250a      	movs	r5, #10
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	6022      	str	r2, [r4, #0]
 801187c:	701d      	strb	r5, [r3, #0]
 801187e:	e7db      	b.n	8011838 <_puts_r+0x88>
 8011880:	08012f78 	.word	0x08012f78
 8011884:	08012f98 	.word	0x08012f98
 8011888:	08012f58 	.word	0x08012f58

0801188c <puts>:
 801188c:	4b02      	ldr	r3, [pc, #8]	; (8011898 <puts+0xc>)
 801188e:	4601      	mov	r1, r0
 8011890:	6818      	ldr	r0, [r3, #0]
 8011892:	f7ff bf8d 	b.w	80117b0 <_puts_r>
 8011896:	bf00      	nop
 8011898:	24000088 	.word	0x24000088

0801189c <setvbuf>:
 801189c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118a0:	461d      	mov	r5, r3
 80118a2:	4b5d      	ldr	r3, [pc, #372]	; (8011a18 <setvbuf+0x17c>)
 80118a4:	681f      	ldr	r7, [r3, #0]
 80118a6:	4604      	mov	r4, r0
 80118a8:	460e      	mov	r6, r1
 80118aa:	4690      	mov	r8, r2
 80118ac:	b127      	cbz	r7, 80118b8 <setvbuf+0x1c>
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	b913      	cbnz	r3, 80118b8 <setvbuf+0x1c>
 80118b2:	4638      	mov	r0, r7
 80118b4:	f000 fa92 	bl	8011ddc <__sinit>
 80118b8:	4b58      	ldr	r3, [pc, #352]	; (8011a1c <setvbuf+0x180>)
 80118ba:	429c      	cmp	r4, r3
 80118bc:	d167      	bne.n	801198e <setvbuf+0xf2>
 80118be:	687c      	ldr	r4, [r7, #4]
 80118c0:	f1b8 0f02 	cmp.w	r8, #2
 80118c4:	d006      	beq.n	80118d4 <setvbuf+0x38>
 80118c6:	f1b8 0f01 	cmp.w	r8, #1
 80118ca:	f200 809f 	bhi.w	8011a0c <setvbuf+0x170>
 80118ce:	2d00      	cmp	r5, #0
 80118d0:	f2c0 809c 	blt.w	8011a0c <setvbuf+0x170>
 80118d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118d6:	07db      	lsls	r3, r3, #31
 80118d8:	d405      	bmi.n	80118e6 <setvbuf+0x4a>
 80118da:	89a3      	ldrh	r3, [r4, #12]
 80118dc:	0598      	lsls	r0, r3, #22
 80118de:	d402      	bmi.n	80118e6 <setvbuf+0x4a>
 80118e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118e2:	f000 fb19 	bl	8011f18 <__retarget_lock_acquire_recursive>
 80118e6:	4621      	mov	r1, r4
 80118e8:	4638      	mov	r0, r7
 80118ea:	f000 f9e3 	bl	8011cb4 <_fflush_r>
 80118ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118f0:	b141      	cbz	r1, 8011904 <setvbuf+0x68>
 80118f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118f6:	4299      	cmp	r1, r3
 80118f8:	d002      	beq.n	8011900 <setvbuf+0x64>
 80118fa:	4638      	mov	r0, r7
 80118fc:	f000 fb7c 	bl	8011ff8 <_free_r>
 8011900:	2300      	movs	r3, #0
 8011902:	6363      	str	r3, [r4, #52]	; 0x34
 8011904:	2300      	movs	r3, #0
 8011906:	61a3      	str	r3, [r4, #24]
 8011908:	6063      	str	r3, [r4, #4]
 801190a:	89a3      	ldrh	r3, [r4, #12]
 801190c:	0619      	lsls	r1, r3, #24
 801190e:	d503      	bpl.n	8011918 <setvbuf+0x7c>
 8011910:	6921      	ldr	r1, [r4, #16]
 8011912:	4638      	mov	r0, r7
 8011914:	f000 fb70 	bl	8011ff8 <_free_r>
 8011918:	89a3      	ldrh	r3, [r4, #12]
 801191a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801191e:	f023 0303 	bic.w	r3, r3, #3
 8011922:	f1b8 0f02 	cmp.w	r8, #2
 8011926:	81a3      	strh	r3, [r4, #12]
 8011928:	d06c      	beq.n	8011a04 <setvbuf+0x168>
 801192a:	ab01      	add	r3, sp, #4
 801192c:	466a      	mov	r2, sp
 801192e:	4621      	mov	r1, r4
 8011930:	4638      	mov	r0, r7
 8011932:	f000 faf3 	bl	8011f1c <__swhatbuf_r>
 8011936:	89a3      	ldrh	r3, [r4, #12]
 8011938:	4318      	orrs	r0, r3
 801193a:	81a0      	strh	r0, [r4, #12]
 801193c:	2d00      	cmp	r5, #0
 801193e:	d130      	bne.n	80119a2 <setvbuf+0x106>
 8011940:	9d00      	ldr	r5, [sp, #0]
 8011942:	4628      	mov	r0, r5
 8011944:	f000 fb50 	bl	8011fe8 <malloc>
 8011948:	4606      	mov	r6, r0
 801194a:	2800      	cmp	r0, #0
 801194c:	d155      	bne.n	80119fa <setvbuf+0x15e>
 801194e:	f8dd 9000 	ldr.w	r9, [sp]
 8011952:	45a9      	cmp	r9, r5
 8011954:	d14a      	bne.n	80119ec <setvbuf+0x150>
 8011956:	f04f 35ff 	mov.w	r5, #4294967295
 801195a:	2200      	movs	r2, #0
 801195c:	60a2      	str	r2, [r4, #8]
 801195e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8011962:	6022      	str	r2, [r4, #0]
 8011964:	6122      	str	r2, [r4, #16]
 8011966:	2201      	movs	r2, #1
 8011968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801196c:	6162      	str	r2, [r4, #20]
 801196e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011970:	f043 0302 	orr.w	r3, r3, #2
 8011974:	07d2      	lsls	r2, r2, #31
 8011976:	81a3      	strh	r3, [r4, #12]
 8011978:	d405      	bmi.n	8011986 <setvbuf+0xea>
 801197a:	f413 7f00 	tst.w	r3, #512	; 0x200
 801197e:	d102      	bne.n	8011986 <setvbuf+0xea>
 8011980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011982:	f000 faca 	bl	8011f1a <__retarget_lock_release_recursive>
 8011986:	4628      	mov	r0, r5
 8011988:	b003      	add	sp, #12
 801198a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801198e:	4b24      	ldr	r3, [pc, #144]	; (8011a20 <setvbuf+0x184>)
 8011990:	429c      	cmp	r4, r3
 8011992:	d101      	bne.n	8011998 <setvbuf+0xfc>
 8011994:	68bc      	ldr	r4, [r7, #8]
 8011996:	e793      	b.n	80118c0 <setvbuf+0x24>
 8011998:	4b22      	ldr	r3, [pc, #136]	; (8011a24 <setvbuf+0x188>)
 801199a:	429c      	cmp	r4, r3
 801199c:	bf08      	it	eq
 801199e:	68fc      	ldreq	r4, [r7, #12]
 80119a0:	e78e      	b.n	80118c0 <setvbuf+0x24>
 80119a2:	2e00      	cmp	r6, #0
 80119a4:	d0cd      	beq.n	8011942 <setvbuf+0xa6>
 80119a6:	69bb      	ldr	r3, [r7, #24]
 80119a8:	b913      	cbnz	r3, 80119b0 <setvbuf+0x114>
 80119aa:	4638      	mov	r0, r7
 80119ac:	f000 fa16 	bl	8011ddc <__sinit>
 80119b0:	f1b8 0f01 	cmp.w	r8, #1
 80119b4:	bf08      	it	eq
 80119b6:	89a3      	ldrheq	r3, [r4, #12]
 80119b8:	6026      	str	r6, [r4, #0]
 80119ba:	bf04      	itt	eq
 80119bc:	f043 0301 	orreq.w	r3, r3, #1
 80119c0:	81a3      	strheq	r3, [r4, #12]
 80119c2:	89a2      	ldrh	r2, [r4, #12]
 80119c4:	f012 0308 	ands.w	r3, r2, #8
 80119c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80119cc:	d01c      	beq.n	8011a08 <setvbuf+0x16c>
 80119ce:	07d3      	lsls	r3, r2, #31
 80119d0:	bf41      	itttt	mi
 80119d2:	2300      	movmi	r3, #0
 80119d4:	426d      	negmi	r5, r5
 80119d6:	60a3      	strmi	r3, [r4, #8]
 80119d8:	61a5      	strmi	r5, [r4, #24]
 80119da:	bf58      	it	pl
 80119dc:	60a5      	strpl	r5, [r4, #8]
 80119de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80119e0:	f015 0501 	ands.w	r5, r5, #1
 80119e4:	d115      	bne.n	8011a12 <setvbuf+0x176>
 80119e6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80119ea:	e7c8      	b.n	801197e <setvbuf+0xe2>
 80119ec:	4648      	mov	r0, r9
 80119ee:	f000 fafb 	bl	8011fe8 <malloc>
 80119f2:	4606      	mov	r6, r0
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d0ae      	beq.n	8011956 <setvbuf+0xba>
 80119f8:	464d      	mov	r5, r9
 80119fa:	89a3      	ldrh	r3, [r4, #12]
 80119fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a00:	81a3      	strh	r3, [r4, #12]
 8011a02:	e7d0      	b.n	80119a6 <setvbuf+0x10a>
 8011a04:	2500      	movs	r5, #0
 8011a06:	e7a8      	b.n	801195a <setvbuf+0xbe>
 8011a08:	60a3      	str	r3, [r4, #8]
 8011a0a:	e7e8      	b.n	80119de <setvbuf+0x142>
 8011a0c:	f04f 35ff 	mov.w	r5, #4294967295
 8011a10:	e7b9      	b.n	8011986 <setvbuf+0xea>
 8011a12:	2500      	movs	r5, #0
 8011a14:	e7b7      	b.n	8011986 <setvbuf+0xea>
 8011a16:	bf00      	nop
 8011a18:	24000088 	.word	0x24000088
 8011a1c:	08012f78 	.word	0x08012f78
 8011a20:	08012f98 	.word	0x08012f98
 8011a24:	08012f58 	.word	0x08012f58

08011a28 <__swbuf_r>:
 8011a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a2a:	460e      	mov	r6, r1
 8011a2c:	4614      	mov	r4, r2
 8011a2e:	4605      	mov	r5, r0
 8011a30:	b118      	cbz	r0, 8011a3a <__swbuf_r+0x12>
 8011a32:	6983      	ldr	r3, [r0, #24]
 8011a34:	b90b      	cbnz	r3, 8011a3a <__swbuf_r+0x12>
 8011a36:	f000 f9d1 	bl	8011ddc <__sinit>
 8011a3a:	4b21      	ldr	r3, [pc, #132]	; (8011ac0 <__swbuf_r+0x98>)
 8011a3c:	429c      	cmp	r4, r3
 8011a3e:	d12b      	bne.n	8011a98 <__swbuf_r+0x70>
 8011a40:	686c      	ldr	r4, [r5, #4]
 8011a42:	69a3      	ldr	r3, [r4, #24]
 8011a44:	60a3      	str	r3, [r4, #8]
 8011a46:	89a3      	ldrh	r3, [r4, #12]
 8011a48:	071a      	lsls	r2, r3, #28
 8011a4a:	d52f      	bpl.n	8011aac <__swbuf_r+0x84>
 8011a4c:	6923      	ldr	r3, [r4, #16]
 8011a4e:	b36b      	cbz	r3, 8011aac <__swbuf_r+0x84>
 8011a50:	6923      	ldr	r3, [r4, #16]
 8011a52:	6820      	ldr	r0, [r4, #0]
 8011a54:	1ac0      	subs	r0, r0, r3
 8011a56:	6963      	ldr	r3, [r4, #20]
 8011a58:	b2f6      	uxtb	r6, r6
 8011a5a:	4283      	cmp	r3, r0
 8011a5c:	4637      	mov	r7, r6
 8011a5e:	dc04      	bgt.n	8011a6a <__swbuf_r+0x42>
 8011a60:	4621      	mov	r1, r4
 8011a62:	4628      	mov	r0, r5
 8011a64:	f000 f926 	bl	8011cb4 <_fflush_r>
 8011a68:	bb30      	cbnz	r0, 8011ab8 <__swbuf_r+0x90>
 8011a6a:	68a3      	ldr	r3, [r4, #8]
 8011a6c:	3b01      	subs	r3, #1
 8011a6e:	60a3      	str	r3, [r4, #8]
 8011a70:	6823      	ldr	r3, [r4, #0]
 8011a72:	1c5a      	adds	r2, r3, #1
 8011a74:	6022      	str	r2, [r4, #0]
 8011a76:	701e      	strb	r6, [r3, #0]
 8011a78:	6963      	ldr	r3, [r4, #20]
 8011a7a:	3001      	adds	r0, #1
 8011a7c:	4283      	cmp	r3, r0
 8011a7e:	d004      	beq.n	8011a8a <__swbuf_r+0x62>
 8011a80:	89a3      	ldrh	r3, [r4, #12]
 8011a82:	07db      	lsls	r3, r3, #31
 8011a84:	d506      	bpl.n	8011a94 <__swbuf_r+0x6c>
 8011a86:	2e0a      	cmp	r6, #10
 8011a88:	d104      	bne.n	8011a94 <__swbuf_r+0x6c>
 8011a8a:	4621      	mov	r1, r4
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	f000 f911 	bl	8011cb4 <_fflush_r>
 8011a92:	b988      	cbnz	r0, 8011ab8 <__swbuf_r+0x90>
 8011a94:	4638      	mov	r0, r7
 8011a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a98:	4b0a      	ldr	r3, [pc, #40]	; (8011ac4 <__swbuf_r+0x9c>)
 8011a9a:	429c      	cmp	r4, r3
 8011a9c:	d101      	bne.n	8011aa2 <__swbuf_r+0x7a>
 8011a9e:	68ac      	ldr	r4, [r5, #8]
 8011aa0:	e7cf      	b.n	8011a42 <__swbuf_r+0x1a>
 8011aa2:	4b09      	ldr	r3, [pc, #36]	; (8011ac8 <__swbuf_r+0xa0>)
 8011aa4:	429c      	cmp	r4, r3
 8011aa6:	bf08      	it	eq
 8011aa8:	68ec      	ldreq	r4, [r5, #12]
 8011aaa:	e7ca      	b.n	8011a42 <__swbuf_r+0x1a>
 8011aac:	4621      	mov	r1, r4
 8011aae:	4628      	mov	r0, r5
 8011ab0:	f000 f80c 	bl	8011acc <__swsetup_r>
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	d0cb      	beq.n	8011a50 <__swbuf_r+0x28>
 8011ab8:	f04f 37ff 	mov.w	r7, #4294967295
 8011abc:	e7ea      	b.n	8011a94 <__swbuf_r+0x6c>
 8011abe:	bf00      	nop
 8011ac0:	08012f78 	.word	0x08012f78
 8011ac4:	08012f98 	.word	0x08012f98
 8011ac8:	08012f58 	.word	0x08012f58

08011acc <__swsetup_r>:
 8011acc:	4b32      	ldr	r3, [pc, #200]	; (8011b98 <__swsetup_r+0xcc>)
 8011ace:	b570      	push	{r4, r5, r6, lr}
 8011ad0:	681d      	ldr	r5, [r3, #0]
 8011ad2:	4606      	mov	r6, r0
 8011ad4:	460c      	mov	r4, r1
 8011ad6:	b125      	cbz	r5, 8011ae2 <__swsetup_r+0x16>
 8011ad8:	69ab      	ldr	r3, [r5, #24]
 8011ada:	b913      	cbnz	r3, 8011ae2 <__swsetup_r+0x16>
 8011adc:	4628      	mov	r0, r5
 8011ade:	f000 f97d 	bl	8011ddc <__sinit>
 8011ae2:	4b2e      	ldr	r3, [pc, #184]	; (8011b9c <__swsetup_r+0xd0>)
 8011ae4:	429c      	cmp	r4, r3
 8011ae6:	d10f      	bne.n	8011b08 <__swsetup_r+0x3c>
 8011ae8:	686c      	ldr	r4, [r5, #4]
 8011aea:	89a3      	ldrh	r3, [r4, #12]
 8011aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011af0:	0719      	lsls	r1, r3, #28
 8011af2:	d42c      	bmi.n	8011b4e <__swsetup_r+0x82>
 8011af4:	06dd      	lsls	r5, r3, #27
 8011af6:	d411      	bmi.n	8011b1c <__swsetup_r+0x50>
 8011af8:	2309      	movs	r3, #9
 8011afa:	6033      	str	r3, [r6, #0]
 8011afc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b00:	81a3      	strh	r3, [r4, #12]
 8011b02:	f04f 30ff 	mov.w	r0, #4294967295
 8011b06:	e03e      	b.n	8011b86 <__swsetup_r+0xba>
 8011b08:	4b25      	ldr	r3, [pc, #148]	; (8011ba0 <__swsetup_r+0xd4>)
 8011b0a:	429c      	cmp	r4, r3
 8011b0c:	d101      	bne.n	8011b12 <__swsetup_r+0x46>
 8011b0e:	68ac      	ldr	r4, [r5, #8]
 8011b10:	e7eb      	b.n	8011aea <__swsetup_r+0x1e>
 8011b12:	4b24      	ldr	r3, [pc, #144]	; (8011ba4 <__swsetup_r+0xd8>)
 8011b14:	429c      	cmp	r4, r3
 8011b16:	bf08      	it	eq
 8011b18:	68ec      	ldreq	r4, [r5, #12]
 8011b1a:	e7e6      	b.n	8011aea <__swsetup_r+0x1e>
 8011b1c:	0758      	lsls	r0, r3, #29
 8011b1e:	d512      	bpl.n	8011b46 <__swsetup_r+0x7a>
 8011b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b22:	b141      	cbz	r1, 8011b36 <__swsetup_r+0x6a>
 8011b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b28:	4299      	cmp	r1, r3
 8011b2a:	d002      	beq.n	8011b32 <__swsetup_r+0x66>
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	f000 fa63 	bl	8011ff8 <_free_r>
 8011b32:	2300      	movs	r3, #0
 8011b34:	6363      	str	r3, [r4, #52]	; 0x34
 8011b36:	89a3      	ldrh	r3, [r4, #12]
 8011b38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b3c:	81a3      	strh	r3, [r4, #12]
 8011b3e:	2300      	movs	r3, #0
 8011b40:	6063      	str	r3, [r4, #4]
 8011b42:	6923      	ldr	r3, [r4, #16]
 8011b44:	6023      	str	r3, [r4, #0]
 8011b46:	89a3      	ldrh	r3, [r4, #12]
 8011b48:	f043 0308 	orr.w	r3, r3, #8
 8011b4c:	81a3      	strh	r3, [r4, #12]
 8011b4e:	6923      	ldr	r3, [r4, #16]
 8011b50:	b94b      	cbnz	r3, 8011b66 <__swsetup_r+0x9a>
 8011b52:	89a3      	ldrh	r3, [r4, #12]
 8011b54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b5c:	d003      	beq.n	8011b66 <__swsetup_r+0x9a>
 8011b5e:	4621      	mov	r1, r4
 8011b60:	4630      	mov	r0, r6
 8011b62:	f000 fa01 	bl	8011f68 <__smakebuf_r>
 8011b66:	89a0      	ldrh	r0, [r4, #12]
 8011b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b6c:	f010 0301 	ands.w	r3, r0, #1
 8011b70:	d00a      	beq.n	8011b88 <__swsetup_r+0xbc>
 8011b72:	2300      	movs	r3, #0
 8011b74:	60a3      	str	r3, [r4, #8]
 8011b76:	6963      	ldr	r3, [r4, #20]
 8011b78:	425b      	negs	r3, r3
 8011b7a:	61a3      	str	r3, [r4, #24]
 8011b7c:	6923      	ldr	r3, [r4, #16]
 8011b7e:	b943      	cbnz	r3, 8011b92 <__swsetup_r+0xc6>
 8011b80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b84:	d1ba      	bne.n	8011afc <__swsetup_r+0x30>
 8011b86:	bd70      	pop	{r4, r5, r6, pc}
 8011b88:	0781      	lsls	r1, r0, #30
 8011b8a:	bf58      	it	pl
 8011b8c:	6963      	ldrpl	r3, [r4, #20]
 8011b8e:	60a3      	str	r3, [r4, #8]
 8011b90:	e7f4      	b.n	8011b7c <__swsetup_r+0xb0>
 8011b92:	2000      	movs	r0, #0
 8011b94:	e7f7      	b.n	8011b86 <__swsetup_r+0xba>
 8011b96:	bf00      	nop
 8011b98:	24000088 	.word	0x24000088
 8011b9c:	08012f78 	.word	0x08012f78
 8011ba0:	08012f98 	.word	0x08012f98
 8011ba4:	08012f58 	.word	0x08012f58

08011ba8 <__sflush_r>:
 8011ba8:	898a      	ldrh	r2, [r1, #12]
 8011baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bae:	4605      	mov	r5, r0
 8011bb0:	0710      	lsls	r0, r2, #28
 8011bb2:	460c      	mov	r4, r1
 8011bb4:	d458      	bmi.n	8011c68 <__sflush_r+0xc0>
 8011bb6:	684b      	ldr	r3, [r1, #4]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	dc05      	bgt.n	8011bc8 <__sflush_r+0x20>
 8011bbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	dc02      	bgt.n	8011bc8 <__sflush_r+0x20>
 8011bc2:	2000      	movs	r0, #0
 8011bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bca:	2e00      	cmp	r6, #0
 8011bcc:	d0f9      	beq.n	8011bc2 <__sflush_r+0x1a>
 8011bce:	2300      	movs	r3, #0
 8011bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bd4:	682f      	ldr	r7, [r5, #0]
 8011bd6:	602b      	str	r3, [r5, #0]
 8011bd8:	d032      	beq.n	8011c40 <__sflush_r+0x98>
 8011bda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011bdc:	89a3      	ldrh	r3, [r4, #12]
 8011bde:	075a      	lsls	r2, r3, #29
 8011be0:	d505      	bpl.n	8011bee <__sflush_r+0x46>
 8011be2:	6863      	ldr	r3, [r4, #4]
 8011be4:	1ac0      	subs	r0, r0, r3
 8011be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011be8:	b10b      	cbz	r3, 8011bee <__sflush_r+0x46>
 8011bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011bec:	1ac0      	subs	r0, r0, r3
 8011bee:	2300      	movs	r3, #0
 8011bf0:	4602      	mov	r2, r0
 8011bf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bf4:	6a21      	ldr	r1, [r4, #32]
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	47b0      	blx	r6
 8011bfa:	1c43      	adds	r3, r0, #1
 8011bfc:	89a3      	ldrh	r3, [r4, #12]
 8011bfe:	d106      	bne.n	8011c0e <__sflush_r+0x66>
 8011c00:	6829      	ldr	r1, [r5, #0]
 8011c02:	291d      	cmp	r1, #29
 8011c04:	d82c      	bhi.n	8011c60 <__sflush_r+0xb8>
 8011c06:	4a2a      	ldr	r2, [pc, #168]	; (8011cb0 <__sflush_r+0x108>)
 8011c08:	40ca      	lsrs	r2, r1
 8011c0a:	07d6      	lsls	r6, r2, #31
 8011c0c:	d528      	bpl.n	8011c60 <__sflush_r+0xb8>
 8011c0e:	2200      	movs	r2, #0
 8011c10:	6062      	str	r2, [r4, #4]
 8011c12:	04d9      	lsls	r1, r3, #19
 8011c14:	6922      	ldr	r2, [r4, #16]
 8011c16:	6022      	str	r2, [r4, #0]
 8011c18:	d504      	bpl.n	8011c24 <__sflush_r+0x7c>
 8011c1a:	1c42      	adds	r2, r0, #1
 8011c1c:	d101      	bne.n	8011c22 <__sflush_r+0x7a>
 8011c1e:	682b      	ldr	r3, [r5, #0]
 8011c20:	b903      	cbnz	r3, 8011c24 <__sflush_r+0x7c>
 8011c22:	6560      	str	r0, [r4, #84]	; 0x54
 8011c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c26:	602f      	str	r7, [r5, #0]
 8011c28:	2900      	cmp	r1, #0
 8011c2a:	d0ca      	beq.n	8011bc2 <__sflush_r+0x1a>
 8011c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c30:	4299      	cmp	r1, r3
 8011c32:	d002      	beq.n	8011c3a <__sflush_r+0x92>
 8011c34:	4628      	mov	r0, r5
 8011c36:	f000 f9df 	bl	8011ff8 <_free_r>
 8011c3a:	2000      	movs	r0, #0
 8011c3c:	6360      	str	r0, [r4, #52]	; 0x34
 8011c3e:	e7c1      	b.n	8011bc4 <__sflush_r+0x1c>
 8011c40:	6a21      	ldr	r1, [r4, #32]
 8011c42:	2301      	movs	r3, #1
 8011c44:	4628      	mov	r0, r5
 8011c46:	47b0      	blx	r6
 8011c48:	1c41      	adds	r1, r0, #1
 8011c4a:	d1c7      	bne.n	8011bdc <__sflush_r+0x34>
 8011c4c:	682b      	ldr	r3, [r5, #0]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d0c4      	beq.n	8011bdc <__sflush_r+0x34>
 8011c52:	2b1d      	cmp	r3, #29
 8011c54:	d001      	beq.n	8011c5a <__sflush_r+0xb2>
 8011c56:	2b16      	cmp	r3, #22
 8011c58:	d101      	bne.n	8011c5e <__sflush_r+0xb6>
 8011c5a:	602f      	str	r7, [r5, #0]
 8011c5c:	e7b1      	b.n	8011bc2 <__sflush_r+0x1a>
 8011c5e:	89a3      	ldrh	r3, [r4, #12]
 8011c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c64:	81a3      	strh	r3, [r4, #12]
 8011c66:	e7ad      	b.n	8011bc4 <__sflush_r+0x1c>
 8011c68:	690f      	ldr	r7, [r1, #16]
 8011c6a:	2f00      	cmp	r7, #0
 8011c6c:	d0a9      	beq.n	8011bc2 <__sflush_r+0x1a>
 8011c6e:	0793      	lsls	r3, r2, #30
 8011c70:	680e      	ldr	r6, [r1, #0]
 8011c72:	bf08      	it	eq
 8011c74:	694b      	ldreq	r3, [r1, #20]
 8011c76:	600f      	str	r7, [r1, #0]
 8011c78:	bf18      	it	ne
 8011c7a:	2300      	movne	r3, #0
 8011c7c:	eba6 0807 	sub.w	r8, r6, r7
 8011c80:	608b      	str	r3, [r1, #8]
 8011c82:	f1b8 0f00 	cmp.w	r8, #0
 8011c86:	dd9c      	ble.n	8011bc2 <__sflush_r+0x1a>
 8011c88:	6a21      	ldr	r1, [r4, #32]
 8011c8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c8c:	4643      	mov	r3, r8
 8011c8e:	463a      	mov	r2, r7
 8011c90:	4628      	mov	r0, r5
 8011c92:	47b0      	blx	r6
 8011c94:	2800      	cmp	r0, #0
 8011c96:	dc06      	bgt.n	8011ca6 <__sflush_r+0xfe>
 8011c98:	89a3      	ldrh	r3, [r4, #12]
 8011c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c9e:	81a3      	strh	r3, [r4, #12]
 8011ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca4:	e78e      	b.n	8011bc4 <__sflush_r+0x1c>
 8011ca6:	4407      	add	r7, r0
 8011ca8:	eba8 0800 	sub.w	r8, r8, r0
 8011cac:	e7e9      	b.n	8011c82 <__sflush_r+0xda>
 8011cae:	bf00      	nop
 8011cb0:	20400001 	.word	0x20400001

08011cb4 <_fflush_r>:
 8011cb4:	b538      	push	{r3, r4, r5, lr}
 8011cb6:	690b      	ldr	r3, [r1, #16]
 8011cb8:	4605      	mov	r5, r0
 8011cba:	460c      	mov	r4, r1
 8011cbc:	b913      	cbnz	r3, 8011cc4 <_fflush_r+0x10>
 8011cbe:	2500      	movs	r5, #0
 8011cc0:	4628      	mov	r0, r5
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	b118      	cbz	r0, 8011cce <_fflush_r+0x1a>
 8011cc6:	6983      	ldr	r3, [r0, #24]
 8011cc8:	b90b      	cbnz	r3, 8011cce <_fflush_r+0x1a>
 8011cca:	f000 f887 	bl	8011ddc <__sinit>
 8011cce:	4b14      	ldr	r3, [pc, #80]	; (8011d20 <_fflush_r+0x6c>)
 8011cd0:	429c      	cmp	r4, r3
 8011cd2:	d11b      	bne.n	8011d0c <_fflush_r+0x58>
 8011cd4:	686c      	ldr	r4, [r5, #4]
 8011cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d0ef      	beq.n	8011cbe <_fflush_r+0xa>
 8011cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ce0:	07d0      	lsls	r0, r2, #31
 8011ce2:	d404      	bmi.n	8011cee <_fflush_r+0x3a>
 8011ce4:	0599      	lsls	r1, r3, #22
 8011ce6:	d402      	bmi.n	8011cee <_fflush_r+0x3a>
 8011ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cea:	f000 f915 	bl	8011f18 <__retarget_lock_acquire_recursive>
 8011cee:	4628      	mov	r0, r5
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	f7ff ff59 	bl	8011ba8 <__sflush_r>
 8011cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cf8:	07da      	lsls	r2, r3, #31
 8011cfa:	4605      	mov	r5, r0
 8011cfc:	d4e0      	bmi.n	8011cc0 <_fflush_r+0xc>
 8011cfe:	89a3      	ldrh	r3, [r4, #12]
 8011d00:	059b      	lsls	r3, r3, #22
 8011d02:	d4dd      	bmi.n	8011cc0 <_fflush_r+0xc>
 8011d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d06:	f000 f908 	bl	8011f1a <__retarget_lock_release_recursive>
 8011d0a:	e7d9      	b.n	8011cc0 <_fflush_r+0xc>
 8011d0c:	4b05      	ldr	r3, [pc, #20]	; (8011d24 <_fflush_r+0x70>)
 8011d0e:	429c      	cmp	r4, r3
 8011d10:	d101      	bne.n	8011d16 <_fflush_r+0x62>
 8011d12:	68ac      	ldr	r4, [r5, #8]
 8011d14:	e7df      	b.n	8011cd6 <_fflush_r+0x22>
 8011d16:	4b04      	ldr	r3, [pc, #16]	; (8011d28 <_fflush_r+0x74>)
 8011d18:	429c      	cmp	r4, r3
 8011d1a:	bf08      	it	eq
 8011d1c:	68ec      	ldreq	r4, [r5, #12]
 8011d1e:	e7da      	b.n	8011cd6 <_fflush_r+0x22>
 8011d20:	08012f78 	.word	0x08012f78
 8011d24:	08012f98 	.word	0x08012f98
 8011d28:	08012f58 	.word	0x08012f58

08011d2c <std>:
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	b510      	push	{r4, lr}
 8011d30:	4604      	mov	r4, r0
 8011d32:	e9c0 3300 	strd	r3, r3, [r0]
 8011d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d3a:	6083      	str	r3, [r0, #8]
 8011d3c:	8181      	strh	r1, [r0, #12]
 8011d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8011d40:	81c2      	strh	r2, [r0, #14]
 8011d42:	6183      	str	r3, [r0, #24]
 8011d44:	4619      	mov	r1, r3
 8011d46:	2208      	movs	r2, #8
 8011d48:	305c      	adds	r0, #92	; 0x5c
 8011d4a:	f7ff fd11 	bl	8011770 <memset>
 8011d4e:	4b05      	ldr	r3, [pc, #20]	; (8011d64 <std+0x38>)
 8011d50:	6263      	str	r3, [r4, #36]	; 0x24
 8011d52:	4b05      	ldr	r3, [pc, #20]	; (8011d68 <std+0x3c>)
 8011d54:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d56:	4b05      	ldr	r3, [pc, #20]	; (8011d6c <std+0x40>)
 8011d58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d5a:	4b05      	ldr	r3, [pc, #20]	; (8011d70 <std+0x44>)
 8011d5c:	6224      	str	r4, [r4, #32]
 8011d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8011d60:	bd10      	pop	{r4, pc}
 8011d62:	bf00      	nop
 8011d64:	080127b5 	.word	0x080127b5
 8011d68:	080127d7 	.word	0x080127d7
 8011d6c:	0801280f 	.word	0x0801280f
 8011d70:	08012833 	.word	0x08012833

08011d74 <_cleanup_r>:
 8011d74:	4901      	ldr	r1, [pc, #4]	; (8011d7c <_cleanup_r+0x8>)
 8011d76:	f000 b8af 	b.w	8011ed8 <_fwalk_reent>
 8011d7a:	bf00      	nop
 8011d7c:	08011cb5 	.word	0x08011cb5

08011d80 <__sfmoreglue>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	2268      	movs	r2, #104	; 0x68
 8011d84:	1e4d      	subs	r5, r1, #1
 8011d86:	4355      	muls	r5, r2
 8011d88:	460e      	mov	r6, r1
 8011d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d8e:	f000 f99f 	bl	80120d0 <_malloc_r>
 8011d92:	4604      	mov	r4, r0
 8011d94:	b140      	cbz	r0, 8011da8 <__sfmoreglue+0x28>
 8011d96:	2100      	movs	r1, #0
 8011d98:	e9c0 1600 	strd	r1, r6, [r0]
 8011d9c:	300c      	adds	r0, #12
 8011d9e:	60a0      	str	r0, [r4, #8]
 8011da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011da4:	f7ff fce4 	bl	8011770 <memset>
 8011da8:	4620      	mov	r0, r4
 8011daa:	bd70      	pop	{r4, r5, r6, pc}

08011dac <__sfp_lock_acquire>:
 8011dac:	4801      	ldr	r0, [pc, #4]	; (8011db4 <__sfp_lock_acquire+0x8>)
 8011dae:	f000 b8b3 	b.w	8011f18 <__retarget_lock_acquire_recursive>
 8011db2:	bf00      	nop
 8011db4:	240011e1 	.word	0x240011e1

08011db8 <__sfp_lock_release>:
 8011db8:	4801      	ldr	r0, [pc, #4]	; (8011dc0 <__sfp_lock_release+0x8>)
 8011dba:	f000 b8ae 	b.w	8011f1a <__retarget_lock_release_recursive>
 8011dbe:	bf00      	nop
 8011dc0:	240011e1 	.word	0x240011e1

08011dc4 <__sinit_lock_acquire>:
 8011dc4:	4801      	ldr	r0, [pc, #4]	; (8011dcc <__sinit_lock_acquire+0x8>)
 8011dc6:	f000 b8a7 	b.w	8011f18 <__retarget_lock_acquire_recursive>
 8011dca:	bf00      	nop
 8011dcc:	240011e2 	.word	0x240011e2

08011dd0 <__sinit_lock_release>:
 8011dd0:	4801      	ldr	r0, [pc, #4]	; (8011dd8 <__sinit_lock_release+0x8>)
 8011dd2:	f000 b8a2 	b.w	8011f1a <__retarget_lock_release_recursive>
 8011dd6:	bf00      	nop
 8011dd8:	240011e2 	.word	0x240011e2

08011ddc <__sinit>:
 8011ddc:	b510      	push	{r4, lr}
 8011dde:	4604      	mov	r4, r0
 8011de0:	f7ff fff0 	bl	8011dc4 <__sinit_lock_acquire>
 8011de4:	69a3      	ldr	r3, [r4, #24]
 8011de6:	b11b      	cbz	r3, 8011df0 <__sinit+0x14>
 8011de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dec:	f7ff bff0 	b.w	8011dd0 <__sinit_lock_release>
 8011df0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011df4:	6523      	str	r3, [r4, #80]	; 0x50
 8011df6:	4b13      	ldr	r3, [pc, #76]	; (8011e44 <__sinit+0x68>)
 8011df8:	4a13      	ldr	r2, [pc, #76]	; (8011e48 <__sinit+0x6c>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8011dfe:	42a3      	cmp	r3, r4
 8011e00:	bf04      	itt	eq
 8011e02:	2301      	moveq	r3, #1
 8011e04:	61a3      	streq	r3, [r4, #24]
 8011e06:	4620      	mov	r0, r4
 8011e08:	f000 f820 	bl	8011e4c <__sfp>
 8011e0c:	6060      	str	r0, [r4, #4]
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f000 f81c 	bl	8011e4c <__sfp>
 8011e14:	60a0      	str	r0, [r4, #8]
 8011e16:	4620      	mov	r0, r4
 8011e18:	f000 f818 	bl	8011e4c <__sfp>
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	60e0      	str	r0, [r4, #12]
 8011e20:	2104      	movs	r1, #4
 8011e22:	6860      	ldr	r0, [r4, #4]
 8011e24:	f7ff ff82 	bl	8011d2c <std>
 8011e28:	68a0      	ldr	r0, [r4, #8]
 8011e2a:	2201      	movs	r2, #1
 8011e2c:	2109      	movs	r1, #9
 8011e2e:	f7ff ff7d 	bl	8011d2c <std>
 8011e32:	68e0      	ldr	r0, [r4, #12]
 8011e34:	2202      	movs	r2, #2
 8011e36:	2112      	movs	r1, #18
 8011e38:	f7ff ff78 	bl	8011d2c <std>
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	61a3      	str	r3, [r4, #24]
 8011e40:	e7d2      	b.n	8011de8 <__sinit+0xc>
 8011e42:	bf00      	nop
 8011e44:	08012f54 	.word	0x08012f54
 8011e48:	08011d75 	.word	0x08011d75

08011e4c <__sfp>:
 8011e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e4e:	4607      	mov	r7, r0
 8011e50:	f7ff ffac 	bl	8011dac <__sfp_lock_acquire>
 8011e54:	4b1e      	ldr	r3, [pc, #120]	; (8011ed0 <__sfp+0x84>)
 8011e56:	681e      	ldr	r6, [r3, #0]
 8011e58:	69b3      	ldr	r3, [r6, #24]
 8011e5a:	b913      	cbnz	r3, 8011e62 <__sfp+0x16>
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f7ff ffbd 	bl	8011ddc <__sinit>
 8011e62:	3648      	adds	r6, #72	; 0x48
 8011e64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	d503      	bpl.n	8011e74 <__sfp+0x28>
 8011e6c:	6833      	ldr	r3, [r6, #0]
 8011e6e:	b30b      	cbz	r3, 8011eb4 <__sfp+0x68>
 8011e70:	6836      	ldr	r6, [r6, #0]
 8011e72:	e7f7      	b.n	8011e64 <__sfp+0x18>
 8011e74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e78:	b9d5      	cbnz	r5, 8011eb0 <__sfp+0x64>
 8011e7a:	4b16      	ldr	r3, [pc, #88]	; (8011ed4 <__sfp+0x88>)
 8011e7c:	60e3      	str	r3, [r4, #12]
 8011e7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e82:	6665      	str	r5, [r4, #100]	; 0x64
 8011e84:	f000 f847 	bl	8011f16 <__retarget_lock_init_recursive>
 8011e88:	f7ff ff96 	bl	8011db8 <__sfp_lock_release>
 8011e8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e94:	6025      	str	r5, [r4, #0]
 8011e96:	61a5      	str	r5, [r4, #24]
 8011e98:	2208      	movs	r2, #8
 8011e9a:	4629      	mov	r1, r5
 8011e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ea0:	f7ff fc66 	bl	8011770 <memset>
 8011ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011eac:	4620      	mov	r0, r4
 8011eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eb0:	3468      	adds	r4, #104	; 0x68
 8011eb2:	e7d9      	b.n	8011e68 <__sfp+0x1c>
 8011eb4:	2104      	movs	r1, #4
 8011eb6:	4638      	mov	r0, r7
 8011eb8:	f7ff ff62 	bl	8011d80 <__sfmoreglue>
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	6030      	str	r0, [r6, #0]
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	d1d5      	bne.n	8011e70 <__sfp+0x24>
 8011ec4:	f7ff ff78 	bl	8011db8 <__sfp_lock_release>
 8011ec8:	230c      	movs	r3, #12
 8011eca:	603b      	str	r3, [r7, #0]
 8011ecc:	e7ee      	b.n	8011eac <__sfp+0x60>
 8011ece:	bf00      	nop
 8011ed0:	08012f54 	.word	0x08012f54
 8011ed4:	ffff0001 	.word	0xffff0001

08011ed8 <_fwalk_reent>:
 8011ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011edc:	4606      	mov	r6, r0
 8011ede:	4688      	mov	r8, r1
 8011ee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ee4:	2700      	movs	r7, #0
 8011ee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011eea:	f1b9 0901 	subs.w	r9, r9, #1
 8011eee:	d505      	bpl.n	8011efc <_fwalk_reent+0x24>
 8011ef0:	6824      	ldr	r4, [r4, #0]
 8011ef2:	2c00      	cmp	r4, #0
 8011ef4:	d1f7      	bne.n	8011ee6 <_fwalk_reent+0xe>
 8011ef6:	4638      	mov	r0, r7
 8011ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011efc:	89ab      	ldrh	r3, [r5, #12]
 8011efe:	2b01      	cmp	r3, #1
 8011f00:	d907      	bls.n	8011f12 <_fwalk_reent+0x3a>
 8011f02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f06:	3301      	adds	r3, #1
 8011f08:	d003      	beq.n	8011f12 <_fwalk_reent+0x3a>
 8011f0a:	4629      	mov	r1, r5
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	47c0      	blx	r8
 8011f10:	4307      	orrs	r7, r0
 8011f12:	3568      	adds	r5, #104	; 0x68
 8011f14:	e7e9      	b.n	8011eea <_fwalk_reent+0x12>

08011f16 <__retarget_lock_init_recursive>:
 8011f16:	4770      	bx	lr

08011f18 <__retarget_lock_acquire_recursive>:
 8011f18:	4770      	bx	lr

08011f1a <__retarget_lock_release_recursive>:
 8011f1a:	4770      	bx	lr

08011f1c <__swhatbuf_r>:
 8011f1c:	b570      	push	{r4, r5, r6, lr}
 8011f1e:	460e      	mov	r6, r1
 8011f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f24:	2900      	cmp	r1, #0
 8011f26:	b096      	sub	sp, #88	; 0x58
 8011f28:	4614      	mov	r4, r2
 8011f2a:	461d      	mov	r5, r3
 8011f2c:	da08      	bge.n	8011f40 <__swhatbuf_r+0x24>
 8011f2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011f32:	2200      	movs	r2, #0
 8011f34:	602a      	str	r2, [r5, #0]
 8011f36:	061a      	lsls	r2, r3, #24
 8011f38:	d410      	bmi.n	8011f5c <__swhatbuf_r+0x40>
 8011f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f3e:	e00e      	b.n	8011f5e <__swhatbuf_r+0x42>
 8011f40:	466a      	mov	r2, sp
 8011f42:	f000 fc9d 	bl	8012880 <_fstat_r>
 8011f46:	2800      	cmp	r0, #0
 8011f48:	dbf1      	blt.n	8011f2e <__swhatbuf_r+0x12>
 8011f4a:	9a01      	ldr	r2, [sp, #4]
 8011f4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f54:	425a      	negs	r2, r3
 8011f56:	415a      	adcs	r2, r3
 8011f58:	602a      	str	r2, [r5, #0]
 8011f5a:	e7ee      	b.n	8011f3a <__swhatbuf_r+0x1e>
 8011f5c:	2340      	movs	r3, #64	; 0x40
 8011f5e:	2000      	movs	r0, #0
 8011f60:	6023      	str	r3, [r4, #0]
 8011f62:	b016      	add	sp, #88	; 0x58
 8011f64:	bd70      	pop	{r4, r5, r6, pc}
	...

08011f68 <__smakebuf_r>:
 8011f68:	898b      	ldrh	r3, [r1, #12]
 8011f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f6c:	079d      	lsls	r5, r3, #30
 8011f6e:	4606      	mov	r6, r0
 8011f70:	460c      	mov	r4, r1
 8011f72:	d507      	bpl.n	8011f84 <__smakebuf_r+0x1c>
 8011f74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f78:	6023      	str	r3, [r4, #0]
 8011f7a:	6123      	str	r3, [r4, #16]
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	6163      	str	r3, [r4, #20]
 8011f80:	b002      	add	sp, #8
 8011f82:	bd70      	pop	{r4, r5, r6, pc}
 8011f84:	ab01      	add	r3, sp, #4
 8011f86:	466a      	mov	r2, sp
 8011f88:	f7ff ffc8 	bl	8011f1c <__swhatbuf_r>
 8011f8c:	9900      	ldr	r1, [sp, #0]
 8011f8e:	4605      	mov	r5, r0
 8011f90:	4630      	mov	r0, r6
 8011f92:	f000 f89d 	bl	80120d0 <_malloc_r>
 8011f96:	b948      	cbnz	r0, 8011fac <__smakebuf_r+0x44>
 8011f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f9c:	059a      	lsls	r2, r3, #22
 8011f9e:	d4ef      	bmi.n	8011f80 <__smakebuf_r+0x18>
 8011fa0:	f023 0303 	bic.w	r3, r3, #3
 8011fa4:	f043 0302 	orr.w	r3, r3, #2
 8011fa8:	81a3      	strh	r3, [r4, #12]
 8011faa:	e7e3      	b.n	8011f74 <__smakebuf_r+0xc>
 8011fac:	4b0d      	ldr	r3, [pc, #52]	; (8011fe4 <__smakebuf_r+0x7c>)
 8011fae:	62b3      	str	r3, [r6, #40]	; 0x28
 8011fb0:	89a3      	ldrh	r3, [r4, #12]
 8011fb2:	6020      	str	r0, [r4, #0]
 8011fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fb8:	81a3      	strh	r3, [r4, #12]
 8011fba:	9b00      	ldr	r3, [sp, #0]
 8011fbc:	6163      	str	r3, [r4, #20]
 8011fbe:	9b01      	ldr	r3, [sp, #4]
 8011fc0:	6120      	str	r0, [r4, #16]
 8011fc2:	b15b      	cbz	r3, 8011fdc <__smakebuf_r+0x74>
 8011fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fc8:	4630      	mov	r0, r6
 8011fca:	f000 fc6b 	bl	80128a4 <_isatty_r>
 8011fce:	b128      	cbz	r0, 8011fdc <__smakebuf_r+0x74>
 8011fd0:	89a3      	ldrh	r3, [r4, #12]
 8011fd2:	f023 0303 	bic.w	r3, r3, #3
 8011fd6:	f043 0301 	orr.w	r3, r3, #1
 8011fda:	81a3      	strh	r3, [r4, #12]
 8011fdc:	89a0      	ldrh	r0, [r4, #12]
 8011fde:	4305      	orrs	r5, r0
 8011fe0:	81a5      	strh	r5, [r4, #12]
 8011fe2:	e7cd      	b.n	8011f80 <__smakebuf_r+0x18>
 8011fe4:	08011d75 	.word	0x08011d75

08011fe8 <malloc>:
 8011fe8:	4b02      	ldr	r3, [pc, #8]	; (8011ff4 <malloc+0xc>)
 8011fea:	4601      	mov	r1, r0
 8011fec:	6818      	ldr	r0, [r3, #0]
 8011fee:	f000 b86f 	b.w	80120d0 <_malloc_r>
 8011ff2:	bf00      	nop
 8011ff4:	24000088 	.word	0x24000088

08011ff8 <_free_r>:
 8011ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ffa:	2900      	cmp	r1, #0
 8011ffc:	d044      	beq.n	8012088 <_free_r+0x90>
 8011ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012002:	9001      	str	r0, [sp, #4]
 8012004:	2b00      	cmp	r3, #0
 8012006:	f1a1 0404 	sub.w	r4, r1, #4
 801200a:	bfb8      	it	lt
 801200c:	18e4      	addlt	r4, r4, r3
 801200e:	f000 fc6b 	bl	80128e8 <__malloc_lock>
 8012012:	4a1e      	ldr	r2, [pc, #120]	; (801208c <_free_r+0x94>)
 8012014:	9801      	ldr	r0, [sp, #4]
 8012016:	6813      	ldr	r3, [r2, #0]
 8012018:	b933      	cbnz	r3, 8012028 <_free_r+0x30>
 801201a:	6063      	str	r3, [r4, #4]
 801201c:	6014      	str	r4, [r2, #0]
 801201e:	b003      	add	sp, #12
 8012020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012024:	f000 bc66 	b.w	80128f4 <__malloc_unlock>
 8012028:	42a3      	cmp	r3, r4
 801202a:	d908      	bls.n	801203e <_free_r+0x46>
 801202c:	6825      	ldr	r5, [r4, #0]
 801202e:	1961      	adds	r1, r4, r5
 8012030:	428b      	cmp	r3, r1
 8012032:	bf01      	itttt	eq
 8012034:	6819      	ldreq	r1, [r3, #0]
 8012036:	685b      	ldreq	r3, [r3, #4]
 8012038:	1949      	addeq	r1, r1, r5
 801203a:	6021      	streq	r1, [r4, #0]
 801203c:	e7ed      	b.n	801201a <_free_r+0x22>
 801203e:	461a      	mov	r2, r3
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	b10b      	cbz	r3, 8012048 <_free_r+0x50>
 8012044:	42a3      	cmp	r3, r4
 8012046:	d9fa      	bls.n	801203e <_free_r+0x46>
 8012048:	6811      	ldr	r1, [r2, #0]
 801204a:	1855      	adds	r5, r2, r1
 801204c:	42a5      	cmp	r5, r4
 801204e:	d10b      	bne.n	8012068 <_free_r+0x70>
 8012050:	6824      	ldr	r4, [r4, #0]
 8012052:	4421      	add	r1, r4
 8012054:	1854      	adds	r4, r2, r1
 8012056:	42a3      	cmp	r3, r4
 8012058:	6011      	str	r1, [r2, #0]
 801205a:	d1e0      	bne.n	801201e <_free_r+0x26>
 801205c:	681c      	ldr	r4, [r3, #0]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	6053      	str	r3, [r2, #4]
 8012062:	4421      	add	r1, r4
 8012064:	6011      	str	r1, [r2, #0]
 8012066:	e7da      	b.n	801201e <_free_r+0x26>
 8012068:	d902      	bls.n	8012070 <_free_r+0x78>
 801206a:	230c      	movs	r3, #12
 801206c:	6003      	str	r3, [r0, #0]
 801206e:	e7d6      	b.n	801201e <_free_r+0x26>
 8012070:	6825      	ldr	r5, [r4, #0]
 8012072:	1961      	adds	r1, r4, r5
 8012074:	428b      	cmp	r3, r1
 8012076:	bf04      	itt	eq
 8012078:	6819      	ldreq	r1, [r3, #0]
 801207a:	685b      	ldreq	r3, [r3, #4]
 801207c:	6063      	str	r3, [r4, #4]
 801207e:	bf04      	itt	eq
 8012080:	1949      	addeq	r1, r1, r5
 8012082:	6021      	streq	r1, [r4, #0]
 8012084:	6054      	str	r4, [r2, #4]
 8012086:	e7ca      	b.n	801201e <_free_r+0x26>
 8012088:	b003      	add	sp, #12
 801208a:	bd30      	pop	{r4, r5, pc}
 801208c:	240011e4 	.word	0x240011e4

08012090 <sbrk_aligned>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	4e0e      	ldr	r6, [pc, #56]	; (80120cc <sbrk_aligned+0x3c>)
 8012094:	460c      	mov	r4, r1
 8012096:	6831      	ldr	r1, [r6, #0]
 8012098:	4605      	mov	r5, r0
 801209a:	b911      	cbnz	r1, 80120a2 <sbrk_aligned+0x12>
 801209c:	f000 fb7a 	bl	8012794 <_sbrk_r>
 80120a0:	6030      	str	r0, [r6, #0]
 80120a2:	4621      	mov	r1, r4
 80120a4:	4628      	mov	r0, r5
 80120a6:	f000 fb75 	bl	8012794 <_sbrk_r>
 80120aa:	1c43      	adds	r3, r0, #1
 80120ac:	d00a      	beq.n	80120c4 <sbrk_aligned+0x34>
 80120ae:	1cc4      	adds	r4, r0, #3
 80120b0:	f024 0403 	bic.w	r4, r4, #3
 80120b4:	42a0      	cmp	r0, r4
 80120b6:	d007      	beq.n	80120c8 <sbrk_aligned+0x38>
 80120b8:	1a21      	subs	r1, r4, r0
 80120ba:	4628      	mov	r0, r5
 80120bc:	f000 fb6a 	bl	8012794 <_sbrk_r>
 80120c0:	3001      	adds	r0, #1
 80120c2:	d101      	bne.n	80120c8 <sbrk_aligned+0x38>
 80120c4:	f04f 34ff 	mov.w	r4, #4294967295
 80120c8:	4620      	mov	r0, r4
 80120ca:	bd70      	pop	{r4, r5, r6, pc}
 80120cc:	240011e8 	.word	0x240011e8

080120d0 <_malloc_r>:
 80120d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d4:	1ccd      	adds	r5, r1, #3
 80120d6:	f025 0503 	bic.w	r5, r5, #3
 80120da:	3508      	adds	r5, #8
 80120dc:	2d0c      	cmp	r5, #12
 80120de:	bf38      	it	cc
 80120e0:	250c      	movcc	r5, #12
 80120e2:	2d00      	cmp	r5, #0
 80120e4:	4607      	mov	r7, r0
 80120e6:	db01      	blt.n	80120ec <_malloc_r+0x1c>
 80120e8:	42a9      	cmp	r1, r5
 80120ea:	d905      	bls.n	80120f8 <_malloc_r+0x28>
 80120ec:	230c      	movs	r3, #12
 80120ee:	603b      	str	r3, [r7, #0]
 80120f0:	2600      	movs	r6, #0
 80120f2:	4630      	mov	r0, r6
 80120f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f8:	4e2e      	ldr	r6, [pc, #184]	; (80121b4 <_malloc_r+0xe4>)
 80120fa:	f000 fbf5 	bl	80128e8 <__malloc_lock>
 80120fe:	6833      	ldr	r3, [r6, #0]
 8012100:	461c      	mov	r4, r3
 8012102:	bb34      	cbnz	r4, 8012152 <_malloc_r+0x82>
 8012104:	4629      	mov	r1, r5
 8012106:	4638      	mov	r0, r7
 8012108:	f7ff ffc2 	bl	8012090 <sbrk_aligned>
 801210c:	1c43      	adds	r3, r0, #1
 801210e:	4604      	mov	r4, r0
 8012110:	d14d      	bne.n	80121ae <_malloc_r+0xde>
 8012112:	6834      	ldr	r4, [r6, #0]
 8012114:	4626      	mov	r6, r4
 8012116:	2e00      	cmp	r6, #0
 8012118:	d140      	bne.n	801219c <_malloc_r+0xcc>
 801211a:	6823      	ldr	r3, [r4, #0]
 801211c:	4631      	mov	r1, r6
 801211e:	4638      	mov	r0, r7
 8012120:	eb04 0803 	add.w	r8, r4, r3
 8012124:	f000 fb36 	bl	8012794 <_sbrk_r>
 8012128:	4580      	cmp	r8, r0
 801212a:	d13a      	bne.n	80121a2 <_malloc_r+0xd2>
 801212c:	6821      	ldr	r1, [r4, #0]
 801212e:	3503      	adds	r5, #3
 8012130:	1a6d      	subs	r5, r5, r1
 8012132:	f025 0503 	bic.w	r5, r5, #3
 8012136:	3508      	adds	r5, #8
 8012138:	2d0c      	cmp	r5, #12
 801213a:	bf38      	it	cc
 801213c:	250c      	movcc	r5, #12
 801213e:	4629      	mov	r1, r5
 8012140:	4638      	mov	r0, r7
 8012142:	f7ff ffa5 	bl	8012090 <sbrk_aligned>
 8012146:	3001      	adds	r0, #1
 8012148:	d02b      	beq.n	80121a2 <_malloc_r+0xd2>
 801214a:	6823      	ldr	r3, [r4, #0]
 801214c:	442b      	add	r3, r5
 801214e:	6023      	str	r3, [r4, #0]
 8012150:	e00e      	b.n	8012170 <_malloc_r+0xa0>
 8012152:	6822      	ldr	r2, [r4, #0]
 8012154:	1b52      	subs	r2, r2, r5
 8012156:	d41e      	bmi.n	8012196 <_malloc_r+0xc6>
 8012158:	2a0b      	cmp	r2, #11
 801215a:	d916      	bls.n	801218a <_malloc_r+0xba>
 801215c:	1961      	adds	r1, r4, r5
 801215e:	42a3      	cmp	r3, r4
 8012160:	6025      	str	r5, [r4, #0]
 8012162:	bf18      	it	ne
 8012164:	6059      	strne	r1, [r3, #4]
 8012166:	6863      	ldr	r3, [r4, #4]
 8012168:	bf08      	it	eq
 801216a:	6031      	streq	r1, [r6, #0]
 801216c:	5162      	str	r2, [r4, r5]
 801216e:	604b      	str	r3, [r1, #4]
 8012170:	4638      	mov	r0, r7
 8012172:	f104 060b 	add.w	r6, r4, #11
 8012176:	f000 fbbd 	bl	80128f4 <__malloc_unlock>
 801217a:	f026 0607 	bic.w	r6, r6, #7
 801217e:	1d23      	adds	r3, r4, #4
 8012180:	1af2      	subs	r2, r6, r3
 8012182:	d0b6      	beq.n	80120f2 <_malloc_r+0x22>
 8012184:	1b9b      	subs	r3, r3, r6
 8012186:	50a3      	str	r3, [r4, r2]
 8012188:	e7b3      	b.n	80120f2 <_malloc_r+0x22>
 801218a:	6862      	ldr	r2, [r4, #4]
 801218c:	42a3      	cmp	r3, r4
 801218e:	bf0c      	ite	eq
 8012190:	6032      	streq	r2, [r6, #0]
 8012192:	605a      	strne	r2, [r3, #4]
 8012194:	e7ec      	b.n	8012170 <_malloc_r+0xa0>
 8012196:	4623      	mov	r3, r4
 8012198:	6864      	ldr	r4, [r4, #4]
 801219a:	e7b2      	b.n	8012102 <_malloc_r+0x32>
 801219c:	4634      	mov	r4, r6
 801219e:	6876      	ldr	r6, [r6, #4]
 80121a0:	e7b9      	b.n	8012116 <_malloc_r+0x46>
 80121a2:	230c      	movs	r3, #12
 80121a4:	603b      	str	r3, [r7, #0]
 80121a6:	4638      	mov	r0, r7
 80121a8:	f000 fba4 	bl	80128f4 <__malloc_unlock>
 80121ac:	e7a1      	b.n	80120f2 <_malloc_r+0x22>
 80121ae:	6025      	str	r5, [r4, #0]
 80121b0:	e7de      	b.n	8012170 <_malloc_r+0xa0>
 80121b2:	bf00      	nop
 80121b4:	240011e4 	.word	0x240011e4

080121b8 <__sfputc_r>:
 80121b8:	6893      	ldr	r3, [r2, #8]
 80121ba:	3b01      	subs	r3, #1
 80121bc:	2b00      	cmp	r3, #0
 80121be:	b410      	push	{r4}
 80121c0:	6093      	str	r3, [r2, #8]
 80121c2:	da08      	bge.n	80121d6 <__sfputc_r+0x1e>
 80121c4:	6994      	ldr	r4, [r2, #24]
 80121c6:	42a3      	cmp	r3, r4
 80121c8:	db01      	blt.n	80121ce <__sfputc_r+0x16>
 80121ca:	290a      	cmp	r1, #10
 80121cc:	d103      	bne.n	80121d6 <__sfputc_r+0x1e>
 80121ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121d2:	f7ff bc29 	b.w	8011a28 <__swbuf_r>
 80121d6:	6813      	ldr	r3, [r2, #0]
 80121d8:	1c58      	adds	r0, r3, #1
 80121da:	6010      	str	r0, [r2, #0]
 80121dc:	7019      	strb	r1, [r3, #0]
 80121de:	4608      	mov	r0, r1
 80121e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121e4:	4770      	bx	lr

080121e6 <__sfputs_r>:
 80121e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121e8:	4606      	mov	r6, r0
 80121ea:	460f      	mov	r7, r1
 80121ec:	4614      	mov	r4, r2
 80121ee:	18d5      	adds	r5, r2, r3
 80121f0:	42ac      	cmp	r4, r5
 80121f2:	d101      	bne.n	80121f8 <__sfputs_r+0x12>
 80121f4:	2000      	movs	r0, #0
 80121f6:	e007      	b.n	8012208 <__sfputs_r+0x22>
 80121f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121fc:	463a      	mov	r2, r7
 80121fe:	4630      	mov	r0, r6
 8012200:	f7ff ffda 	bl	80121b8 <__sfputc_r>
 8012204:	1c43      	adds	r3, r0, #1
 8012206:	d1f3      	bne.n	80121f0 <__sfputs_r+0xa>
 8012208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801220c <_vfiprintf_r>:
 801220c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012210:	460d      	mov	r5, r1
 8012212:	b09d      	sub	sp, #116	; 0x74
 8012214:	4614      	mov	r4, r2
 8012216:	4698      	mov	r8, r3
 8012218:	4606      	mov	r6, r0
 801221a:	b118      	cbz	r0, 8012224 <_vfiprintf_r+0x18>
 801221c:	6983      	ldr	r3, [r0, #24]
 801221e:	b90b      	cbnz	r3, 8012224 <_vfiprintf_r+0x18>
 8012220:	f7ff fddc 	bl	8011ddc <__sinit>
 8012224:	4b89      	ldr	r3, [pc, #548]	; (801244c <_vfiprintf_r+0x240>)
 8012226:	429d      	cmp	r5, r3
 8012228:	d11b      	bne.n	8012262 <_vfiprintf_r+0x56>
 801222a:	6875      	ldr	r5, [r6, #4]
 801222c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801222e:	07d9      	lsls	r1, r3, #31
 8012230:	d405      	bmi.n	801223e <_vfiprintf_r+0x32>
 8012232:	89ab      	ldrh	r3, [r5, #12]
 8012234:	059a      	lsls	r2, r3, #22
 8012236:	d402      	bmi.n	801223e <_vfiprintf_r+0x32>
 8012238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801223a:	f7ff fe6d 	bl	8011f18 <__retarget_lock_acquire_recursive>
 801223e:	89ab      	ldrh	r3, [r5, #12]
 8012240:	071b      	lsls	r3, r3, #28
 8012242:	d501      	bpl.n	8012248 <_vfiprintf_r+0x3c>
 8012244:	692b      	ldr	r3, [r5, #16]
 8012246:	b9eb      	cbnz	r3, 8012284 <_vfiprintf_r+0x78>
 8012248:	4629      	mov	r1, r5
 801224a:	4630      	mov	r0, r6
 801224c:	f7ff fc3e 	bl	8011acc <__swsetup_r>
 8012250:	b1c0      	cbz	r0, 8012284 <_vfiprintf_r+0x78>
 8012252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012254:	07dc      	lsls	r4, r3, #31
 8012256:	d50e      	bpl.n	8012276 <_vfiprintf_r+0x6a>
 8012258:	f04f 30ff 	mov.w	r0, #4294967295
 801225c:	b01d      	add	sp, #116	; 0x74
 801225e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012262:	4b7b      	ldr	r3, [pc, #492]	; (8012450 <_vfiprintf_r+0x244>)
 8012264:	429d      	cmp	r5, r3
 8012266:	d101      	bne.n	801226c <_vfiprintf_r+0x60>
 8012268:	68b5      	ldr	r5, [r6, #8]
 801226a:	e7df      	b.n	801222c <_vfiprintf_r+0x20>
 801226c:	4b79      	ldr	r3, [pc, #484]	; (8012454 <_vfiprintf_r+0x248>)
 801226e:	429d      	cmp	r5, r3
 8012270:	bf08      	it	eq
 8012272:	68f5      	ldreq	r5, [r6, #12]
 8012274:	e7da      	b.n	801222c <_vfiprintf_r+0x20>
 8012276:	89ab      	ldrh	r3, [r5, #12]
 8012278:	0598      	lsls	r0, r3, #22
 801227a:	d4ed      	bmi.n	8012258 <_vfiprintf_r+0x4c>
 801227c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801227e:	f7ff fe4c 	bl	8011f1a <__retarget_lock_release_recursive>
 8012282:	e7e9      	b.n	8012258 <_vfiprintf_r+0x4c>
 8012284:	2300      	movs	r3, #0
 8012286:	9309      	str	r3, [sp, #36]	; 0x24
 8012288:	2320      	movs	r3, #32
 801228a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801228e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012292:	2330      	movs	r3, #48	; 0x30
 8012294:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012458 <_vfiprintf_r+0x24c>
 8012298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801229c:	f04f 0901 	mov.w	r9, #1
 80122a0:	4623      	mov	r3, r4
 80122a2:	469a      	mov	sl, r3
 80122a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122a8:	b10a      	cbz	r2, 80122ae <_vfiprintf_r+0xa2>
 80122aa:	2a25      	cmp	r2, #37	; 0x25
 80122ac:	d1f9      	bne.n	80122a2 <_vfiprintf_r+0x96>
 80122ae:	ebba 0b04 	subs.w	fp, sl, r4
 80122b2:	d00b      	beq.n	80122cc <_vfiprintf_r+0xc0>
 80122b4:	465b      	mov	r3, fp
 80122b6:	4622      	mov	r2, r4
 80122b8:	4629      	mov	r1, r5
 80122ba:	4630      	mov	r0, r6
 80122bc:	f7ff ff93 	bl	80121e6 <__sfputs_r>
 80122c0:	3001      	adds	r0, #1
 80122c2:	f000 80aa 	beq.w	801241a <_vfiprintf_r+0x20e>
 80122c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122c8:	445a      	add	r2, fp
 80122ca:	9209      	str	r2, [sp, #36]	; 0x24
 80122cc:	f89a 3000 	ldrb.w	r3, [sl]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	f000 80a2 	beq.w	801241a <_vfiprintf_r+0x20e>
 80122d6:	2300      	movs	r3, #0
 80122d8:	f04f 32ff 	mov.w	r2, #4294967295
 80122dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122e0:	f10a 0a01 	add.w	sl, sl, #1
 80122e4:	9304      	str	r3, [sp, #16]
 80122e6:	9307      	str	r3, [sp, #28]
 80122e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122ec:	931a      	str	r3, [sp, #104]	; 0x68
 80122ee:	4654      	mov	r4, sl
 80122f0:	2205      	movs	r2, #5
 80122f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122f6:	4858      	ldr	r0, [pc, #352]	; (8012458 <_vfiprintf_r+0x24c>)
 80122f8:	f7ed fffa 	bl	80002f0 <memchr>
 80122fc:	9a04      	ldr	r2, [sp, #16]
 80122fe:	b9d8      	cbnz	r0, 8012338 <_vfiprintf_r+0x12c>
 8012300:	06d1      	lsls	r1, r2, #27
 8012302:	bf44      	itt	mi
 8012304:	2320      	movmi	r3, #32
 8012306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801230a:	0713      	lsls	r3, r2, #28
 801230c:	bf44      	itt	mi
 801230e:	232b      	movmi	r3, #43	; 0x2b
 8012310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012314:	f89a 3000 	ldrb.w	r3, [sl]
 8012318:	2b2a      	cmp	r3, #42	; 0x2a
 801231a:	d015      	beq.n	8012348 <_vfiprintf_r+0x13c>
 801231c:	9a07      	ldr	r2, [sp, #28]
 801231e:	4654      	mov	r4, sl
 8012320:	2000      	movs	r0, #0
 8012322:	f04f 0c0a 	mov.w	ip, #10
 8012326:	4621      	mov	r1, r4
 8012328:	f811 3b01 	ldrb.w	r3, [r1], #1
 801232c:	3b30      	subs	r3, #48	; 0x30
 801232e:	2b09      	cmp	r3, #9
 8012330:	d94e      	bls.n	80123d0 <_vfiprintf_r+0x1c4>
 8012332:	b1b0      	cbz	r0, 8012362 <_vfiprintf_r+0x156>
 8012334:	9207      	str	r2, [sp, #28]
 8012336:	e014      	b.n	8012362 <_vfiprintf_r+0x156>
 8012338:	eba0 0308 	sub.w	r3, r0, r8
 801233c:	fa09 f303 	lsl.w	r3, r9, r3
 8012340:	4313      	orrs	r3, r2
 8012342:	9304      	str	r3, [sp, #16]
 8012344:	46a2      	mov	sl, r4
 8012346:	e7d2      	b.n	80122ee <_vfiprintf_r+0xe2>
 8012348:	9b03      	ldr	r3, [sp, #12]
 801234a:	1d19      	adds	r1, r3, #4
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	9103      	str	r1, [sp, #12]
 8012350:	2b00      	cmp	r3, #0
 8012352:	bfbb      	ittet	lt
 8012354:	425b      	neglt	r3, r3
 8012356:	f042 0202 	orrlt.w	r2, r2, #2
 801235a:	9307      	strge	r3, [sp, #28]
 801235c:	9307      	strlt	r3, [sp, #28]
 801235e:	bfb8      	it	lt
 8012360:	9204      	strlt	r2, [sp, #16]
 8012362:	7823      	ldrb	r3, [r4, #0]
 8012364:	2b2e      	cmp	r3, #46	; 0x2e
 8012366:	d10c      	bne.n	8012382 <_vfiprintf_r+0x176>
 8012368:	7863      	ldrb	r3, [r4, #1]
 801236a:	2b2a      	cmp	r3, #42	; 0x2a
 801236c:	d135      	bne.n	80123da <_vfiprintf_r+0x1ce>
 801236e:	9b03      	ldr	r3, [sp, #12]
 8012370:	1d1a      	adds	r2, r3, #4
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	9203      	str	r2, [sp, #12]
 8012376:	2b00      	cmp	r3, #0
 8012378:	bfb8      	it	lt
 801237a:	f04f 33ff 	movlt.w	r3, #4294967295
 801237e:	3402      	adds	r4, #2
 8012380:	9305      	str	r3, [sp, #20]
 8012382:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012468 <_vfiprintf_r+0x25c>
 8012386:	7821      	ldrb	r1, [r4, #0]
 8012388:	2203      	movs	r2, #3
 801238a:	4650      	mov	r0, sl
 801238c:	f7ed ffb0 	bl	80002f0 <memchr>
 8012390:	b140      	cbz	r0, 80123a4 <_vfiprintf_r+0x198>
 8012392:	2340      	movs	r3, #64	; 0x40
 8012394:	eba0 000a 	sub.w	r0, r0, sl
 8012398:	fa03 f000 	lsl.w	r0, r3, r0
 801239c:	9b04      	ldr	r3, [sp, #16]
 801239e:	4303      	orrs	r3, r0
 80123a0:	3401      	adds	r4, #1
 80123a2:	9304      	str	r3, [sp, #16]
 80123a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123a8:	482c      	ldr	r0, [pc, #176]	; (801245c <_vfiprintf_r+0x250>)
 80123aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123ae:	2206      	movs	r2, #6
 80123b0:	f7ed ff9e 	bl	80002f0 <memchr>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d03f      	beq.n	8012438 <_vfiprintf_r+0x22c>
 80123b8:	4b29      	ldr	r3, [pc, #164]	; (8012460 <_vfiprintf_r+0x254>)
 80123ba:	bb1b      	cbnz	r3, 8012404 <_vfiprintf_r+0x1f8>
 80123bc:	9b03      	ldr	r3, [sp, #12]
 80123be:	3307      	adds	r3, #7
 80123c0:	f023 0307 	bic.w	r3, r3, #7
 80123c4:	3308      	adds	r3, #8
 80123c6:	9303      	str	r3, [sp, #12]
 80123c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ca:	443b      	add	r3, r7
 80123cc:	9309      	str	r3, [sp, #36]	; 0x24
 80123ce:	e767      	b.n	80122a0 <_vfiprintf_r+0x94>
 80123d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80123d4:	460c      	mov	r4, r1
 80123d6:	2001      	movs	r0, #1
 80123d8:	e7a5      	b.n	8012326 <_vfiprintf_r+0x11a>
 80123da:	2300      	movs	r3, #0
 80123dc:	3401      	adds	r4, #1
 80123de:	9305      	str	r3, [sp, #20]
 80123e0:	4619      	mov	r1, r3
 80123e2:	f04f 0c0a 	mov.w	ip, #10
 80123e6:	4620      	mov	r0, r4
 80123e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123ec:	3a30      	subs	r2, #48	; 0x30
 80123ee:	2a09      	cmp	r2, #9
 80123f0:	d903      	bls.n	80123fa <_vfiprintf_r+0x1ee>
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d0c5      	beq.n	8012382 <_vfiprintf_r+0x176>
 80123f6:	9105      	str	r1, [sp, #20]
 80123f8:	e7c3      	b.n	8012382 <_vfiprintf_r+0x176>
 80123fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80123fe:	4604      	mov	r4, r0
 8012400:	2301      	movs	r3, #1
 8012402:	e7f0      	b.n	80123e6 <_vfiprintf_r+0x1da>
 8012404:	ab03      	add	r3, sp, #12
 8012406:	9300      	str	r3, [sp, #0]
 8012408:	462a      	mov	r2, r5
 801240a:	4b16      	ldr	r3, [pc, #88]	; (8012464 <_vfiprintf_r+0x258>)
 801240c:	a904      	add	r1, sp, #16
 801240e:	4630      	mov	r0, r6
 8012410:	f3af 8000 	nop.w
 8012414:	4607      	mov	r7, r0
 8012416:	1c78      	adds	r0, r7, #1
 8012418:	d1d6      	bne.n	80123c8 <_vfiprintf_r+0x1bc>
 801241a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801241c:	07d9      	lsls	r1, r3, #31
 801241e:	d405      	bmi.n	801242c <_vfiprintf_r+0x220>
 8012420:	89ab      	ldrh	r3, [r5, #12]
 8012422:	059a      	lsls	r2, r3, #22
 8012424:	d402      	bmi.n	801242c <_vfiprintf_r+0x220>
 8012426:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012428:	f7ff fd77 	bl	8011f1a <__retarget_lock_release_recursive>
 801242c:	89ab      	ldrh	r3, [r5, #12]
 801242e:	065b      	lsls	r3, r3, #25
 8012430:	f53f af12 	bmi.w	8012258 <_vfiprintf_r+0x4c>
 8012434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012436:	e711      	b.n	801225c <_vfiprintf_r+0x50>
 8012438:	ab03      	add	r3, sp, #12
 801243a:	9300      	str	r3, [sp, #0]
 801243c:	462a      	mov	r2, r5
 801243e:	4b09      	ldr	r3, [pc, #36]	; (8012464 <_vfiprintf_r+0x258>)
 8012440:	a904      	add	r1, sp, #16
 8012442:	4630      	mov	r0, r6
 8012444:	f000 f880 	bl	8012548 <_printf_i>
 8012448:	e7e4      	b.n	8012414 <_vfiprintf_r+0x208>
 801244a:	bf00      	nop
 801244c:	08012f78 	.word	0x08012f78
 8012450:	08012f98 	.word	0x08012f98
 8012454:	08012f58 	.word	0x08012f58
 8012458:	08012fb8 	.word	0x08012fb8
 801245c:	08012fc2 	.word	0x08012fc2
 8012460:	00000000 	.word	0x00000000
 8012464:	080121e7 	.word	0x080121e7
 8012468:	08012fbe 	.word	0x08012fbe

0801246c <_printf_common>:
 801246c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012470:	4616      	mov	r6, r2
 8012472:	4699      	mov	r9, r3
 8012474:	688a      	ldr	r2, [r1, #8]
 8012476:	690b      	ldr	r3, [r1, #16]
 8012478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801247c:	4293      	cmp	r3, r2
 801247e:	bfb8      	it	lt
 8012480:	4613      	movlt	r3, r2
 8012482:	6033      	str	r3, [r6, #0]
 8012484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012488:	4607      	mov	r7, r0
 801248a:	460c      	mov	r4, r1
 801248c:	b10a      	cbz	r2, 8012492 <_printf_common+0x26>
 801248e:	3301      	adds	r3, #1
 8012490:	6033      	str	r3, [r6, #0]
 8012492:	6823      	ldr	r3, [r4, #0]
 8012494:	0699      	lsls	r1, r3, #26
 8012496:	bf42      	ittt	mi
 8012498:	6833      	ldrmi	r3, [r6, #0]
 801249a:	3302      	addmi	r3, #2
 801249c:	6033      	strmi	r3, [r6, #0]
 801249e:	6825      	ldr	r5, [r4, #0]
 80124a0:	f015 0506 	ands.w	r5, r5, #6
 80124a4:	d106      	bne.n	80124b4 <_printf_common+0x48>
 80124a6:	f104 0a19 	add.w	sl, r4, #25
 80124aa:	68e3      	ldr	r3, [r4, #12]
 80124ac:	6832      	ldr	r2, [r6, #0]
 80124ae:	1a9b      	subs	r3, r3, r2
 80124b0:	42ab      	cmp	r3, r5
 80124b2:	dc26      	bgt.n	8012502 <_printf_common+0x96>
 80124b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80124b8:	1e13      	subs	r3, r2, #0
 80124ba:	6822      	ldr	r2, [r4, #0]
 80124bc:	bf18      	it	ne
 80124be:	2301      	movne	r3, #1
 80124c0:	0692      	lsls	r2, r2, #26
 80124c2:	d42b      	bmi.n	801251c <_printf_common+0xb0>
 80124c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124c8:	4649      	mov	r1, r9
 80124ca:	4638      	mov	r0, r7
 80124cc:	47c0      	blx	r8
 80124ce:	3001      	adds	r0, #1
 80124d0:	d01e      	beq.n	8012510 <_printf_common+0xa4>
 80124d2:	6823      	ldr	r3, [r4, #0]
 80124d4:	68e5      	ldr	r5, [r4, #12]
 80124d6:	6832      	ldr	r2, [r6, #0]
 80124d8:	f003 0306 	and.w	r3, r3, #6
 80124dc:	2b04      	cmp	r3, #4
 80124de:	bf08      	it	eq
 80124e0:	1aad      	subeq	r5, r5, r2
 80124e2:	68a3      	ldr	r3, [r4, #8]
 80124e4:	6922      	ldr	r2, [r4, #16]
 80124e6:	bf0c      	ite	eq
 80124e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124ec:	2500      	movne	r5, #0
 80124ee:	4293      	cmp	r3, r2
 80124f0:	bfc4      	itt	gt
 80124f2:	1a9b      	subgt	r3, r3, r2
 80124f4:	18ed      	addgt	r5, r5, r3
 80124f6:	2600      	movs	r6, #0
 80124f8:	341a      	adds	r4, #26
 80124fa:	42b5      	cmp	r5, r6
 80124fc:	d11a      	bne.n	8012534 <_printf_common+0xc8>
 80124fe:	2000      	movs	r0, #0
 8012500:	e008      	b.n	8012514 <_printf_common+0xa8>
 8012502:	2301      	movs	r3, #1
 8012504:	4652      	mov	r2, sl
 8012506:	4649      	mov	r1, r9
 8012508:	4638      	mov	r0, r7
 801250a:	47c0      	blx	r8
 801250c:	3001      	adds	r0, #1
 801250e:	d103      	bne.n	8012518 <_printf_common+0xac>
 8012510:	f04f 30ff 	mov.w	r0, #4294967295
 8012514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012518:	3501      	adds	r5, #1
 801251a:	e7c6      	b.n	80124aa <_printf_common+0x3e>
 801251c:	18e1      	adds	r1, r4, r3
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	2030      	movs	r0, #48	; 0x30
 8012522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012526:	4422      	add	r2, r4
 8012528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801252c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012530:	3302      	adds	r3, #2
 8012532:	e7c7      	b.n	80124c4 <_printf_common+0x58>
 8012534:	2301      	movs	r3, #1
 8012536:	4622      	mov	r2, r4
 8012538:	4649      	mov	r1, r9
 801253a:	4638      	mov	r0, r7
 801253c:	47c0      	blx	r8
 801253e:	3001      	adds	r0, #1
 8012540:	d0e6      	beq.n	8012510 <_printf_common+0xa4>
 8012542:	3601      	adds	r6, #1
 8012544:	e7d9      	b.n	80124fa <_printf_common+0x8e>
	...

08012548 <_printf_i>:
 8012548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801254c:	7e0f      	ldrb	r7, [r1, #24]
 801254e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012550:	2f78      	cmp	r7, #120	; 0x78
 8012552:	4691      	mov	r9, r2
 8012554:	4680      	mov	r8, r0
 8012556:	460c      	mov	r4, r1
 8012558:	469a      	mov	sl, r3
 801255a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801255e:	d807      	bhi.n	8012570 <_printf_i+0x28>
 8012560:	2f62      	cmp	r7, #98	; 0x62
 8012562:	d80a      	bhi.n	801257a <_printf_i+0x32>
 8012564:	2f00      	cmp	r7, #0
 8012566:	f000 80d8 	beq.w	801271a <_printf_i+0x1d2>
 801256a:	2f58      	cmp	r7, #88	; 0x58
 801256c:	f000 80a3 	beq.w	80126b6 <_printf_i+0x16e>
 8012570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012578:	e03a      	b.n	80125f0 <_printf_i+0xa8>
 801257a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801257e:	2b15      	cmp	r3, #21
 8012580:	d8f6      	bhi.n	8012570 <_printf_i+0x28>
 8012582:	a101      	add	r1, pc, #4	; (adr r1, 8012588 <_printf_i+0x40>)
 8012584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012588:	080125e1 	.word	0x080125e1
 801258c:	080125f5 	.word	0x080125f5
 8012590:	08012571 	.word	0x08012571
 8012594:	08012571 	.word	0x08012571
 8012598:	08012571 	.word	0x08012571
 801259c:	08012571 	.word	0x08012571
 80125a0:	080125f5 	.word	0x080125f5
 80125a4:	08012571 	.word	0x08012571
 80125a8:	08012571 	.word	0x08012571
 80125ac:	08012571 	.word	0x08012571
 80125b0:	08012571 	.word	0x08012571
 80125b4:	08012701 	.word	0x08012701
 80125b8:	08012625 	.word	0x08012625
 80125bc:	080126e3 	.word	0x080126e3
 80125c0:	08012571 	.word	0x08012571
 80125c4:	08012571 	.word	0x08012571
 80125c8:	08012723 	.word	0x08012723
 80125cc:	08012571 	.word	0x08012571
 80125d0:	08012625 	.word	0x08012625
 80125d4:	08012571 	.word	0x08012571
 80125d8:	08012571 	.word	0x08012571
 80125dc:	080126eb 	.word	0x080126eb
 80125e0:	682b      	ldr	r3, [r5, #0]
 80125e2:	1d1a      	adds	r2, r3, #4
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	602a      	str	r2, [r5, #0]
 80125e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125f0:	2301      	movs	r3, #1
 80125f2:	e0a3      	b.n	801273c <_printf_i+0x1f4>
 80125f4:	6820      	ldr	r0, [r4, #0]
 80125f6:	6829      	ldr	r1, [r5, #0]
 80125f8:	0606      	lsls	r6, r0, #24
 80125fa:	f101 0304 	add.w	r3, r1, #4
 80125fe:	d50a      	bpl.n	8012616 <_printf_i+0xce>
 8012600:	680e      	ldr	r6, [r1, #0]
 8012602:	602b      	str	r3, [r5, #0]
 8012604:	2e00      	cmp	r6, #0
 8012606:	da03      	bge.n	8012610 <_printf_i+0xc8>
 8012608:	232d      	movs	r3, #45	; 0x2d
 801260a:	4276      	negs	r6, r6
 801260c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012610:	485e      	ldr	r0, [pc, #376]	; (801278c <_printf_i+0x244>)
 8012612:	230a      	movs	r3, #10
 8012614:	e019      	b.n	801264a <_printf_i+0x102>
 8012616:	680e      	ldr	r6, [r1, #0]
 8012618:	602b      	str	r3, [r5, #0]
 801261a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801261e:	bf18      	it	ne
 8012620:	b236      	sxthne	r6, r6
 8012622:	e7ef      	b.n	8012604 <_printf_i+0xbc>
 8012624:	682b      	ldr	r3, [r5, #0]
 8012626:	6820      	ldr	r0, [r4, #0]
 8012628:	1d19      	adds	r1, r3, #4
 801262a:	6029      	str	r1, [r5, #0]
 801262c:	0601      	lsls	r1, r0, #24
 801262e:	d501      	bpl.n	8012634 <_printf_i+0xec>
 8012630:	681e      	ldr	r6, [r3, #0]
 8012632:	e002      	b.n	801263a <_printf_i+0xf2>
 8012634:	0646      	lsls	r6, r0, #25
 8012636:	d5fb      	bpl.n	8012630 <_printf_i+0xe8>
 8012638:	881e      	ldrh	r6, [r3, #0]
 801263a:	4854      	ldr	r0, [pc, #336]	; (801278c <_printf_i+0x244>)
 801263c:	2f6f      	cmp	r7, #111	; 0x6f
 801263e:	bf0c      	ite	eq
 8012640:	2308      	moveq	r3, #8
 8012642:	230a      	movne	r3, #10
 8012644:	2100      	movs	r1, #0
 8012646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801264a:	6865      	ldr	r5, [r4, #4]
 801264c:	60a5      	str	r5, [r4, #8]
 801264e:	2d00      	cmp	r5, #0
 8012650:	bfa2      	ittt	ge
 8012652:	6821      	ldrge	r1, [r4, #0]
 8012654:	f021 0104 	bicge.w	r1, r1, #4
 8012658:	6021      	strge	r1, [r4, #0]
 801265a:	b90e      	cbnz	r6, 8012660 <_printf_i+0x118>
 801265c:	2d00      	cmp	r5, #0
 801265e:	d04d      	beq.n	80126fc <_printf_i+0x1b4>
 8012660:	4615      	mov	r5, r2
 8012662:	fbb6 f1f3 	udiv	r1, r6, r3
 8012666:	fb03 6711 	mls	r7, r3, r1, r6
 801266a:	5dc7      	ldrb	r7, [r0, r7]
 801266c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012670:	4637      	mov	r7, r6
 8012672:	42bb      	cmp	r3, r7
 8012674:	460e      	mov	r6, r1
 8012676:	d9f4      	bls.n	8012662 <_printf_i+0x11a>
 8012678:	2b08      	cmp	r3, #8
 801267a:	d10b      	bne.n	8012694 <_printf_i+0x14c>
 801267c:	6823      	ldr	r3, [r4, #0]
 801267e:	07de      	lsls	r6, r3, #31
 8012680:	d508      	bpl.n	8012694 <_printf_i+0x14c>
 8012682:	6923      	ldr	r3, [r4, #16]
 8012684:	6861      	ldr	r1, [r4, #4]
 8012686:	4299      	cmp	r1, r3
 8012688:	bfde      	ittt	le
 801268a:	2330      	movle	r3, #48	; 0x30
 801268c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012690:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012694:	1b52      	subs	r2, r2, r5
 8012696:	6122      	str	r2, [r4, #16]
 8012698:	f8cd a000 	str.w	sl, [sp]
 801269c:	464b      	mov	r3, r9
 801269e:	aa03      	add	r2, sp, #12
 80126a0:	4621      	mov	r1, r4
 80126a2:	4640      	mov	r0, r8
 80126a4:	f7ff fee2 	bl	801246c <_printf_common>
 80126a8:	3001      	adds	r0, #1
 80126aa:	d14c      	bne.n	8012746 <_printf_i+0x1fe>
 80126ac:	f04f 30ff 	mov.w	r0, #4294967295
 80126b0:	b004      	add	sp, #16
 80126b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b6:	4835      	ldr	r0, [pc, #212]	; (801278c <_printf_i+0x244>)
 80126b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80126bc:	6829      	ldr	r1, [r5, #0]
 80126be:	6823      	ldr	r3, [r4, #0]
 80126c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80126c4:	6029      	str	r1, [r5, #0]
 80126c6:	061d      	lsls	r5, r3, #24
 80126c8:	d514      	bpl.n	80126f4 <_printf_i+0x1ac>
 80126ca:	07df      	lsls	r7, r3, #31
 80126cc:	bf44      	itt	mi
 80126ce:	f043 0320 	orrmi.w	r3, r3, #32
 80126d2:	6023      	strmi	r3, [r4, #0]
 80126d4:	b91e      	cbnz	r6, 80126de <_printf_i+0x196>
 80126d6:	6823      	ldr	r3, [r4, #0]
 80126d8:	f023 0320 	bic.w	r3, r3, #32
 80126dc:	6023      	str	r3, [r4, #0]
 80126de:	2310      	movs	r3, #16
 80126e0:	e7b0      	b.n	8012644 <_printf_i+0xfc>
 80126e2:	6823      	ldr	r3, [r4, #0]
 80126e4:	f043 0320 	orr.w	r3, r3, #32
 80126e8:	6023      	str	r3, [r4, #0]
 80126ea:	2378      	movs	r3, #120	; 0x78
 80126ec:	4828      	ldr	r0, [pc, #160]	; (8012790 <_printf_i+0x248>)
 80126ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80126f2:	e7e3      	b.n	80126bc <_printf_i+0x174>
 80126f4:	0659      	lsls	r1, r3, #25
 80126f6:	bf48      	it	mi
 80126f8:	b2b6      	uxthmi	r6, r6
 80126fa:	e7e6      	b.n	80126ca <_printf_i+0x182>
 80126fc:	4615      	mov	r5, r2
 80126fe:	e7bb      	b.n	8012678 <_printf_i+0x130>
 8012700:	682b      	ldr	r3, [r5, #0]
 8012702:	6826      	ldr	r6, [r4, #0]
 8012704:	6961      	ldr	r1, [r4, #20]
 8012706:	1d18      	adds	r0, r3, #4
 8012708:	6028      	str	r0, [r5, #0]
 801270a:	0635      	lsls	r5, r6, #24
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	d501      	bpl.n	8012714 <_printf_i+0x1cc>
 8012710:	6019      	str	r1, [r3, #0]
 8012712:	e002      	b.n	801271a <_printf_i+0x1d2>
 8012714:	0670      	lsls	r0, r6, #25
 8012716:	d5fb      	bpl.n	8012710 <_printf_i+0x1c8>
 8012718:	8019      	strh	r1, [r3, #0]
 801271a:	2300      	movs	r3, #0
 801271c:	6123      	str	r3, [r4, #16]
 801271e:	4615      	mov	r5, r2
 8012720:	e7ba      	b.n	8012698 <_printf_i+0x150>
 8012722:	682b      	ldr	r3, [r5, #0]
 8012724:	1d1a      	adds	r2, r3, #4
 8012726:	602a      	str	r2, [r5, #0]
 8012728:	681d      	ldr	r5, [r3, #0]
 801272a:	6862      	ldr	r2, [r4, #4]
 801272c:	2100      	movs	r1, #0
 801272e:	4628      	mov	r0, r5
 8012730:	f7ed fdde 	bl	80002f0 <memchr>
 8012734:	b108      	cbz	r0, 801273a <_printf_i+0x1f2>
 8012736:	1b40      	subs	r0, r0, r5
 8012738:	6060      	str	r0, [r4, #4]
 801273a:	6863      	ldr	r3, [r4, #4]
 801273c:	6123      	str	r3, [r4, #16]
 801273e:	2300      	movs	r3, #0
 8012740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012744:	e7a8      	b.n	8012698 <_printf_i+0x150>
 8012746:	6923      	ldr	r3, [r4, #16]
 8012748:	462a      	mov	r2, r5
 801274a:	4649      	mov	r1, r9
 801274c:	4640      	mov	r0, r8
 801274e:	47d0      	blx	sl
 8012750:	3001      	adds	r0, #1
 8012752:	d0ab      	beq.n	80126ac <_printf_i+0x164>
 8012754:	6823      	ldr	r3, [r4, #0]
 8012756:	079b      	lsls	r3, r3, #30
 8012758:	d413      	bmi.n	8012782 <_printf_i+0x23a>
 801275a:	68e0      	ldr	r0, [r4, #12]
 801275c:	9b03      	ldr	r3, [sp, #12]
 801275e:	4298      	cmp	r0, r3
 8012760:	bfb8      	it	lt
 8012762:	4618      	movlt	r0, r3
 8012764:	e7a4      	b.n	80126b0 <_printf_i+0x168>
 8012766:	2301      	movs	r3, #1
 8012768:	4632      	mov	r2, r6
 801276a:	4649      	mov	r1, r9
 801276c:	4640      	mov	r0, r8
 801276e:	47d0      	blx	sl
 8012770:	3001      	adds	r0, #1
 8012772:	d09b      	beq.n	80126ac <_printf_i+0x164>
 8012774:	3501      	adds	r5, #1
 8012776:	68e3      	ldr	r3, [r4, #12]
 8012778:	9903      	ldr	r1, [sp, #12]
 801277a:	1a5b      	subs	r3, r3, r1
 801277c:	42ab      	cmp	r3, r5
 801277e:	dcf2      	bgt.n	8012766 <_printf_i+0x21e>
 8012780:	e7eb      	b.n	801275a <_printf_i+0x212>
 8012782:	2500      	movs	r5, #0
 8012784:	f104 0619 	add.w	r6, r4, #25
 8012788:	e7f5      	b.n	8012776 <_printf_i+0x22e>
 801278a:	bf00      	nop
 801278c:	08012fc9 	.word	0x08012fc9
 8012790:	08012fda 	.word	0x08012fda

08012794 <_sbrk_r>:
 8012794:	b538      	push	{r3, r4, r5, lr}
 8012796:	4d06      	ldr	r5, [pc, #24]	; (80127b0 <_sbrk_r+0x1c>)
 8012798:	2300      	movs	r3, #0
 801279a:	4604      	mov	r4, r0
 801279c:	4608      	mov	r0, r1
 801279e:	602b      	str	r3, [r5, #0]
 80127a0:	f7ee fe78 	bl	8001494 <_sbrk>
 80127a4:	1c43      	adds	r3, r0, #1
 80127a6:	d102      	bne.n	80127ae <_sbrk_r+0x1a>
 80127a8:	682b      	ldr	r3, [r5, #0]
 80127aa:	b103      	cbz	r3, 80127ae <_sbrk_r+0x1a>
 80127ac:	6023      	str	r3, [r4, #0]
 80127ae:	bd38      	pop	{r3, r4, r5, pc}
 80127b0:	240011ec 	.word	0x240011ec

080127b4 <__sread>:
 80127b4:	b510      	push	{r4, lr}
 80127b6:	460c      	mov	r4, r1
 80127b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127bc:	f000 f8a0 	bl	8012900 <_read_r>
 80127c0:	2800      	cmp	r0, #0
 80127c2:	bfab      	itete	ge
 80127c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80127c6:	89a3      	ldrhlt	r3, [r4, #12]
 80127c8:	181b      	addge	r3, r3, r0
 80127ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80127ce:	bfac      	ite	ge
 80127d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80127d2:	81a3      	strhlt	r3, [r4, #12]
 80127d4:	bd10      	pop	{r4, pc}

080127d6 <__swrite>:
 80127d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127da:	461f      	mov	r7, r3
 80127dc:	898b      	ldrh	r3, [r1, #12]
 80127de:	05db      	lsls	r3, r3, #23
 80127e0:	4605      	mov	r5, r0
 80127e2:	460c      	mov	r4, r1
 80127e4:	4616      	mov	r6, r2
 80127e6:	d505      	bpl.n	80127f4 <__swrite+0x1e>
 80127e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127ec:	2302      	movs	r3, #2
 80127ee:	2200      	movs	r2, #0
 80127f0:	f000 f868 	bl	80128c4 <_lseek_r>
 80127f4:	89a3      	ldrh	r3, [r4, #12]
 80127f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127fe:	81a3      	strh	r3, [r4, #12]
 8012800:	4632      	mov	r2, r6
 8012802:	463b      	mov	r3, r7
 8012804:	4628      	mov	r0, r5
 8012806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801280a:	f000 b817 	b.w	801283c <_write_r>

0801280e <__sseek>:
 801280e:	b510      	push	{r4, lr}
 8012810:	460c      	mov	r4, r1
 8012812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012816:	f000 f855 	bl	80128c4 <_lseek_r>
 801281a:	1c43      	adds	r3, r0, #1
 801281c:	89a3      	ldrh	r3, [r4, #12]
 801281e:	bf15      	itete	ne
 8012820:	6560      	strne	r0, [r4, #84]	; 0x54
 8012822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801282a:	81a3      	strheq	r3, [r4, #12]
 801282c:	bf18      	it	ne
 801282e:	81a3      	strhne	r3, [r4, #12]
 8012830:	bd10      	pop	{r4, pc}

08012832 <__sclose>:
 8012832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012836:	f000 b813 	b.w	8012860 <_close_r>
	...

0801283c <_write_r>:
 801283c:	b538      	push	{r3, r4, r5, lr}
 801283e:	4d07      	ldr	r5, [pc, #28]	; (801285c <_write_r+0x20>)
 8012840:	4604      	mov	r4, r0
 8012842:	4608      	mov	r0, r1
 8012844:	4611      	mov	r1, r2
 8012846:	2200      	movs	r2, #0
 8012848:	602a      	str	r2, [r5, #0]
 801284a:	461a      	mov	r2, r3
 801284c:	f7ee fd8e 	bl	800136c <_write>
 8012850:	1c43      	adds	r3, r0, #1
 8012852:	d102      	bne.n	801285a <_write_r+0x1e>
 8012854:	682b      	ldr	r3, [r5, #0]
 8012856:	b103      	cbz	r3, 801285a <_write_r+0x1e>
 8012858:	6023      	str	r3, [r4, #0]
 801285a:	bd38      	pop	{r3, r4, r5, pc}
 801285c:	240011ec 	.word	0x240011ec

08012860 <_close_r>:
 8012860:	b538      	push	{r3, r4, r5, lr}
 8012862:	4d06      	ldr	r5, [pc, #24]	; (801287c <_close_r+0x1c>)
 8012864:	2300      	movs	r3, #0
 8012866:	4604      	mov	r4, r0
 8012868:	4608      	mov	r0, r1
 801286a:	602b      	str	r3, [r5, #0]
 801286c:	f7ee fdaa 	bl	80013c4 <_close>
 8012870:	1c43      	adds	r3, r0, #1
 8012872:	d102      	bne.n	801287a <_close_r+0x1a>
 8012874:	682b      	ldr	r3, [r5, #0]
 8012876:	b103      	cbz	r3, 801287a <_close_r+0x1a>
 8012878:	6023      	str	r3, [r4, #0]
 801287a:	bd38      	pop	{r3, r4, r5, pc}
 801287c:	240011ec 	.word	0x240011ec

08012880 <_fstat_r>:
 8012880:	b538      	push	{r3, r4, r5, lr}
 8012882:	4d07      	ldr	r5, [pc, #28]	; (80128a0 <_fstat_r+0x20>)
 8012884:	2300      	movs	r3, #0
 8012886:	4604      	mov	r4, r0
 8012888:	4608      	mov	r0, r1
 801288a:	4611      	mov	r1, r2
 801288c:	602b      	str	r3, [r5, #0]
 801288e:	f7ee fdd9 	bl	8001444 <_fstat>
 8012892:	1c43      	adds	r3, r0, #1
 8012894:	d102      	bne.n	801289c <_fstat_r+0x1c>
 8012896:	682b      	ldr	r3, [r5, #0]
 8012898:	b103      	cbz	r3, 801289c <_fstat_r+0x1c>
 801289a:	6023      	str	r3, [r4, #0]
 801289c:	bd38      	pop	{r3, r4, r5, pc}
 801289e:	bf00      	nop
 80128a0:	240011ec 	.word	0x240011ec

080128a4 <_isatty_r>:
 80128a4:	b538      	push	{r3, r4, r5, lr}
 80128a6:	4d06      	ldr	r5, [pc, #24]	; (80128c0 <_isatty_r+0x1c>)
 80128a8:	2300      	movs	r3, #0
 80128aa:	4604      	mov	r4, r0
 80128ac:	4608      	mov	r0, r1
 80128ae:	602b      	str	r3, [r5, #0]
 80128b0:	f7ee fd46 	bl	8001340 <_isatty>
 80128b4:	1c43      	adds	r3, r0, #1
 80128b6:	d102      	bne.n	80128be <_isatty_r+0x1a>
 80128b8:	682b      	ldr	r3, [r5, #0]
 80128ba:	b103      	cbz	r3, 80128be <_isatty_r+0x1a>
 80128bc:	6023      	str	r3, [r4, #0]
 80128be:	bd38      	pop	{r3, r4, r5, pc}
 80128c0:	240011ec 	.word	0x240011ec

080128c4 <_lseek_r>:
 80128c4:	b538      	push	{r3, r4, r5, lr}
 80128c6:	4d07      	ldr	r5, [pc, #28]	; (80128e4 <_lseek_r+0x20>)
 80128c8:	4604      	mov	r4, r0
 80128ca:	4608      	mov	r0, r1
 80128cc:	4611      	mov	r1, r2
 80128ce:	2200      	movs	r2, #0
 80128d0:	602a      	str	r2, [r5, #0]
 80128d2:	461a      	mov	r2, r3
 80128d4:	f7ee fdd1 	bl	800147a <_lseek>
 80128d8:	1c43      	adds	r3, r0, #1
 80128da:	d102      	bne.n	80128e2 <_lseek_r+0x1e>
 80128dc:	682b      	ldr	r3, [r5, #0]
 80128de:	b103      	cbz	r3, 80128e2 <_lseek_r+0x1e>
 80128e0:	6023      	str	r3, [r4, #0]
 80128e2:	bd38      	pop	{r3, r4, r5, pc}
 80128e4:	240011ec 	.word	0x240011ec

080128e8 <__malloc_lock>:
 80128e8:	4801      	ldr	r0, [pc, #4]	; (80128f0 <__malloc_lock+0x8>)
 80128ea:	f7ff bb15 	b.w	8011f18 <__retarget_lock_acquire_recursive>
 80128ee:	bf00      	nop
 80128f0:	240011e0 	.word	0x240011e0

080128f4 <__malloc_unlock>:
 80128f4:	4801      	ldr	r0, [pc, #4]	; (80128fc <__malloc_unlock+0x8>)
 80128f6:	f7ff bb10 	b.w	8011f1a <__retarget_lock_release_recursive>
 80128fa:	bf00      	nop
 80128fc:	240011e0 	.word	0x240011e0

08012900 <_read_r>:
 8012900:	b538      	push	{r3, r4, r5, lr}
 8012902:	4d07      	ldr	r5, [pc, #28]	; (8012920 <_read_r+0x20>)
 8012904:	4604      	mov	r4, r0
 8012906:	4608      	mov	r0, r1
 8012908:	4611      	mov	r1, r2
 801290a:	2200      	movs	r2, #0
 801290c:	602a      	str	r2, [r5, #0]
 801290e:	461a      	mov	r2, r3
 8012910:	f7ee fd70 	bl	80013f4 <_read>
 8012914:	1c43      	adds	r3, r0, #1
 8012916:	d102      	bne.n	801291e <_read_r+0x1e>
 8012918:	682b      	ldr	r3, [r5, #0]
 801291a:	b103      	cbz	r3, 801291e <_read_r+0x1e>
 801291c:	6023      	str	r3, [r4, #0]
 801291e:	bd38      	pop	{r3, r4, r5, pc}
 8012920:	240011ec 	.word	0x240011ec

08012924 <_init>:
 8012924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012926:	bf00      	nop
 8012928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801292a:	bc08      	pop	{r3}
 801292c:	469e      	mov	lr, r3
 801292e:	4770      	bx	lr

08012930 <_fini>:
 8012930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012932:	bf00      	nop
 8012934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012936:	bc08      	pop	{r3}
 8012938:	469e      	mov	lr, r3
 801293a:	4770      	bx	lr
